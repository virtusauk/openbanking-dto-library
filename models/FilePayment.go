// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// FilePayment is an object representing the database table.
type FilePayment struct {
	PaymentID                                           int           `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	FileType                                            string        `boil:"file_type" json:"file_type" toml:"file_type" yaml:"file_type"`
	FileHash                                            string        `boil:"file_hash" json:"file_hash" toml:"file_hash" yaml:"file_hash"`
	FileReference                                       string        `boil:"file_reference" json:"file_reference" toml:"file_reference" yaml:"file_reference"`
	NumberOfTransactions                                int           `boil:"number_of_transactions" json:"number_of_transactions" toml:"number_of_transactions" yaml:"number_of_transactions"`
	ControlSum                                          types.Decimal `boil:"control_sum" json:"control_sum" toml:"control_sum" yaml:"control_sum"`
	RequestedExecutionDateTime                          time.Time     `boil:"requested_execution_date_time" json:"requested_execution_date_time" toml:"requested_execution_date_time" yaml:"requested_execution_date_time"`
	LocalInstrument                                     string        `boil:"local_instrument" json:"local_instrument" toml:"local_instrument" yaml:"local_instrument"`
	FromBankID                                          null.Int      `boil:"from_bank_id" json:"from_bank_id,omitempty" toml:"from_bank_id" yaml:"from_bank_id,omitempty"`
	DebtorBank                                          null.String   `boil:"debtor_bank" json:"debtor_bank,omitempty" toml:"debtor_bank" yaml:"debtor_bank,omitempty"`
	FilePaymentcol                                      null.String   `boil:"FilePaymentcol" json:"FilePaymentcol,omitempty" toml:"FilePaymentcol" yaml:"FilePaymentcol,omitempty"`
	FromPartyID                                         null.Int      `boil:"from_party_id" json:"from_party_id,omitempty" toml:"from_party_id" yaml:"from_party_id,omitempty"`
	DebtorAgentSchemeName                               null.String   `boil:"debtor_agent_scheme_name" json:"debtor_agent_scheme_name,omitempty" toml:"debtor_agent_scheme_name" yaml:"debtor_agent_scheme_name,omitempty"`
	DebtorAgentIdentification                           null.String   `boil:"debtor_agent_identification" json:"debtor_agent_identification,omitempty" toml:"debtor_agent_identification" yaml:"debtor_agent_identification,omitempty"`
	DebtorAccountSchemename                             null.String   `boil:"debtor_account_schemename" json:"debtor_account_schemename,omitempty" toml:"debtor_account_schemename" yaml:"debtor_account_schemename,omitempty"`
	DebtorAccountIdentification                         null.String   `boil:"debtor_account_identification" json:"debtor_account_identification,omitempty" toml:"debtor_account_identification" yaml:"debtor_account_identification,omitempty"`
	FilePaymentcol1debtorAccountSecondaryIdentification null.String   `boil:"FilePaymentcol1debtor_account_secondary_identification" json:"FilePaymentcol1debtor_account_secondary_identification,omitempty" toml:"FilePaymentcol1debtor_account_secondary_identification" yaml:"FilePaymentcol1debtor_account_secondary_identification,omitempty"`
	DebtorAccountName                                   null.String   `boil:"debtor_account_name" json:"debtor_account_name,omitempty" toml:"debtor_account_name" yaml:"debtor_account_name,omitempty"`
	RemittanceReference                                 null.String   `boil:"remittance_reference" json:"remittance_reference,omitempty" toml:"remittance_reference" yaml:"remittance_reference,omitempty"`
	RemittanceUnstructuredReference                     null.String   `boil:"remittance_unstructured_reference" json:"remittance_unstructured_reference,omitempty" toml:"remittance_unstructured_reference" yaml:"remittance_unstructured_reference,omitempty"`
	SupplementaryData                                   null.String   `boil:"SupplementaryData" json:"SupplementaryData,omitempty" toml:"SupplementaryData" yaml:"SupplementaryData,omitempty"`
	MakerDate                                           null.Time     `boil:"maker_date" json:"maker_date,omitempty" toml:"maker_date" yaml:"maker_date,omitempty"`
	CheckerDate                                         null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                                             null.String   `boil:"maker_id" json:"maker_id,omitempty" toml:"maker_id" yaml:"maker_id,omitempty"`
	CheckerID                                           null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                                          null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                                        null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *filePaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filePaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilePaymentColumns = struct {
	PaymentID                                           string
	FileType                                            string
	FileHash                                            string
	FileReference                                       string
	NumberOfTransactions                                string
	ControlSum                                          string
	RequestedExecutionDateTime                          string
	LocalInstrument                                     string
	FromBankID                                          string
	DebtorBank                                          string
	FilePaymentcol                                      string
	FromPartyID                                         string
	DebtorAgentSchemeName                               string
	DebtorAgentIdentification                           string
	DebtorAccountSchemename                             string
	DebtorAccountIdentification                         string
	FilePaymentcol1debtorAccountSecondaryIdentification string
	DebtorAccountName                                   string
	RemittanceReference                                 string
	RemittanceUnstructuredReference                     string
	SupplementaryData                                   string
	MakerDate                                           string
	CheckerDate                                         string
	MakerID                                             string
	CheckerID                                           string
	ModifiedBy                                          string
	ModifiedDate                                        string
}{
	PaymentID:                   "payment_id",
	FileType:                    "file_type",
	FileHash:                    "file_hash",
	FileReference:               "file_reference",
	NumberOfTransactions:        "number_of_transactions",
	ControlSum:                  "control_sum",
	RequestedExecutionDateTime:  "requested_execution_date_time",
	LocalInstrument:             "local_instrument",
	FromBankID:                  "from_bank_id",
	DebtorBank:                  "debtor_bank",
	FilePaymentcol:              "FilePaymentcol",
	FromPartyID:                 "from_party_id",
	DebtorAgentSchemeName:       "debtor_agent_scheme_name",
	DebtorAgentIdentification:   "debtor_agent_identification",
	DebtorAccountSchemename:     "debtor_account_schemename",
	DebtorAccountIdentification: "debtor_account_identification",
	FilePaymentcol1debtorAccountSecondaryIdentification: "FilePaymentcol1debtor_account_secondary_identification",
	DebtorAccountName:               "debtor_account_name",
	RemittanceReference:             "remittance_reference",
	RemittanceUnstructuredReference: "remittance_unstructured_reference",
	SupplementaryData:               "SupplementaryData",
	MakerDate:                       "maker_date",
	CheckerDate:                     "checker_date",
	MakerID:                         "maker_id",
	CheckerID:                       "checker_id",
	ModifiedBy:                      "modified_by",
	ModifiedDate:                    "modified_date",
}

// Generated where

var FilePaymentWhere = struct {
	PaymentID                                           whereHelperint
	FileType                                            whereHelperstring
	FileHash                                            whereHelperstring
	FileReference                                       whereHelperstring
	NumberOfTransactions                                whereHelperint
	ControlSum                                          whereHelpertypes_Decimal
	RequestedExecutionDateTime                          whereHelpertime_Time
	LocalInstrument                                     whereHelperstring
	FromBankID                                          whereHelpernull_Int
	DebtorBank                                          whereHelpernull_String
	FilePaymentcol                                      whereHelpernull_String
	FromPartyID                                         whereHelpernull_Int
	DebtorAgentSchemeName                               whereHelpernull_String
	DebtorAgentIdentification                           whereHelpernull_String
	DebtorAccountSchemename                             whereHelpernull_String
	DebtorAccountIdentification                         whereHelpernull_String
	FilePaymentcol1debtorAccountSecondaryIdentification whereHelpernull_String
	DebtorAccountName                                   whereHelpernull_String
	RemittanceReference                                 whereHelpernull_String
	RemittanceUnstructuredReference                     whereHelpernull_String
	SupplementaryData                                   whereHelpernull_String
	MakerDate                                           whereHelpernull_Time
	CheckerDate                                         whereHelpernull_Time
	MakerID                                             whereHelpernull_String
	CheckerID                                           whereHelpernull_String
	ModifiedBy                                          whereHelpernull_String
	ModifiedDate                                        whereHelpernull_Time
}{
	PaymentID:                   whereHelperint{field: `payment_id`},
	FileType:                    whereHelperstring{field: `file_type`},
	FileHash:                    whereHelperstring{field: `file_hash`},
	FileReference:               whereHelperstring{field: `file_reference`},
	NumberOfTransactions:        whereHelperint{field: `number_of_transactions`},
	ControlSum:                  whereHelpertypes_Decimal{field: `control_sum`},
	RequestedExecutionDateTime:  whereHelpertime_Time{field: `requested_execution_date_time`},
	LocalInstrument:             whereHelperstring{field: `local_instrument`},
	FromBankID:                  whereHelpernull_Int{field: `from_bank_id`},
	DebtorBank:                  whereHelpernull_String{field: `debtor_bank`},
	FilePaymentcol:              whereHelpernull_String{field: `FilePaymentcol`},
	FromPartyID:                 whereHelpernull_Int{field: `from_party_id`},
	DebtorAgentSchemeName:       whereHelpernull_String{field: `debtor_agent_scheme_name`},
	DebtorAgentIdentification:   whereHelpernull_String{field: `debtor_agent_identification`},
	DebtorAccountSchemename:     whereHelpernull_String{field: `debtor_account_schemename`},
	DebtorAccountIdentification: whereHelpernull_String{field: `debtor_account_identification`},
	FilePaymentcol1debtorAccountSecondaryIdentification: whereHelpernull_String{field: `FilePaymentcol1debtor_account_secondary_identification`},
	DebtorAccountName:               whereHelpernull_String{field: `debtor_account_name`},
	RemittanceReference:             whereHelpernull_String{field: `remittance_reference`},
	RemittanceUnstructuredReference: whereHelpernull_String{field: `remittance_unstructured_reference`},
	SupplementaryData:               whereHelpernull_String{field: `SupplementaryData`},
	MakerDate:                       whereHelpernull_Time{field: `maker_date`},
	CheckerDate:                     whereHelpernull_Time{field: `checker_date`},
	MakerID:                         whereHelpernull_String{field: `maker_id`},
	CheckerID:                       whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                      whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                    whereHelpernull_Time{field: `modified_date`},
}

// FilePaymentRels is where relationship names are stored.
var FilePaymentRels = struct {
	Payment string
}{
	Payment: "Payment",
}

// filePaymentR is where relationships are stored.
type filePaymentR struct {
	Payment *PaymentInitiation
}

// NewStruct creates a new relationship struct
func (*filePaymentR) NewStruct() *filePaymentR {
	return &filePaymentR{}
}

// filePaymentL is where Load methods for each relationship are stored.
type filePaymentL struct{}

var (
	filePaymentColumns               = []string{"payment_id", "file_type", "file_hash", "file_reference", "number_of_transactions", "control_sum", "requested_execution_date_time", "local_instrument", "from_bank_id", "debtor_bank", "FilePaymentcol", "from_party_id", "debtor_agent_scheme_name", "debtor_agent_identification", "debtor_account_schemename", "debtor_account_identification", "FilePaymentcol1debtor_account_secondary_identification", "debtor_account_name", "remittance_reference", "remittance_unstructured_reference", "SupplementaryData", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	filePaymentColumnsWithoutDefault = []string{"payment_id", "file_type", "file_hash", "file_reference", "number_of_transactions", "control_sum", "requested_execution_date_time", "local_instrument", "from_bank_id", "debtor_bank", "FilePaymentcol", "from_party_id", "debtor_agent_scheme_name", "debtor_agent_identification", "debtor_account_schemename", "debtor_account_identification", "FilePaymentcol1debtor_account_secondary_identification", "debtor_account_name", "remittance_reference", "remittance_unstructured_reference", "SupplementaryData", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	filePaymentColumnsWithDefault    = []string{}
	filePaymentPrimaryKeyColumns     = []string{"payment_id"}
)

type (
	// FilePaymentSlice is an alias for a slice of pointers to FilePayment.
	// This should generally be used opposed to []FilePayment.
	FilePaymentSlice []*FilePayment
	// FilePaymentHook is the signature for custom FilePayment hook methods
	FilePaymentHook func(context.Context, boil.ContextExecutor, *FilePayment) error

	filePaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filePaymentType                 = reflect.TypeOf(&FilePayment{})
	filePaymentMapping              = queries.MakeStructMapping(filePaymentType)
	filePaymentPrimaryKeyMapping, _ = queries.BindMapping(filePaymentType, filePaymentMapping, filePaymentPrimaryKeyColumns)
	filePaymentInsertCacheMut       sync.RWMutex
	filePaymentInsertCache          = make(map[string]insertCache)
	filePaymentUpdateCacheMut       sync.RWMutex
	filePaymentUpdateCache          = make(map[string]updateCache)
	filePaymentUpsertCacheMut       sync.RWMutex
	filePaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filePaymentBeforeInsertHooks []FilePaymentHook
var filePaymentBeforeUpdateHooks []FilePaymentHook
var filePaymentBeforeDeleteHooks []FilePaymentHook
var filePaymentBeforeUpsertHooks []FilePaymentHook

var filePaymentAfterInsertHooks []FilePaymentHook
var filePaymentAfterSelectHooks []FilePaymentHook
var filePaymentAfterUpdateHooks []FilePaymentHook
var filePaymentAfterDeleteHooks []FilePaymentHook
var filePaymentAfterUpsertHooks []FilePaymentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilePayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilePayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilePayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilePayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilePayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilePayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilePayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilePayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilePayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filePaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilePaymentHook registers your hook function for all future operations.
func AddFilePaymentHook(hookPoint boil.HookPoint, filePaymentHook FilePaymentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		filePaymentBeforeInsertHooks = append(filePaymentBeforeInsertHooks, filePaymentHook)
	case boil.BeforeUpdateHook:
		filePaymentBeforeUpdateHooks = append(filePaymentBeforeUpdateHooks, filePaymentHook)
	case boil.BeforeDeleteHook:
		filePaymentBeforeDeleteHooks = append(filePaymentBeforeDeleteHooks, filePaymentHook)
	case boil.BeforeUpsertHook:
		filePaymentBeforeUpsertHooks = append(filePaymentBeforeUpsertHooks, filePaymentHook)
	case boil.AfterInsertHook:
		filePaymentAfterInsertHooks = append(filePaymentAfterInsertHooks, filePaymentHook)
	case boil.AfterSelectHook:
		filePaymentAfterSelectHooks = append(filePaymentAfterSelectHooks, filePaymentHook)
	case boil.AfterUpdateHook:
		filePaymentAfterUpdateHooks = append(filePaymentAfterUpdateHooks, filePaymentHook)
	case boil.AfterDeleteHook:
		filePaymentAfterDeleteHooks = append(filePaymentAfterDeleteHooks, filePaymentHook)
	case boil.AfterUpsertHook:
		filePaymentAfterUpsertHooks = append(filePaymentAfterUpsertHooks, filePaymentHook)
	}
}

// One returns a single filePayment record from the query.
func (q filePaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FilePayment, error) {
	o := &FilePayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FilePayment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilePayment records from the query.
func (q filePaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilePaymentSlice, error) {
	var o []*FilePayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilePayment slice")
	}

	if len(filePaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilePayment records in the query.
func (q filePaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FilePayment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filePaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FilePayment exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *FilePayment) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filePaymentL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilePayment interface{}, mods queries.Applicator) error {
	var slice []*FilePayment
	var object *FilePayment

	if singular {
		object = maybeFilePayment.(*FilePayment)
	} else {
		slice = *maybeFilePayment.(*[]*FilePayment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &filePaymentR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filePaymentR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(filePaymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentFilePayment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentFilePayment = local
				break
			}
		}
	}

	return nil
}

// SetPayment of the filePayment to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentFilePayment.
func (o *FilePayment) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FilePayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, filePaymentPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &filePaymentR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentFilePayment: o,
		}
	} else {
		related.R.PaymentFilePayment = o
	}

	return nil
}

// FilePayments retrieves all the records using an executor.
func FilePayments(mods ...qm.QueryMod) filePaymentQuery {
	mods = append(mods, qm.From("`FilePayment`"))
	return filePaymentQuery{NewQuery(mods...)}
}

// FindFilePayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilePayment(ctx context.Context, exec boil.ContextExecutor, paymentID int, selectCols ...string) (*FilePayment, error) {
	filePaymentObj := &FilePayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FilePayment` where `payment_id`=?", sel,
	)

	q := queries.Raw(query, paymentID)

	err := q.Bind(ctx, exec, filePaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FilePayment")
	}

	return filePaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilePayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FilePayment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filePaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filePaymentInsertCacheMut.RLock()
	cache, cached := filePaymentInsertCache[key]
	filePaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filePaymentColumns,
			filePaymentColumnsWithDefault,
			filePaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filePaymentType, filePaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filePaymentType, filePaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FilePayment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FilePayment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FilePayment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filePaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FilePayment")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FilePayment")
	}

CacheNoHooks:
	if !cached {
		filePaymentInsertCacheMut.Lock()
		filePaymentInsertCache[key] = cache
		filePaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FilePayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilePayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filePaymentUpdateCacheMut.RLock()
	cache, cached := filePaymentUpdateCache[key]
	filePaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filePaymentColumns,
			filePaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FilePayment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FilePayment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filePaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filePaymentType, filePaymentMapping, append(wl, filePaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FilePayment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FilePayment")
	}

	if !cached {
		filePaymentUpdateCacheMut.Lock()
		filePaymentUpdateCache[key] = cache
		filePaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filePaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FilePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FilePayment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilePaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FilePayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePaymentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filePayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filePayment")
	}
	return rowsAff, nil
}

var mySQLFilePaymentUniqueColumns = []string{
	"payment_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilePayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FilePayment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filePaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFilePaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filePaymentUpsertCacheMut.RLock()
	cache, cached := filePaymentUpsertCache[key]
	filePaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			filePaymentColumns,
			filePaymentColumnsWithDefault,
			filePaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			filePaymentColumns,
			filePaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert FilePayment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "FilePayment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FilePayment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(filePaymentType, filePaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filePaymentType, filePaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for FilePayment")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(filePaymentType, filePaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for FilePayment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FilePayment")
	}

CacheNoHooks:
	if !cached {
		filePaymentUpsertCacheMut.Lock()
		filePaymentUpsertCache[key] = cache
		filePaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FilePayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilePayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilePayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filePaymentPrimaryKeyMapping)
	sql := "DELETE FROM `FilePayment` WHERE `payment_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FilePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FilePayment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filePaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filePaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FilePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FilePayment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilePaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilePayment slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(filePaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FilePayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePaymentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filePayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FilePayment")
	}

	if len(filePaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilePayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilePayment(ctx, exec, o.PaymentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilePaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilePaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FilePayment`.* FROM `FilePayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilePaymentSlice")
	}

	*o = slice

	return nil
}

// FilePaymentExists checks if the FilePayment row exists.
func FilePaymentExists(ctx context.Context, exec boil.ContextExecutor, paymentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FilePayment` where `payment_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FilePayment exists")
	}

	return exists, nil
}
