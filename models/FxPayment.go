// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// FxPayment is an object representing the database table.
type FxPayment struct {
	PaymentID                int               `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	FXRateType               string            `boil:"fx_rate_type" json:"fx_rate_type" toml:"fx_rate_type" yaml:"fx_rate_type"`
	FXContractIdentification string            `boil:"fx_contract_identification" json:"fx_contract_identification" toml:"fx_contract_identification" yaml:"fx_contract_identification"`
	ValueDate                null.Time         `boil:"value_date" json:"value_date,omitempty" toml:"value_date" yaml:"value_date,omitempty"`
	SourceCurrency           null.String       `boil:"source_currency" json:"source_currency,omitempty" toml:"source_currency" yaml:"source_currency,omitempty"`
	DestinationCurrency      null.String       `boil:"destination_currency" json:"destination_currency,omitempty" toml:"destination_currency" yaml:"destination_currency,omitempty"`
	Status                   null.String       `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ProductID                null.Int          `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	BankID                   null.Int          `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	SystemName               null.String       `boil:"system_name" json:"system_name,omitempty" toml:"system_name" yaml:"system_name,omitempty"`
	ExchangeRate             types.NullDecimal `boil:"exchange_rate" json:"exchange_rate,omitempty" toml:"exchange_rate" yaml:"exchange_rate,omitempty"`
	SourceAmount             types.NullDecimal `boil:"source_amount" json:"source_amount,omitempty" toml:"source_amount" yaml:"source_amount,omitempty"`
	DestinationAmount        types.NullDecimal `boil:"destination_amount" json:"destination_amount,omitempty" toml:"destination_amount" yaml:"destination_amount,omitempty"`
	TransactionDate          null.Time         `boil:"transaction_date" json:"transaction_date,omitempty" toml:"transaction_date" yaml:"transaction_date,omitempty"`
	CtpyDealCode             null.String       `boil:"ctpy_deal_code" json:"ctpy_deal_code,omitempty" toml:"ctpy_deal_code" yaml:"ctpy_deal_code,omitempty"`
	CtpyFirmName             null.String       `boil:"ctpy_firm_name" json:"ctpy_firm_name,omitempty" toml:"ctpy_firm_name" yaml:"ctpy_firm_name,omitempty"`
	UnitCurrency             null.String       `boil:"unit_currency" json:"unit_currency,omitempty" toml:"unit_currency" yaml:"unit_currency,omitempty"`
	Role                     null.String       `boil:"role" json:"role,omitempty" toml:"role" yaml:"role,omitempty"`
	Ccys                     null.String       `boil:"ccys" json:"ccys,omitempty" toml:"ccys" yaml:"ccys,omitempty"`
	DealType                 null.String       `boil:"deal_type" json:"deal_type,omitempty" toml:"deal_type" yaml:"deal_type,omitempty"`
	Side                     null.String       `boil:"side" json:"side,omitempty" toml:"side" yaml:"side,omitempty"`
	Tenor                    null.String       `boil:"tenor" json:"tenor,omitempty" toml:"tenor" yaml:"tenor,omitempty"`
	ExpiracyDatetime         null.Time         `boil:"expiracy_datetime" json:"expiracy_datetime,omitempty" toml:"expiracy_datetime" yaml:"expiracy_datetime,omitempty"`
	MakerDate                null.Time         `boil:"maker_date" json:"maker_date,omitempty" toml:"maker_date" yaml:"maker_date,omitempty"`
	CheckerDate              null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                  null.String       `boil:"maker_id" json:"maker_id,omitempty" toml:"maker_id" yaml:"maker_id,omitempty"`
	CheckerID                null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy               null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate             null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *fxPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fxPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FxPaymentColumns = struct {
	PaymentID                string
	FXRateType               string
	FXContractIdentification string
	ValueDate                string
	SourceCurrency           string
	DestinationCurrency      string
	Status                   string
	ProductID                string
	BankID                   string
	SystemName               string
	ExchangeRate             string
	SourceAmount             string
	DestinationAmount        string
	TransactionDate          string
	CtpyDealCode             string
	CtpyFirmName             string
	UnitCurrency             string
	Role                     string
	Ccys                     string
	DealType                 string
	Side                     string
	Tenor                    string
	ExpiracyDatetime         string
	MakerDate                string
	CheckerDate              string
	MakerID                  string
	CheckerID                string
	ModifiedBy               string
	ModifiedDate             string
}{
	PaymentID:                "payment_id",
	FXRateType:               "fx_rate_type",
	FXContractIdentification: "fx_contract_identification",
	ValueDate:                "value_date",
	SourceCurrency:           "source_currency",
	DestinationCurrency:      "destination_currency",
	Status:                   "status",
	ProductID:                "product_id",
	BankID:                   "bank_id",
	SystemName:               "system_name",
	ExchangeRate:             "exchange_rate",
	SourceAmount:             "source_amount",
	DestinationAmount:        "destination_amount",
	TransactionDate:          "transaction_date",
	CtpyDealCode:             "ctpy_deal_code",
	CtpyFirmName:             "ctpy_firm_name",
	UnitCurrency:             "unit_currency",
	Role:                     "role",
	Ccys:                     "ccys",
	DealType:                 "deal_type",
	Side:                     "side",
	Tenor:                    "tenor",
	ExpiracyDatetime:         "expiracy_datetime",
	MakerDate:                "maker_date",
	CheckerDate:              "checker_date",
	MakerID:                  "maker_id",
	CheckerID:                "checker_id",
	ModifiedBy:               "modified_by",
	ModifiedDate:             "modified_date",
}

// Generated where

var FxPaymentWhere = struct {
	PaymentID                whereHelperint
	FXRateType               whereHelperstring
	FXContractIdentification whereHelperstring
	ValueDate                whereHelpernull_Time
	SourceCurrency           whereHelpernull_String
	DestinationCurrency      whereHelpernull_String
	Status                   whereHelpernull_String
	ProductID                whereHelpernull_Int
	BankID                   whereHelpernull_Int
	SystemName               whereHelpernull_String
	ExchangeRate             whereHelpertypes_NullDecimal
	SourceAmount             whereHelpertypes_NullDecimal
	DestinationAmount        whereHelpertypes_NullDecimal
	TransactionDate          whereHelpernull_Time
	CtpyDealCode             whereHelpernull_String
	CtpyFirmName             whereHelpernull_String
	UnitCurrency             whereHelpernull_String
	Role                     whereHelpernull_String
	Ccys                     whereHelpernull_String
	DealType                 whereHelpernull_String
	Side                     whereHelpernull_String
	Tenor                    whereHelpernull_String
	ExpiracyDatetime         whereHelpernull_Time
	MakerDate                whereHelpernull_Time
	CheckerDate              whereHelpernull_Time
	MakerID                  whereHelpernull_String
	CheckerID                whereHelpernull_String
	ModifiedBy               whereHelpernull_String
	ModifiedDate             whereHelpernull_Time
}{
	PaymentID:                whereHelperint{field: `payment_id`},
	FXRateType:               whereHelperstring{field: `fx_rate_type`},
	FXContractIdentification: whereHelperstring{field: `fx_contract_identification`},
	ValueDate:                whereHelpernull_Time{field: `value_date`},
	SourceCurrency:           whereHelpernull_String{field: `source_currency`},
	DestinationCurrency:      whereHelpernull_String{field: `destination_currency`},
	Status:                   whereHelpernull_String{field: `status`},
	ProductID:                whereHelpernull_Int{field: `product_id`},
	BankID:                   whereHelpernull_Int{field: `bank_id`},
	SystemName:               whereHelpernull_String{field: `system_name`},
	ExchangeRate:             whereHelpertypes_NullDecimal{field: `exchange_rate`},
	SourceAmount:             whereHelpertypes_NullDecimal{field: `source_amount`},
	DestinationAmount:        whereHelpertypes_NullDecimal{field: `destination_amount`},
	TransactionDate:          whereHelpernull_Time{field: `transaction_date`},
	CtpyDealCode:             whereHelpernull_String{field: `ctpy_deal_code`},
	CtpyFirmName:             whereHelpernull_String{field: `ctpy_firm_name`},
	UnitCurrency:             whereHelpernull_String{field: `unit_currency`},
	Role:                     whereHelpernull_String{field: `role`},
	Ccys:                     whereHelpernull_String{field: `ccys`},
	DealType:                 whereHelpernull_String{field: `deal_type`},
	Side:                     whereHelpernull_String{field: `side`},
	Tenor:                    whereHelpernull_String{field: `tenor`},
	ExpiracyDatetime:         whereHelpernull_Time{field: `expiracy_datetime`},
	MakerDate:                whereHelpernull_Time{field: `maker_date`},
	CheckerDate:              whereHelpernull_Time{field: `checker_date`},
	MakerID:                  whereHelpernull_String{field: `maker_id`},
	CheckerID:                whereHelpernull_String{field: `checker_id`},
	ModifiedBy:               whereHelpernull_String{field: `modified_by`},
	ModifiedDate:             whereHelpernull_Time{field: `modified_date`},
}

// FxPaymentRels is where relationship names are stored.
var FxPaymentRels = struct {
	Payment string
}{
	Payment: "Payment",
}

// fxPaymentR is where relationships are stored.
type fxPaymentR struct {
	Payment *PaymentInitiation
}

// NewStruct creates a new relationship struct
func (*fxPaymentR) NewStruct() *fxPaymentR {
	return &fxPaymentR{}
}

// fxPaymentL is where Load methods for each relationship are stored.
type fxPaymentL struct{}

var (
	fxPaymentColumns               = []string{"payment_id", "fx_rate_type", "fx_contract_identification", "value_date", "source_currency", "destination_currency", "status", "product_id", "bank_id", "system_name", "exchange_rate", "source_amount", "destination_amount", "transaction_date", "ctpy_deal_code", "ctpy_firm_name", "unit_currency", "role", "ccys", "deal_type", "side", "tenor", "expiracy_datetime", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fxPaymentColumnsWithoutDefault = []string{"payment_id", "fx_rate_type", "fx_contract_identification", "value_date", "source_currency", "destination_currency", "status", "product_id", "bank_id", "system_name", "exchange_rate", "source_amount", "destination_amount", "transaction_date", "ctpy_deal_code", "ctpy_firm_name", "unit_currency", "role", "ccys", "deal_type", "side", "tenor", "expiracy_datetime", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fxPaymentColumnsWithDefault    = []string{}
	fxPaymentPrimaryKeyColumns     = []string{"payment_id"}
)

type (
	// FxPaymentSlice is an alias for a slice of pointers to FxPayment.
	// This should generally be used opposed to []FxPayment.
	FxPaymentSlice []*FxPayment
	// FxPaymentHook is the signature for custom FxPayment hook methods
	FxPaymentHook func(context.Context, boil.ContextExecutor, *FxPayment) error

	fxPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fxPaymentType                 = reflect.TypeOf(&FxPayment{})
	fxPaymentMapping              = queries.MakeStructMapping(fxPaymentType)
	fxPaymentPrimaryKeyMapping, _ = queries.BindMapping(fxPaymentType, fxPaymentMapping, fxPaymentPrimaryKeyColumns)
	fxPaymentInsertCacheMut       sync.RWMutex
	fxPaymentInsertCache          = make(map[string]insertCache)
	fxPaymentUpdateCacheMut       sync.RWMutex
	fxPaymentUpdateCache          = make(map[string]updateCache)
	fxPaymentUpsertCacheMut       sync.RWMutex
	fxPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fxPaymentBeforeInsertHooks []FxPaymentHook
var fxPaymentBeforeUpdateHooks []FxPaymentHook
var fxPaymentBeforeDeleteHooks []FxPaymentHook
var fxPaymentBeforeUpsertHooks []FxPaymentHook

var fxPaymentAfterInsertHooks []FxPaymentHook
var fxPaymentAfterSelectHooks []FxPaymentHook
var fxPaymentAfterUpdateHooks []FxPaymentHook
var fxPaymentAfterDeleteHooks []FxPaymentHook
var fxPaymentAfterUpsertHooks []FxPaymentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FxPayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FxPayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FxPayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FxPayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FxPayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FxPayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FxPayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FxPayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FxPayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxPaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFxPaymentHook registers your hook function for all future operations.
func AddFxPaymentHook(hookPoint boil.HookPoint, fxPaymentHook FxPaymentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fxPaymentBeforeInsertHooks = append(fxPaymentBeforeInsertHooks, fxPaymentHook)
	case boil.BeforeUpdateHook:
		fxPaymentBeforeUpdateHooks = append(fxPaymentBeforeUpdateHooks, fxPaymentHook)
	case boil.BeforeDeleteHook:
		fxPaymentBeforeDeleteHooks = append(fxPaymentBeforeDeleteHooks, fxPaymentHook)
	case boil.BeforeUpsertHook:
		fxPaymentBeforeUpsertHooks = append(fxPaymentBeforeUpsertHooks, fxPaymentHook)
	case boil.AfterInsertHook:
		fxPaymentAfterInsertHooks = append(fxPaymentAfterInsertHooks, fxPaymentHook)
	case boil.AfterSelectHook:
		fxPaymentAfterSelectHooks = append(fxPaymentAfterSelectHooks, fxPaymentHook)
	case boil.AfterUpdateHook:
		fxPaymentAfterUpdateHooks = append(fxPaymentAfterUpdateHooks, fxPaymentHook)
	case boil.AfterDeleteHook:
		fxPaymentAfterDeleteHooks = append(fxPaymentAfterDeleteHooks, fxPaymentHook)
	case boil.AfterUpsertHook:
		fxPaymentAfterUpsertHooks = append(fxPaymentAfterUpsertHooks, fxPaymentHook)
	}
}

// One returns a single fxPayment record from the query.
func (q fxPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FxPayment, error) {
	o := &FxPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FxPayment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FxPayment records from the query.
func (q fxPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (FxPaymentSlice, error) {
	var o []*FxPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FxPayment slice")
	}

	if len(fxPaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FxPayment records in the query.
func (q fxPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FxPayment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fxPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FxPayment exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *FxPayment) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fxPaymentL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFxPayment interface{}, mods queries.Applicator) error {
	var slice []*FxPayment
	var object *FxPayment

	if singular {
		object = maybeFxPayment.(*FxPayment)
	} else {
		slice = *maybeFxPayment.(*[]*FxPayment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fxPaymentR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fxPaymentR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(fxPaymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentFxPayment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentFxPayment = local
				break
			}
		}
	}

	return nil
}

// SetPayment of the fxPayment to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentFxPayment.
func (o *FxPayment) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FxPayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, fxPaymentPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &fxPaymentR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentFxPayment: o,
		}
	} else {
		related.R.PaymentFxPayment = o
	}

	return nil
}

// FxPayments retrieves all the records using an executor.
func FxPayments(mods ...qm.QueryMod) fxPaymentQuery {
	mods = append(mods, qm.From("`FxPayment`"))
	return fxPaymentQuery{NewQuery(mods...)}
}

// FindFxPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFxPayment(ctx context.Context, exec boil.ContextExecutor, paymentID int, selectCols ...string) (*FxPayment, error) {
	fxPaymentObj := &FxPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FxPayment` where `payment_id`=?", sel,
	)

	q := queries.Raw(query, paymentID)

	err := q.Bind(ctx, exec, fxPaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FxPayment")
	}

	return fxPaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FxPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FxPayment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fxPaymentInsertCacheMut.RLock()
	cache, cached := fxPaymentInsertCache[key]
	fxPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fxPaymentColumns,
			fxPaymentColumnsWithDefault,
			fxPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FxPayment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FxPayment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FxPayment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fxPaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FxPayment")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FxPayment")
	}

CacheNoHooks:
	if !cached {
		fxPaymentInsertCacheMut.Lock()
		fxPaymentInsertCache[key] = cache
		fxPaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FxPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FxPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fxPaymentUpdateCacheMut.RLock()
	cache, cached := fxPaymentUpdateCache[key]
	fxPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fxPaymentColumns,
			fxPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FxPayment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FxPayment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fxPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, append(wl, fxPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FxPayment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FxPayment")
	}

	if !cached {
		fxPaymentUpdateCacheMut.Lock()
		fxPaymentUpdateCache[key] = cache
		fxPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fxPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FxPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FxPayment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FxPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FxPayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxPaymentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fxPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fxPayment")
	}
	return rowsAff, nil
}

var mySQLFxPaymentUniqueColumns = []string{
	"payment_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FxPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FxPayment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxPaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFxPaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fxPaymentUpsertCacheMut.RLock()
	cache, cached := fxPaymentUpsertCache[key]
	fxPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fxPaymentColumns,
			fxPaymentColumnsWithDefault,
			fxPaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fxPaymentColumns,
			fxPaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert FxPayment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "FxPayment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FxPayment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for FxPayment")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fxPaymentType, fxPaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for FxPayment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FxPayment")
	}

CacheNoHooks:
	if !cached {
		fxPaymentUpsertCacheMut.Lock()
		fxPaymentUpsertCache[key] = cache
		fxPaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FxPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FxPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FxPayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fxPaymentPrimaryKeyMapping)
	sql := "DELETE FROM `FxPayment` WHERE `payment_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FxPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FxPayment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fxPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fxPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FxPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FxPayment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FxPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FxPayment slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fxPaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FxPayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxPaymentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fxPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FxPayment")
	}

	if len(fxPaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FxPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFxPayment(ctx, exec, o.PaymentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FxPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FxPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FxPayment`.* FROM `FxPayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FxPaymentSlice")
	}

	*o = slice

	return nil
}

// FxPaymentExists checks if the FxPayment row exists.
func FxPaymentExists(ctx context.Context, exec boil.ContextExecutor, paymentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FxPayment` where `payment_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FxPayment exists")
	}

	return exists, nil
}
