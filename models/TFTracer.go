// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TFTracer is an object representing the database table.
type TFTracer struct {
	TFTracerID    int         `boil:"tf_tracer_id" json:"tf_tracer_id" toml:"tf_tracer_id" yaml:"tf_tracer_id"`
	ReferenceID   string      `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	TransactionID int         `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ProductCode   string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	PartyID       int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BranchID      int         `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	TracerID      int         `boil:"tracer_id" json:"tracer_id" toml:"tracer_id" yaml:"tracer_id"`
	SendMeth      string      `boil:"send_meth" json:"send_meth" toml:"send_meth" yaml:"send_meth"`
	TracerDetails string      `boil:"tracer_details" json:"tracer_details" toml:"tracer_details" yaml:"tracer_details"`
	MakerDate     time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate   null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID       string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID     null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy    null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate  null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFTracerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFTracerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFTracerColumns = struct {
	TFTracerID    string
	ReferenceID   string
	TransactionID string
	ProductCode   string
	PartyID       string
	BranchID      string
	TracerID      string
	SendMeth      string
	TracerDetails string
	MakerDate     string
	CheckerDate   string
	MakerID       string
	CheckerID     string
	ModifiedBy    string
	ModifiedDate  string
}{
	TFTracerID:    "tf_tracer_id",
	ReferenceID:   "reference_id",
	TransactionID: "transaction_id",
	ProductCode:   "product_code",
	PartyID:       "party_id",
	BranchID:      "branch_id",
	TracerID:      "tracer_id",
	SendMeth:      "send_meth",
	TracerDetails: "tracer_details",
	MakerDate:     "maker_date",
	CheckerDate:   "checker_date",
	MakerID:       "maker_id",
	CheckerID:     "checker_id",
	ModifiedBy:    "modified_by",
	ModifiedDate:  "modified_date",
}

// Generated where

var TFTracerWhere = struct {
	TFTracerID    whereHelperint
	ReferenceID   whereHelperstring
	TransactionID whereHelperint
	ProductCode   whereHelperstring
	PartyID       whereHelperint
	BranchID      whereHelperint
	TracerID      whereHelperint
	SendMeth      whereHelperstring
	TracerDetails whereHelperstring
	MakerDate     whereHelpertime_Time
	CheckerDate   whereHelpernull_Time
	MakerID       whereHelperstring
	CheckerID     whereHelpernull_String
	ModifiedBy    whereHelpernull_String
	ModifiedDate  whereHelpernull_Time
}{
	TFTracerID:    whereHelperint{field: `tf_tracer_id`},
	ReferenceID:   whereHelperstring{field: `reference_id`},
	TransactionID: whereHelperint{field: `transaction_id`},
	ProductCode:   whereHelperstring{field: `product_code`},
	PartyID:       whereHelperint{field: `party_id`},
	BranchID:      whereHelperint{field: `branch_id`},
	TracerID:      whereHelperint{field: `tracer_id`},
	SendMeth:      whereHelperstring{field: `send_meth`},
	TracerDetails: whereHelperstring{field: `tracer_details`},
	MakerDate:     whereHelpertime_Time{field: `maker_date`},
	CheckerDate:   whereHelpernull_Time{field: `checker_date`},
	MakerID:       whereHelperstring{field: `maker_id`},
	CheckerID:     whereHelpernull_String{field: `checker_id`},
	ModifiedBy:    whereHelpernull_String{field: `modified_by`},
	ModifiedDate:  whereHelpernull_Time{field: `modified_date`},
}

// TFTracerRels is where relationship names are stored.
var TFTracerRels = struct {
}{}

// tFTracerR is where relationships are stored.
type tFTracerR struct {
}

// NewStruct creates a new relationship struct
func (*tFTracerR) NewStruct() *tFTracerR {
	return &tFTracerR{}
}

// tFTracerL is where Load methods for each relationship are stored.
type tFTracerL struct{}

var (
	tFTracerColumns               = []string{"tf_tracer_id", "reference_id", "transaction_id", "product_code", "party_id", "branch_id", "tracer_id", "send_meth", "tracer_details", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFTracerColumnsWithoutDefault = []string{"tf_tracer_id", "reference_id", "transaction_id", "product_code", "party_id", "branch_id", "tracer_id", "send_meth", "tracer_details", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFTracerColumnsWithDefault    = []string{}
	tFTracerPrimaryKeyColumns     = []string{"tf_tracer_id"}
)

type (
	// TFTracerSlice is an alias for a slice of pointers to TFTracer.
	// This should generally be used opposed to []TFTracer.
	TFTracerSlice []*TFTracer
	// TFTracerHook is the signature for custom TFTracer hook methods
	TFTracerHook func(context.Context, boil.ContextExecutor, *TFTracer) error

	tFTracerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFTracerType                 = reflect.TypeOf(&TFTracer{})
	tFTracerMapping              = queries.MakeStructMapping(tFTracerType)
	tFTracerPrimaryKeyMapping, _ = queries.BindMapping(tFTracerType, tFTracerMapping, tFTracerPrimaryKeyColumns)
	tFTracerInsertCacheMut       sync.RWMutex
	tFTracerInsertCache          = make(map[string]insertCache)
	tFTracerUpdateCacheMut       sync.RWMutex
	tFTracerUpdateCache          = make(map[string]updateCache)
	tFTracerUpsertCacheMut       sync.RWMutex
	tFTracerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFTracerBeforeInsertHooks []TFTracerHook
var tFTracerBeforeUpdateHooks []TFTracerHook
var tFTracerBeforeDeleteHooks []TFTracerHook
var tFTracerBeforeUpsertHooks []TFTracerHook

var tFTracerAfterInsertHooks []TFTracerHook
var tFTracerAfterSelectHooks []TFTracerHook
var tFTracerAfterUpdateHooks []TFTracerHook
var tFTracerAfterDeleteHooks []TFTracerHook
var tFTracerAfterUpsertHooks []TFTracerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFTracer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFTracer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFTracer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFTracer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFTracer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFTracer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFTracer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFTracer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFTracer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTracerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFTracerHook registers your hook function for all future operations.
func AddTFTracerHook(hookPoint boil.HookPoint, tFTracerHook TFTracerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFTracerBeforeInsertHooks = append(tFTracerBeforeInsertHooks, tFTracerHook)
	case boil.BeforeUpdateHook:
		tFTracerBeforeUpdateHooks = append(tFTracerBeforeUpdateHooks, tFTracerHook)
	case boil.BeforeDeleteHook:
		tFTracerBeforeDeleteHooks = append(tFTracerBeforeDeleteHooks, tFTracerHook)
	case boil.BeforeUpsertHook:
		tFTracerBeforeUpsertHooks = append(tFTracerBeforeUpsertHooks, tFTracerHook)
	case boil.AfterInsertHook:
		tFTracerAfterInsertHooks = append(tFTracerAfterInsertHooks, tFTracerHook)
	case boil.AfterSelectHook:
		tFTracerAfterSelectHooks = append(tFTracerAfterSelectHooks, tFTracerHook)
	case boil.AfterUpdateHook:
		tFTracerAfterUpdateHooks = append(tFTracerAfterUpdateHooks, tFTracerHook)
	case boil.AfterDeleteHook:
		tFTracerAfterDeleteHooks = append(tFTracerAfterDeleteHooks, tFTracerHook)
	case boil.AfterUpsertHook:
		tFTracerAfterUpsertHooks = append(tFTracerAfterUpsertHooks, tFTracerHook)
	}
}

// One returns a single tFTracer record from the query.
func (q tFTracerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFTracer, error) {
	o := &TFTracer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFTracer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFTracer records from the query.
func (q tFTracerQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFTracerSlice, error) {
	var o []*TFTracer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFTracer slice")
	}

	if len(tFTracerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFTracer records in the query.
func (q tFTracerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFTracer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFTracerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFTracer exists")
	}

	return count > 0, nil
}

// TFTracers retrieves all the records using an executor.
func TFTracers(mods ...qm.QueryMod) tFTracerQuery {
	mods = append(mods, qm.From("`TFTracer`"))
	return tFTracerQuery{NewQuery(mods...)}
}

// FindTFTracer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFTracer(ctx context.Context, exec boil.ContextExecutor, tFTracerID int, selectCols ...string) (*TFTracer, error) {
	tFTracerObj := &TFTracer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFTracer` where `tf_tracer_id`=?", sel,
	)

	q := queries.Raw(query, tFTracerID)

	err := q.Bind(ctx, exec, tFTracerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFTracer")
	}

	return tFTracerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFTracer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFTracer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFTracerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFTracerInsertCacheMut.RLock()
	cache, cached := tFTracerInsertCache[key]
	tFTracerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFTracerColumns,
			tFTracerColumnsWithDefault,
			tFTracerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFTracerType, tFTracerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFTracerType, tFTracerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFTracer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFTracer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFTracer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFTracerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFTracer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFTracerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFTracer")
	}

CacheNoHooks:
	if !cached {
		tFTracerInsertCacheMut.Lock()
		tFTracerInsertCache[key] = cache
		tFTracerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFTracer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFTracer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFTracerUpdateCacheMut.RLock()
	cache, cached := tFTracerUpdateCache[key]
	tFTracerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFTracerColumns,
			tFTracerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFTracer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFTracer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFTracerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFTracerType, tFTracerMapping, append(wl, tFTracerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFTracer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFTracer")
	}

	if !cached {
		tFTracerUpdateCacheMut.Lock()
		tFTracerUpdateCache[key] = cache
		tFTracerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFTracerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFTracer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFTracer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFTracerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTracerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFTracer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTracerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFTracer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFTracer")
	}
	return rowsAff, nil
}

var mySQLTFTracerUniqueColumns = []string{
	"tf_tracer_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFTracer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFTracer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFTracerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFTracerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFTracerUpsertCacheMut.RLock()
	cache, cached := tFTracerUpsertCache[key]
	tFTracerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFTracerColumns,
			tFTracerColumnsWithDefault,
			tFTracerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFTracerColumns,
			tFTracerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFTracer, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFTracer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFTracer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFTracerType, tFTracerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFTracerType, tFTracerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFTracer")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFTracerType, tFTracerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFTracer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFTracer")
	}

CacheNoHooks:
	if !cached {
		tFTracerUpsertCacheMut.Lock()
		tFTracerUpsertCache[key] = cache
		tFTracerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFTracer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFTracer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFTracer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFTracerPrimaryKeyMapping)
	sql := "DELETE FROM `TFTracer` WHERE `tf_tracer_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFTracer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFTracer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFTracerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFTracerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFTracer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFTracer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFTracerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFTracer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFTracerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTracerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFTracer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTracerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFTracer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFTracer")
	}

	if len(tFTracerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFTracer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFTracer(ctx, exec, o.TFTracerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFTracerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFTracerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTracerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFTracer`.* FROM `TFTracer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTracerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFTracerSlice")
	}

	*o = slice

	return nil
}

// TFTracerExists checks if the TFTracer row exists.
func TFTracerExists(ctx context.Context, exec boil.ContextExecutor, tFTracerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFTracer` where `tf_tracer_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFTracerID)
	}

	row := exec.QueryRowContext(ctx, sql, tFTracerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFTracer exists")
	}

	return exists, nil
}
