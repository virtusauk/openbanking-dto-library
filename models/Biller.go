// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Biller is an object representing the database table.
type Biller struct {
	BillerID       int         `boil:"biller_id" json:"biller_id" toml:"biller_id" yaml:"biller_id"`
	BillerStatus   string      `boil:"biller_status" json:"biller_status" toml:"biller_status" yaml:"biller_status"`
	PayeeAddress   string      `boil:"payee_address" json:"payee_address" toml:"payee_address" yaml:"payee_address"`
	PayeeName      string      `boil:"payee_name" json:"payee_name" toml:"payee_name" yaml:"payee_name"`
	PayeeID        int         `boil:"payee_id" json:"payee_id" toml:"payee_id" yaml:"payee_id"`
	PayeeAccountID int         `boil:"payee_account_id" json:"payee_account_id" toml:"payee_account_id" yaml:"payee_account_id"`
	PayerID        int         `boil:"payer_id" json:"payer_id" toml:"payer_id" yaml:"payer_id"`
	MakerDate      time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate    null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID        string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID      null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy     null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate   null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *billerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L billerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BillerColumns = struct {
	BillerID       string
	BillerStatus   string
	PayeeAddress   string
	PayeeName      string
	PayeeID        string
	PayeeAccountID string
	PayerID        string
	MakerDate      string
	CheckerDate    string
	MakerID        string
	CheckerID      string
	ModifiedBy     string
	ModifiedDate   string
}{
	BillerID:       "biller_id",
	BillerStatus:   "biller_status",
	PayeeAddress:   "payee_address",
	PayeeName:      "payee_name",
	PayeeID:        "payee_id",
	PayeeAccountID: "payee_account_id",
	PayerID:        "payer_id",
	MakerDate:      "maker_date",
	CheckerDate:    "checker_date",
	MakerID:        "maker_id",
	CheckerID:      "checker_id",
	ModifiedBy:     "modified_by",
	ModifiedDate:   "modified_date",
}

// Generated where

var BillerWhere = struct {
	BillerID       whereHelperint
	BillerStatus   whereHelperstring
	PayeeAddress   whereHelperstring
	PayeeName      whereHelperstring
	PayeeID        whereHelperint
	PayeeAccountID whereHelperint
	PayerID        whereHelperint
	MakerDate      whereHelpertime_Time
	CheckerDate    whereHelpernull_Time
	MakerID        whereHelperstring
	CheckerID      whereHelpernull_String
	ModifiedBy     whereHelpernull_String
	ModifiedDate   whereHelpernull_Time
}{
	BillerID:       whereHelperint{field: `biller_id`},
	BillerStatus:   whereHelperstring{field: `biller_status`},
	PayeeAddress:   whereHelperstring{field: `payee_address`},
	PayeeName:      whereHelperstring{field: `payee_name`},
	PayeeID:        whereHelperint{field: `payee_id`},
	PayeeAccountID: whereHelperint{field: `payee_account_id`},
	PayerID:        whereHelperint{field: `payer_id`},
	MakerDate:      whereHelpertime_Time{field: `maker_date`},
	CheckerDate:    whereHelpernull_Time{field: `checker_date`},
	MakerID:        whereHelperstring{field: `maker_id`},
	CheckerID:      whereHelpernull_String{field: `checker_id`},
	ModifiedBy:     whereHelpernull_String{field: `modified_by`},
	ModifiedDate:   whereHelpernull_Time{field: `modified_date`},
}

// BillerRels is where relationship names are stored.
var BillerRels = struct {
	PayeeAccount       string
	Payee              string
	Payer              string
	BillerPaymentBills string
}{
	PayeeAccount:       "PayeeAccount",
	Payee:              "Payee",
	Payer:              "Payer",
	BillerPaymentBills: "BillerPaymentBills",
}

// billerR is where relationships are stored.
type billerR struct {
	PayeeAccount       *Account
	Payee              *Party
	Payer              *Party
	BillerPaymentBills PaymentBillSlice
}

// NewStruct creates a new relationship struct
func (*billerR) NewStruct() *billerR {
	return &billerR{}
}

// billerL is where Load methods for each relationship are stored.
type billerL struct{}

var (
	billerColumns               = []string{"biller_id", "biller_status", "payee_address", "payee_name", "payee_id", "payee_account_id", "payer_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	billerColumnsWithoutDefault = []string{"biller_status", "payee_address", "payee_name", "payee_id", "payee_account_id", "payer_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	billerColumnsWithDefault    = []string{"biller_id"}
	billerPrimaryKeyColumns     = []string{"biller_id"}
)

type (
	// BillerSlice is an alias for a slice of pointers to Biller.
	// This should generally be used opposed to []Biller.
	BillerSlice []*Biller
	// BillerHook is the signature for custom Biller hook methods
	BillerHook func(context.Context, boil.ContextExecutor, *Biller) error

	billerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	billerType                 = reflect.TypeOf(&Biller{})
	billerMapping              = queries.MakeStructMapping(billerType)
	billerPrimaryKeyMapping, _ = queries.BindMapping(billerType, billerMapping, billerPrimaryKeyColumns)
	billerInsertCacheMut       sync.RWMutex
	billerInsertCache          = make(map[string]insertCache)
	billerUpdateCacheMut       sync.RWMutex
	billerUpdateCache          = make(map[string]updateCache)
	billerUpsertCacheMut       sync.RWMutex
	billerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var billerBeforeInsertHooks []BillerHook
var billerBeforeUpdateHooks []BillerHook
var billerBeforeDeleteHooks []BillerHook
var billerBeforeUpsertHooks []BillerHook

var billerAfterInsertHooks []BillerHook
var billerAfterSelectHooks []BillerHook
var billerAfterUpdateHooks []BillerHook
var billerAfterDeleteHooks []BillerHook
var billerAfterUpsertHooks []BillerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Biller) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Biller) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Biller) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Biller) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Biller) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Biller) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Biller) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Biller) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Biller) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range billerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBillerHook registers your hook function for all future operations.
func AddBillerHook(hookPoint boil.HookPoint, billerHook BillerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		billerBeforeInsertHooks = append(billerBeforeInsertHooks, billerHook)
	case boil.BeforeUpdateHook:
		billerBeforeUpdateHooks = append(billerBeforeUpdateHooks, billerHook)
	case boil.BeforeDeleteHook:
		billerBeforeDeleteHooks = append(billerBeforeDeleteHooks, billerHook)
	case boil.BeforeUpsertHook:
		billerBeforeUpsertHooks = append(billerBeforeUpsertHooks, billerHook)
	case boil.AfterInsertHook:
		billerAfterInsertHooks = append(billerAfterInsertHooks, billerHook)
	case boil.AfterSelectHook:
		billerAfterSelectHooks = append(billerAfterSelectHooks, billerHook)
	case boil.AfterUpdateHook:
		billerAfterUpdateHooks = append(billerAfterUpdateHooks, billerHook)
	case boil.AfterDeleteHook:
		billerAfterDeleteHooks = append(billerAfterDeleteHooks, billerHook)
	case boil.AfterUpsertHook:
		billerAfterUpsertHooks = append(billerAfterUpsertHooks, billerHook)
	}
}

// One returns a single biller record from the query.
func (q billerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Biller, error) {
	o := &Biller{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Biller")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Biller records from the query.
func (q billerQuery) All(ctx context.Context, exec boil.ContextExecutor) (BillerSlice, error) {
	var o []*Biller

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Biller slice")
	}

	if len(billerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Biller records in the query.
func (q billerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Biller rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q billerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Biller exists")
	}

	return count > 0, nil
}

// PayeeAccount pointed to by the foreign key.
func (o *Biller) PayeeAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.PayeeAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Payee pointed to by the foreign key.
func (o *Biller) Payee(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PayeeID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// Payer pointed to by the foreign key.
func (o *Biller) Payer(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PayerID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// BillerPaymentBills retrieves all the PaymentBill's PaymentBills with an executor via biller_id column.
func (o *Biller) BillerPaymentBills(mods ...qm.QueryMod) paymentBillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PaymentBill`.`biller_id`=?", o.BillerID),
	)

	query := PaymentBills(queryMods...)
	queries.SetFrom(query.Query, "`PaymentBill`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`PaymentBill`.*"})
	}

	return query
}

// LoadPayeeAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (billerL) LoadPayeeAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiller interface{}, mods queries.Applicator) error {
	var slice []*Biller
	var object *Biller

	if singular {
		object = maybeBiller.(*Biller)
	} else {
		slice = *maybeBiller.(*[]*Biller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &billerR{}
		}
		args = append(args, object.PayeeAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &billerR{}
			}

			for _, a := range args {
				if a == obj.PayeeAccountID {
					continue Outer
				}
			}

			args = append(args, obj.PayeeAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(billerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PayeeAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.PayeeAccountBillers = append(foreign.R.PayeeAccountBillers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayeeAccountID == foreign.AccountID {
				local.R.PayeeAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.PayeeAccountBillers = append(foreign.R.PayeeAccountBillers, local)
				break
			}
		}
	}

	return nil
}

// LoadPayee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (billerL) LoadPayee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiller interface{}, mods queries.Applicator) error {
	var slice []*Biller
	var object *Biller

	if singular {
		object = maybeBiller.(*Biller)
	} else {
		slice = *maybeBiller.(*[]*Biller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &billerR{}
		}
		args = append(args, object.PayeeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &billerR{}
			}

			for _, a := range args {
				if a == obj.PayeeID {
					continue Outer
				}
			}

			args = append(args, obj.PayeeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(billerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payee = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PayeeBillers = append(foreign.R.PayeeBillers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayeeID == foreign.PartyID {
				local.R.Payee = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PayeeBillers = append(foreign.R.PayeeBillers, local)
				break
			}
		}
	}

	return nil
}

// LoadPayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (billerL) LoadPayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiller interface{}, mods queries.Applicator) error {
	var slice []*Biller
	var object *Biller

	if singular {
		object = maybeBiller.(*Biller)
	} else {
		slice = *maybeBiller.(*[]*Biller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &billerR{}
		}
		args = append(args, object.PayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &billerR{}
			}

			for _, a := range args {
				if a == obj.PayerID {
					continue Outer
				}
			}

			args = append(args, obj.PayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(billerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payer = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PayerBillers = append(foreign.R.PayerBillers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayerID == foreign.PartyID {
				local.R.Payer = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PayerBillers = append(foreign.R.PayerBillers, local)
				break
			}
		}
	}

	return nil
}

// LoadBillerPaymentBills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (billerL) LoadBillerPaymentBills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBiller interface{}, mods queries.Applicator) error {
	var slice []*Biller
	var object *Biller

	if singular {
		object = maybeBiller.(*Biller)
	} else {
		slice = *maybeBiller.(*[]*Biller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &billerR{}
		}
		args = append(args, object.BillerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &billerR{}
			}

			for _, a := range args {
				if a == obj.BillerID {
					continue Outer
				}
			}

			args = append(args, obj.BillerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentBill`), qm.WhereIn(`biller_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentBill")
	}

	var resultSlice []*PaymentBill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentBill")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PaymentBill")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentBill")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillerPaymentBills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentBillR{}
			}
			foreign.R.Biller = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillerID == foreign.BillerID {
				local.R.BillerPaymentBills = append(local.R.BillerPaymentBills, foreign)
				if foreign.R == nil {
					foreign.R = &paymentBillR{}
				}
				foreign.R.Biller = local
				break
			}
		}
	}

	return nil
}

// SetPayeeAccount of the biller to the related item.
// Sets o.R.PayeeAccount to related.
// Adds o to related.R.PayeeAccountBillers.
func (o *Biller) SetPayeeAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Biller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payee_account_id"}),
		strmangle.WhereClause("`", "`", 0, billerPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.BillerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayeeAccountID = related.AccountID
	if o.R == nil {
		o.R = &billerR{
			PayeeAccount: related,
		}
	} else {
		o.R.PayeeAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			PayeeAccountBillers: BillerSlice{o},
		}
	} else {
		related.R.PayeeAccountBillers = append(related.R.PayeeAccountBillers, o)
	}

	return nil
}

// SetPayee of the biller to the related item.
// Sets o.R.Payee to related.
// Adds o to related.R.PayeeBillers.
func (o *Biller) SetPayee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Biller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payee_id"}),
		strmangle.WhereClause("`", "`", 0, billerPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.BillerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayeeID = related.PartyID
	if o.R == nil {
		o.R = &billerR{
			Payee: related,
		}
	} else {
		o.R.Payee = related
	}

	if related.R == nil {
		related.R = &partyR{
			PayeeBillers: BillerSlice{o},
		}
	} else {
		related.R.PayeeBillers = append(related.R.PayeeBillers, o)
	}

	return nil
}

// SetPayer of the biller to the related item.
// Sets o.R.Payer to related.
// Adds o to related.R.PayerBillers.
func (o *Biller) SetPayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Biller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payer_id"}),
		strmangle.WhereClause("`", "`", 0, billerPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.BillerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayerID = related.PartyID
	if o.R == nil {
		o.R = &billerR{
			Payer: related,
		}
	} else {
		o.R.Payer = related
	}

	if related.R == nil {
		related.R = &partyR{
			PayerBillers: BillerSlice{o},
		}
	} else {
		related.R.PayerBillers = append(related.R.PayerBillers, o)
	}

	return nil
}

// AddBillerPaymentBills adds the given related objects to the existing relationships
// of the Biller, optionally inserting them as new records.
// Appends related to o.R.BillerPaymentBills.
// Sets related.R.Biller appropriately.
func (o *Biller) AddBillerPaymentBills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentBill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillerID = o.BillerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PaymentBill` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"biller_id"}),
				strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
			)
			values := []interface{}{o.BillerID, rel.PaymentBillID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillerID = o.BillerID
		}
	}

	if o.R == nil {
		o.R = &billerR{
			BillerPaymentBills: related,
		}
	} else {
		o.R.BillerPaymentBills = append(o.R.BillerPaymentBills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentBillR{
				Biller: o,
			}
		} else {
			rel.R.Biller = o
		}
	}
	return nil
}

// Billers retrieves all the records using an executor.
func Billers(mods ...qm.QueryMod) billerQuery {
	mods = append(mods, qm.From("`Biller`"))
	return billerQuery{NewQuery(mods...)}
}

// FindBiller retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBiller(ctx context.Context, exec boil.ContextExecutor, billerID int, selectCols ...string) (*Biller, error) {
	billerObj := &Biller{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Biller` where `biller_id`=?", sel,
	)

	q := queries.Raw(query, billerID)

	err := q.Bind(ctx, exec, billerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Biller")
	}

	return billerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Biller) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Biller provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(billerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	billerInsertCacheMut.RLock()
	cache, cached := billerInsertCache[key]
	billerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			billerColumns,
			billerColumnsWithDefault,
			billerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(billerType, billerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(billerType, billerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Biller` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Biller` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Biller` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, billerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Biller")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BillerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == billerMapping["BillerID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Biller")
	}

CacheNoHooks:
	if !cached {
		billerInsertCacheMut.Lock()
		billerInsertCache[key] = cache
		billerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Biller.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Biller) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	billerUpdateCacheMut.RLock()
	cache, cached := billerUpdateCache[key]
	billerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			billerColumns,
			billerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Biller, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Biller` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, billerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(billerType, billerMapping, append(wl, billerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Biller row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Biller")
	}

	if !cached {
		billerUpdateCacheMut.Lock()
		billerUpdateCache[key] = cache
		billerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q billerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Biller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Biller")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BillerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Biller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in biller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all biller")
	}
	return rowsAff, nil
}

var mySQLBillerUniqueColumns = []string{
	"biller_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Biller) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Biller provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(billerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBillerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	billerUpsertCacheMut.RLock()
	cache, cached := billerUpsertCache[key]
	billerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			billerColumns,
			billerColumnsWithDefault,
			billerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			billerColumns,
			billerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Biller, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Biller", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Biller` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(billerType, billerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(billerType, billerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Biller")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BillerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == billerMapping["biller_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(billerType, billerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Biller")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Biller")
	}

CacheNoHooks:
	if !cached {
		billerUpsertCacheMut.Lock()
		billerUpsertCache[key] = cache
		billerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Biller record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Biller) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Biller provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), billerPrimaryKeyMapping)
	sql := "DELETE FROM `Biller` WHERE `biller_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Biller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Biller")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q billerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no billerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Biller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Biller")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BillerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Biller slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(billerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Biller` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from biller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Biller")
	}

	if len(billerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Biller) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBiller(ctx, exec, o.BillerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BillerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BillerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), billerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Biller`.* FROM `Biller` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, billerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BillerSlice")
	}

	*o = slice

	return nil
}

// BillerExists checks if the Biller row exists.
func BillerExists(ctx context.Context, exec boil.ContextExecutor, billerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Biller` where `biller_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, billerID)
	}

	row := exec.QueryRowContext(ctx, sql, billerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Biller exists")
	}

	return exists, nil
}
