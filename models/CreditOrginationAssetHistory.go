// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CreditOrginationAssetHistory is an object representing the database table.
type CreditOrginationAssetHistory struct {
	CreditOriginationAssetHistoryID int               `boil:"credit_origination_asset_history_id" json:"credit_origination_asset_history_id" toml:"credit_origination_asset_history_id" yaml:"credit_origination_asset_history_id"`
	CreditOriginationID             null.Int          `boil:"credit_origination_id" json:"credit_origination_id,omitempty" toml:"credit_origination_id" yaml:"credit_origination_id,omitempty"`
	AssetName                       null.String       `boil:"asset_name" json:"asset_name,omitempty" toml:"asset_name" yaml:"asset_name,omitempty"`
	AssetTypeID                     null.Int          `boil:"asset_type_id" json:"asset_type_id,omitempty" toml:"asset_type_id" yaml:"asset_type_id,omitempty"`
	Value                           types.NullDecimal `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	BankID                          int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate                       time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                     null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                         string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                       null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                      null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                    null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *creditOrginationAssetHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditOrginationAssetHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditOrginationAssetHistoryColumns = struct {
	CreditOriginationAssetHistoryID string
	CreditOriginationID             string
	AssetName                       string
	AssetTypeID                     string
	Value                           string
	BankID                          string
	MakerDate                       string
	CheckerDate                     string
	MakerID                         string
	CheckerID                       string
	ModifiedBy                      string
	ModifiedDate                    string
}{
	CreditOriginationAssetHistoryID: "credit_origination_asset_history_id",
	CreditOriginationID:             "credit_origination_id",
	AssetName:                       "asset_name",
	AssetTypeID:                     "asset_type_id",
	Value:                           "value",
	BankID:                          "bank_id",
	MakerDate:                       "maker_date",
	CheckerDate:                     "checker_date",
	MakerID:                         "maker_id",
	CheckerID:                       "checker_id",
	ModifiedBy:                      "modified_by",
	ModifiedDate:                    "modified_date",
}

// Generated where

var CreditOrginationAssetHistoryWhere = struct {
	CreditOriginationAssetHistoryID whereHelperint
	CreditOriginationID             whereHelpernull_Int
	AssetName                       whereHelpernull_String
	AssetTypeID                     whereHelpernull_Int
	Value                           whereHelpertypes_NullDecimal
	BankID                          whereHelperint
	MakerDate                       whereHelpertime_Time
	CheckerDate                     whereHelpernull_Time
	MakerID                         whereHelperstring
	CheckerID                       whereHelpernull_String
	ModifiedBy                      whereHelpernull_String
	ModifiedDate                    whereHelpernull_Time
}{
	CreditOriginationAssetHistoryID: whereHelperint{field: `credit_origination_asset_history_id`},
	CreditOriginationID:             whereHelpernull_Int{field: `credit_origination_id`},
	AssetName:                       whereHelpernull_String{field: `asset_name`},
	AssetTypeID:                     whereHelpernull_Int{field: `asset_type_id`},
	Value:                           whereHelpertypes_NullDecimal{field: `value`},
	BankID:                          whereHelperint{field: `bank_id`},
	MakerDate:                       whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                     whereHelpernull_Time{field: `checker_date`},
	MakerID:                         whereHelperstring{field: `maker_id`},
	CheckerID:                       whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                      whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                    whereHelpernull_Time{field: `modified_date`},
}

// CreditOrginationAssetHistoryRels is where relationship names are stored.
var CreditOrginationAssetHistoryRels = struct {
	AssetType         string
	CreditOrigination string
}{
	AssetType:         "AssetType",
	CreditOrigination: "CreditOrigination",
}

// creditOrginationAssetHistoryR is where relationships are stored.
type creditOrginationAssetHistoryR struct {
	AssetType         *AssetsType
	CreditOrigination *CreditOrigination
}

// NewStruct creates a new relationship struct
func (*creditOrginationAssetHistoryR) NewStruct() *creditOrginationAssetHistoryR {
	return &creditOrginationAssetHistoryR{}
}

// creditOrginationAssetHistoryL is where Load methods for each relationship are stored.
type creditOrginationAssetHistoryL struct{}

var (
	creditOrginationAssetHistoryColumns               = []string{"credit_origination_asset_history_id", "credit_origination_id", "asset_name", "asset_type_id", "value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	creditOrginationAssetHistoryColumnsWithoutDefault = []string{"credit_origination_asset_history_id", "credit_origination_id", "asset_name", "asset_type_id", "value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	creditOrginationAssetHistoryColumnsWithDefault    = []string{}
	creditOrginationAssetHistoryPrimaryKeyColumns     = []string{"credit_origination_asset_history_id"}
)

type (
	// CreditOrginationAssetHistorySlice is an alias for a slice of pointers to CreditOrginationAssetHistory.
	// This should generally be used opposed to []CreditOrginationAssetHistory.
	CreditOrginationAssetHistorySlice []*CreditOrginationAssetHistory
	// CreditOrginationAssetHistoryHook is the signature for custom CreditOrginationAssetHistory hook methods
	CreditOrginationAssetHistoryHook func(context.Context, boil.ContextExecutor, *CreditOrginationAssetHistory) error

	creditOrginationAssetHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditOrginationAssetHistoryType                 = reflect.TypeOf(&CreditOrginationAssetHistory{})
	creditOrginationAssetHistoryMapping              = queries.MakeStructMapping(creditOrginationAssetHistoryType)
	creditOrginationAssetHistoryPrimaryKeyMapping, _ = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, creditOrginationAssetHistoryPrimaryKeyColumns)
	creditOrginationAssetHistoryInsertCacheMut       sync.RWMutex
	creditOrginationAssetHistoryInsertCache          = make(map[string]insertCache)
	creditOrginationAssetHistoryUpdateCacheMut       sync.RWMutex
	creditOrginationAssetHistoryUpdateCache          = make(map[string]updateCache)
	creditOrginationAssetHistoryUpsertCacheMut       sync.RWMutex
	creditOrginationAssetHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditOrginationAssetHistoryBeforeInsertHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryBeforeUpdateHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryBeforeDeleteHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryBeforeUpsertHooks []CreditOrginationAssetHistoryHook

var creditOrginationAssetHistoryAfterInsertHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryAfterSelectHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryAfterUpdateHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryAfterDeleteHooks []CreditOrginationAssetHistoryHook
var creditOrginationAssetHistoryAfterUpsertHooks []CreditOrginationAssetHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditOrginationAssetHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditOrginationAssetHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditOrginationAssetHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditOrginationAssetHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditOrginationAssetHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditOrginationAssetHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditOrginationAssetHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditOrginationAssetHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditOrginationAssetHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOrginationAssetHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditOrginationAssetHistoryHook registers your hook function for all future operations.
func AddCreditOrginationAssetHistoryHook(hookPoint boil.HookPoint, creditOrginationAssetHistoryHook CreditOrginationAssetHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		creditOrginationAssetHistoryBeforeInsertHooks = append(creditOrginationAssetHistoryBeforeInsertHooks, creditOrginationAssetHistoryHook)
	case boil.BeforeUpdateHook:
		creditOrginationAssetHistoryBeforeUpdateHooks = append(creditOrginationAssetHistoryBeforeUpdateHooks, creditOrginationAssetHistoryHook)
	case boil.BeforeDeleteHook:
		creditOrginationAssetHistoryBeforeDeleteHooks = append(creditOrginationAssetHistoryBeforeDeleteHooks, creditOrginationAssetHistoryHook)
	case boil.BeforeUpsertHook:
		creditOrginationAssetHistoryBeforeUpsertHooks = append(creditOrginationAssetHistoryBeforeUpsertHooks, creditOrginationAssetHistoryHook)
	case boil.AfterInsertHook:
		creditOrginationAssetHistoryAfterInsertHooks = append(creditOrginationAssetHistoryAfterInsertHooks, creditOrginationAssetHistoryHook)
	case boil.AfterSelectHook:
		creditOrginationAssetHistoryAfterSelectHooks = append(creditOrginationAssetHistoryAfterSelectHooks, creditOrginationAssetHistoryHook)
	case boil.AfterUpdateHook:
		creditOrginationAssetHistoryAfterUpdateHooks = append(creditOrginationAssetHistoryAfterUpdateHooks, creditOrginationAssetHistoryHook)
	case boil.AfterDeleteHook:
		creditOrginationAssetHistoryAfterDeleteHooks = append(creditOrginationAssetHistoryAfterDeleteHooks, creditOrginationAssetHistoryHook)
	case boil.AfterUpsertHook:
		creditOrginationAssetHistoryAfterUpsertHooks = append(creditOrginationAssetHistoryAfterUpsertHooks, creditOrginationAssetHistoryHook)
	}
}

// One returns a single creditOrginationAssetHistory record from the query.
func (q creditOrginationAssetHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditOrginationAssetHistory, error) {
	o := &CreditOrginationAssetHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CreditOrginationAssetHistory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditOrginationAssetHistory records from the query.
func (q creditOrginationAssetHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditOrginationAssetHistorySlice, error) {
	var o []*CreditOrginationAssetHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CreditOrginationAssetHistory slice")
	}

	if len(creditOrginationAssetHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditOrginationAssetHistory records in the query.
func (q creditOrginationAssetHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CreditOrginationAssetHistory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditOrginationAssetHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CreditOrginationAssetHistory exists")
	}

	return count > 0, nil
}

// AssetType pointed to by the foreign key.
func (o *CreditOrginationAssetHistory) AssetType(mods ...qm.QueryMod) assetsTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("assets_type_id=?", o.AssetTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := AssetsTypes(queryMods...)
	queries.SetFrom(query.Query, "`AssetsType`")

	return query
}

// CreditOrigination pointed to by the foreign key.
func (o *CreditOrginationAssetHistory) CreditOrigination(mods ...qm.QueryMod) creditOriginationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("credit_origination_id=?", o.CreditOriginationID),
	}

	queryMods = append(queryMods, mods...)

	query := CreditOriginations(queryMods...)
	queries.SetFrom(query.Query, "`CreditOrigination`")

	return query
}

// LoadAssetType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditOrginationAssetHistoryL) LoadAssetType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrginationAssetHistory interface{}, mods queries.Applicator) error {
	var slice []*CreditOrginationAssetHistory
	var object *CreditOrginationAssetHistory

	if singular {
		object = maybeCreditOrginationAssetHistory.(*CreditOrginationAssetHistory)
	} else {
		slice = *maybeCreditOrginationAssetHistory.(*[]*CreditOrginationAssetHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOrginationAssetHistoryR{}
		}
		if !queries.IsNil(object.AssetTypeID) {
			args = append(args, object.AssetTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOrginationAssetHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AssetTypeID) {
				args = append(args, obj.AssetTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`AssetsType`), qm.WhereIn(`assets_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssetsType")
	}

	var resultSlice []*AssetsType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssetsType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AssetsType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AssetsType")
	}

	if len(creditOrginationAssetHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssetType = foreign
		if foreign.R == nil {
			foreign.R = &assetsTypeR{}
		}
		foreign.R.AssetTypeCreditOrginationAssetHistories = append(foreign.R.AssetTypeCreditOrginationAssetHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AssetTypeID, foreign.AssetsTypeID) {
				local.R.AssetType = foreign
				if foreign.R == nil {
					foreign.R = &assetsTypeR{}
				}
				foreign.R.AssetTypeCreditOrginationAssetHistories = append(foreign.R.AssetTypeCreditOrginationAssetHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadCreditOrigination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditOrginationAssetHistoryL) LoadCreditOrigination(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrginationAssetHistory interface{}, mods queries.Applicator) error {
	var slice []*CreditOrginationAssetHistory
	var object *CreditOrginationAssetHistory

	if singular {
		object = maybeCreditOrginationAssetHistory.(*CreditOrginationAssetHistory)
	} else {
		slice = *maybeCreditOrginationAssetHistory.(*[]*CreditOrginationAssetHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOrginationAssetHistoryR{}
		}
		if !queries.IsNil(object.CreditOriginationID) {
			args = append(args, object.CreditOriginationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOrginationAssetHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreditOriginationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreditOriginationID) {
				args = append(args, obj.CreditOriginationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CreditOrigination`), qm.WhereIn(`credit_origination_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditOrigination")
	}

	var resultSlice []*CreditOrigination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditOrigination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for CreditOrigination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CreditOrigination")
	}

	if len(creditOrginationAssetHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditOrigination = foreign
		if foreign.R == nil {
			foreign.R = &creditOriginationR{}
		}
		foreign.R.CreditOriginationCreditOrginationAssetHistories = append(foreign.R.CreditOriginationCreditOrginationAssetHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreditOriginationID, foreign.CreditOriginationID) {
				local.R.CreditOrigination = foreign
				if foreign.R == nil {
					foreign.R = &creditOriginationR{}
				}
				foreign.R.CreditOriginationCreditOrginationAssetHistories = append(foreign.R.CreditOriginationCreditOrginationAssetHistories, local)
				break
			}
		}
	}

	return nil
}

// SetAssetType of the creditOrginationAssetHistory to the related item.
// Sets o.R.AssetType to related.
// Adds o to related.R.AssetTypeCreditOrginationAssetHistories.
func (o *CreditOrginationAssetHistory) SetAssetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssetsType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"asset_type_id"}),
		strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.AssetsTypeID, o.CreditOriginationAssetHistoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AssetTypeID, related.AssetsTypeID)
	if o.R == nil {
		o.R = &creditOrginationAssetHistoryR{
			AssetType: related,
		}
	} else {
		o.R.AssetType = related
	}

	if related.R == nil {
		related.R = &assetsTypeR{
			AssetTypeCreditOrginationAssetHistories: CreditOrginationAssetHistorySlice{o},
		}
	} else {
		related.R.AssetTypeCreditOrginationAssetHistories = append(related.R.AssetTypeCreditOrginationAssetHistories, o)
	}

	return nil
}

// RemoveAssetType relationship.
// Sets o.R.AssetType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CreditOrginationAssetHistory) RemoveAssetType(ctx context.Context, exec boil.ContextExecutor, related *AssetsType) error {
	var err error

	queries.SetScanner(&o.AssetTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("asset_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.AssetType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssetTypeCreditOrginationAssetHistories {
		if queries.Equal(o.AssetTypeID, ri.AssetTypeID) {
			continue
		}

		ln := len(related.R.AssetTypeCreditOrginationAssetHistories)
		if ln > 1 && i < ln-1 {
			related.R.AssetTypeCreditOrginationAssetHistories[i] = related.R.AssetTypeCreditOrginationAssetHistories[ln-1]
		}
		related.R.AssetTypeCreditOrginationAssetHistories = related.R.AssetTypeCreditOrginationAssetHistories[:ln-1]
		break
	}
	return nil
}

// SetCreditOrigination of the creditOrginationAssetHistory to the related item.
// Sets o.R.CreditOrigination to related.
// Adds o to related.R.CreditOriginationCreditOrginationAssetHistories.
func (o *CreditOrginationAssetHistory) SetCreditOrigination(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CreditOrigination) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"credit_origination_id"}),
		strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CreditOriginationID, o.CreditOriginationAssetHistoryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreditOriginationID, related.CreditOriginationID)
	if o.R == nil {
		o.R = &creditOrginationAssetHistoryR{
			CreditOrigination: related,
		}
	} else {
		o.R.CreditOrigination = related
	}

	if related.R == nil {
		related.R = &creditOriginationR{
			CreditOriginationCreditOrginationAssetHistories: CreditOrginationAssetHistorySlice{o},
		}
	} else {
		related.R.CreditOriginationCreditOrginationAssetHistories = append(related.R.CreditOriginationCreditOrginationAssetHistories, o)
	}

	return nil
}

// RemoveCreditOrigination relationship.
// Sets o.R.CreditOrigination to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CreditOrginationAssetHistory) RemoveCreditOrigination(ctx context.Context, exec boil.ContextExecutor, related *CreditOrigination) error {
	var err error

	queries.SetScanner(&o.CreditOriginationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("credit_origination_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CreditOrigination = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreditOriginationCreditOrginationAssetHistories {
		if queries.Equal(o.CreditOriginationID, ri.CreditOriginationID) {
			continue
		}

		ln := len(related.R.CreditOriginationCreditOrginationAssetHistories)
		if ln > 1 && i < ln-1 {
			related.R.CreditOriginationCreditOrginationAssetHistories[i] = related.R.CreditOriginationCreditOrginationAssetHistories[ln-1]
		}
		related.R.CreditOriginationCreditOrginationAssetHistories = related.R.CreditOriginationCreditOrginationAssetHistories[:ln-1]
		break
	}
	return nil
}

// CreditOrginationAssetHistories retrieves all the records using an executor.
func CreditOrginationAssetHistories(mods ...qm.QueryMod) creditOrginationAssetHistoryQuery {
	mods = append(mods, qm.From("`CreditOrginationAssetHistory`"))
	return creditOrginationAssetHistoryQuery{NewQuery(mods...)}
}

// FindCreditOrginationAssetHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditOrginationAssetHistory(ctx context.Context, exec boil.ContextExecutor, creditOriginationAssetHistoryID int, selectCols ...string) (*CreditOrginationAssetHistory, error) {
	creditOrginationAssetHistoryObj := &CreditOrginationAssetHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CreditOrginationAssetHistory` where `credit_origination_asset_history_id`=?", sel,
	)

	q := queries.Raw(query, creditOriginationAssetHistoryID)

	err := q.Bind(ctx, exec, creditOrginationAssetHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CreditOrginationAssetHistory")
	}

	return creditOrginationAssetHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditOrginationAssetHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CreditOrginationAssetHistory provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOrginationAssetHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditOrginationAssetHistoryInsertCacheMut.RLock()
	cache, cached := creditOrginationAssetHistoryInsertCache[key]
	creditOrginationAssetHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditOrginationAssetHistoryColumns,
			creditOrginationAssetHistoryColumnsWithDefault,
			creditOrginationAssetHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CreditOrginationAssetHistory` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CreditOrginationAssetHistory` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CreditOrginationAssetHistory` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CreditOrginationAssetHistory")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditOriginationAssetHistoryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CreditOrginationAssetHistory")
	}

CacheNoHooks:
	if !cached {
		creditOrginationAssetHistoryInsertCacheMut.Lock()
		creditOrginationAssetHistoryInsertCache[key] = cache
		creditOrginationAssetHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditOrginationAssetHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditOrginationAssetHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditOrginationAssetHistoryUpdateCacheMut.RLock()
	cache, cached := creditOrginationAssetHistoryUpdateCache[key]
	creditOrginationAssetHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditOrginationAssetHistoryColumns,
			creditOrginationAssetHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CreditOrginationAssetHistory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, append(wl, creditOrginationAssetHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CreditOrginationAssetHistory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CreditOrginationAssetHistory")
	}

	if !cached {
		creditOrginationAssetHistoryUpdateCacheMut.Lock()
		creditOrginationAssetHistoryUpdateCache[key] = cache
		creditOrginationAssetHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditOrginationAssetHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CreditOrginationAssetHistory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CreditOrginationAssetHistory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditOrginationAssetHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOrginationAssetHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOrginationAssetHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in creditOrginationAssetHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all creditOrginationAssetHistory")
	}
	return rowsAff, nil
}

var mySQLCreditOrginationAssetHistoryUniqueColumns = []string{
	"credit_origination_asset_history_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditOrginationAssetHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CreditOrginationAssetHistory provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOrginationAssetHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCreditOrginationAssetHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditOrginationAssetHistoryUpsertCacheMut.RLock()
	cache, cached := creditOrginationAssetHistoryUpsertCache[key]
	creditOrginationAssetHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			creditOrginationAssetHistoryColumns,
			creditOrginationAssetHistoryColumnsWithDefault,
			creditOrginationAssetHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			creditOrginationAssetHistoryColumns,
			creditOrginationAssetHistoryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert CreditOrginationAssetHistory, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "CreditOrginationAssetHistory", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CreditOrginationAssetHistory` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CreditOrginationAssetHistory")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(creditOrginationAssetHistoryType, creditOrginationAssetHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CreditOrginationAssetHistory")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CreditOrginationAssetHistory")
	}

CacheNoHooks:
	if !cached {
		creditOrginationAssetHistoryUpsertCacheMut.Lock()
		creditOrginationAssetHistoryUpsertCache[key] = cache
		creditOrginationAssetHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditOrginationAssetHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditOrginationAssetHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOrginationAssetHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditOrginationAssetHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `CreditOrginationAssetHistory` WHERE `credit_origination_asset_history_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CreditOrginationAssetHistory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CreditOrginationAssetHistory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditOrginationAssetHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditOrginationAssetHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CreditOrginationAssetHistory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CreditOrginationAssetHistory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditOrginationAssetHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOrginationAssetHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(creditOrginationAssetHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOrginationAssetHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CreditOrginationAssetHistory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOrginationAssetHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from creditOrginationAssetHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CreditOrginationAssetHistory")
	}

	if len(creditOrginationAssetHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditOrginationAssetHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditOrginationAssetHistory(ctx, exec, o.CreditOriginationAssetHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditOrginationAssetHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditOrginationAssetHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOrginationAssetHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CreditOrginationAssetHistory`.* FROM `CreditOrginationAssetHistory` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOrginationAssetHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditOrginationAssetHistorySlice")
	}

	*o = slice

	return nil
}

// CreditOrginationAssetHistoryExists checks if the CreditOrginationAssetHistory row exists.
func CreditOrginationAssetHistoryExists(ctx context.Context, exec boil.ContextExecutor, creditOriginationAssetHistoryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CreditOrginationAssetHistory` where `credit_origination_asset_history_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, creditOriginationAssetHistoryID)
	}

	row := exec.QueryRowContext(ctx, sql, creditOriginationAssetHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CreditOrginationAssetHistory exists")
	}

	return exists, nil
}
