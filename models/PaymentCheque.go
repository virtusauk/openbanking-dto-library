// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentCheque is an object representing the database table.
type PaymentCheque struct {
	PaymentChequeID         int           `boil:"payment_cheque_id" json:"payment_cheque_id" toml:"payment_cheque_id" yaml:"payment_cheque_id"`
	PaymentID               int           `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	Bank                    string        `boil:"bank" json:"bank" toml:"bank" yaml:"bank"`
	ChequeNumber            string        `boil:"cheque_number" json:"cheque_number" toml:"cheque_number" yaml:"cheque_number"`
	ChequeDate              time.Time     `boil:"cheque_date" json:"cheque_date" toml:"cheque_date" yaml:"cheque_date"`
	BankID                  int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	Amount                  types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	ToCustomerName          string        `boil:"to_customer_name" json:"to_customer_name" toml:"to_customer_name" yaml:"to_customer_name"`
	CustomerID              int           `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	ToBankID                int           `boil:"to_bank_id" json:"to_bank_id" toml:"to_bank_id" yaml:"to_bank_id"`
	ToCustomerAccountNumber string        `boil:"to_customer_account_number" json:"to_customer_account_number" toml:"to_customer_account_number" yaml:"to_customer_account_number"`
	MakerDate               time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate             null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                 string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID               null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy              null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate            null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentChequeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentChequeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentChequeColumns = struct {
	PaymentChequeID         string
	PaymentID               string
	Bank                    string
	ChequeNumber            string
	ChequeDate              string
	BankID                  string
	Amount                  string
	ToCustomerName          string
	CustomerID              string
	ToBankID                string
	ToCustomerAccountNumber string
	MakerDate               string
	CheckerDate             string
	MakerID                 string
	CheckerID               string
	ModifiedBy              string
	ModifiedDate            string
}{
	PaymentChequeID:         "payment_cheque_id",
	PaymentID:               "payment_id",
	Bank:                    "bank",
	ChequeNumber:            "cheque_number",
	ChequeDate:              "cheque_date",
	BankID:                  "bank_id",
	Amount:                  "amount",
	ToCustomerName:          "to_customer_name",
	CustomerID:              "customer_id",
	ToBankID:                "to_bank_id",
	ToCustomerAccountNumber: "to_customer_account_number",
	MakerDate:               "maker_date",
	CheckerDate:             "checker_date",
	MakerID:                 "maker_id",
	CheckerID:               "checker_id",
	ModifiedBy:              "modified_by",
	ModifiedDate:            "modified_date",
}

// Generated where

var PaymentChequeWhere = struct {
	PaymentChequeID         whereHelperint
	PaymentID               whereHelperint
	Bank                    whereHelperstring
	ChequeNumber            whereHelperstring
	ChequeDate              whereHelpertime_Time
	BankID                  whereHelperint
	Amount                  whereHelpertypes_Decimal
	ToCustomerName          whereHelperstring
	CustomerID              whereHelperint
	ToBankID                whereHelperint
	ToCustomerAccountNumber whereHelperstring
	MakerDate               whereHelpertime_Time
	CheckerDate             whereHelpernull_Time
	MakerID                 whereHelperstring
	CheckerID               whereHelpernull_String
	ModifiedBy              whereHelpernull_String
	ModifiedDate            whereHelpernull_Time
}{
	PaymentChequeID:         whereHelperint{field: `payment_cheque_id`},
	PaymentID:               whereHelperint{field: `payment_id`},
	Bank:                    whereHelperstring{field: `bank`},
	ChequeNumber:            whereHelperstring{field: `cheque_number`},
	ChequeDate:              whereHelpertime_Time{field: `cheque_date`},
	BankID:                  whereHelperint{field: `bank_id`},
	Amount:                  whereHelpertypes_Decimal{field: `amount`},
	ToCustomerName:          whereHelperstring{field: `to_customer_name`},
	CustomerID:              whereHelperint{field: `customer_id`},
	ToBankID:                whereHelperint{field: `to_bank_id`},
	ToCustomerAccountNumber: whereHelperstring{field: `to_customer_account_number`},
	MakerDate:               whereHelpertime_Time{field: `maker_date`},
	CheckerDate:             whereHelpernull_Time{field: `checker_date`},
	MakerID:                 whereHelperstring{field: `maker_id`},
	CheckerID:               whereHelpernull_String{field: `checker_id`},
	ModifiedBy:              whereHelpernull_String{field: `modified_by`},
	ModifiedDate:            whereHelpernull_Time{field: `modified_date`},
}

// PaymentChequeRels is where relationship names are stored.
var PaymentChequeRels = struct {
	Payment string
	Bank    string
}{
	Payment: "Payment",
	Bank:    "Bank",
}

// paymentChequeR is where relationships are stored.
type paymentChequeR struct {
	Payment *PaymentInitiation
	Bank    *Bank
}

// NewStruct creates a new relationship struct
func (*paymentChequeR) NewStruct() *paymentChequeR {
	return &paymentChequeR{}
}

// paymentChequeL is where Load methods for each relationship are stored.
type paymentChequeL struct{}

var (
	paymentChequeColumns               = []string{"payment_cheque_id", "payment_id", "bank", "cheque_number", "cheque_date", "bank_id", "amount", "to_customer_name", "customer_id", "to_bank_id", "to_customer_account_number", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentChequeColumnsWithoutDefault = []string{"payment_id", "bank", "cheque_number", "cheque_date", "bank_id", "amount", "to_customer_name", "customer_id", "to_bank_id", "to_customer_account_number", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentChequeColumnsWithDefault    = []string{"payment_cheque_id"}
	paymentChequePrimaryKeyColumns     = []string{"payment_cheque_id"}
)

type (
	// PaymentChequeSlice is an alias for a slice of pointers to PaymentCheque.
	// This should generally be used opposed to []PaymentCheque.
	PaymentChequeSlice []*PaymentCheque
	// PaymentChequeHook is the signature for custom PaymentCheque hook methods
	PaymentChequeHook func(context.Context, boil.ContextExecutor, *PaymentCheque) error

	paymentChequeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentChequeType                 = reflect.TypeOf(&PaymentCheque{})
	paymentChequeMapping              = queries.MakeStructMapping(paymentChequeType)
	paymentChequePrimaryKeyMapping, _ = queries.BindMapping(paymentChequeType, paymentChequeMapping, paymentChequePrimaryKeyColumns)
	paymentChequeInsertCacheMut       sync.RWMutex
	paymentChequeInsertCache          = make(map[string]insertCache)
	paymentChequeUpdateCacheMut       sync.RWMutex
	paymentChequeUpdateCache          = make(map[string]updateCache)
	paymentChequeUpsertCacheMut       sync.RWMutex
	paymentChequeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentChequeBeforeInsertHooks []PaymentChequeHook
var paymentChequeBeforeUpdateHooks []PaymentChequeHook
var paymentChequeBeforeDeleteHooks []PaymentChequeHook
var paymentChequeBeforeUpsertHooks []PaymentChequeHook

var paymentChequeAfterInsertHooks []PaymentChequeHook
var paymentChequeAfterSelectHooks []PaymentChequeHook
var paymentChequeAfterUpdateHooks []PaymentChequeHook
var paymentChequeAfterDeleteHooks []PaymentChequeHook
var paymentChequeAfterUpsertHooks []PaymentChequeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentCheque) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentCheque) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentCheque) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentCheque) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentCheque) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentCheque) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentCheque) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentCheque) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentCheque) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentChequeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentChequeHook registers your hook function for all future operations.
func AddPaymentChequeHook(hookPoint boil.HookPoint, paymentChequeHook PaymentChequeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentChequeBeforeInsertHooks = append(paymentChequeBeforeInsertHooks, paymentChequeHook)
	case boil.BeforeUpdateHook:
		paymentChequeBeforeUpdateHooks = append(paymentChequeBeforeUpdateHooks, paymentChequeHook)
	case boil.BeforeDeleteHook:
		paymentChequeBeforeDeleteHooks = append(paymentChequeBeforeDeleteHooks, paymentChequeHook)
	case boil.BeforeUpsertHook:
		paymentChequeBeforeUpsertHooks = append(paymentChequeBeforeUpsertHooks, paymentChequeHook)
	case boil.AfterInsertHook:
		paymentChequeAfterInsertHooks = append(paymentChequeAfterInsertHooks, paymentChequeHook)
	case boil.AfterSelectHook:
		paymentChequeAfterSelectHooks = append(paymentChequeAfterSelectHooks, paymentChequeHook)
	case boil.AfterUpdateHook:
		paymentChequeAfterUpdateHooks = append(paymentChequeAfterUpdateHooks, paymentChequeHook)
	case boil.AfterDeleteHook:
		paymentChequeAfterDeleteHooks = append(paymentChequeAfterDeleteHooks, paymentChequeHook)
	case boil.AfterUpsertHook:
		paymentChequeAfterUpsertHooks = append(paymentChequeAfterUpsertHooks, paymentChequeHook)
	}
}

// One returns a single paymentCheque record from the query.
func (q paymentChequeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentCheque, error) {
	o := &PaymentCheque{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentCheque")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentCheque records from the query.
func (q paymentChequeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentChequeSlice, error) {
	var o []*PaymentCheque

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentCheque slice")
	}

	if len(paymentChequeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentCheque records in the query.
func (q paymentChequeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentCheque rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentChequeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentCheque exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentCheque) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// Bank pointed to by the foreign key.
func (o *PaymentCheque) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentChequeL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentCheque interface{}, mods queries.Applicator) error {
	var slice []*PaymentCheque
	var object *PaymentCheque

	if singular {
		object = maybePaymentCheque.(*PaymentCheque)
	} else {
		slice = *maybePaymentCheque.(*[]*PaymentCheque)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentChequeR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentChequeR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentChequeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentCheques = append(foreign.R.PaymentPaymentCheques, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentCheques = append(foreign.R.PaymentPaymentCheques, local)
				break
			}
		}
	}

	return nil
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentChequeL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentCheque interface{}, mods queries.Applicator) error {
	var slice []*PaymentCheque
	var object *PaymentCheque

	if singular {
		object = maybePaymentCheque.(*PaymentCheque)
	} else {
		slice = *maybePaymentCheque.(*[]*PaymentCheque)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentChequeR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentChequeR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(paymentChequeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankPaymentCheques = append(foreign.R.BankPaymentCheques, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankPaymentCheques = append(foreign.R.BankPaymentCheques, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentCheque to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentCheques.
func (o *PaymentCheque) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentCheque` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentChequePrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentChequeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &paymentChequeR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentCheques: PaymentChequeSlice{o},
		}
	} else {
		related.R.PaymentPaymentCheques = append(related.R.PaymentPaymentCheques, o)
	}

	return nil
}

// SetBank of the paymentCheque to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankPaymentCheques.
func (o *PaymentCheque) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentCheque` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, paymentChequePrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.PaymentChequeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &paymentChequeR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankPaymentCheques: PaymentChequeSlice{o},
		}
	} else {
		related.R.BankPaymentCheques = append(related.R.BankPaymentCheques, o)
	}

	return nil
}

// PaymentCheques retrieves all the records using an executor.
func PaymentCheques(mods ...qm.QueryMod) paymentChequeQuery {
	mods = append(mods, qm.From("`PaymentCheque`"))
	return paymentChequeQuery{NewQuery(mods...)}
}

// FindPaymentCheque retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentCheque(ctx context.Context, exec boil.ContextExecutor, paymentChequeID int, selectCols ...string) (*PaymentCheque, error) {
	paymentChequeObj := &PaymentCheque{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentCheque` where `payment_cheque_id`=?", sel,
	)

	q := queries.Raw(query, paymentChequeID)

	err := q.Bind(ctx, exec, paymentChequeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentCheque")
	}

	return paymentChequeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentCheque) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentCheque provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentChequeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentChequeInsertCacheMut.RLock()
	cache, cached := paymentChequeInsertCache[key]
	paymentChequeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentChequeColumns,
			paymentChequeColumnsWithDefault,
			paymentChequeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentCheque` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentCheque` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentCheque` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentChequePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentCheque")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentChequeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentChequeMapping["PaymentChequeID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentChequeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentCheque")
	}

CacheNoHooks:
	if !cached {
		paymentChequeInsertCacheMut.Lock()
		paymentChequeInsertCache[key] = cache
		paymentChequeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentCheque.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentCheque) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentChequeUpdateCacheMut.RLock()
	cache, cached := paymentChequeUpdateCache[key]
	paymentChequeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentChequeColumns,
			paymentChequePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentCheque, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentCheque` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentChequePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, append(wl, paymentChequePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentCheque row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentCheque")
	}

	if !cached {
		paymentChequeUpdateCacheMut.Lock()
		paymentChequeUpdateCache[key] = cache
		paymentChequeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentChequeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentCheque")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentCheque")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentChequeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentChequePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentCheque` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentChequePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentCheque slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentCheque")
	}
	return rowsAff, nil
}

var mySQLPaymentChequeUniqueColumns = []string{
	"payment_cheque_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentCheque) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentCheque provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentChequeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentChequeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentChequeUpsertCacheMut.RLock()
	cache, cached := paymentChequeUpsertCache[key]
	paymentChequeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentChequeColumns,
			paymentChequeColumnsWithDefault,
			paymentChequeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentChequeColumns,
			paymentChequePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentCheque, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentCheque", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentCheque` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentCheque")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentChequeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentChequeMapping["payment_cheque_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentChequeType, paymentChequeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentCheque")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentCheque")
	}

CacheNoHooks:
	if !cached {
		paymentChequeUpsertCacheMut.Lock()
		paymentChequeUpsertCache[key] = cache
		paymentChequeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentCheque record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentCheque) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentCheque provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentChequePrimaryKeyMapping)
	sql := "DELETE FROM `PaymentCheque` WHERE `payment_cheque_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentCheque")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentCheque")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentChequeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentChequeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentCheque")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentCheque")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentChequeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentCheque slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentChequeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentChequePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentCheque` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentChequePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentCheque slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentCheque")
	}

	if len(paymentChequeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentCheque) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentCheque(ctx, exec, o.PaymentChequeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentChequeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentChequeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentChequePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentCheque`.* FROM `PaymentCheque` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentChequePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentChequeSlice")
	}

	*o = slice

	return nil
}

// PaymentChequeExists checks if the PaymentCheque row exists.
func PaymentChequeExists(ctx context.Context, exec boil.ContextExecutor, paymentChequeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentCheque` where `payment_cheque_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentChequeID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentChequeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentCheque exists")
	}

	return exists, nil
}
