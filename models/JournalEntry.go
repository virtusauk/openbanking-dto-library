// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// JournalEntry is an object representing the database table.
type JournalEntry struct {
	JournalEntryID  int               `boil:"journal_entry_id" json:"journal_entry_id" toml:"journal_entry_id" yaml:"journal_entry_id"`
	Status          string            `boil:"status" json:"status" toml:"status" yaml:"status"`
	Name            string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	Reference       null.String       `boil:"reference" json:"reference,omitempty" toml:"reference" yaml:"reference,omitempty"`
	DatePosted      time.Time         `boil:"date_posted" json:"date_posted" toml:"date_posted" yaml:"date_posted"`
	Amount          types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	PostedBranchKey null.Int          `boil:"posted_branch_key" json:"posted_branch_key,omitempty" toml:"posted_branch_key" yaml:"posted_branch_key,omitempty"`
	PostedBankKey   null.Int          `boil:"posted_bank_key" json:"posted_bank_key,omitempty" toml:"posted_bank_key" yaml:"posted_bank_key,omitempty"`
	Type            null.String       `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	TRNCcy          null.String       `boil:"trn_ccy" json:"trn_ccy,omitempty" toml:"trn_ccy" yaml:"trn_ccy,omitempty"`
	BankID          int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate       time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate     null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID         string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID       null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy      null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate    null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *journalEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L journalEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JournalEntryColumns = struct {
	JournalEntryID  string
	Status          string
	Name            string
	Reference       string
	DatePosted      string
	Amount          string
	PostedBranchKey string
	PostedBankKey   string
	Type            string
	TRNCcy          string
	BankID          string
	MakerDate       string
	CheckerDate     string
	MakerID         string
	CheckerID       string
	ModifiedBy      string
	ModifiedDate    string
}{
	JournalEntryID:  "journal_entry_id",
	Status:          "status",
	Name:            "name",
	Reference:       "reference",
	DatePosted:      "date_posted",
	Amount:          "amount",
	PostedBranchKey: "posted_branch_key",
	PostedBankKey:   "posted_bank_key",
	Type:            "type",
	TRNCcy:          "trn_ccy",
	BankID:          "bank_id",
	MakerDate:       "maker_date",
	CheckerDate:     "checker_date",
	MakerID:         "maker_id",
	CheckerID:       "checker_id",
	ModifiedBy:      "modified_by",
	ModifiedDate:    "modified_date",
}

// Generated where

var JournalEntryWhere = struct {
	JournalEntryID  whereHelperint
	Status          whereHelperstring
	Name            whereHelperstring
	Reference       whereHelpernull_String
	DatePosted      whereHelpertime_Time
	Amount          whereHelpertypes_NullDecimal
	PostedBranchKey whereHelpernull_Int
	PostedBankKey   whereHelpernull_Int
	Type            whereHelpernull_String
	TRNCcy          whereHelpernull_String
	BankID          whereHelperint
	MakerDate       whereHelpertime_Time
	CheckerDate     whereHelpernull_Time
	MakerID         whereHelperstring
	CheckerID       whereHelpernull_String
	ModifiedBy      whereHelpernull_String
	ModifiedDate    whereHelpernull_Time
}{
	JournalEntryID:  whereHelperint{field: `journal_entry_id`},
	Status:          whereHelperstring{field: `status`},
	Name:            whereHelperstring{field: `name`},
	Reference:       whereHelpernull_String{field: `reference`},
	DatePosted:      whereHelpertime_Time{field: `date_posted`},
	Amount:          whereHelpertypes_NullDecimal{field: `amount`},
	PostedBranchKey: whereHelpernull_Int{field: `posted_branch_key`},
	PostedBankKey:   whereHelpernull_Int{field: `posted_bank_key`},
	Type:            whereHelpernull_String{field: `type`},
	TRNCcy:          whereHelpernull_String{field: `trn_ccy`},
	BankID:          whereHelperint{field: `bank_id`},
	MakerDate:       whereHelpertime_Time{field: `maker_date`},
	CheckerDate:     whereHelpernull_Time{field: `checker_date`},
	MakerID:         whereHelperstring{field: `maker_id`},
	CheckerID:       whereHelpernull_String{field: `checker_id`},
	ModifiedBy:      whereHelpernull_String{field: `modified_by`},
	ModifiedDate:    whereHelpernull_Time{field: `modified_date`},
}

// JournalEntryRels is where relationship names are stored.
var JournalEntryRels = struct {
	PostedBankKey                 string
	PostedBranchKey               string
	JournalEntryJournalEntryLines string
}{
	PostedBankKey:                 "PostedBankKey",
	PostedBranchKey:               "PostedBranchKey",
	JournalEntryJournalEntryLines: "JournalEntryJournalEntryLines",
}

// journalEntryR is where relationships are stored.
type journalEntryR struct {
	PostedBankKey                 *Bank
	PostedBranchKey               *Branch
	JournalEntryJournalEntryLines JournalEntryLineSlice
}

// NewStruct creates a new relationship struct
func (*journalEntryR) NewStruct() *journalEntryR {
	return &journalEntryR{}
}

// journalEntryL is where Load methods for each relationship are stored.
type journalEntryL struct{}

var (
	journalEntryColumns               = []string{"journal_entry_id", "status", "name", "reference", "date_posted", "amount", "posted_branch_key", "posted_bank_key", "type", "trn_ccy", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	journalEntryColumnsWithoutDefault = []string{"status", "name", "reference", "date_posted", "amount", "posted_branch_key", "posted_bank_key", "type", "trn_ccy", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	journalEntryColumnsWithDefault    = []string{"journal_entry_id"}
	journalEntryPrimaryKeyColumns     = []string{"journal_entry_id"}
)

type (
	// JournalEntrySlice is an alias for a slice of pointers to JournalEntry.
	// This should generally be used opposed to []JournalEntry.
	JournalEntrySlice []*JournalEntry
	// JournalEntryHook is the signature for custom JournalEntry hook methods
	JournalEntryHook func(context.Context, boil.ContextExecutor, *JournalEntry) error

	journalEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	journalEntryType                 = reflect.TypeOf(&JournalEntry{})
	journalEntryMapping              = queries.MakeStructMapping(journalEntryType)
	journalEntryPrimaryKeyMapping, _ = queries.BindMapping(journalEntryType, journalEntryMapping, journalEntryPrimaryKeyColumns)
	journalEntryInsertCacheMut       sync.RWMutex
	journalEntryInsertCache          = make(map[string]insertCache)
	journalEntryUpdateCacheMut       sync.RWMutex
	journalEntryUpdateCache          = make(map[string]updateCache)
	journalEntryUpsertCacheMut       sync.RWMutex
	journalEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var journalEntryBeforeInsertHooks []JournalEntryHook
var journalEntryBeforeUpdateHooks []JournalEntryHook
var journalEntryBeforeDeleteHooks []JournalEntryHook
var journalEntryBeforeUpsertHooks []JournalEntryHook

var journalEntryAfterInsertHooks []JournalEntryHook
var journalEntryAfterSelectHooks []JournalEntryHook
var journalEntryAfterUpdateHooks []JournalEntryHook
var journalEntryAfterDeleteHooks []JournalEntryHook
var journalEntryAfterUpsertHooks []JournalEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JournalEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JournalEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JournalEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JournalEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JournalEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JournalEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JournalEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JournalEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JournalEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJournalEntryHook registers your hook function for all future operations.
func AddJournalEntryHook(hookPoint boil.HookPoint, journalEntryHook JournalEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		journalEntryBeforeInsertHooks = append(journalEntryBeforeInsertHooks, journalEntryHook)
	case boil.BeforeUpdateHook:
		journalEntryBeforeUpdateHooks = append(journalEntryBeforeUpdateHooks, journalEntryHook)
	case boil.BeforeDeleteHook:
		journalEntryBeforeDeleteHooks = append(journalEntryBeforeDeleteHooks, journalEntryHook)
	case boil.BeforeUpsertHook:
		journalEntryBeforeUpsertHooks = append(journalEntryBeforeUpsertHooks, journalEntryHook)
	case boil.AfterInsertHook:
		journalEntryAfterInsertHooks = append(journalEntryAfterInsertHooks, journalEntryHook)
	case boil.AfterSelectHook:
		journalEntryAfterSelectHooks = append(journalEntryAfterSelectHooks, journalEntryHook)
	case boil.AfterUpdateHook:
		journalEntryAfterUpdateHooks = append(journalEntryAfterUpdateHooks, journalEntryHook)
	case boil.AfterDeleteHook:
		journalEntryAfterDeleteHooks = append(journalEntryAfterDeleteHooks, journalEntryHook)
	case boil.AfterUpsertHook:
		journalEntryAfterUpsertHooks = append(journalEntryAfterUpsertHooks, journalEntryHook)
	}
}

// One returns a single journalEntry record from the query.
func (q journalEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JournalEntry, error) {
	o := &JournalEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for JournalEntry")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JournalEntry records from the query.
func (q journalEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (JournalEntrySlice, error) {
	var o []*JournalEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JournalEntry slice")
	}

	if len(journalEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JournalEntry records in the query.
func (q journalEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count JournalEntry rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q journalEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if JournalEntry exists")
	}

	return count > 0, nil
}

// PostedBankKey pointed to by the foreign key.
func (o *JournalEntry) PostedBankKey(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.PostedBankKey),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// PostedBranchKey pointed to by the foreign key.
func (o *JournalEntry) PostedBranchKey(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("branch_id=?", o.PostedBranchKey),
	}

	queryMods = append(queryMods, mods...)

	query := Branches(queryMods...)
	queries.SetFrom(query.Query, "`Branches`")

	return query
}

// JournalEntryJournalEntryLines retrieves all the JournalEntryLine's JournalEntryLines with an executor via journal_entry_id column.
func (o *JournalEntry) JournalEntryJournalEntryLines(mods ...qm.QueryMod) journalEntryLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`JournalEntryLine`.`journal_entry_id`=?", o.JournalEntryID),
	)

	query := JournalEntryLines(queryMods...)
	queries.SetFrom(query.Query, "`JournalEntryLine`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`JournalEntryLine`.*"})
	}

	return query
}

// LoadPostedBankKey allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryL) LoadPostedBankKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntry interface{}, mods queries.Applicator) error {
	var slice []*JournalEntry
	var object *JournalEntry

	if singular {
		object = maybeJournalEntry.(*JournalEntry)
	} else {
		slice = *maybeJournalEntry.(*[]*JournalEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryR{}
		}
		if !queries.IsNil(object.PostedBankKey) {
			args = append(args, object.PostedBankKey)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PostedBankKey) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PostedBankKey) {
				args = append(args, obj.PostedBankKey)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(journalEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PostedBankKey = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.PostedBankKeyJournalEntries = append(foreign.R.PostedBankKeyJournalEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PostedBankKey, foreign.BankID) {
				local.R.PostedBankKey = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.PostedBankKeyJournalEntries = append(foreign.R.PostedBankKeyJournalEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadPostedBranchKey allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryL) LoadPostedBranchKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntry interface{}, mods queries.Applicator) error {
	var slice []*JournalEntry
	var object *JournalEntry

	if singular {
		object = maybeJournalEntry.(*JournalEntry)
	} else {
		slice = *maybeJournalEntry.(*[]*JournalEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryR{}
		}
		if !queries.IsNil(object.PostedBranchKey) {
			args = append(args, object.PostedBranchKey)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PostedBranchKey) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PostedBranchKey) {
				args = append(args, obj.PostedBranchKey)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Branches`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Branches")
	}

	if len(journalEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PostedBranchKey = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.PostedBranchKeyJournalEntries = append(foreign.R.PostedBranchKeyJournalEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PostedBranchKey, foreign.BranchID) {
				local.R.PostedBranchKey = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.PostedBranchKeyJournalEntries = append(foreign.R.PostedBranchKeyJournalEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadJournalEntryJournalEntryLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (journalEntryL) LoadJournalEntryJournalEntryLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntry interface{}, mods queries.Applicator) error {
	var slice []*JournalEntry
	var object *JournalEntry

	if singular {
		object = maybeJournalEntry.(*JournalEntry)
	} else {
		slice = *maybeJournalEntry.(*[]*JournalEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryR{}
		}
		args = append(args, object.JournalEntryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryR{}
			}

			for _, a := range args {
				if a == obj.JournalEntryID {
					continue Outer
				}
			}

			args = append(args, obj.JournalEntryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`JournalEntryLine`), qm.WhereIn(`journal_entry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load JournalEntryLine")
	}

	var resultSlice []*JournalEntryLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice JournalEntryLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on JournalEntryLine")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for JournalEntryLine")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JournalEntryJournalEntryLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &journalEntryLineR{}
			}
			foreign.R.JournalEntry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.JournalEntryID == foreign.JournalEntryID {
				local.R.JournalEntryJournalEntryLines = append(local.R.JournalEntryJournalEntryLines, foreign)
				if foreign.R == nil {
					foreign.R = &journalEntryLineR{}
				}
				foreign.R.JournalEntry = local
				break
			}
		}
	}

	return nil
}

// SetPostedBankKey of the journalEntry to the related item.
// Sets o.R.PostedBankKey to related.
// Adds o to related.R.PostedBankKeyJournalEntries.
func (o *JournalEntry) SetPostedBankKey(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"posted_bank_key"}),
		strmangle.WhereClause("`", "`", 0, journalEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.JournalEntryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PostedBankKey, related.BankID)
	if o.R == nil {
		o.R = &journalEntryR{
			PostedBankKey: related,
		}
	} else {
		o.R.PostedBankKey = related
	}

	if related.R == nil {
		related.R = &bankR{
			PostedBankKeyJournalEntries: JournalEntrySlice{o},
		}
	} else {
		related.R.PostedBankKeyJournalEntries = append(related.R.PostedBankKeyJournalEntries, o)
	}

	return nil
}

// RemovePostedBankKey relationship.
// Sets o.R.PostedBankKey to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *JournalEntry) RemovePostedBankKey(ctx context.Context, exec boil.ContextExecutor, related *Bank) error {
	var err error

	queries.SetScanner(&o.PostedBankKey, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("posted_bank_key")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.PostedBankKey = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PostedBankKeyJournalEntries {
		if queries.Equal(o.PostedBankKey, ri.PostedBankKey) {
			continue
		}

		ln := len(related.R.PostedBankKeyJournalEntries)
		if ln > 1 && i < ln-1 {
			related.R.PostedBankKeyJournalEntries[i] = related.R.PostedBankKeyJournalEntries[ln-1]
		}
		related.R.PostedBankKeyJournalEntries = related.R.PostedBankKeyJournalEntries[:ln-1]
		break
	}
	return nil
}

// SetPostedBranchKey of the journalEntry to the related item.
// Sets o.R.PostedBranchKey to related.
// Adds o to related.R.PostedBranchKeyJournalEntries.
func (o *JournalEntry) SetPostedBranchKey(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"posted_branch_key"}),
		strmangle.WhereClause("`", "`", 0, journalEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.BranchID, o.JournalEntryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PostedBranchKey, related.BranchID)
	if o.R == nil {
		o.R = &journalEntryR{
			PostedBranchKey: related,
		}
	} else {
		o.R.PostedBranchKey = related
	}

	if related.R == nil {
		related.R = &branchR{
			PostedBranchKeyJournalEntries: JournalEntrySlice{o},
		}
	} else {
		related.R.PostedBranchKeyJournalEntries = append(related.R.PostedBranchKeyJournalEntries, o)
	}

	return nil
}

// RemovePostedBranchKey relationship.
// Sets o.R.PostedBranchKey to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *JournalEntry) RemovePostedBranchKey(ctx context.Context, exec boil.ContextExecutor, related *Branch) error {
	var err error

	queries.SetScanner(&o.PostedBranchKey, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("posted_branch_key")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.PostedBranchKey = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PostedBranchKeyJournalEntries {
		if queries.Equal(o.PostedBranchKey, ri.PostedBranchKey) {
			continue
		}

		ln := len(related.R.PostedBranchKeyJournalEntries)
		if ln > 1 && i < ln-1 {
			related.R.PostedBranchKeyJournalEntries[i] = related.R.PostedBranchKeyJournalEntries[ln-1]
		}
		related.R.PostedBranchKeyJournalEntries = related.R.PostedBranchKeyJournalEntries[:ln-1]
		break
	}
	return nil
}

// AddJournalEntryJournalEntryLines adds the given related objects to the existing relationships
// of the JournalEntry, optionally inserting them as new records.
// Appends related to o.R.JournalEntryJournalEntryLines.
// Sets related.R.JournalEntry appropriately.
func (o *JournalEntry) AddJournalEntryJournalEntryLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JournalEntryLine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JournalEntryID = o.JournalEntryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `JournalEntryLine` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"journal_entry_id"}),
				strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
			)
			values := []interface{}{o.JournalEntryID, rel.JournalEntryLineID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JournalEntryID = o.JournalEntryID
		}
	}

	if o.R == nil {
		o.R = &journalEntryR{
			JournalEntryJournalEntryLines: related,
		}
	} else {
		o.R.JournalEntryJournalEntryLines = append(o.R.JournalEntryJournalEntryLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &journalEntryLineR{
				JournalEntry: o,
			}
		} else {
			rel.R.JournalEntry = o
		}
	}
	return nil
}

// JournalEntries retrieves all the records using an executor.
func JournalEntries(mods ...qm.QueryMod) journalEntryQuery {
	mods = append(mods, qm.From("`JournalEntry`"))
	return journalEntryQuery{NewQuery(mods...)}
}

// FindJournalEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJournalEntry(ctx context.Context, exec boil.ContextExecutor, journalEntryID int, selectCols ...string) (*JournalEntry, error) {
	journalEntryObj := &JournalEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `JournalEntry` where `journal_entry_id`=?", sel,
	)

	q := queries.Raw(query, journalEntryID)

	err := q.Bind(ctx, exec, journalEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from JournalEntry")
	}

	return journalEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JournalEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JournalEntry provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(journalEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	journalEntryInsertCacheMut.RLock()
	cache, cached := journalEntryInsertCache[key]
	journalEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			journalEntryColumns,
			journalEntryColumnsWithDefault,
			journalEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(journalEntryType, journalEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(journalEntryType, journalEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `JournalEntry` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `JournalEntry` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `JournalEntry` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, journalEntryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into JournalEntry")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JournalEntryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == journalEntryMapping["JournalEntryID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.JournalEntryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JournalEntry")
	}

CacheNoHooks:
	if !cached {
		journalEntryInsertCacheMut.Lock()
		journalEntryInsertCache[key] = cache
		journalEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JournalEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JournalEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	journalEntryUpdateCacheMut.RLock()
	cache, cached := journalEntryUpdateCache[key]
	journalEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			journalEntryColumns,
			journalEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update JournalEntry, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `JournalEntry` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, journalEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(journalEntryType, journalEntryMapping, append(wl, journalEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update JournalEntry row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for JournalEntry")
	}

	if !cached {
		journalEntryUpdateCacheMut.Lock()
		journalEntryUpdateCache[key] = cache
		journalEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q journalEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for JournalEntry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for JournalEntry")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JournalEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `JournalEntry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in journalEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all journalEntry")
	}
	return rowsAff, nil
}

var mySQLJournalEntryUniqueColumns = []string{
	"journal_entry_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JournalEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JournalEntry provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(journalEntryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJournalEntryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	journalEntryUpsertCacheMut.RLock()
	cache, cached := journalEntryUpsertCache[key]
	journalEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			journalEntryColumns,
			journalEntryColumnsWithDefault,
			journalEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			journalEntryColumns,
			journalEntryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert JournalEntry, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "JournalEntry", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `JournalEntry` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(journalEntryType, journalEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(journalEntryType, journalEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for JournalEntry")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JournalEntryID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == journalEntryMapping["journal_entry_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(journalEntryType, journalEntryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for JournalEntry")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JournalEntry")
	}

CacheNoHooks:
	if !cached {
		journalEntryUpsertCacheMut.Lock()
		journalEntryUpsertCache[key] = cache
		journalEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JournalEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JournalEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JournalEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), journalEntryPrimaryKeyMapping)
	sql := "DELETE FROM `JournalEntry` WHERE `journal_entry_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from JournalEntry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for JournalEntry")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q journalEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no journalEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from JournalEntry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JournalEntry")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JournalEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JournalEntry slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(journalEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `JournalEntry` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from journalEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JournalEntry")
	}

	if len(journalEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JournalEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJournalEntry(ctx, exec, o.JournalEntryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JournalEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JournalEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `JournalEntry`.* FROM `JournalEntry` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JournalEntrySlice")
	}

	*o = slice

	return nil
}

// JournalEntryExists checks if the JournalEntry row exists.
func JournalEntryExists(ctx context.Context, exec boil.ContextExecutor, journalEntryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `JournalEntry` where `journal_entry_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, journalEntryID)
	}

	row := exec.QueryRowContext(ctx, sql, journalEntryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if JournalEntry exists")
	}

	return exists, nil
}
