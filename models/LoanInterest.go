// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// LoanInterest is an object representing the database table.
type LoanInterest struct {
	LoanInterestID int           `boil:"loan_interest_id" json:"loan_interest_id" toml:"loan_interest_id" yaml:"loan_interest_id"`
	LoanID         int           `boil:"loan_id" json:"loan_id" toml:"loan_id" yaml:"loan_id"`
	InterestRate   types.Decimal `boil:"interest_rate" json:"interest_rate" toml:"interest_rate" yaml:"interest_rate"`
	StartDate      time.Time     `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate        null.Time     `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	BankID         int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate      time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate    null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID        string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID      null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy     null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate   null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *loanInterestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L loanInterestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoanInterestColumns = struct {
	LoanInterestID string
	LoanID         string
	InterestRate   string
	StartDate      string
	EndDate        string
	BankID         string
	MakerDate      string
	CheckerDate    string
	MakerID        string
	CheckerID      string
	ModifiedBy     string
	ModifiedDate   string
}{
	LoanInterestID: "loan_interest_id",
	LoanID:         "loan_id",
	InterestRate:   "interest_rate",
	StartDate:      "start_date",
	EndDate:        "end_date",
	BankID:         "bank_id",
	MakerDate:      "maker_date",
	CheckerDate:    "checker_date",
	MakerID:        "maker_id",
	CheckerID:      "checker_id",
	ModifiedBy:     "modified_by",
	ModifiedDate:   "modified_date",
}

// Generated where

var LoanInterestWhere = struct {
	LoanInterestID whereHelperint
	LoanID         whereHelperint
	InterestRate   whereHelpertypes_Decimal
	StartDate      whereHelpertime_Time
	EndDate        whereHelpernull_Time
	BankID         whereHelperint
	MakerDate      whereHelpertime_Time
	CheckerDate    whereHelpernull_Time
	MakerID        whereHelperstring
	CheckerID      whereHelpernull_String
	ModifiedBy     whereHelpernull_String
	ModifiedDate   whereHelpernull_Time
}{
	LoanInterestID: whereHelperint{field: `loan_interest_id`},
	LoanID:         whereHelperint{field: `loan_id`},
	InterestRate:   whereHelpertypes_Decimal{field: `interest_rate`},
	StartDate:      whereHelpertime_Time{field: `start_date`},
	EndDate:        whereHelpernull_Time{field: `end_date`},
	BankID:         whereHelperint{field: `bank_id`},
	MakerDate:      whereHelpertime_Time{field: `maker_date`},
	CheckerDate:    whereHelpernull_Time{field: `checker_date`},
	MakerID:        whereHelperstring{field: `maker_id`},
	CheckerID:      whereHelpernull_String{field: `checker_id`},
	ModifiedBy:     whereHelpernull_String{field: `modified_by`},
	ModifiedDate:   whereHelpernull_Time{field: `modified_date`},
}

// LoanInterestRels is where relationship names are stored.
var LoanInterestRels = struct {
	Loan string
}{
	Loan: "Loan",
}

// loanInterestR is where relationships are stored.
type loanInterestR struct {
	Loan *Loan
}

// NewStruct creates a new relationship struct
func (*loanInterestR) NewStruct() *loanInterestR {
	return &loanInterestR{}
}

// loanInterestL is where Load methods for each relationship are stored.
type loanInterestL struct{}

var (
	loanInterestColumns               = []string{"loan_interest_id", "loan_id", "interest_rate", "start_date", "end_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	loanInterestColumnsWithoutDefault = []string{"loan_id", "interest_rate", "start_date", "end_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	loanInterestColumnsWithDefault    = []string{"loan_interest_id"}
	loanInterestPrimaryKeyColumns     = []string{"loan_interest_id"}
)

type (
	// LoanInterestSlice is an alias for a slice of pointers to LoanInterest.
	// This should generally be used opposed to []LoanInterest.
	LoanInterestSlice []*LoanInterest
	// LoanInterestHook is the signature for custom LoanInterest hook methods
	LoanInterestHook func(context.Context, boil.ContextExecutor, *LoanInterest) error

	loanInterestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loanInterestType                 = reflect.TypeOf(&LoanInterest{})
	loanInterestMapping              = queries.MakeStructMapping(loanInterestType)
	loanInterestPrimaryKeyMapping, _ = queries.BindMapping(loanInterestType, loanInterestMapping, loanInterestPrimaryKeyColumns)
	loanInterestInsertCacheMut       sync.RWMutex
	loanInterestInsertCache          = make(map[string]insertCache)
	loanInterestUpdateCacheMut       sync.RWMutex
	loanInterestUpdateCache          = make(map[string]updateCache)
	loanInterestUpsertCacheMut       sync.RWMutex
	loanInterestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loanInterestBeforeInsertHooks []LoanInterestHook
var loanInterestBeforeUpdateHooks []LoanInterestHook
var loanInterestBeforeDeleteHooks []LoanInterestHook
var loanInterestBeforeUpsertHooks []LoanInterestHook

var loanInterestAfterInsertHooks []LoanInterestHook
var loanInterestAfterSelectHooks []LoanInterestHook
var loanInterestAfterUpdateHooks []LoanInterestHook
var loanInterestAfterDeleteHooks []LoanInterestHook
var loanInterestAfterUpsertHooks []LoanInterestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoanInterest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoanInterest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoanInterest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoanInterest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoanInterest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoanInterest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoanInterest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoanInterest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoanInterest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanInterestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoanInterestHook registers your hook function for all future operations.
func AddLoanInterestHook(hookPoint boil.HookPoint, loanInterestHook LoanInterestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		loanInterestBeforeInsertHooks = append(loanInterestBeforeInsertHooks, loanInterestHook)
	case boil.BeforeUpdateHook:
		loanInterestBeforeUpdateHooks = append(loanInterestBeforeUpdateHooks, loanInterestHook)
	case boil.BeforeDeleteHook:
		loanInterestBeforeDeleteHooks = append(loanInterestBeforeDeleteHooks, loanInterestHook)
	case boil.BeforeUpsertHook:
		loanInterestBeforeUpsertHooks = append(loanInterestBeforeUpsertHooks, loanInterestHook)
	case boil.AfterInsertHook:
		loanInterestAfterInsertHooks = append(loanInterestAfterInsertHooks, loanInterestHook)
	case boil.AfterSelectHook:
		loanInterestAfterSelectHooks = append(loanInterestAfterSelectHooks, loanInterestHook)
	case boil.AfterUpdateHook:
		loanInterestAfterUpdateHooks = append(loanInterestAfterUpdateHooks, loanInterestHook)
	case boil.AfterDeleteHook:
		loanInterestAfterDeleteHooks = append(loanInterestAfterDeleteHooks, loanInterestHook)
	case boil.AfterUpsertHook:
		loanInterestAfterUpsertHooks = append(loanInterestAfterUpsertHooks, loanInterestHook)
	}
}

// One returns a single loanInterest record from the query.
func (q loanInterestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoanInterest, error) {
	o := &LoanInterest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for LoanInterest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoanInterest records from the query.
func (q loanInterestQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoanInterestSlice, error) {
	var o []*LoanInterest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoanInterest slice")
	}

	if len(loanInterestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoanInterest records in the query.
func (q loanInterestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count LoanInterest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loanInterestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if LoanInterest exists")
	}

	return count > 0, nil
}

// Loan pointed to by the foreign key.
func (o *LoanInterest) Loan(mods ...qm.QueryMod) loanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("loan_id=?", o.LoanID),
	}

	queryMods = append(queryMods, mods...)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	return query
}

// LoadLoan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loanInterestL) LoadLoan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLoanInterest interface{}, mods queries.Applicator) error {
	var slice []*LoanInterest
	var object *LoanInterest

	if singular {
		object = maybeLoanInterest.(*LoanInterest)
	} else {
		slice = *maybeLoanInterest.(*[]*LoanInterest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loanInterestR{}
		}
		args = append(args, object.LoanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loanInterestR{}
			}

			for _, a := range args {
				if a == obj.LoanID {
					continue Outer
				}
			}

			args = append(args, obj.LoanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`loan_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(loanInterestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Loan = foreign
		if foreign.R == nil {
			foreign.R = &loanR{}
		}
		foreign.R.LoanLoanInterests = append(foreign.R.LoanLoanInterests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoanID == foreign.LoanID {
				local.R.Loan = foreign
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.LoanLoanInterests = append(foreign.R.LoanLoanInterests, local)
				break
			}
		}
	}

	return nil
}

// SetLoan of the loanInterest to the related item.
// Sets o.R.Loan to related.
// Adds o to related.R.LoanLoanInterests.
func (o *LoanInterest) SetLoan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Loan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `LoanInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"loan_id"}),
		strmangle.WhereClause("`", "`", 0, loanInterestPrimaryKeyColumns),
	)
	values := []interface{}{related.LoanID, o.LoanInterestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoanID = related.LoanID
	if o.R == nil {
		o.R = &loanInterestR{
			Loan: related,
		}
	} else {
		o.R.Loan = related
	}

	if related.R == nil {
		related.R = &loanR{
			LoanLoanInterests: LoanInterestSlice{o},
		}
	} else {
		related.R.LoanLoanInterests = append(related.R.LoanLoanInterests, o)
	}

	return nil
}

// LoanInterests retrieves all the records using an executor.
func LoanInterests(mods ...qm.QueryMod) loanInterestQuery {
	mods = append(mods, qm.From("`LoanInterest`"))
	return loanInterestQuery{NewQuery(mods...)}
}

// FindLoanInterest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoanInterest(ctx context.Context, exec boil.ContextExecutor, loanInterestID int, selectCols ...string) (*LoanInterest, error) {
	loanInterestObj := &LoanInterest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `LoanInterest` where `loan_interest_id`=?", sel,
	)

	q := queries.Raw(query, loanInterestID)

	err := q.Bind(ctx, exec, loanInterestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from LoanInterest")
	}

	return loanInterestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoanInterest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LoanInterest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loanInterestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loanInterestInsertCacheMut.RLock()
	cache, cached := loanInterestInsertCache[key]
	loanInterestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loanInterestColumns,
			loanInterestColumnsWithDefault,
			loanInterestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loanInterestType, loanInterestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loanInterestType, loanInterestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `LoanInterest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `LoanInterest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `LoanInterest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, loanInterestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into LoanInterest")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LoanInterestID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loanInterestMapping["LoanInterestID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.LoanInterestID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LoanInterest")
	}

CacheNoHooks:
	if !cached {
		loanInterestInsertCacheMut.Lock()
		loanInterestInsertCache[key] = cache
		loanInterestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoanInterest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoanInterest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loanInterestUpdateCacheMut.RLock()
	cache, cached := loanInterestUpdateCache[key]
	loanInterestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loanInterestColumns,
			loanInterestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update LoanInterest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `LoanInterest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, loanInterestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loanInterestType, loanInterestMapping, append(wl, loanInterestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update LoanInterest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for LoanInterest")
	}

	if !cached {
		loanInterestUpdateCacheMut.Lock()
		loanInterestUpdateCache[key] = cache
		loanInterestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loanInterestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for LoanInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for LoanInterest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoanInterestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `LoanInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanInterestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loanInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loanInterest")
	}
	return rowsAff, nil
}

var mySQLLoanInterestUniqueColumns = []string{
	"loan_interest_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoanInterest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LoanInterest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loanInterestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLoanInterestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loanInterestUpsertCacheMut.RLock()
	cache, cached := loanInterestUpsertCache[key]
	loanInterestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loanInterestColumns,
			loanInterestColumnsWithDefault,
			loanInterestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			loanInterestColumns,
			loanInterestPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert LoanInterest, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "LoanInterest", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `LoanInterest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(loanInterestType, loanInterestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loanInterestType, loanInterestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for LoanInterest")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LoanInterestID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loanInterestMapping["loan_interest_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(loanInterestType, loanInterestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for LoanInterest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LoanInterest")
	}

CacheNoHooks:
	if !cached {
		loanInterestUpsertCacheMut.Lock()
		loanInterestUpsertCache[key] = cache
		loanInterestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LoanInterest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoanInterest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoanInterest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loanInterestPrimaryKeyMapping)
	sql := "DELETE FROM `LoanInterest` WHERE `loan_interest_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from LoanInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for LoanInterest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loanInterestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loanInterestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from LoanInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LoanInterest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoanInterestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoanInterest slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(loanInterestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `LoanInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanInterestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loanInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LoanInterest")
	}

	if len(loanInterestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoanInterest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoanInterest(ctx, exec, o.LoanInterestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoanInterestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoanInterestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `LoanInterest`.* FROM `LoanInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanInterestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoanInterestSlice")
	}

	*o = slice

	return nil
}

// LoanInterestExists checks if the LoanInterest row exists.
func LoanInterestExists(ctx context.Context, exec boil.ContextExecutor, loanInterestID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `LoanInterest` where `loan_interest_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, loanInterestID)
	}

	row := exec.QueryRowContext(ctx, sql, loanInterestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if LoanInterest exists")
	}

	return exists, nil
}
