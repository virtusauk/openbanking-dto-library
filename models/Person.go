// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Person is an object representing the database table.
type Person struct {
	PartyID                    int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BankID                     null.Int    `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	PartyNumber                null.String `boil:"party_number" json:"party_number,omitempty" toml:"party_number" yaml:"party_number,omitempty"`
	PersonTypeID               int         `boil:"person_type_id" json:"person_type_id" toml:"person_type_id" yaml:"person_type_id"`
	SSN                        string      `boil:"ssn" json:"ssn" toml:"ssn" yaml:"ssn"`
	Sex                        string      `boil:"sex" json:"sex" toml:"sex" yaml:"sex"`
	Forenames                  null.String `boil:"forenames" json:"forenames,omitempty" toml:"forenames" yaml:"forenames,omitempty"`
	Middlename                 null.String `boil:"middlename" json:"middlename,omitempty" toml:"middlename" yaml:"middlename,omitempty"`
	Lastname                   string      `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Preferred                  null.String `boil:"preferred" json:"preferred,omitempty" toml:"preferred" yaml:"preferred,omitempty"`
	Title                      null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Dob                        null.Time   `boil:"dob" json:"dob,omitempty" toml:"dob" yaml:"dob,omitempty"`
	MaritalStatus              null.String `boil:"marital_status" json:"marital_status,omitempty" toml:"marital_status" yaml:"marital_status,omitempty"`
	TaxRefNo                   null.String `boil:"tax_ref_no" json:"tax_ref_no,omitempty" toml:"tax_ref_no" yaml:"tax_ref_no,omitempty"`
	Deceased                   null.String `boil:"deceased" json:"deceased,omitempty" toml:"deceased" yaml:"deceased,omitempty"`
	DateOfDeath                null.Time   `boil:"date_of_death" json:"date_of_death,omitempty" toml:"date_of_death" yaml:"date_of_death,omitempty"`
	EmploymentStatus           null.String `boil:"employment_status" json:"employment_status,omitempty" toml:"employment_status" yaml:"employment_status,omitempty"`
	CoupleID                   null.Int    `boil:"couple_id" json:"couple_id,omitempty" toml:"couple_id" yaml:"couple_id,omitempty"`
	Active                     null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	Notes                      null.String `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	LoanCycle                  null.Int    `boil:"loan_cycle" json:"loan_cycle,omitempty" toml:"loan_cycle" yaml:"loan_cycle,omitempty"`
	GroupLoanCycle             null.Int    `boil:"group_loan_cycle" json:"group_loan_cycle,omitempty" toml:"group_loan_cycle" yaml:"group_loan_cycle,omitempty"`
	State                      null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	ApprovedDate               null.Time   `boil:"approved_date" json:"approved_date,omitempty" toml:"approved_date" yaml:"approved_date,omitempty"`
	ActivationDate             null.Time   `boil:"activation_date" json:"activation_date,omitempty" toml:"activation_date" yaml:"activation_date,omitempty"`
	ClosedDate                 null.Time   `boil:"closed_date" json:"closed_date,omitempty" toml:"closed_date" yaml:"closed_date,omitempty"`
	BirthPlace                 string      `boil:"birth_place" json:"birth_place" toml:"birth_place" yaml:"birth_place"`
	MotherMaidenName           string      `boil:"mother_maiden_name" json:"mother_maiden_name" toml:"mother_maiden_name" yaml:"mother_maiden_name"`
	SpouseName                 string      `boil:"spouse_name" json:"spouse_name" toml:"spouse_name" yaml:"spouse_name"`
	MilitaryRank               string      `boil:"military_rank" json:"military_rank" toml:"military_rank" yaml:"military_rank"`
	Dependents                 string      `boil:"dependents" json:"dependents" toml:"dependents" yaml:"dependents"`
	Nationality                null.String `boil:"nationality" json:"nationality,omitempty" toml:"nationality" yaml:"nationality,omitempty"`
	EducationLevel             string      `boil:"education_level" json:"education_level" toml:"education_level" yaml:"education_level"`
	HeadOfHouseHoldInd         string      `boil:"head_of_house_hold_ind" json:"head_of_house_hold_ind" toml:"head_of_house_hold_ind" yaml:"head_of_house_hold_ind"`
	HomeOwnership              null.String `boil:"home_ownership" json:"home_ownership,omitempty" toml:"home_ownership" yaml:"home_ownership,omitempty"`
	CreditRisk                 null.Int    `boil:"credit_risk" json:"credit_risk,omitempty" toml:"credit_risk" yaml:"credit_risk,omitempty"`
	CreditReviewTimeFrame      null.Int    `boil:"credit_review_time_frame" json:"credit_review_time_frame,omitempty" toml:"credit_review_time_frame" yaml:"credit_review_time_frame,omitempty"`
	Servicelevel               null.String `boil:"servicelevel" json:"servicelevel,omitempty" toml:"servicelevel" yaml:"servicelevel,omitempty"`
	CurrentEmploymentStartDate time.Time   `boil:"current_employment_start_date" json:"current_employment_start_date" toml:"current_employment_start_date" yaml:"current_employment_start_date"`
	JobTitle                   string      `boil:"job_title" json:"job_title" toml:"job_title" yaml:"job_title"`
	Job                        string      `boil:"job" json:"job" toml:"job" yaml:"job"`
	OriginatingBranchID        int         `boil:"originating_branch_id" json:"originating_branch_id" toml:"originating_branch_id" yaml:"originating_branch_id"`
	PreferredBranchID          int         `boil:"preferred_branch_id" json:"preferred_branch_id" toml:"preferred_branch_id" yaml:"preferred_branch_id"`
	ResponsibleBranchID        int         `boil:"responsible_branch_id" json:"responsible_branch_id" toml:"responsible_branch_id" yaml:"responsible_branch_id"`
	ResidenceCountry           null.String `boil:"residence_country" json:"residence_country,omitempty" toml:"residence_country" yaml:"residence_country,omitempty"`
	TaxResidenceCountry        null.String `boil:"tax_residence_country" json:"tax_residence_country,omitempty" toml:"tax_residence_country" yaml:"tax_residence_country,omitempty"`
	TaxExempt                  null.String `boil:"tax_exempt" json:"tax_exempt,omitempty" toml:"tax_exempt" yaml:"tax_exempt,omitempty"`
	MakerDate                  time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                    string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                  null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                 null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate               null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *personR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonColumns = struct {
	PartyID                    string
	BankID                     string
	PartyNumber                string
	PersonTypeID               string
	SSN                        string
	Sex                        string
	Forenames                  string
	Middlename                 string
	Lastname                   string
	Preferred                  string
	Title                      string
	Dob                        string
	MaritalStatus              string
	TaxRefNo                   string
	Deceased                   string
	DateOfDeath                string
	EmploymentStatus           string
	CoupleID                   string
	Active                     string
	Notes                      string
	LoanCycle                  string
	GroupLoanCycle             string
	State                      string
	ApprovedDate               string
	ActivationDate             string
	ClosedDate                 string
	BirthPlace                 string
	MotherMaidenName           string
	SpouseName                 string
	MilitaryRank               string
	Dependents                 string
	Nationality                string
	EducationLevel             string
	HeadOfHouseHoldInd         string
	HomeOwnership              string
	CreditRisk                 string
	CreditReviewTimeFrame      string
	Servicelevel               string
	CurrentEmploymentStartDate string
	JobTitle                   string
	Job                        string
	OriginatingBranchID        string
	PreferredBranchID          string
	ResponsibleBranchID        string
	ResidenceCountry           string
	TaxResidenceCountry        string
	TaxExempt                  string
	MakerDate                  string
	CheckerDate                string
	MakerID                    string
	CheckerID                  string
	ModifiedBy                 string
	ModifiedDate               string
}{
	PartyID:                    "party_id",
	BankID:                     "bank_id",
	PartyNumber:                "party_number",
	PersonTypeID:               "person_type_id",
	SSN:                        "ssn",
	Sex:                        "sex",
	Forenames:                  "forenames",
	Middlename:                 "middlename",
	Lastname:                   "lastname",
	Preferred:                  "preferred",
	Title:                      "title",
	Dob:                        "dob",
	MaritalStatus:              "marital_status",
	TaxRefNo:                   "tax_ref_no",
	Deceased:                   "deceased",
	DateOfDeath:                "date_of_death",
	EmploymentStatus:           "employment_status",
	CoupleID:                   "couple_id",
	Active:                     "active",
	Notes:                      "notes",
	LoanCycle:                  "loan_cycle",
	GroupLoanCycle:             "group_loan_cycle",
	State:                      "state",
	ApprovedDate:               "approved_date",
	ActivationDate:             "activation_date",
	ClosedDate:                 "closed_date",
	BirthPlace:                 "birth_place",
	MotherMaidenName:           "mother_maiden_name",
	SpouseName:                 "spouse_name",
	MilitaryRank:               "military_rank",
	Dependents:                 "dependents",
	Nationality:                "nationality",
	EducationLevel:             "education_level",
	HeadOfHouseHoldInd:         "head_of_house_hold_ind",
	HomeOwnership:              "home_ownership",
	CreditRisk:                 "credit_risk",
	CreditReviewTimeFrame:      "credit_review_time_frame",
	Servicelevel:               "servicelevel",
	CurrentEmploymentStartDate: "current_employment_start_date",
	JobTitle:                   "job_title",
	Job:                        "job",
	OriginatingBranchID:        "originating_branch_id",
	PreferredBranchID:          "preferred_branch_id",
	ResponsibleBranchID:        "responsible_branch_id",
	ResidenceCountry:           "residence_country",
	TaxResidenceCountry:        "tax_residence_country",
	TaxExempt:                  "tax_exempt",
	MakerDate:                  "maker_date",
	CheckerDate:                "checker_date",
	MakerID:                    "maker_id",
	CheckerID:                  "checker_id",
	ModifiedBy:                 "modified_by",
	ModifiedDate:               "modified_date",
}

// Generated where

var PersonWhere = struct {
	PartyID                    whereHelperint
	BankID                     whereHelpernull_Int
	PartyNumber                whereHelpernull_String
	PersonTypeID               whereHelperint
	SSN                        whereHelperstring
	Sex                        whereHelperstring
	Forenames                  whereHelpernull_String
	Middlename                 whereHelpernull_String
	Lastname                   whereHelperstring
	Preferred                  whereHelpernull_String
	Title                      whereHelpernull_String
	Dob                        whereHelpernull_Time
	MaritalStatus              whereHelpernull_String
	TaxRefNo                   whereHelpernull_String
	Deceased                   whereHelpernull_String
	DateOfDeath                whereHelpernull_Time
	EmploymentStatus           whereHelpernull_String
	CoupleID                   whereHelpernull_Int
	Active                     whereHelpernull_String
	Notes                      whereHelpernull_String
	LoanCycle                  whereHelpernull_Int
	GroupLoanCycle             whereHelpernull_Int
	State                      whereHelpernull_String
	ApprovedDate               whereHelpernull_Time
	ActivationDate             whereHelpernull_Time
	ClosedDate                 whereHelpernull_Time
	BirthPlace                 whereHelperstring
	MotherMaidenName           whereHelperstring
	SpouseName                 whereHelperstring
	MilitaryRank               whereHelperstring
	Dependents                 whereHelperstring
	Nationality                whereHelpernull_String
	EducationLevel             whereHelperstring
	HeadOfHouseHoldInd         whereHelperstring
	HomeOwnership              whereHelpernull_String
	CreditRisk                 whereHelpernull_Int
	CreditReviewTimeFrame      whereHelpernull_Int
	Servicelevel               whereHelpernull_String
	CurrentEmploymentStartDate whereHelpertime_Time
	JobTitle                   whereHelperstring
	Job                        whereHelperstring
	OriginatingBranchID        whereHelperint
	PreferredBranchID          whereHelperint
	ResponsibleBranchID        whereHelperint
	ResidenceCountry           whereHelpernull_String
	TaxResidenceCountry        whereHelpernull_String
	TaxExempt                  whereHelpernull_String
	MakerDate                  whereHelpertime_Time
	CheckerDate                whereHelpernull_Time
	MakerID                    whereHelperstring
	CheckerID                  whereHelpernull_String
	ModifiedBy                 whereHelpernull_String
	ModifiedDate               whereHelpernull_Time
}{
	PartyID:                    whereHelperint{field: `party_id`},
	BankID:                     whereHelpernull_Int{field: `bank_id`},
	PartyNumber:                whereHelpernull_String{field: `party_number`},
	PersonTypeID:               whereHelperint{field: `person_type_id`},
	SSN:                        whereHelperstring{field: `ssn`},
	Sex:                        whereHelperstring{field: `sex`},
	Forenames:                  whereHelpernull_String{field: `forenames`},
	Middlename:                 whereHelpernull_String{field: `middlename`},
	Lastname:                   whereHelperstring{field: `lastname`},
	Preferred:                  whereHelpernull_String{field: `preferred`},
	Title:                      whereHelpernull_String{field: `title`},
	Dob:                        whereHelpernull_Time{field: `dob`},
	MaritalStatus:              whereHelpernull_String{field: `marital_status`},
	TaxRefNo:                   whereHelpernull_String{field: `tax_ref_no`},
	Deceased:                   whereHelpernull_String{field: `deceased`},
	DateOfDeath:                whereHelpernull_Time{field: `date_of_death`},
	EmploymentStatus:           whereHelpernull_String{field: `employment_status`},
	CoupleID:                   whereHelpernull_Int{field: `couple_id`},
	Active:                     whereHelpernull_String{field: `active`},
	Notes:                      whereHelpernull_String{field: `notes`},
	LoanCycle:                  whereHelpernull_Int{field: `loan_cycle`},
	GroupLoanCycle:             whereHelpernull_Int{field: `group_loan_cycle`},
	State:                      whereHelpernull_String{field: `state`},
	ApprovedDate:               whereHelpernull_Time{field: `approved_date`},
	ActivationDate:             whereHelpernull_Time{field: `activation_date`},
	ClosedDate:                 whereHelpernull_Time{field: `closed_date`},
	BirthPlace:                 whereHelperstring{field: `birth_place`},
	MotherMaidenName:           whereHelperstring{field: `mother_maiden_name`},
	SpouseName:                 whereHelperstring{field: `spouse_name`},
	MilitaryRank:               whereHelperstring{field: `military_rank`},
	Dependents:                 whereHelperstring{field: `dependents`},
	Nationality:                whereHelpernull_String{field: `nationality`},
	EducationLevel:             whereHelperstring{field: `education_level`},
	HeadOfHouseHoldInd:         whereHelperstring{field: `head_of_house_hold_ind`},
	HomeOwnership:              whereHelpernull_String{field: `home_ownership`},
	CreditRisk:                 whereHelpernull_Int{field: `credit_risk`},
	CreditReviewTimeFrame:      whereHelpernull_Int{field: `credit_review_time_frame`},
	Servicelevel:               whereHelpernull_String{field: `servicelevel`},
	CurrentEmploymentStartDate: whereHelpertime_Time{field: `current_employment_start_date`},
	JobTitle:                   whereHelperstring{field: `job_title`},
	Job:                        whereHelperstring{field: `job`},
	OriginatingBranchID:        whereHelperint{field: `originating_branch_id`},
	PreferredBranchID:          whereHelperint{field: `preferred_branch_id`},
	ResponsibleBranchID:        whereHelperint{field: `responsible_branch_id`},
	ResidenceCountry:           whereHelpernull_String{field: `residence_country`},
	TaxResidenceCountry:        whereHelpernull_String{field: `tax_residence_country`},
	TaxExempt:                  whereHelpernull_String{field: `tax_exempt`},
	MakerDate:                  whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                whereHelpernull_Time{field: `checker_date`},
	MakerID:                    whereHelperstring{field: `maker_id`},
	CheckerID:                  whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                 whereHelpernull_String{field: `modified_by`},
	ModifiedDate:               whereHelpernull_Time{field: `modified_date`},
}

// PersonRels is where relationship names are stored.
var PersonRels = struct {
	Bank                                string
	Party                               string
	PersonType                          string
	IndividualPartyOrganizationContacts string
}{
	Bank:                                "Bank",
	Party:                               "Party",
	PersonType:                          "PersonType",
	IndividualPartyOrganizationContacts: "IndividualPartyOrganizationContacts",
}

// personR is where relationships are stored.
type personR struct {
	Bank                                *Bank
	Party                               *Party
	PersonType                          *PersonType
	IndividualPartyOrganizationContacts OrganizationContactSlice
}

// NewStruct creates a new relationship struct
func (*personR) NewStruct() *personR {
	return &personR{}
}

// personL is where Load methods for each relationship are stored.
type personL struct{}

var (
	personColumns               = []string{"party_id", "bank_id", "party_number", "person_type_id", "ssn", "sex", "forenames", "middlename", "lastname", "preferred", "title", "dob", "marital_status", "tax_ref_no", "deceased", "date_of_death", "employment_status", "couple_id", "active", "notes", "loan_cycle", "group_loan_cycle", "state", "approved_date", "activation_date", "closed_date", "birth_place", "mother_maiden_name", "spouse_name", "military_rank", "dependents", "nationality", "education_level", "head_of_house_hold_ind", "home_ownership", "credit_risk", "credit_review_time_frame", "servicelevel", "current_employment_start_date", "job_title", "job", "originating_branch_id", "preferred_branch_id", "responsible_branch_id", "residence_country", "tax_residence_country", "tax_exempt", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	personColumnsWithoutDefault = []string{"party_id", "bank_id", "party_number", "person_type_id", "ssn", "sex", "forenames", "middlename", "lastname", "preferred", "title", "dob", "marital_status", "tax_ref_no", "deceased", "date_of_death", "employment_status", "couple_id", "active", "notes", "loan_cycle", "group_loan_cycle", "state", "approved_date", "activation_date", "closed_date", "birth_place", "mother_maiden_name", "spouse_name", "military_rank", "dependents", "nationality", "education_level", "head_of_house_hold_ind", "home_ownership", "credit_risk", "credit_review_time_frame", "servicelevel", "current_employment_start_date", "job_title", "job", "originating_branch_id", "preferred_branch_id", "responsible_branch_id", "residence_country", "tax_residence_country", "tax_exempt", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	personColumnsWithDefault    = []string{}
	personPrimaryKeyColumns     = []string{"party_id"}
)

type (
	// PersonSlice is an alias for a slice of pointers to Person.
	// This should generally be used opposed to []Person.
	PersonSlice []*Person
	// PersonHook is the signature for custom Person hook methods
	PersonHook func(context.Context, boil.ContextExecutor, *Person) error

	personQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personType                 = reflect.TypeOf(&Person{})
	personMapping              = queries.MakeStructMapping(personType)
	personPrimaryKeyMapping, _ = queries.BindMapping(personType, personMapping, personPrimaryKeyColumns)
	personInsertCacheMut       sync.RWMutex
	personInsertCache          = make(map[string]insertCache)
	personUpdateCacheMut       sync.RWMutex
	personUpdateCache          = make(map[string]updateCache)
	personUpsertCacheMut       sync.RWMutex
	personUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personBeforeInsertHooks []PersonHook
var personBeforeUpdateHooks []PersonHook
var personBeforeDeleteHooks []PersonHook
var personBeforeUpsertHooks []PersonHook

var personAfterInsertHooks []PersonHook
var personAfterSelectHooks []PersonHook
var personAfterUpdateHooks []PersonHook
var personAfterDeleteHooks []PersonHook
var personAfterUpsertHooks []PersonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Person) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Person) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Person) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Person) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Person) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Person) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Person) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Person) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Person) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonHook registers your hook function for all future operations.
func AddPersonHook(hookPoint boil.HookPoint, personHook PersonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		personBeforeInsertHooks = append(personBeforeInsertHooks, personHook)
	case boil.BeforeUpdateHook:
		personBeforeUpdateHooks = append(personBeforeUpdateHooks, personHook)
	case boil.BeforeDeleteHook:
		personBeforeDeleteHooks = append(personBeforeDeleteHooks, personHook)
	case boil.BeforeUpsertHook:
		personBeforeUpsertHooks = append(personBeforeUpsertHooks, personHook)
	case boil.AfterInsertHook:
		personAfterInsertHooks = append(personAfterInsertHooks, personHook)
	case boil.AfterSelectHook:
		personAfterSelectHooks = append(personAfterSelectHooks, personHook)
	case boil.AfterUpdateHook:
		personAfterUpdateHooks = append(personAfterUpdateHooks, personHook)
	case boil.AfterDeleteHook:
		personAfterDeleteHooks = append(personAfterDeleteHooks, personHook)
	case boil.AfterUpsertHook:
		personAfterUpsertHooks = append(personAfterUpsertHooks, personHook)
	}
}

// One returns a single person record from the query.
func (q personQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Person, error) {
	o := &Person{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Person")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Person records from the query.
func (q personQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSlice, error) {
	var o []*Person

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Person slice")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Person records in the query.
func (q personQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Person rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Person exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *Person) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Party pointed to by the foreign key.
func (o *Person) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// PersonType pointed to by the foreign key.
func (o *Person) PersonType(mods ...qm.QueryMod) personTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("person_type_id=?", o.PersonTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := PersonTypes(queryMods...)
	queries.SetFrom(query.Query, "`PersonType`")

	return query
}

// IndividualPartyOrganizationContacts retrieves all the OrganizationContact's OrganizationContacts with an executor via individual_party_id column.
func (o *Person) IndividualPartyOrganizationContacts(mods ...qm.QueryMod) organizationContactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`OrganizationContacts`.`individual_party_id`=?", o.PartyID),
	)

	query := OrganizationContacts(queryMods...)
	queries.SetFrom(query.Query, "`OrganizationContacts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`OrganizationContacts`.*"})
	}

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		if !queries.IsNil(object.BankID) {
			args = append(args, object.BankID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BankID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BankID) {
				args = append(args, obj.BankID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankPersons = append(foreign.R.BankPersons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BankID, foreign.BankID) {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankPersons = append(foreign.R.BankPersons, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyPerson = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyPerson = local
				break
			}
		}
	}

	return nil
}

// LoadPersonType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (personL) LoadPersonType(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PersonTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.PersonTypeID {
					continue Outer
				}
			}

			args = append(args, obj.PersonTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PersonType`), qm.WhereIn(`person_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PersonType")
	}

	var resultSlice []*PersonType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PersonType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PersonType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PersonType")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PersonType = foreign
		if foreign.R == nil {
			foreign.R = &personTypeR{}
		}
		foreign.R.PersonTypePersons = append(foreign.R.PersonTypePersons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonTypeID == foreign.PersonTypeID {
				local.R.PersonType = foreign
				if foreign.R == nil {
					foreign.R = &personTypeR{}
				}
				foreign.R.PersonTypePersons = append(foreign.R.PersonTypePersons, local)
				break
			}
		}
	}

	return nil
}

// LoadIndividualPartyOrganizationContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadIndividualPartyOrganizationContacts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PartyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`OrganizationContacts`), qm.WhereIn(`individual_party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationContacts")
	}

	var resultSlice []*OrganizationContact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationContacts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on OrganizationContacts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for OrganizationContacts")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IndividualPartyOrganizationContacts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationContactR{}
			}
			foreign.R.IndividualParty = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PartyID == foreign.IndividualPartyID {
				local.R.IndividualPartyOrganizationContacts = append(local.R.IndividualPartyOrganizationContacts, foreign)
				if foreign.R == nil {
					foreign.R = &organizationContactR{}
				}
				foreign.R.IndividualParty = local
				break
			}
		}
	}

	return nil
}

// SetBank of the person to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankPersons.
func (o *Person) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Person` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BankID, related.BankID)
	if o.R == nil {
		o.R = &personR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankPersons: PersonSlice{o},
		}
	} else {
		related.R.BankPersons = append(related.R.BankPersons, o)
	}

	return nil
}

// RemoveBank relationship.
// Sets o.R.Bank to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Person) RemoveBank(ctx context.Context, exec boil.ContextExecutor, related *Bank) error {
	var err error

	queries.SetScanner(&o.BankID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bank_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Bank = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BankPersons {
		if queries.Equal(o.BankID, ri.BankID) {
			continue
		}

		ln := len(related.R.BankPersons)
		if ln > 1 && i < ln-1 {
			related.R.BankPersons[i] = related.R.BankPersons[ln-1]
		}
		related.R.BankPersons = related.R.BankPersons[:ln-1]
		break
	}
	return nil
}

// SetParty of the person to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyPerson.
func (o *Person) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Person` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &personR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyPerson: o,
		}
	} else {
		related.R.PartyPerson = o
	}

	return nil
}

// SetPersonType of the person to the related item.
// Sets o.R.PersonType to related.
// Adds o to related.R.PersonTypePersons.
func (o *Person) SetPersonType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PersonType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Person` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"person_type_id"}),
		strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns),
	)
	values := []interface{}{related.PersonTypeID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonTypeID = related.PersonTypeID
	if o.R == nil {
		o.R = &personR{
			PersonType: related,
		}
	} else {
		o.R.PersonType = related
	}

	if related.R == nil {
		related.R = &personTypeR{
			PersonTypePersons: PersonSlice{o},
		}
	} else {
		related.R.PersonTypePersons = append(related.R.PersonTypePersons, o)
	}

	return nil
}

// AddIndividualPartyOrganizationContacts adds the given related objects to the existing relationships
// of the Person, optionally inserting them as new records.
// Appends related to o.R.IndividualPartyOrganizationContacts.
// Sets related.R.IndividualParty appropriately.
func (o *Person) AddIndividualPartyOrganizationContacts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationContact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IndividualPartyID = o.PartyID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `OrganizationContacts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"individual_party_id"}),
				strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
			)
			values := []interface{}{o.PartyID, rel.OrganizationContactID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IndividualPartyID = o.PartyID
		}
	}

	if o.R == nil {
		o.R = &personR{
			IndividualPartyOrganizationContacts: related,
		}
	} else {
		o.R.IndividualPartyOrganizationContacts = append(o.R.IndividualPartyOrganizationContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationContactR{
				IndividualParty: o,
			}
		} else {
			rel.R.IndividualParty = o
		}
	}
	return nil
}

// Persons retrieves all the records using an executor.
func Persons(mods ...qm.QueryMod) personQuery {
	mods = append(mods, qm.From("`Person`"))
	return personQuery{NewQuery(mods...)}
}

// FindPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPerson(ctx context.Context, exec boil.ContextExecutor, partyID int, selectCols ...string) (*Person, error) {
	personObj := &Person{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Person` where `party_id`=?", sel,
	)

	q := queries.Raw(query, partyID)

	err := q.Bind(ctx, exec, personObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Person")
	}

	return personObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Person) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Person provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personInsertCacheMut.RLock()
	cache, cached := personInsertCache[key]
	personInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personType, personMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Person` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Person` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Person` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Person")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PartyID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Person")
	}

CacheNoHooks:
	if !cached {
		personInsertCacheMut.Lock()
		personInsertCache[key] = cache
		personInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Person.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Person) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personUpdateCacheMut.RLock()
	cache, cached := personUpdateCache[key]
	personUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personColumns,
			personPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Person, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Person` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personType, personMapping, append(wl, personPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Person row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Person")
	}

	if !cached {
		personUpdateCacheMut.Lock()
		personUpdateCache[key] = cache
		personUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Person")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Person` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all person")
	}
	return rowsAff, nil
}

var mySQLPersonUniqueColumns = []string{
	"party_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Person) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Person provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPersonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personUpsertCacheMut.RLock()
	cache, cached := personUpsertCache[key]
	personUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			personColumns,
			personPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Person, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Person", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Person` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personType, personMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Person")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(personType, personMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Person")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Person")
	}

CacheNoHooks:
	if !cached {
		personUpsertCacheMut.Lock()
		personUpsertCache[key] = cache
		personUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Person record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Person) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personPrimaryKeyMapping)
	sql := "DELETE FROM `Person` WHERE `party_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Person")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Person")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Person")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(personBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Person` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Person")
	}

	if len(personAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Person) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPerson(ctx, exec, o.PartyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Person`.* FROM `Person` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonSlice")
	}

	*o = slice

	return nil
}

// PersonExists checks if the Person row exists.
func PersonExists(ctx context.Context, exec boil.ContextExecutor, partyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Person` where `party_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, partyID)
	}

	row := exec.QueryRowContext(ctx, sql, partyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Person exists")
	}

	return exists, nil
}
