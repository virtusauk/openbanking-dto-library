// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentMessage is an object representing the database table.
type PaymentMessage struct {
	PaymentMessageID           int               `boil:"payment_message_id" json:"payment_message_id" toml:"payment_message_id" yaml:"payment_message_id"`
	PaymentID                  null.Int          `boil:"payment_id" json:"payment_id,omitempty" toml:"payment_id" yaml:"payment_id,omitempty"`
	CurrencyCode               null.String       `boil:"currency_code" json:"currency_code,omitempty" toml:"currency_code" yaml:"currency_code,omitempty"`
	Amount                     types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	TransferDate               null.Time         `boil:"transfer_date" json:"transfer_date,omitempty" toml:"transfer_date" yaml:"transfer_date,omitempty"`
	TransferType               null.String       `boil:"transfer_type" json:"transfer_type,omitempty" toml:"transfer_type" yaml:"transfer_type,omitempty"`
	RecipientID                null.Int          `boil:"recipient_id" json:"recipient_id,omitempty" toml:"recipient_id" yaml:"recipient_id,omitempty"`
	MessageToRecipient1        null.String       `boil:"message_to_recipient_1" json:"message_to_recipient_1,omitempty" toml:"message_to_recipient_1" yaml:"message_to_recipient_1,omitempty"`
	MessageToRecipient2        null.String       `boil:"message_to_recipient_2" json:"message_to_recipient_2,omitempty" toml:"message_to_recipient_2" yaml:"message_to_recipient_2,omitempty"`
	MessageType                null.String       `boil:"message_type" json:"message_type,omitempty" toml:"message_type" yaml:"message_type,omitempty"`
	PaymentInformationID       null.String       `boil:"payment_information_id" json:"payment_information_id,omitempty" toml:"payment_information_id" yaml:"payment_information_id,omitempty"`
	PaymentReference           null.String       `boil:"payment_reference" json:"payment_reference,omitempty" toml:"payment_reference" yaml:"payment_reference,omitempty"`
	PaymentType                null.String       `boil:"payment_type" json:"payment_type,omitempty" toml:"payment_type" yaml:"payment_type,omitempty"`
	RecipientAccNo             null.String       `boil:"recipient_acc_no" json:"recipient_acc_no,omitempty" toml:"recipient_acc_no" yaml:"recipient_acc_no,omitempty"`
	RecipientAcknowledgement   null.String       `boil:"recipient_acknowledgement" json:"recipient_acknowledgement,omitempty" toml:"recipient_acknowledgement" yaml:"recipient_acknowledgement,omitempty"`
	RecipientAddress           null.String       `boil:"recipient_address" json:"recipient_address,omitempty" toml:"recipient_address" yaml:"recipient_address,omitempty"`
	RecipientBankAccNo         null.String       `boil:"recipient_bank_acc_no" json:"recipient_bank_acc_no,omitempty" toml:"recipient_bank_acc_no" yaml:"recipient_bank_acc_no,omitempty"`
	RecipientBankAddress       null.String       `boil:"recipient_bank_address" json:"recipient_bank_address,omitempty" toml:"recipient_bank_address" yaml:"recipient_bank_address,omitempty"`
	RecipientBankBic           null.String       `boil:"recipient_bank_bic" json:"recipient_bank_bic,omitempty" toml:"recipient_bank_bic" yaml:"recipient_bank_bic,omitempty"`
	RecipientBankCity          null.String       `boil:"recipient_bank_city" json:"recipient_bank_city,omitempty" toml:"recipient_bank_city" yaml:"recipient_bank_city,omitempty"`
	RecipientBankClearingCode  null.String       `boil:"recipient_bank_clearing_code" json:"recipient_bank_clearing_code,omitempty" toml:"recipient_bank_clearing_code" yaml:"recipient_bank_clearing_code,omitempty"`
	RecipientBankClearingSTD   null.String       `boil:"recipient_bank_clearing_std" json:"recipient_bank_clearing_std,omitempty" toml:"recipient_bank_clearing_std" yaml:"recipient_bank_clearing_std,omitempty"`
	RecipientBankCountryRegion null.String       `boil:"recipient_bank_country_region" json:"recipient_bank_country_region,omitempty" toml:"recipient_bank_country_region" yaml:"recipient_bank_country_region,omitempty"`
	RecipientBankName          null.String       `boil:"recipient_bank_name" json:"recipient_bank_name,omitempty" toml:"recipient_bank_name" yaml:"recipient_bank_name,omitempty"`
	RecipientBankPostCode      null.String       `boil:"recipient_bank_post_code" json:"recipient_bank_post_code,omitempty" toml:"recipient_bank_post_code" yaml:"recipient_bank_post_code,omitempty"`
	RecipientCity              null.String       `boil:"recipient_city" json:"recipient_city,omitempty" toml:"recipient_city" yaml:"recipient_city,omitempty"`
	RecipientCountryRegionCode null.String       `boil:"recipient_country_region_code" json:"recipient_country_region_code,omitempty" toml:"recipient_country_region_code" yaml:"recipient_country_region_code,omitempty"`
	RecipientCreditorNo        null.String       `boil:"recipient_creditor_no" json:"recipient_creditor_no,omitempty" toml:"recipient_creditor_no" yaml:"recipient_creditor_no,omitempty"`
	RecipientEmailAddress      null.String       `boil:"recipient_email_address" json:"recipient_email_address,omitempty" toml:"recipient_email_address" yaml:"recipient_email_address,omitempty"`
	RecipientGiroAccNo         null.String       `boil:"recipient_giro_acc_no" json:"recipient_giro_acc_no,omitempty" toml:"recipient_giro_acc_no" yaml:"recipient_giro_acc_no,omitempty"`
	RecipientName              null.String       `boil:"recipient_name" json:"recipient_name,omitempty" toml:"recipient_name" yaml:"recipient_name,omitempty"`
	RecipientPostCode          null.String       `boil:"recipient_post_code" json:"recipient_post_code,omitempty" toml:"recipient_post_code" yaml:"recipient_post_code,omitempty"`
	RecipientReference         null.String       `boil:"recipient_reference" json:"recipient_reference,omitempty" toml:"recipient_reference" yaml:"recipient_reference,omitempty"`
	RecipientRegNo             null.String       `boil:"recipient_reg_no" json:"recipient_reg_no,omitempty" toml:"recipient_reg_no" yaml:"recipient_reg_no,omitempty"`
	SenderBankAccountCode      null.String       `boil:"sender_bank_account_code" json:"sender_bank_account_code,omitempty" toml:"sender_bank_account_code" yaml:"sender_bank_account_code,omitempty"`
	SenderBankAccountCurrency  null.String       `boil:"sender_bank_account_currency" json:"sender_bank_account_currency,omitempty" toml:"sender_bank_account_currency" yaml:"sender_bank_account_currency,omitempty"`
	SenderBankAccountNo        null.String       `boil:"sender_bank_account_no" json:"sender_bank_account_no,omitempty" toml:"sender_bank_account_no" yaml:"sender_bank_account_no,omitempty"`
	SenderBankAddress          null.String       `boil:"sender_bank_address" json:"sender_bank_address,omitempty" toml:"sender_bank_address" yaml:"sender_bank_address,omitempty"`
	SenderBankBic              null.String       `boil:"sender_bank_bic" json:"sender_bank_bic,omitempty" toml:"sender_bank_bic" yaml:"sender_bank_bic,omitempty"`
	SenderBankCity             null.String       `boil:"sender_bank_city" json:"sender_bank_city,omitempty" toml:"sender_bank_city" yaml:"sender_bank_city,omitempty"`
	SenderBankClearingCode     null.String       `boil:"sender_bank_clearing_code" json:"sender_bank_clearing_code,omitempty" toml:"sender_bank_clearing_code" yaml:"sender_bank_clearing_code,omitempty"`
	SenderBankClearingSTD      null.String       `boil:"sender_bank_clearing_std" json:"sender_bank_clearing_std,omitempty" toml:"sender_bank_clearing_std" yaml:"sender_bank_clearing_std,omitempty"`
	SenderBankCountryRegion    null.String       `boil:"sender_bank_country_region" json:"sender_bank_country_region,omitempty" toml:"sender_bank_country_region" yaml:"sender_bank_country_region,omitempty"`
	SenderBankName             null.String       `boil:"sender_bank_name" json:"sender_bank_name,omitempty" toml:"sender_bank_name" yaml:"sender_bank_name,omitempty"`
	SenderBankPostCode         null.String       `boil:"sender_bank_post_code" json:"sender_bank_post_code,omitempty" toml:"sender_bank_post_code" yaml:"sender_bank_post_code,omitempty"`
	AppliesToExtDocNo          null.String       `boil:"applies_to_ext_doc_no" json:"applies_to_ext_doc_no,omitempty" toml:"applies_to_ext_doc_no" yaml:"applies_to_ext_doc_no,omitempty"`
	DataExchEntryNo            null.String       `boil:"data_exch_entry_no" json:"data_exch_entry_no,omitempty" toml:"data_exch_entry_no" yaml:"data_exch_entry_no,omitempty"`
	DataExchLineDefCode        null.String       `boil:"data_exch_line_def_code" json:"data_exch_line_def_code,omitempty" toml:"data_exch_line_def_code" yaml:"data_exch_line_def_code,omitempty"`
	DocumentNo                 null.String       `boil:"document_no" json:"document_no,omitempty" toml:"document_no" yaml:"document_no,omitempty"`
	EndToEndID                 null.String       `boil:"end_to_end_id" json:"end_to_end_id,omitempty" toml:"end_to_end_id" yaml:"end_to_end_id,omitempty"`
	EntryNo                    null.String       `boil:"entry_no" json:"entry_no,omitempty" toml:"entry_no" yaml:"entry_no,omitempty"`
	FormatCommand              null.String       `boil:"format_command" json:"format_command,omitempty" toml:"format_command" yaml:"format_command,omitempty"`
	FormatExpenseCode          null.String       `boil:"format_expense_code" json:"format_expense_code,omitempty" toml:"format_expense_code" yaml:"format_expense_code,omitempty"`
	FormatFormType             null.String       `boil:"format_form_type" json:"format_form_type,omitempty" toml:"format_form_type" yaml:"format_form_type,omitempty"`
	FormatPaymentType          null.String       `boil:"format_payment_type" json:"format_payment_type,omitempty" toml:"format_payment_type" yaml:"format_payment_type,omitempty"`
	FormatRemittanceInfoType   null.String       `boil:"format_remittance_info_type" json:"format_remittance_info_type,omitempty" toml:"format_remittance_info_type" yaml:"format_remittance_info_type,omitempty"`
	FormatTextCode             null.String       `boil:"format_text_code" json:"format_text_code,omitempty" toml:"format_text_code" yaml:"format_text_code,omitempty"`
	GeneralJournalBatchName    null.String       `boil:"general_journal_batch_name" json:"general_journal_batch_name,omitempty" toml:"general_journal_batch_name" yaml:"general_journal_batch_name,omitempty"`
	GeneralJournalLineNo       null.String       `boil:"general_journal_line_no" json:"general_journal_line_no,omitempty" toml:"general_journal_line_no" yaml:"general_journal_line_no,omitempty"`
	GeneralJournalTemplate     null.String       `boil:"general_journal_template" json:"general_journal_template,omitempty" toml:"general_journal_template" yaml:"general_journal_template,omitempty"`
	InvoiceAmount              types.NullDecimal `boil:"invoice_amount" json:"invoice_amount,omitempty" toml:"invoice_amount" yaml:"invoice_amount,omitempty"`
	InvoiceDate                null.Time         `boil:"invoice_date" json:"invoice_date,omitempty" toml:"invoice_date" yaml:"invoice_date,omitempty"`
	LetterToSender             null.String       `boil:"letter_to_sender" json:"letter_to_sender,omitempty" toml:"letter_to_sender" yaml:"letter_to_sender,omitempty"`
	LineNo                     null.String       `boil:"line_no" json:"line_no,omitempty" toml:"line_no" yaml:"line_no,omitempty"`
	PostingExchEntryNo         null.String       `boil:"posting_exch_entry_no" json:"posting_exch_entry_no,omitempty" toml:"posting_exch_entry_no" yaml:"posting_exch_entry_no,omitempty"`
	PostingExchLineDefCode     null.String       `boil:"posting_exch_line_def_code" json:"posting_exch_line_def_code,omitempty" toml:"posting_exch_line_def_code" yaml:"posting_exch_line_def_code,omitempty"`
	SepaBatchBooking           null.String       `boil:"sepa_batch_booking" json:"sepa_batch_booking,omitempty" toml:"sepa_batch_booking" yaml:"sepa_batch_booking,omitempty"`
	SepaChargeBearer           null.String       `boil:"sepa_charge_bearer" json:"sepa_charge_bearer,omitempty" toml:"sepa_charge_bearer" yaml:"sepa_charge_bearer,omitempty"`
	SepaDDMandateSignedDate    null.Time         `boil:"sepa_dd_mandate_signed_date" json:"sepa_dd_mandate_signed_date,omitempty" toml:"sepa_dd_mandate_signed_date" yaml:"sepa_dd_mandate_signed_date,omitempty"`
	SepaDirectDebitMandateID   null.String       `boil:"sepa_direct_debit_mandate_id" json:"sepa_direct_debit_mandate_id,omitempty" toml:"sepa_direct_debit_mandate_id" yaml:"sepa_direct_debit_mandate_id,omitempty"`
	SepaDirectDebitSeq         null.String       `boil:"sepa_direct_debit_seq" json:"sepa_direct_debit_seq,omitempty" toml:"sepa_direct_debit_seq" yaml:"sepa_direct_debit_seq,omitempty"`
	SepaDirectDebitSeqType     null.String       `boil:"sepa_direct_debit_seq_type" json:"sepa_direct_debit_seq_type,omitempty" toml:"sepa_direct_debit_seq_type" yaml:"sepa_direct_debit_seq_type,omitempty"`
	SepaInstructionPriority    null.String       `boil:"sepa_instruction_priority" json:"sepa_instruction_priority,omitempty" toml:"sepa_instruction_priority" yaml:"sepa_instruction_priority,omitempty"`
	SepaPartnerType            null.String       `boil:"sepa_partner_type" json:"sepa_partner_type,omitempty" toml:"sepa_partner_type" yaml:"sepa_partner_type,omitempty"`
	SepaPaymentMethod          null.String       `boil:"sepa_payment_method" json:"sepa_payment_method,omitempty" toml:"sepa_payment_method" yaml:"sepa_payment_method,omitempty"`
	ShortAdvice                null.String       `boil:"short_advice" json:"short_advice,omitempty" toml:"short_advice" yaml:"short_advice,omitempty"`
	MakerDate                  time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                    string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                  null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                 null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate               null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentMessageColumns = struct {
	PaymentMessageID           string
	PaymentID                  string
	CurrencyCode               string
	Amount                     string
	TransferDate               string
	TransferType               string
	RecipientID                string
	MessageToRecipient1        string
	MessageToRecipient2        string
	MessageType                string
	PaymentInformationID       string
	PaymentReference           string
	PaymentType                string
	RecipientAccNo             string
	RecipientAcknowledgement   string
	RecipientAddress           string
	RecipientBankAccNo         string
	RecipientBankAddress       string
	RecipientBankBic           string
	RecipientBankCity          string
	RecipientBankClearingCode  string
	RecipientBankClearingSTD   string
	RecipientBankCountryRegion string
	RecipientBankName          string
	RecipientBankPostCode      string
	RecipientCity              string
	RecipientCountryRegionCode string
	RecipientCreditorNo        string
	RecipientEmailAddress      string
	RecipientGiroAccNo         string
	RecipientName              string
	RecipientPostCode          string
	RecipientReference         string
	RecipientRegNo             string
	SenderBankAccountCode      string
	SenderBankAccountCurrency  string
	SenderBankAccountNo        string
	SenderBankAddress          string
	SenderBankBic              string
	SenderBankCity             string
	SenderBankClearingCode     string
	SenderBankClearingSTD      string
	SenderBankCountryRegion    string
	SenderBankName             string
	SenderBankPostCode         string
	AppliesToExtDocNo          string
	DataExchEntryNo            string
	DataExchLineDefCode        string
	DocumentNo                 string
	EndToEndID                 string
	EntryNo                    string
	FormatCommand              string
	FormatExpenseCode          string
	FormatFormType             string
	FormatPaymentType          string
	FormatRemittanceInfoType   string
	FormatTextCode             string
	GeneralJournalBatchName    string
	GeneralJournalLineNo       string
	GeneralJournalTemplate     string
	InvoiceAmount              string
	InvoiceDate                string
	LetterToSender             string
	LineNo                     string
	PostingExchEntryNo         string
	PostingExchLineDefCode     string
	SepaBatchBooking           string
	SepaChargeBearer           string
	SepaDDMandateSignedDate    string
	SepaDirectDebitMandateID   string
	SepaDirectDebitSeq         string
	SepaDirectDebitSeqType     string
	SepaInstructionPriority    string
	SepaPartnerType            string
	SepaPaymentMethod          string
	ShortAdvice                string
	MakerDate                  string
	CheckerDate                string
	MakerID                    string
	CheckerID                  string
	ModifiedBy                 string
	ModifiedDate               string
}{
	PaymentMessageID:           "payment_message_id",
	PaymentID:                  "payment_id",
	CurrencyCode:               "currency_code",
	Amount:                     "amount",
	TransferDate:               "transfer_date",
	TransferType:               "transfer_type",
	RecipientID:                "recipient_id",
	MessageToRecipient1:        "message_to_recipient_1",
	MessageToRecipient2:        "message_to_recipient_2",
	MessageType:                "message_type",
	PaymentInformationID:       "payment_information_id",
	PaymentReference:           "payment_reference",
	PaymentType:                "payment_type",
	RecipientAccNo:             "recipient_acc_no",
	RecipientAcknowledgement:   "recipient_acknowledgement",
	RecipientAddress:           "recipient_address",
	RecipientBankAccNo:         "recipient_bank_acc_no",
	RecipientBankAddress:       "recipient_bank_address",
	RecipientBankBic:           "recipient_bank_bic",
	RecipientBankCity:          "recipient_bank_city",
	RecipientBankClearingCode:  "recipient_bank_clearing_code",
	RecipientBankClearingSTD:   "recipient_bank_clearing_std",
	RecipientBankCountryRegion: "recipient_bank_country_region",
	RecipientBankName:          "recipient_bank_name",
	RecipientBankPostCode:      "recipient_bank_post_code",
	RecipientCity:              "recipient_city",
	RecipientCountryRegionCode: "recipient_country_region_code",
	RecipientCreditorNo:        "recipient_creditor_no",
	RecipientEmailAddress:      "recipient_email_address",
	RecipientGiroAccNo:         "recipient_giro_acc_no",
	RecipientName:              "recipient_name",
	RecipientPostCode:          "recipient_post_code",
	RecipientReference:         "recipient_reference",
	RecipientRegNo:             "recipient_reg_no",
	SenderBankAccountCode:      "sender_bank_account_code",
	SenderBankAccountCurrency:  "sender_bank_account_currency",
	SenderBankAccountNo:        "sender_bank_account_no",
	SenderBankAddress:          "sender_bank_address",
	SenderBankBic:              "sender_bank_bic",
	SenderBankCity:             "sender_bank_city",
	SenderBankClearingCode:     "sender_bank_clearing_code",
	SenderBankClearingSTD:      "sender_bank_clearing_std",
	SenderBankCountryRegion:    "sender_bank_country_region",
	SenderBankName:             "sender_bank_name",
	SenderBankPostCode:         "sender_bank_post_code",
	AppliesToExtDocNo:          "applies_to_ext_doc_no",
	DataExchEntryNo:            "data_exch_entry_no",
	DataExchLineDefCode:        "data_exch_line_def_code",
	DocumentNo:                 "document_no",
	EndToEndID:                 "end_to_end_id",
	EntryNo:                    "entry_no",
	FormatCommand:              "format_command",
	FormatExpenseCode:          "format_expense_code",
	FormatFormType:             "format_form_type",
	FormatPaymentType:          "format_payment_type",
	FormatRemittanceInfoType:   "format_remittance_info_type",
	FormatTextCode:             "format_text_code",
	GeneralJournalBatchName:    "general_journal_batch_name",
	GeneralJournalLineNo:       "general_journal_line_no",
	GeneralJournalTemplate:     "general_journal_template",
	InvoiceAmount:              "invoice_amount",
	InvoiceDate:                "invoice_date",
	LetterToSender:             "letter_to_sender",
	LineNo:                     "line_no",
	PostingExchEntryNo:         "posting_exch_entry_no",
	PostingExchLineDefCode:     "posting_exch_line_def_code",
	SepaBatchBooking:           "sepa_batch_booking",
	SepaChargeBearer:           "sepa_charge_bearer",
	SepaDDMandateSignedDate:    "sepa_dd_mandate_signed_date",
	SepaDirectDebitMandateID:   "sepa_direct_debit_mandate_id",
	SepaDirectDebitSeq:         "sepa_direct_debit_seq",
	SepaDirectDebitSeqType:     "sepa_direct_debit_seq_type",
	SepaInstructionPriority:    "sepa_instruction_priority",
	SepaPartnerType:            "sepa_partner_type",
	SepaPaymentMethod:          "sepa_payment_method",
	ShortAdvice:                "short_advice",
	MakerDate:                  "maker_date",
	CheckerDate:                "checker_date",
	MakerID:                    "maker_id",
	CheckerID:                  "checker_id",
	ModifiedBy:                 "modified_by",
	ModifiedDate:               "modified_date",
}

// Generated where

var PaymentMessageWhere = struct {
	PaymentMessageID           whereHelperint
	PaymentID                  whereHelpernull_Int
	CurrencyCode               whereHelpernull_String
	Amount                     whereHelpertypes_NullDecimal
	TransferDate               whereHelpernull_Time
	TransferType               whereHelpernull_String
	RecipientID                whereHelpernull_Int
	MessageToRecipient1        whereHelpernull_String
	MessageToRecipient2        whereHelpernull_String
	MessageType                whereHelpernull_String
	PaymentInformationID       whereHelpernull_String
	PaymentReference           whereHelpernull_String
	PaymentType                whereHelpernull_String
	RecipientAccNo             whereHelpernull_String
	RecipientAcknowledgement   whereHelpernull_String
	RecipientAddress           whereHelpernull_String
	RecipientBankAccNo         whereHelpernull_String
	RecipientBankAddress       whereHelpernull_String
	RecipientBankBic           whereHelpernull_String
	RecipientBankCity          whereHelpernull_String
	RecipientBankClearingCode  whereHelpernull_String
	RecipientBankClearingSTD   whereHelpernull_String
	RecipientBankCountryRegion whereHelpernull_String
	RecipientBankName          whereHelpernull_String
	RecipientBankPostCode      whereHelpernull_String
	RecipientCity              whereHelpernull_String
	RecipientCountryRegionCode whereHelpernull_String
	RecipientCreditorNo        whereHelpernull_String
	RecipientEmailAddress      whereHelpernull_String
	RecipientGiroAccNo         whereHelpernull_String
	RecipientName              whereHelpernull_String
	RecipientPostCode          whereHelpernull_String
	RecipientReference         whereHelpernull_String
	RecipientRegNo             whereHelpernull_String
	SenderBankAccountCode      whereHelpernull_String
	SenderBankAccountCurrency  whereHelpernull_String
	SenderBankAccountNo        whereHelpernull_String
	SenderBankAddress          whereHelpernull_String
	SenderBankBic              whereHelpernull_String
	SenderBankCity             whereHelpernull_String
	SenderBankClearingCode     whereHelpernull_String
	SenderBankClearingSTD      whereHelpernull_String
	SenderBankCountryRegion    whereHelpernull_String
	SenderBankName             whereHelpernull_String
	SenderBankPostCode         whereHelpernull_String
	AppliesToExtDocNo          whereHelpernull_String
	DataExchEntryNo            whereHelpernull_String
	DataExchLineDefCode        whereHelpernull_String
	DocumentNo                 whereHelpernull_String
	EndToEndID                 whereHelpernull_String
	EntryNo                    whereHelpernull_String
	FormatCommand              whereHelpernull_String
	FormatExpenseCode          whereHelpernull_String
	FormatFormType             whereHelpernull_String
	FormatPaymentType          whereHelpernull_String
	FormatRemittanceInfoType   whereHelpernull_String
	FormatTextCode             whereHelpernull_String
	GeneralJournalBatchName    whereHelpernull_String
	GeneralJournalLineNo       whereHelpernull_String
	GeneralJournalTemplate     whereHelpernull_String
	InvoiceAmount              whereHelpertypes_NullDecimal
	InvoiceDate                whereHelpernull_Time
	LetterToSender             whereHelpernull_String
	LineNo                     whereHelpernull_String
	PostingExchEntryNo         whereHelpernull_String
	PostingExchLineDefCode     whereHelpernull_String
	SepaBatchBooking           whereHelpernull_String
	SepaChargeBearer           whereHelpernull_String
	SepaDDMandateSignedDate    whereHelpernull_Time
	SepaDirectDebitMandateID   whereHelpernull_String
	SepaDirectDebitSeq         whereHelpernull_String
	SepaDirectDebitSeqType     whereHelpernull_String
	SepaInstructionPriority    whereHelpernull_String
	SepaPartnerType            whereHelpernull_String
	SepaPaymentMethod          whereHelpernull_String
	ShortAdvice                whereHelpernull_String
	MakerDate                  whereHelpertime_Time
	CheckerDate                whereHelpernull_Time
	MakerID                    whereHelperstring
	CheckerID                  whereHelpernull_String
	ModifiedBy                 whereHelpernull_String
	ModifiedDate               whereHelpernull_Time
}{
	PaymentMessageID:           whereHelperint{field: `payment_message_id`},
	PaymentID:                  whereHelpernull_Int{field: `payment_id`},
	CurrencyCode:               whereHelpernull_String{field: `currency_code`},
	Amount:                     whereHelpertypes_NullDecimal{field: `amount`},
	TransferDate:               whereHelpernull_Time{field: `transfer_date`},
	TransferType:               whereHelpernull_String{field: `transfer_type`},
	RecipientID:                whereHelpernull_Int{field: `recipient_id`},
	MessageToRecipient1:        whereHelpernull_String{field: `message_to_recipient_1`},
	MessageToRecipient2:        whereHelpernull_String{field: `message_to_recipient_2`},
	MessageType:                whereHelpernull_String{field: `message_type`},
	PaymentInformationID:       whereHelpernull_String{field: `payment_information_id`},
	PaymentReference:           whereHelpernull_String{field: `payment_reference`},
	PaymentType:                whereHelpernull_String{field: `payment_type`},
	RecipientAccNo:             whereHelpernull_String{field: `recipient_acc_no`},
	RecipientAcknowledgement:   whereHelpernull_String{field: `recipient_acknowledgement`},
	RecipientAddress:           whereHelpernull_String{field: `recipient_address`},
	RecipientBankAccNo:         whereHelpernull_String{field: `recipient_bank_acc_no`},
	RecipientBankAddress:       whereHelpernull_String{field: `recipient_bank_address`},
	RecipientBankBic:           whereHelpernull_String{field: `recipient_bank_bic`},
	RecipientBankCity:          whereHelpernull_String{field: `recipient_bank_city`},
	RecipientBankClearingCode:  whereHelpernull_String{field: `recipient_bank_clearing_code`},
	RecipientBankClearingSTD:   whereHelpernull_String{field: `recipient_bank_clearing_std`},
	RecipientBankCountryRegion: whereHelpernull_String{field: `recipient_bank_country_region`},
	RecipientBankName:          whereHelpernull_String{field: `recipient_bank_name`},
	RecipientBankPostCode:      whereHelpernull_String{field: `recipient_bank_post_code`},
	RecipientCity:              whereHelpernull_String{field: `recipient_city`},
	RecipientCountryRegionCode: whereHelpernull_String{field: `recipient_country_region_code`},
	RecipientCreditorNo:        whereHelpernull_String{field: `recipient_creditor_no`},
	RecipientEmailAddress:      whereHelpernull_String{field: `recipient_email_address`},
	RecipientGiroAccNo:         whereHelpernull_String{field: `recipient_giro_acc_no`},
	RecipientName:              whereHelpernull_String{field: `recipient_name`},
	RecipientPostCode:          whereHelpernull_String{field: `recipient_post_code`},
	RecipientReference:         whereHelpernull_String{field: `recipient_reference`},
	RecipientRegNo:             whereHelpernull_String{field: `recipient_reg_no`},
	SenderBankAccountCode:      whereHelpernull_String{field: `sender_bank_account_code`},
	SenderBankAccountCurrency:  whereHelpernull_String{field: `sender_bank_account_currency`},
	SenderBankAccountNo:        whereHelpernull_String{field: `sender_bank_account_no`},
	SenderBankAddress:          whereHelpernull_String{field: `sender_bank_address`},
	SenderBankBic:              whereHelpernull_String{field: `sender_bank_bic`},
	SenderBankCity:             whereHelpernull_String{field: `sender_bank_city`},
	SenderBankClearingCode:     whereHelpernull_String{field: `sender_bank_clearing_code`},
	SenderBankClearingSTD:      whereHelpernull_String{field: `sender_bank_clearing_std`},
	SenderBankCountryRegion:    whereHelpernull_String{field: `sender_bank_country_region`},
	SenderBankName:             whereHelpernull_String{field: `sender_bank_name`},
	SenderBankPostCode:         whereHelpernull_String{field: `sender_bank_post_code`},
	AppliesToExtDocNo:          whereHelpernull_String{field: `applies_to_ext_doc_no`},
	DataExchEntryNo:            whereHelpernull_String{field: `data_exch_entry_no`},
	DataExchLineDefCode:        whereHelpernull_String{field: `data_exch_line_def_code`},
	DocumentNo:                 whereHelpernull_String{field: `document_no`},
	EndToEndID:                 whereHelpernull_String{field: `end_to_end_id`},
	EntryNo:                    whereHelpernull_String{field: `entry_no`},
	FormatCommand:              whereHelpernull_String{field: `format_command`},
	FormatExpenseCode:          whereHelpernull_String{field: `format_expense_code`},
	FormatFormType:             whereHelpernull_String{field: `format_form_type`},
	FormatPaymentType:          whereHelpernull_String{field: `format_payment_type`},
	FormatRemittanceInfoType:   whereHelpernull_String{field: `format_remittance_info_type`},
	FormatTextCode:             whereHelpernull_String{field: `format_text_code`},
	GeneralJournalBatchName:    whereHelpernull_String{field: `general_journal_batch_name`},
	GeneralJournalLineNo:       whereHelpernull_String{field: `general_journal_line_no`},
	GeneralJournalTemplate:     whereHelpernull_String{field: `general_journal_template`},
	InvoiceAmount:              whereHelpertypes_NullDecimal{field: `invoice_amount`},
	InvoiceDate:                whereHelpernull_Time{field: `invoice_date`},
	LetterToSender:             whereHelpernull_String{field: `letter_to_sender`},
	LineNo:                     whereHelpernull_String{field: `line_no`},
	PostingExchEntryNo:         whereHelpernull_String{field: `posting_exch_entry_no`},
	PostingExchLineDefCode:     whereHelpernull_String{field: `posting_exch_line_def_code`},
	SepaBatchBooking:           whereHelpernull_String{field: `sepa_batch_booking`},
	SepaChargeBearer:           whereHelpernull_String{field: `sepa_charge_bearer`},
	SepaDDMandateSignedDate:    whereHelpernull_Time{field: `sepa_dd_mandate_signed_date`},
	SepaDirectDebitMandateID:   whereHelpernull_String{field: `sepa_direct_debit_mandate_id`},
	SepaDirectDebitSeq:         whereHelpernull_String{field: `sepa_direct_debit_seq`},
	SepaDirectDebitSeqType:     whereHelpernull_String{field: `sepa_direct_debit_seq_type`},
	SepaInstructionPriority:    whereHelpernull_String{field: `sepa_instruction_priority`},
	SepaPartnerType:            whereHelpernull_String{field: `sepa_partner_type`},
	SepaPaymentMethod:          whereHelpernull_String{field: `sepa_payment_method`},
	ShortAdvice:                whereHelpernull_String{field: `short_advice`},
	MakerDate:                  whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                whereHelpernull_Time{field: `checker_date`},
	MakerID:                    whereHelperstring{field: `maker_id`},
	CheckerID:                  whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                 whereHelpernull_String{field: `modified_by`},
	ModifiedDate:               whereHelpernull_Time{field: `modified_date`},
}

// PaymentMessageRels is where relationship names are stored.
var PaymentMessageRels = struct {
	Payment string
}{
	Payment: "Payment",
}

// paymentMessageR is where relationships are stored.
type paymentMessageR struct {
	Payment *PaymentInitiation
}

// NewStruct creates a new relationship struct
func (*paymentMessageR) NewStruct() *paymentMessageR {
	return &paymentMessageR{}
}

// paymentMessageL is where Load methods for each relationship are stored.
type paymentMessageL struct{}

var (
	paymentMessageColumns               = []string{"payment_message_id", "payment_id", "currency_code", "amount", "transfer_date", "transfer_type", "recipient_id", "message_to_recipient_1", "message_to_recipient_2", "message_type", "payment_information_id", "payment_reference", "payment_type", "recipient_acc_no", "recipient_acknowledgement", "recipient_address", "recipient_bank_acc_no", "recipient_bank_address", "recipient_bank_bic", "recipient_bank_city", "recipient_bank_clearing_code", "recipient_bank_clearing_std", "recipient_bank_country_region", "recipient_bank_name", "recipient_bank_post_code", "recipient_city", "recipient_country_region_code", "recipient_creditor_no", "recipient_email_address", "recipient_giro_acc_no", "recipient_name", "recipient_post_code", "recipient_reference", "recipient_reg_no", "sender_bank_account_code", "sender_bank_account_currency", "sender_bank_account_no", "sender_bank_address", "sender_bank_bic", "sender_bank_city", "sender_bank_clearing_code", "sender_bank_clearing_std", "sender_bank_country_region", "sender_bank_name", "sender_bank_post_code", "applies_to_ext_doc_no", "data_exch_entry_no", "data_exch_line_def_code", "document_no", "end_to_end_id", "entry_no", "format_command", "format_expense_code", "format_form_type", "format_payment_type", "format_remittance_info_type", "format_text_code", "general_journal_batch_name", "general_journal_line_no", "general_journal_template", "invoice_amount", "invoice_date", "letter_to_sender", "line_no", "posting_exch_entry_no", "posting_exch_line_def_code", "sepa_batch_booking", "sepa_charge_bearer", "sepa_dd_mandate_signed_date", "sepa_direct_debit_mandate_id", "sepa_direct_debit_seq", "sepa_direct_debit_seq_type", "sepa_instruction_priority", "sepa_partner_type", "sepa_payment_method", "short_advice", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentMessageColumnsWithoutDefault = []string{"payment_id", "currency_code", "amount", "transfer_date", "transfer_type", "recipient_id", "message_to_recipient_1", "message_to_recipient_2", "message_type", "payment_information_id", "payment_reference", "payment_type", "recipient_acc_no", "recipient_acknowledgement", "recipient_address", "recipient_bank_acc_no", "recipient_bank_address", "recipient_bank_bic", "recipient_bank_city", "recipient_bank_clearing_code", "recipient_bank_clearing_std", "recipient_bank_country_region", "recipient_bank_name", "recipient_bank_post_code", "recipient_city", "recipient_country_region_code", "recipient_creditor_no", "recipient_email_address", "recipient_giro_acc_no", "recipient_name", "recipient_post_code", "recipient_reference", "recipient_reg_no", "sender_bank_account_code", "sender_bank_account_currency", "sender_bank_account_no", "sender_bank_address", "sender_bank_bic", "sender_bank_city", "sender_bank_clearing_code", "sender_bank_clearing_std", "sender_bank_country_region", "sender_bank_name", "sender_bank_post_code", "applies_to_ext_doc_no", "data_exch_entry_no", "data_exch_line_def_code", "document_no", "end_to_end_id", "entry_no", "format_command", "format_expense_code", "format_form_type", "format_payment_type", "format_remittance_info_type", "format_text_code", "general_journal_batch_name", "general_journal_line_no", "general_journal_template", "invoice_amount", "invoice_date", "letter_to_sender", "line_no", "posting_exch_entry_no", "posting_exch_line_def_code", "sepa_batch_booking", "sepa_charge_bearer", "sepa_dd_mandate_signed_date", "sepa_direct_debit_mandate_id", "sepa_direct_debit_seq", "sepa_direct_debit_seq_type", "sepa_instruction_priority", "sepa_partner_type", "sepa_payment_method", "short_advice", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentMessageColumnsWithDefault    = []string{"payment_message_id"}
	paymentMessagePrimaryKeyColumns     = []string{"payment_message_id"}
)

type (
	// PaymentMessageSlice is an alias for a slice of pointers to PaymentMessage.
	// This should generally be used opposed to []PaymentMessage.
	PaymentMessageSlice []*PaymentMessage
	// PaymentMessageHook is the signature for custom PaymentMessage hook methods
	PaymentMessageHook func(context.Context, boil.ContextExecutor, *PaymentMessage) error

	paymentMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentMessageType                 = reflect.TypeOf(&PaymentMessage{})
	paymentMessageMapping              = queries.MakeStructMapping(paymentMessageType)
	paymentMessagePrimaryKeyMapping, _ = queries.BindMapping(paymentMessageType, paymentMessageMapping, paymentMessagePrimaryKeyColumns)
	paymentMessageInsertCacheMut       sync.RWMutex
	paymentMessageInsertCache          = make(map[string]insertCache)
	paymentMessageUpdateCacheMut       sync.RWMutex
	paymentMessageUpdateCache          = make(map[string]updateCache)
	paymentMessageUpsertCacheMut       sync.RWMutex
	paymentMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentMessageBeforeInsertHooks []PaymentMessageHook
var paymentMessageBeforeUpdateHooks []PaymentMessageHook
var paymentMessageBeforeDeleteHooks []PaymentMessageHook
var paymentMessageBeforeUpsertHooks []PaymentMessageHook

var paymentMessageAfterInsertHooks []PaymentMessageHook
var paymentMessageAfterSelectHooks []PaymentMessageHook
var paymentMessageAfterUpdateHooks []PaymentMessageHook
var paymentMessageAfterDeleteHooks []PaymentMessageHook
var paymentMessageAfterUpsertHooks []PaymentMessageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentMessageHook registers your hook function for all future operations.
func AddPaymentMessageHook(hookPoint boil.HookPoint, paymentMessageHook PaymentMessageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentMessageBeforeInsertHooks = append(paymentMessageBeforeInsertHooks, paymentMessageHook)
	case boil.BeforeUpdateHook:
		paymentMessageBeforeUpdateHooks = append(paymentMessageBeforeUpdateHooks, paymentMessageHook)
	case boil.BeforeDeleteHook:
		paymentMessageBeforeDeleteHooks = append(paymentMessageBeforeDeleteHooks, paymentMessageHook)
	case boil.BeforeUpsertHook:
		paymentMessageBeforeUpsertHooks = append(paymentMessageBeforeUpsertHooks, paymentMessageHook)
	case boil.AfterInsertHook:
		paymentMessageAfterInsertHooks = append(paymentMessageAfterInsertHooks, paymentMessageHook)
	case boil.AfterSelectHook:
		paymentMessageAfterSelectHooks = append(paymentMessageAfterSelectHooks, paymentMessageHook)
	case boil.AfterUpdateHook:
		paymentMessageAfterUpdateHooks = append(paymentMessageAfterUpdateHooks, paymentMessageHook)
	case boil.AfterDeleteHook:
		paymentMessageAfterDeleteHooks = append(paymentMessageAfterDeleteHooks, paymentMessageHook)
	case boil.AfterUpsertHook:
		paymentMessageAfterUpsertHooks = append(paymentMessageAfterUpsertHooks, paymentMessageHook)
	}
}

// One returns a single paymentMessage record from the query.
func (q paymentMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentMessage, error) {
	o := &PaymentMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentMessage")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentMessage records from the query.
func (q paymentMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentMessageSlice, error) {
	var o []*PaymentMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentMessage slice")
	}

	if len(paymentMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentMessage records in the query.
func (q paymentMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentMessage rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentMessage exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentMessage) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentMessageL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentMessage interface{}, mods queries.Applicator) error {
	var slice []*PaymentMessage
	var object *PaymentMessage

	if singular {
		object = maybePaymentMessage.(*PaymentMessage)
	} else {
		slice = *maybePaymentMessage.(*[]*PaymentMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentMessageR{}
		}
		if !queries.IsNil(object.PaymentID) {
			args = append(args, object.PaymentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentMessageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentID) {
				args = append(args, obj.PaymentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentMessages = append(foreign.R.PaymentPaymentMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentID, foreign.PaymentID) {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentMessages = append(foreign.R.PaymentPaymentMessages, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentMessage to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentMessages.
func (o *PaymentMessage) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentMessage` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentMessageID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentID, related.PaymentID)
	if o.R == nil {
		o.R = &paymentMessageR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentMessages: PaymentMessageSlice{o},
		}
	} else {
		related.R.PaymentPaymentMessages = append(related.R.PaymentPaymentMessages, o)
	}

	return nil
}

// RemovePayment relationship.
// Sets o.R.Payment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PaymentMessage) RemovePayment(ctx context.Context, exec boil.ContextExecutor, related *PaymentInitiation) error {
	var err error

	queries.SetScanner(&o.PaymentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("payment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Payment = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PaymentPaymentMessages {
		if queries.Equal(o.PaymentID, ri.PaymentID) {
			continue
		}

		ln := len(related.R.PaymentPaymentMessages)
		if ln > 1 && i < ln-1 {
			related.R.PaymentPaymentMessages[i] = related.R.PaymentPaymentMessages[ln-1]
		}
		related.R.PaymentPaymentMessages = related.R.PaymentPaymentMessages[:ln-1]
		break
	}
	return nil
}

// PaymentMessages retrieves all the records using an executor.
func PaymentMessages(mods ...qm.QueryMod) paymentMessageQuery {
	mods = append(mods, qm.From("`PaymentMessage`"))
	return paymentMessageQuery{NewQuery(mods...)}
}

// FindPaymentMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentMessage(ctx context.Context, exec boil.ContextExecutor, paymentMessageID int, selectCols ...string) (*PaymentMessage, error) {
	paymentMessageObj := &PaymentMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentMessage` where `payment_message_id`=?", sel,
	)

	q := queries.Raw(query, paymentMessageID)

	err := q.Bind(ctx, exec, paymentMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentMessage")
	}

	return paymentMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentMessage provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentMessageInsertCacheMut.RLock()
	cache, cached := paymentMessageInsertCache[key]
	paymentMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentMessageColumns,
			paymentMessageColumnsWithDefault,
			paymentMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentMessage` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentMessage` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentMessage` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentMessagePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentMessage")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentMessageID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentMessageMapping["PaymentMessageID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentMessageID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentMessage")
	}

CacheNoHooks:
	if !cached {
		paymentMessageInsertCacheMut.Lock()
		paymentMessageInsertCache[key] = cache
		paymentMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentMessageUpdateCacheMut.RLock()
	cache, cached := paymentMessageUpdateCache[key]
	paymentMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentMessageColumns,
			paymentMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentMessage, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentMessage` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, append(wl, paymentMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentMessage row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentMessage")
	}

	if !cached {
		paymentMessageUpdateCacheMut.Lock()
		paymentMessageUpdateCache[key] = cache
		paymentMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentMessage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentMessage")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentMessage` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentMessagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentMessage")
	}
	return rowsAff, nil
}

var mySQLPaymentMessageUniqueColumns = []string{
	"payment_message_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentMessage provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentMessageColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentMessageUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentMessageUpsertCacheMut.RLock()
	cache, cached := paymentMessageUpsertCache[key]
	paymentMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentMessageColumns,
			paymentMessageColumnsWithDefault,
			paymentMessageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentMessageColumns,
			paymentMessagePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentMessage, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentMessage", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentMessage` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentMessage")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentMessageID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentMessageMapping["payment_message_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentMessageType, paymentMessageMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentMessage")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentMessage")
	}

CacheNoHooks:
	if !cached {
		paymentMessageUpsertCacheMut.Lock()
		paymentMessageUpsertCache[key] = cache
		paymentMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentMessagePrimaryKeyMapping)
	sql := "DELETE FROM `PaymentMessage` WHERE `payment_message_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentMessage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentMessage")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentMessage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentMessage")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentMessage slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentMessage` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentMessagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentMessage")
	}

	if len(paymentMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentMessage(ctx, exec, o.PaymentMessageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentMessage`.* FROM `PaymentMessage` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentMessageSlice")
	}

	*o = slice

	return nil
}

// PaymentMessageExists checks if the PaymentMessage row exists.
func PaymentMessageExists(ctx context.Context, exec boil.ContextExecutor, paymentMessageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentMessage` where `payment_message_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentMessageID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentMessageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentMessage exists")
	}

	return exists, nil
}
