// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TransferAch is an object representing the database table.
type TransferAch struct {
	TransferAchID     int               `boil:"transfer_ach_id" json:"transfer_ach_id" toml:"transfer_ach_id" yaml:"transfer_ach_id"`
	RoutingNumber     string            `boil:"routing_number" json:"routing_number" toml:"routing_number" yaml:"routing_number"`
	FromAccountID     int               `boil:"from_account_id" json:"from_account_id" toml:"from_account_id" yaml:"from_account_id"`
	ToAccountID       int               `boil:"to_account_id" json:"to_account_id" toml:"to_account_id" yaml:"to_account_id"`
	TransferID        int               `boil:"transfer_id" json:"transfer_id" toml:"transfer_id" yaml:"transfer_id"`
	TransferDate      null.Time         `boil:"transfer_date" json:"transfer_date,omitempty" toml:"transfer_date" yaml:"transfer_date,omitempty"`
	TransferAmount    types.NullDecimal `boil:"transfer_amount" json:"transfer_amount,omitempty" toml:"transfer_amount" yaml:"transfer_amount,omitempty"`
	ChargeAmount      types.NullDecimal `boil:"charge_amount" json:"charge_amount,omitempty" toml:"charge_amount" yaml:"charge_amount,omitempty"`
	FinalCreditAmount types.NullDecimal `boil:"final_credit_amount" json:"final_credit_amount,omitempty" toml:"final_credit_amount" yaml:"final_credit_amount,omitempty"`
	MakerDate         time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate       null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID           string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID         null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy        null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate      null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *transferAchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transferAchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransferAchColumns = struct {
	TransferAchID     string
	RoutingNumber     string
	FromAccountID     string
	ToAccountID       string
	TransferID        string
	TransferDate      string
	TransferAmount    string
	ChargeAmount      string
	FinalCreditAmount string
	MakerDate         string
	CheckerDate       string
	MakerID           string
	CheckerID         string
	ModifiedBy        string
	ModifiedDate      string
}{
	TransferAchID:     "transfer_ach_id",
	RoutingNumber:     "routing_number",
	FromAccountID:     "from_account_id",
	ToAccountID:       "to_account_id",
	TransferID:        "transfer_id",
	TransferDate:      "transfer_date",
	TransferAmount:    "transfer_amount",
	ChargeAmount:      "charge_amount",
	FinalCreditAmount: "final_credit_amount",
	MakerDate:         "maker_date",
	CheckerDate:       "checker_date",
	MakerID:           "maker_id",
	CheckerID:         "checker_id",
	ModifiedBy:        "modified_by",
	ModifiedDate:      "modified_date",
}

// Generated where

var TransferAchWhere = struct {
	TransferAchID     whereHelperint
	RoutingNumber     whereHelperstring
	FromAccountID     whereHelperint
	ToAccountID       whereHelperint
	TransferID        whereHelperint
	TransferDate      whereHelpernull_Time
	TransferAmount    whereHelpertypes_NullDecimal
	ChargeAmount      whereHelpertypes_NullDecimal
	FinalCreditAmount whereHelpertypes_NullDecimal
	MakerDate         whereHelpertime_Time
	CheckerDate       whereHelpernull_Time
	MakerID           whereHelperstring
	CheckerID         whereHelpernull_String
	ModifiedBy        whereHelpernull_String
	ModifiedDate      whereHelpernull_Time
}{
	TransferAchID:     whereHelperint{field: `transfer_ach_id`},
	RoutingNumber:     whereHelperstring{field: `routing_number`},
	FromAccountID:     whereHelperint{field: `from_account_id`},
	ToAccountID:       whereHelperint{field: `to_account_id`},
	TransferID:        whereHelperint{field: `transfer_id`},
	TransferDate:      whereHelpernull_Time{field: `transfer_date`},
	TransferAmount:    whereHelpertypes_NullDecimal{field: `transfer_amount`},
	ChargeAmount:      whereHelpertypes_NullDecimal{field: `charge_amount`},
	FinalCreditAmount: whereHelpertypes_NullDecimal{field: `final_credit_amount`},
	MakerDate:         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:       whereHelpernull_Time{field: `checker_date`},
	MakerID:           whereHelperstring{field: `maker_id`},
	CheckerID:         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:      whereHelpernull_Time{field: `modified_date`},
}

// TransferAchRels is where relationship names are stored.
var TransferAchRels = struct {
	FromAccount string
	ToAccount   string
	Transfer    string
}{
	FromAccount: "FromAccount",
	ToAccount:   "ToAccount",
	Transfer:    "Transfer",
}

// transferAchR is where relationships are stored.
type transferAchR struct {
	FromAccount *Account
	ToAccount   *Account
	Transfer    *Transfer
}

// NewStruct creates a new relationship struct
func (*transferAchR) NewStruct() *transferAchR {
	return &transferAchR{}
}

// transferAchL is where Load methods for each relationship are stored.
type transferAchL struct{}

var (
	transferAchColumns               = []string{"transfer_ach_id", "routing_number", "from_account_id", "to_account_id", "transfer_id", "transfer_date", "transfer_amount", "charge_amount", "final_credit_amount", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transferAchColumnsWithoutDefault = []string{"routing_number", "from_account_id", "to_account_id", "transfer_id", "transfer_date", "transfer_amount", "charge_amount", "final_credit_amount", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transferAchColumnsWithDefault    = []string{"transfer_ach_id"}
	transferAchPrimaryKeyColumns     = []string{"transfer_ach_id"}
)

type (
	// TransferAchSlice is an alias for a slice of pointers to TransferAch.
	// This should generally be used opposed to []TransferAch.
	TransferAchSlice []*TransferAch
	// TransferAchHook is the signature for custom TransferAch hook methods
	TransferAchHook func(context.Context, boil.ContextExecutor, *TransferAch) error

	transferAchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transferAchType                 = reflect.TypeOf(&TransferAch{})
	transferAchMapping              = queries.MakeStructMapping(transferAchType)
	transferAchPrimaryKeyMapping, _ = queries.BindMapping(transferAchType, transferAchMapping, transferAchPrimaryKeyColumns)
	transferAchInsertCacheMut       sync.RWMutex
	transferAchInsertCache          = make(map[string]insertCache)
	transferAchUpdateCacheMut       sync.RWMutex
	transferAchUpdateCache          = make(map[string]updateCache)
	transferAchUpsertCacheMut       sync.RWMutex
	transferAchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transferAchBeforeInsertHooks []TransferAchHook
var transferAchBeforeUpdateHooks []TransferAchHook
var transferAchBeforeDeleteHooks []TransferAchHook
var transferAchBeforeUpsertHooks []TransferAchHook

var transferAchAfterInsertHooks []TransferAchHook
var transferAchAfterSelectHooks []TransferAchHook
var transferAchAfterUpdateHooks []TransferAchHook
var transferAchAfterDeleteHooks []TransferAchHook
var transferAchAfterUpsertHooks []TransferAchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransferAch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransferAch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransferAch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransferAch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransferAch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransferAch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransferAch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransferAch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransferAch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransferAchHook registers your hook function for all future operations.
func AddTransferAchHook(hookPoint boil.HookPoint, transferAchHook TransferAchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transferAchBeforeInsertHooks = append(transferAchBeforeInsertHooks, transferAchHook)
	case boil.BeforeUpdateHook:
		transferAchBeforeUpdateHooks = append(transferAchBeforeUpdateHooks, transferAchHook)
	case boil.BeforeDeleteHook:
		transferAchBeforeDeleteHooks = append(transferAchBeforeDeleteHooks, transferAchHook)
	case boil.BeforeUpsertHook:
		transferAchBeforeUpsertHooks = append(transferAchBeforeUpsertHooks, transferAchHook)
	case boil.AfterInsertHook:
		transferAchAfterInsertHooks = append(transferAchAfterInsertHooks, transferAchHook)
	case boil.AfterSelectHook:
		transferAchAfterSelectHooks = append(transferAchAfterSelectHooks, transferAchHook)
	case boil.AfterUpdateHook:
		transferAchAfterUpdateHooks = append(transferAchAfterUpdateHooks, transferAchHook)
	case boil.AfterDeleteHook:
		transferAchAfterDeleteHooks = append(transferAchAfterDeleteHooks, transferAchHook)
	case boil.AfterUpsertHook:
		transferAchAfterUpsertHooks = append(transferAchAfterUpsertHooks, transferAchHook)
	}
}

// One returns a single transferAch record from the query.
func (q transferAchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransferAch, error) {
	o := &TransferAch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TransferAch")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransferAch records from the query.
func (q transferAchQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransferAchSlice, error) {
	var o []*TransferAch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransferAch slice")
	}

	if len(transferAchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransferAch records in the query.
func (q transferAchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TransferAch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transferAchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TransferAch exists")
	}

	return count > 0, nil
}

// FromAccount pointed to by the foreign key.
func (o *TransferAch) FromAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.FromAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// ToAccount pointed to by the foreign key.
func (o *TransferAch) ToAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.ToAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Transfer pointed to by the foreign key.
func (o *TransferAch) Transfer(mods ...qm.QueryMod) transferQuery {
	queryMods := []qm.QueryMod{
		qm.Where("transfer_id=?", o.TransferID),
	}

	queryMods = append(queryMods, mods...)

	query := Transfers(queryMods...)
	queries.SetFrom(query.Query, "`Transfer`")

	return query
}

// LoadFromAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferAchL) LoadFromAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransferAch interface{}, mods queries.Applicator) error {
	var slice []*TransferAch
	var object *TransferAch

	if singular {
		object = maybeTransferAch.(*TransferAch)
	} else {
		slice = *maybeTransferAch.(*[]*TransferAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferAchR{}
		}
		args = append(args, object.FromAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferAchR{}
			}

			for _, a := range args {
				if a == obj.FromAccountID {
					continue Outer
				}
			}

			args = append(args, obj.FromAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(transferAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FromAccountTransferAches = append(foreign.R.FromAccountTransferAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromAccountID == foreign.AccountID {
				local.R.FromAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FromAccountTransferAches = append(foreign.R.FromAccountTransferAches, local)
				break
			}
		}
	}

	return nil
}

// LoadToAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferAchL) LoadToAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransferAch interface{}, mods queries.Applicator) error {
	var slice []*TransferAch
	var object *TransferAch

	if singular {
		object = maybeTransferAch.(*TransferAch)
	} else {
		slice = *maybeTransferAch.(*[]*TransferAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferAchR{}
		}
		args = append(args, object.ToAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferAchR{}
			}

			for _, a := range args {
				if a == obj.ToAccountID {
					continue Outer
				}
			}

			args = append(args, obj.ToAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(transferAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ToAccountTransferAches = append(foreign.R.ToAccountTransferAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToAccountID == foreign.AccountID {
				local.R.ToAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ToAccountTransferAches = append(foreign.R.ToAccountTransferAches, local)
				break
			}
		}
	}

	return nil
}

// LoadTransfer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferAchL) LoadTransfer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransferAch interface{}, mods queries.Applicator) error {
	var slice []*TransferAch
	var object *TransferAch

	if singular {
		object = maybeTransferAch.(*TransferAch)
	} else {
		slice = *maybeTransferAch.(*[]*TransferAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferAchR{}
		}
		args = append(args, object.TransferID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferAchR{}
			}

			for _, a := range args {
				if a == obj.TransferID {
					continue Outer
				}
			}

			args = append(args, obj.TransferID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Transfer`), qm.WhereIn(`transfer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transfer")
	}

	var resultSlice []*Transfer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transfer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Transfer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Transfer")
	}

	if len(transferAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transfer = foreign
		if foreign.R == nil {
			foreign.R = &transferR{}
		}
		foreign.R.TransferTransferAches = append(foreign.R.TransferTransferAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransferID == foreign.TransferID {
				local.R.Transfer = foreign
				if foreign.R == nil {
					foreign.R = &transferR{}
				}
				foreign.R.TransferTransferAches = append(foreign.R.TransferTransferAches, local)
				break
			}
		}
	}

	return nil
}

// SetFromAccount of the transferAch to the related item.
// Sets o.R.FromAccount to related.
// Adds o to related.R.FromAccountTransferAches.
func (o *TransferAch) SetFromAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TransferAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_account_id"}),
		strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.TransferAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromAccountID = related.AccountID
	if o.R == nil {
		o.R = &transferAchR{
			FromAccount: related,
		}
	} else {
		o.R.FromAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			FromAccountTransferAches: TransferAchSlice{o},
		}
	} else {
		related.R.FromAccountTransferAches = append(related.R.FromAccountTransferAches, o)
	}

	return nil
}

// SetToAccount of the transferAch to the related item.
// Sets o.R.ToAccount to related.
// Adds o to related.R.ToAccountTransferAches.
func (o *TransferAch) SetToAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TransferAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"to_account_id"}),
		strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.TransferAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToAccountID = related.AccountID
	if o.R == nil {
		o.R = &transferAchR{
			ToAccount: related,
		}
	} else {
		o.R.ToAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			ToAccountTransferAches: TransferAchSlice{o},
		}
	} else {
		related.R.ToAccountTransferAches = append(related.R.ToAccountTransferAches, o)
	}

	return nil
}

// SetTransfer of the transferAch to the related item.
// Sets o.R.Transfer to related.
// Adds o to related.R.TransferTransferAches.
func (o *TransferAch) SetTransfer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transfer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TransferAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transfer_id"}),
		strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns),
	)
	values := []interface{}{related.TransferID, o.TransferAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransferID = related.TransferID
	if o.R == nil {
		o.R = &transferAchR{
			Transfer: related,
		}
	} else {
		o.R.Transfer = related
	}

	if related.R == nil {
		related.R = &transferR{
			TransferTransferAches: TransferAchSlice{o},
		}
	} else {
		related.R.TransferTransferAches = append(related.R.TransferTransferAches, o)
	}

	return nil
}

// TransferAches retrieves all the records using an executor.
func TransferAches(mods ...qm.QueryMod) transferAchQuery {
	mods = append(mods, qm.From("`TransferAch`"))
	return transferAchQuery{NewQuery(mods...)}
}

// FindTransferAch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransferAch(ctx context.Context, exec boil.ContextExecutor, transferAchID int, selectCols ...string) (*TransferAch, error) {
	transferAchObj := &TransferAch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TransferAch` where `transfer_ach_id`=?", sel,
	)

	q := queries.Raw(query, transferAchID)

	err := q.Bind(ctx, exec, transferAchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TransferAch")
	}

	return transferAchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransferAch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TransferAch provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferAchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transferAchInsertCacheMut.RLock()
	cache, cached := transferAchInsertCache[key]
	transferAchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transferAchColumns,
			transferAchColumnsWithDefault,
			transferAchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transferAchType, transferAchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transferAchType, transferAchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TransferAch` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TransferAch` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TransferAch` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TransferAch")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransferAchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transferAchMapping["TransferAchID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransferAchID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TransferAch")
	}

CacheNoHooks:
	if !cached {
		transferAchInsertCacheMut.Lock()
		transferAchInsertCache[key] = cache
		transferAchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TransferAch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransferAch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transferAchUpdateCacheMut.RLock()
	cache, cached := transferAchUpdateCache[key]
	transferAchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transferAchColumns,
			transferAchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TransferAch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TransferAch` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transferAchType, transferAchMapping, append(wl, transferAchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TransferAch row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TransferAch")
	}

	if !cached {
		transferAchUpdateCacheMut.Lock()
		transferAchUpdateCache[key] = cache
		transferAchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transferAchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TransferAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TransferAch")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransferAchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TransferAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferAchPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transferAch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transferAch")
	}
	return rowsAff, nil
}

var mySQLTransferAchUniqueColumns = []string{
	"transfer_ach_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransferAch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TransferAch provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferAchColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransferAchUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transferAchUpsertCacheMut.RLock()
	cache, cached := transferAchUpsertCache[key]
	transferAchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transferAchColumns,
			transferAchColumnsWithDefault,
			transferAchColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transferAchColumns,
			transferAchPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TransferAch, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TransferAch", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TransferAch` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transferAchType, transferAchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transferAchType, transferAchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TransferAch")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransferAchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transferAchMapping["transfer_ach_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transferAchType, transferAchMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TransferAch")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TransferAch")
	}

CacheNoHooks:
	if !cached {
		transferAchUpsertCacheMut.Lock()
		transferAchUpsertCache[key] = cache
		transferAchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TransferAch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransferAch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransferAch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transferAchPrimaryKeyMapping)
	sql := "DELETE FROM `TransferAch` WHERE `transfer_ach_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TransferAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TransferAch")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transferAchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transferAchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TransferAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TransferAch")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransferAchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransferAch slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(transferAchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TransferAch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferAchPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transferAch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TransferAch")
	}

	if len(transferAchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransferAch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransferAch(ctx, exec, o.TransferAchID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransferAchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransferAchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TransferAch`.* FROM `TransferAch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferAchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransferAchSlice")
	}

	*o = slice

	return nil
}

// TransferAchExists checks if the TransferAch row exists.
func TransferAchExists(ctx context.Context, exec boil.ContextExecutor, transferAchID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TransferAch` where `transfer_ach_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transferAchID)
	}

	row := exec.QueryRowContext(ctx, sql, transferAchID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TransferAch exists")
	}

	return exists, nil
}
