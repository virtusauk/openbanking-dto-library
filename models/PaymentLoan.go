// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentLoan is an object representing the database table.
type PaymentLoan struct {
	PaymentLoanID int               `boil:"payment_loan_id" json:"payment_loan_id" toml:"payment_loan_id" yaml:"payment_loan_id"`
	PaymentID     int               `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	LoanID        int               `boil:"loan_id" json:"loan_id" toml:"loan_id" yaml:"loan_id"`
	PaymentDate   time.Time         `boil:"payment_date" json:"payment_date" toml:"payment_date" yaml:"payment_date"`
	PrinciplePaid types.Decimal     `boil:"principle_paid" json:"principle_paid" toml:"principle_paid" yaml:"principle_paid"`
	InterestPaid  types.NullDecimal `boil:"interest_paid" json:"interest_paid,omitempty" toml:"interest_paid" yaml:"interest_paid,omitempty"`
	TotalPaid     types.NullDecimal `boil:"total_paid" json:"total_paid,omitempty" toml:"total_paid" yaml:"total_paid,omitempty"`
	PaymentType   null.String       `boil:"payment_type" json:"payment_type,omitempty" toml:"payment_type" yaml:"payment_type,omitempty"`
	BankID        int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate     time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate   null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID       string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID     null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy    null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate  null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentLoanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentLoanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentLoanColumns = struct {
	PaymentLoanID string
	PaymentID     string
	LoanID        string
	PaymentDate   string
	PrinciplePaid string
	InterestPaid  string
	TotalPaid     string
	PaymentType   string
	BankID        string
	MakerDate     string
	CheckerDate   string
	MakerID       string
	CheckerID     string
	ModifiedBy    string
	ModifiedDate  string
}{
	PaymentLoanID: "payment_loan_id",
	PaymentID:     "payment_id",
	LoanID:        "loan_id",
	PaymentDate:   "payment_date",
	PrinciplePaid: "principle_paid",
	InterestPaid:  "interest_paid",
	TotalPaid:     "total_paid",
	PaymentType:   "payment_type",
	BankID:        "bank_id",
	MakerDate:     "maker_date",
	CheckerDate:   "checker_date",
	MakerID:       "maker_id",
	CheckerID:     "checker_id",
	ModifiedBy:    "modified_by",
	ModifiedDate:  "modified_date",
}

// Generated where

var PaymentLoanWhere = struct {
	PaymentLoanID whereHelperint
	PaymentID     whereHelperint
	LoanID        whereHelperint
	PaymentDate   whereHelpertime_Time
	PrinciplePaid whereHelpertypes_Decimal
	InterestPaid  whereHelpertypes_NullDecimal
	TotalPaid     whereHelpertypes_NullDecimal
	PaymentType   whereHelpernull_String
	BankID        whereHelperint
	MakerDate     whereHelpertime_Time
	CheckerDate   whereHelpernull_Time
	MakerID       whereHelperstring
	CheckerID     whereHelpernull_String
	ModifiedBy    whereHelpernull_String
	ModifiedDate  whereHelpernull_Time
}{
	PaymentLoanID: whereHelperint{field: `payment_loan_id`},
	PaymentID:     whereHelperint{field: `payment_id`},
	LoanID:        whereHelperint{field: `loan_id`},
	PaymentDate:   whereHelpertime_Time{field: `payment_date`},
	PrinciplePaid: whereHelpertypes_Decimal{field: `principle_paid`},
	InterestPaid:  whereHelpertypes_NullDecimal{field: `interest_paid`},
	TotalPaid:     whereHelpertypes_NullDecimal{field: `total_paid`},
	PaymentType:   whereHelpernull_String{field: `payment_type`},
	BankID:        whereHelperint{field: `bank_id`},
	MakerDate:     whereHelpertime_Time{field: `maker_date`},
	CheckerDate:   whereHelpernull_Time{field: `checker_date`},
	MakerID:       whereHelperstring{field: `maker_id`},
	CheckerID:     whereHelpernull_String{field: `checker_id`},
	ModifiedBy:    whereHelpernull_String{field: `modified_by`},
	ModifiedDate:  whereHelpernull_Time{field: `modified_date`},
}

// PaymentLoanRels is where relationship names are stored.
var PaymentLoanRels = struct {
	Payment string
	Loan    string
}{
	Payment: "Payment",
	Loan:    "Loan",
}

// paymentLoanR is where relationships are stored.
type paymentLoanR struct {
	Payment *PaymentInitiation
	Loan    *Loan
}

// NewStruct creates a new relationship struct
func (*paymentLoanR) NewStruct() *paymentLoanR {
	return &paymentLoanR{}
}

// paymentLoanL is where Load methods for each relationship are stored.
type paymentLoanL struct{}

var (
	paymentLoanColumns               = []string{"payment_loan_id", "payment_id", "loan_id", "payment_date", "principle_paid", "interest_paid", "total_paid", "payment_type", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentLoanColumnsWithoutDefault = []string{"payment_loan_id", "payment_id", "loan_id", "payment_date", "principle_paid", "interest_paid", "total_paid", "payment_type", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentLoanColumnsWithDefault    = []string{}
	paymentLoanPrimaryKeyColumns     = []string{"payment_loan_id"}
)

type (
	// PaymentLoanSlice is an alias for a slice of pointers to PaymentLoan.
	// This should generally be used opposed to []PaymentLoan.
	PaymentLoanSlice []*PaymentLoan
	// PaymentLoanHook is the signature for custom PaymentLoan hook methods
	PaymentLoanHook func(context.Context, boil.ContextExecutor, *PaymentLoan) error

	paymentLoanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentLoanType                 = reflect.TypeOf(&PaymentLoan{})
	paymentLoanMapping              = queries.MakeStructMapping(paymentLoanType)
	paymentLoanPrimaryKeyMapping, _ = queries.BindMapping(paymentLoanType, paymentLoanMapping, paymentLoanPrimaryKeyColumns)
	paymentLoanInsertCacheMut       sync.RWMutex
	paymentLoanInsertCache          = make(map[string]insertCache)
	paymentLoanUpdateCacheMut       sync.RWMutex
	paymentLoanUpdateCache          = make(map[string]updateCache)
	paymentLoanUpsertCacheMut       sync.RWMutex
	paymentLoanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentLoanBeforeInsertHooks []PaymentLoanHook
var paymentLoanBeforeUpdateHooks []PaymentLoanHook
var paymentLoanBeforeDeleteHooks []PaymentLoanHook
var paymentLoanBeforeUpsertHooks []PaymentLoanHook

var paymentLoanAfterInsertHooks []PaymentLoanHook
var paymentLoanAfterSelectHooks []PaymentLoanHook
var paymentLoanAfterUpdateHooks []PaymentLoanHook
var paymentLoanAfterDeleteHooks []PaymentLoanHook
var paymentLoanAfterUpsertHooks []PaymentLoanHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentLoan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentLoan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentLoan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentLoan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentLoan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentLoan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentLoan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentLoan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentLoan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLoanAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentLoanHook registers your hook function for all future operations.
func AddPaymentLoanHook(hookPoint boil.HookPoint, paymentLoanHook PaymentLoanHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentLoanBeforeInsertHooks = append(paymentLoanBeforeInsertHooks, paymentLoanHook)
	case boil.BeforeUpdateHook:
		paymentLoanBeforeUpdateHooks = append(paymentLoanBeforeUpdateHooks, paymentLoanHook)
	case boil.BeforeDeleteHook:
		paymentLoanBeforeDeleteHooks = append(paymentLoanBeforeDeleteHooks, paymentLoanHook)
	case boil.BeforeUpsertHook:
		paymentLoanBeforeUpsertHooks = append(paymentLoanBeforeUpsertHooks, paymentLoanHook)
	case boil.AfterInsertHook:
		paymentLoanAfterInsertHooks = append(paymentLoanAfterInsertHooks, paymentLoanHook)
	case boil.AfterSelectHook:
		paymentLoanAfterSelectHooks = append(paymentLoanAfterSelectHooks, paymentLoanHook)
	case boil.AfterUpdateHook:
		paymentLoanAfterUpdateHooks = append(paymentLoanAfterUpdateHooks, paymentLoanHook)
	case boil.AfterDeleteHook:
		paymentLoanAfterDeleteHooks = append(paymentLoanAfterDeleteHooks, paymentLoanHook)
	case boil.AfterUpsertHook:
		paymentLoanAfterUpsertHooks = append(paymentLoanAfterUpsertHooks, paymentLoanHook)
	}
}

// One returns a single paymentLoan record from the query.
func (q paymentLoanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentLoan, error) {
	o := &PaymentLoan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentLoan")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentLoan records from the query.
func (q paymentLoanQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentLoanSlice, error) {
	var o []*PaymentLoan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentLoan slice")
	}

	if len(paymentLoanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentLoan records in the query.
func (q paymentLoanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentLoan rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentLoanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentLoan exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentLoan) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// Loan pointed to by the foreign key.
func (o *PaymentLoan) Loan(mods ...qm.QueryMod) loanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("loan_id=?", o.LoanID),
	}

	queryMods = append(queryMods, mods...)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentLoanL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentLoan interface{}, mods queries.Applicator) error {
	var slice []*PaymentLoan
	var object *PaymentLoan

	if singular {
		object = maybePaymentLoan.(*PaymentLoan)
	} else {
		slice = *maybePaymentLoan.(*[]*PaymentLoan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentLoanR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentLoanR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentLoanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentLoans = append(foreign.R.PaymentPaymentLoans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentLoans = append(foreign.R.PaymentPaymentLoans, local)
				break
			}
		}
	}

	return nil
}

// LoadLoan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentLoanL) LoadLoan(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentLoan interface{}, mods queries.Applicator) error {
	var slice []*PaymentLoan
	var object *PaymentLoan

	if singular {
		object = maybePaymentLoan.(*PaymentLoan)
	} else {
		slice = *maybePaymentLoan.(*[]*PaymentLoan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentLoanR{}
		}
		args = append(args, object.LoanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentLoanR{}
			}

			for _, a := range args {
				if a == obj.LoanID {
					continue Outer
				}
			}

			args = append(args, obj.LoanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`loan_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(paymentLoanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Loan = foreign
		if foreign.R == nil {
			foreign.R = &loanR{}
		}
		foreign.R.LoanPaymentLoans = append(foreign.R.LoanPaymentLoans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoanID == foreign.LoanID {
				local.R.Loan = foreign
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.LoanPaymentLoans = append(foreign.R.LoanPaymentLoans, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentLoan to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentLoans.
func (o *PaymentLoan) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentLoan` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentLoanPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentLoanID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &paymentLoanR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentLoans: PaymentLoanSlice{o},
		}
	} else {
		related.R.PaymentPaymentLoans = append(related.R.PaymentPaymentLoans, o)
	}

	return nil
}

// SetLoan of the paymentLoan to the related item.
// Sets o.R.Loan to related.
// Adds o to related.R.LoanPaymentLoans.
func (o *PaymentLoan) SetLoan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Loan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentLoan` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"loan_id"}),
		strmangle.WhereClause("`", "`", 0, paymentLoanPrimaryKeyColumns),
	)
	values := []interface{}{related.LoanID, o.PaymentLoanID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoanID = related.LoanID
	if o.R == nil {
		o.R = &paymentLoanR{
			Loan: related,
		}
	} else {
		o.R.Loan = related
	}

	if related.R == nil {
		related.R = &loanR{
			LoanPaymentLoans: PaymentLoanSlice{o},
		}
	} else {
		related.R.LoanPaymentLoans = append(related.R.LoanPaymentLoans, o)
	}

	return nil
}

// PaymentLoans retrieves all the records using an executor.
func PaymentLoans(mods ...qm.QueryMod) paymentLoanQuery {
	mods = append(mods, qm.From("`PaymentLoan`"))
	return paymentLoanQuery{NewQuery(mods...)}
}

// FindPaymentLoan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentLoan(ctx context.Context, exec boil.ContextExecutor, paymentLoanID int, selectCols ...string) (*PaymentLoan, error) {
	paymentLoanObj := &PaymentLoan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentLoan` where `payment_loan_id`=?", sel,
	)

	q := queries.Raw(query, paymentLoanID)

	err := q.Bind(ctx, exec, paymentLoanObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentLoan")
	}

	return paymentLoanObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentLoan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentLoan provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentLoanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentLoanInsertCacheMut.RLock()
	cache, cached := paymentLoanInsertCache[key]
	paymentLoanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentLoanColumns,
			paymentLoanColumnsWithDefault,
			paymentLoanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentLoan` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentLoan` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentLoan` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentLoanPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentLoan")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentLoanID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentLoan")
	}

CacheNoHooks:
	if !cached {
		paymentLoanInsertCacheMut.Lock()
		paymentLoanInsertCache[key] = cache
		paymentLoanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentLoan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentLoan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentLoanUpdateCacheMut.RLock()
	cache, cached := paymentLoanUpdateCache[key]
	paymentLoanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentLoanColumns,
			paymentLoanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentLoan, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentLoan` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentLoanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, append(wl, paymentLoanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentLoan row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentLoan")
	}

	if !cached {
		paymentLoanUpdateCacheMut.Lock()
		paymentLoanUpdateCache[key] = cache
		paymentLoanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentLoanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentLoan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentLoan")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentLoanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLoanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentLoan` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLoanPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentLoan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentLoan")
	}
	return rowsAff, nil
}

var mySQLPaymentLoanUniqueColumns = []string{
	"payment_loan_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentLoan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentLoan provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentLoanColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentLoanUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentLoanUpsertCacheMut.RLock()
	cache, cached := paymentLoanUpsertCache[key]
	paymentLoanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentLoanColumns,
			paymentLoanColumnsWithDefault,
			paymentLoanColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentLoanColumns,
			paymentLoanPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentLoan, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentLoan", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentLoan` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentLoan")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentLoanType, paymentLoanMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentLoan")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentLoan")
	}

CacheNoHooks:
	if !cached {
		paymentLoanUpsertCacheMut.Lock()
		paymentLoanUpsertCache[key] = cache
		paymentLoanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentLoan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentLoan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentLoan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentLoanPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentLoan` WHERE `payment_loan_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentLoan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentLoan")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentLoanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentLoanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentLoan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentLoan")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentLoanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentLoan slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentLoanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLoanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentLoan` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLoanPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentLoan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentLoan")
	}

	if len(paymentLoanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentLoan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentLoan(ctx, exec, o.PaymentLoanID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentLoanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentLoanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLoanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentLoan`.* FROM `PaymentLoan` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLoanPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentLoanSlice")
	}

	*o = slice

	return nil
}

// PaymentLoanExists checks if the PaymentLoan row exists.
func PaymentLoanExists(ctx context.Context, exec boil.ContextExecutor, paymentLoanID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentLoan` where `payment_loan_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentLoanID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentLoanID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentLoan exists")
	}

	return exists, nil
}
