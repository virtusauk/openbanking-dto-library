// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// SchedulePayment is an object representing the database table.
type SchedulePayment struct {
	SchedulePaymentID                      int               `boil:"schedule_payment_id" json:"schedule_payment_id" toml:"schedule_payment_id" yaml:"schedule_payment_id"`
	AccountID                              null.Int          `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	SchedulePaymentDateandtime             null.Time         `boil:"schedule_payment_dateandtime" json:"schedule_payment_dateandtime,omitempty" toml:"schedule_payment_dateandtime" yaml:"schedule_payment_dateandtime,omitempty"`
	ScheduleType                           null.String       `boil:"schedule_type" json:"schedule_type,omitempty" toml:"schedule_type" yaml:"schedule_type,omitempty"`
	Reference                              null.String       `boil:"reference" json:"reference,omitempty" toml:"reference" yaml:"reference,omitempty"`
	InstructedAmount                       types.NullDecimal `boil:"instructed_amount" json:"instructed_amount,omitempty" toml:"instructed_amount" yaml:"instructed_amount,omitempty"`
	InstructedAmountCurrency               null.String       `boil:"instructed_amount_currency" json:"instructed_amount_currency,omitempty" toml:"instructed_amount_currency" yaml:"instructed_amount_currency,omitempty"`
	CreditoragentSchemeName                null.String       `boil:"creditoragent_scheme_name" json:"creditoragent_scheme_name,omitempty" toml:"creditoragent_scheme_name" yaml:"creditoragent_scheme_name,omitempty"`
	CreditoragentIdentification            null.String       `boil:"creditoragent_identification" json:"creditoragent_identification,omitempty" toml:"creditoragent_identification" yaml:"creditoragent_identification,omitempty"`
	CreditoraccountSchemename              null.String       `boil:"creditoraccount_schemename" json:"creditoraccount_schemename,omitempty" toml:"creditoraccount_schemename" yaml:"creditoraccount_schemename,omitempty"`
	CreditoraccountIdentification          null.String       `boil:"creditoraccount_identification" json:"creditoraccount_identification,omitempty" toml:"creditoraccount_identification" yaml:"creditoraccount_identification,omitempty"`
	CreditoraccountName                    null.String       `boil:"creditoraccount_name" json:"creditoraccount_name,omitempty" toml:"creditoraccount_name" yaml:"creditoraccount_name,omitempty"`
	CreditoraccountSecondaryIdentification null.String       `boil:"creditoraccount_secondary_identification" json:"creditoraccount_secondary_identification,omitempty" toml:"creditoraccount_secondary_identification" yaml:"creditoraccount_secondary_identification,omitempty"`
	MakerDate                              null.Time         `boil:"maker_date" json:"maker_date,omitempty" toml:"maker_date" yaml:"maker_date,omitempty"`
	CheckerDate                            null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                                null.String       `boil:"maker_id" json:"maker_id,omitempty" toml:"maker_id" yaml:"maker_id,omitempty"`
	CheckerID                              null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                             null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                           null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *schedulePaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schedulePaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchedulePaymentColumns = struct {
	SchedulePaymentID                      string
	AccountID                              string
	SchedulePaymentDateandtime             string
	ScheduleType                           string
	Reference                              string
	InstructedAmount                       string
	InstructedAmountCurrency               string
	CreditoragentSchemeName                string
	CreditoragentIdentification            string
	CreditoraccountSchemename              string
	CreditoraccountIdentification          string
	CreditoraccountName                    string
	CreditoraccountSecondaryIdentification string
	MakerDate                              string
	CheckerDate                            string
	MakerID                                string
	CheckerID                              string
	ModifiedBy                             string
	ModifiedDate                           string
}{
	SchedulePaymentID:                      "schedule_payment_id",
	AccountID:                              "account_id",
	SchedulePaymentDateandtime:             "schedule_payment_dateandtime",
	ScheduleType:                           "schedule_type",
	Reference:                              "reference",
	InstructedAmount:                       "instructed_amount",
	InstructedAmountCurrency:               "instructed_amount_currency",
	CreditoragentSchemeName:                "creditoragent_scheme_name",
	CreditoragentIdentification:            "creditoragent_identification",
	CreditoraccountSchemename:              "creditoraccount_schemename",
	CreditoraccountIdentification:          "creditoraccount_identification",
	CreditoraccountName:                    "creditoraccount_name",
	CreditoraccountSecondaryIdentification: "creditoraccount_secondary_identification",
	MakerDate:                              "maker_date",
	CheckerDate:                            "checker_date",
	MakerID:                                "maker_id",
	CheckerID:                              "checker_id",
	ModifiedBy:                             "modified_by",
	ModifiedDate:                           "modified_date",
}

// Generated where

var SchedulePaymentWhere = struct {
	SchedulePaymentID                      whereHelperint
	AccountID                              whereHelpernull_Int
	SchedulePaymentDateandtime             whereHelpernull_Time
	ScheduleType                           whereHelpernull_String
	Reference                              whereHelpernull_String
	InstructedAmount                       whereHelpertypes_NullDecimal
	InstructedAmountCurrency               whereHelpernull_String
	CreditoragentSchemeName                whereHelpernull_String
	CreditoragentIdentification            whereHelpernull_String
	CreditoraccountSchemename              whereHelpernull_String
	CreditoraccountIdentification          whereHelpernull_String
	CreditoraccountName                    whereHelpernull_String
	CreditoraccountSecondaryIdentification whereHelpernull_String
	MakerDate                              whereHelpernull_Time
	CheckerDate                            whereHelpernull_Time
	MakerID                                whereHelpernull_String
	CheckerID                              whereHelpernull_String
	ModifiedBy                             whereHelpernull_String
	ModifiedDate                           whereHelpernull_Time
}{
	SchedulePaymentID:                      whereHelperint{field: `schedule_payment_id`},
	AccountID:                              whereHelpernull_Int{field: `account_id`},
	SchedulePaymentDateandtime:             whereHelpernull_Time{field: `schedule_payment_dateandtime`},
	ScheduleType:                           whereHelpernull_String{field: `schedule_type`},
	Reference:                              whereHelpernull_String{field: `reference`},
	InstructedAmount:                       whereHelpertypes_NullDecimal{field: `instructed_amount`},
	InstructedAmountCurrency:               whereHelpernull_String{field: `instructed_amount_currency`},
	CreditoragentSchemeName:                whereHelpernull_String{field: `creditoragent_scheme_name`},
	CreditoragentIdentification:            whereHelpernull_String{field: `creditoragent_identification`},
	CreditoraccountSchemename:              whereHelpernull_String{field: `creditoraccount_schemename`},
	CreditoraccountIdentification:          whereHelpernull_String{field: `creditoraccount_identification`},
	CreditoraccountName:                    whereHelpernull_String{field: `creditoraccount_name`},
	CreditoraccountSecondaryIdentification: whereHelpernull_String{field: `creditoraccount_secondary_identification`},
	MakerDate:                              whereHelpernull_Time{field: `maker_date`},
	CheckerDate:                            whereHelpernull_Time{field: `checker_date`},
	MakerID:                                whereHelpernull_String{field: `maker_id`},
	CheckerID:                              whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                             whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                           whereHelpernull_Time{field: `modified_date`},
}

// SchedulePaymentRels is where relationship names are stored.
var SchedulePaymentRels = struct {
}{}

// schedulePaymentR is where relationships are stored.
type schedulePaymentR struct {
}

// NewStruct creates a new relationship struct
func (*schedulePaymentR) NewStruct() *schedulePaymentR {
	return &schedulePaymentR{}
}

// schedulePaymentL is where Load methods for each relationship are stored.
type schedulePaymentL struct{}

var (
	schedulePaymentColumns               = []string{"schedule_payment_id", "account_id", "schedule_payment_dateandtime", "schedule_type", "reference", "instructed_amount", "instructed_amount_currency", "creditoragent_scheme_name", "creditoragent_identification", "creditoraccount_schemename", "creditoraccount_identification", "creditoraccount_name", "creditoraccount_secondary_identification", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	schedulePaymentColumnsWithoutDefault = []string{"schedule_payment_id", "account_id", "schedule_payment_dateandtime", "schedule_type", "reference", "instructed_amount", "instructed_amount_currency", "creditoragent_scheme_name", "creditoragent_identification", "creditoraccount_schemename", "creditoraccount_identification", "creditoraccount_name", "creditoraccount_secondary_identification", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	schedulePaymentColumnsWithDefault    = []string{}
	schedulePaymentPrimaryKeyColumns     = []string{"schedule_payment_id"}
)

type (
	// SchedulePaymentSlice is an alias for a slice of pointers to SchedulePayment.
	// This should generally be used opposed to []SchedulePayment.
	SchedulePaymentSlice []*SchedulePayment
	// SchedulePaymentHook is the signature for custom SchedulePayment hook methods
	SchedulePaymentHook func(context.Context, boil.ContextExecutor, *SchedulePayment) error

	schedulePaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schedulePaymentType                 = reflect.TypeOf(&SchedulePayment{})
	schedulePaymentMapping              = queries.MakeStructMapping(schedulePaymentType)
	schedulePaymentPrimaryKeyMapping, _ = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, schedulePaymentPrimaryKeyColumns)
	schedulePaymentInsertCacheMut       sync.RWMutex
	schedulePaymentInsertCache          = make(map[string]insertCache)
	schedulePaymentUpdateCacheMut       sync.RWMutex
	schedulePaymentUpdateCache          = make(map[string]updateCache)
	schedulePaymentUpsertCacheMut       sync.RWMutex
	schedulePaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schedulePaymentBeforeInsertHooks []SchedulePaymentHook
var schedulePaymentBeforeUpdateHooks []SchedulePaymentHook
var schedulePaymentBeforeDeleteHooks []SchedulePaymentHook
var schedulePaymentBeforeUpsertHooks []SchedulePaymentHook

var schedulePaymentAfterInsertHooks []SchedulePaymentHook
var schedulePaymentAfterSelectHooks []SchedulePaymentHook
var schedulePaymentAfterUpdateHooks []SchedulePaymentHook
var schedulePaymentAfterDeleteHooks []SchedulePaymentHook
var schedulePaymentAfterUpsertHooks []SchedulePaymentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SchedulePayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SchedulePayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SchedulePayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SchedulePayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SchedulePayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SchedulePayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SchedulePayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SchedulePayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SchedulePayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range schedulePaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchedulePaymentHook registers your hook function for all future operations.
func AddSchedulePaymentHook(hookPoint boil.HookPoint, schedulePaymentHook SchedulePaymentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		schedulePaymentBeforeInsertHooks = append(schedulePaymentBeforeInsertHooks, schedulePaymentHook)
	case boil.BeforeUpdateHook:
		schedulePaymentBeforeUpdateHooks = append(schedulePaymentBeforeUpdateHooks, schedulePaymentHook)
	case boil.BeforeDeleteHook:
		schedulePaymentBeforeDeleteHooks = append(schedulePaymentBeforeDeleteHooks, schedulePaymentHook)
	case boil.BeforeUpsertHook:
		schedulePaymentBeforeUpsertHooks = append(schedulePaymentBeforeUpsertHooks, schedulePaymentHook)
	case boil.AfterInsertHook:
		schedulePaymentAfterInsertHooks = append(schedulePaymentAfterInsertHooks, schedulePaymentHook)
	case boil.AfterSelectHook:
		schedulePaymentAfterSelectHooks = append(schedulePaymentAfterSelectHooks, schedulePaymentHook)
	case boil.AfterUpdateHook:
		schedulePaymentAfterUpdateHooks = append(schedulePaymentAfterUpdateHooks, schedulePaymentHook)
	case boil.AfterDeleteHook:
		schedulePaymentAfterDeleteHooks = append(schedulePaymentAfterDeleteHooks, schedulePaymentHook)
	case boil.AfterUpsertHook:
		schedulePaymentAfterUpsertHooks = append(schedulePaymentAfterUpsertHooks, schedulePaymentHook)
	}
}

// One returns a single schedulePayment record from the query.
func (q schedulePaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SchedulePayment, error) {
	o := &SchedulePayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for SchedulePayment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SchedulePayment records from the query.
func (q schedulePaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (SchedulePaymentSlice, error) {
	var o []*SchedulePayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SchedulePayment slice")
	}

	if len(schedulePaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SchedulePayment records in the query.
func (q schedulePaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count SchedulePayment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q schedulePaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if SchedulePayment exists")
	}

	return count > 0, nil
}

// SchedulePayments retrieves all the records using an executor.
func SchedulePayments(mods ...qm.QueryMod) schedulePaymentQuery {
	mods = append(mods, qm.From("`SchedulePayment`"))
	return schedulePaymentQuery{NewQuery(mods...)}
}

// FindSchedulePayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedulePayment(ctx context.Context, exec boil.ContextExecutor, schedulePaymentID int, selectCols ...string) (*SchedulePayment, error) {
	schedulePaymentObj := &SchedulePayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `SchedulePayment` where `schedule_payment_id`=?", sel,
	)

	q := queries.Raw(query, schedulePaymentID)

	err := q.Bind(ctx, exec, schedulePaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from SchedulePayment")
	}

	return schedulePaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SchedulePayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SchedulePayment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulePaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schedulePaymentInsertCacheMut.RLock()
	cache, cached := schedulePaymentInsertCache[key]
	schedulePaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schedulePaymentColumns,
			schedulePaymentColumnsWithDefault,
			schedulePaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `SchedulePayment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `SchedulePayment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `SchedulePayment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, schedulePaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into SchedulePayment")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SchedulePaymentID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for SchedulePayment")
	}

CacheNoHooks:
	if !cached {
		schedulePaymentInsertCacheMut.Lock()
		schedulePaymentInsertCache[key] = cache
		schedulePaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SchedulePayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SchedulePayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schedulePaymentUpdateCacheMut.RLock()
	cache, cached := schedulePaymentUpdateCache[key]
	schedulePaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schedulePaymentColumns,
			schedulePaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update SchedulePayment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `SchedulePayment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, schedulePaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, append(wl, schedulePaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update SchedulePayment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for SchedulePayment")
	}

	if !cached {
		schedulePaymentUpdateCacheMut.Lock()
		schedulePaymentUpdateCache[key] = cache
		schedulePaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q schedulePaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for SchedulePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for SchedulePayment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchedulePaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `SchedulePayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePaymentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in schedulePayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all schedulePayment")
	}
	return rowsAff, nil
}

var mySQLSchedulePaymentUniqueColumns = []string{
	"schedule_payment_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SchedulePayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SchedulePayment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulePaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSchedulePaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schedulePaymentUpsertCacheMut.RLock()
	cache, cached := schedulePaymentUpsertCache[key]
	schedulePaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			schedulePaymentColumns,
			schedulePaymentColumnsWithDefault,
			schedulePaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			schedulePaymentColumns,
			schedulePaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert SchedulePayment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "SchedulePayment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `SchedulePayment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for SchedulePayment")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(schedulePaymentType, schedulePaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for SchedulePayment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for SchedulePayment")
	}

CacheNoHooks:
	if !cached {
		schedulePaymentUpsertCacheMut.Lock()
		schedulePaymentUpsertCache[key] = cache
		schedulePaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SchedulePayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SchedulePayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SchedulePayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulePaymentPrimaryKeyMapping)
	sql := "DELETE FROM `SchedulePayment` WHERE `schedule_payment_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from SchedulePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for SchedulePayment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q schedulePaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no schedulePaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from SchedulePayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SchedulePayment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchedulePaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SchedulePayment slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(schedulePaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `SchedulePayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePaymentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedulePayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SchedulePayment")
	}

	if len(schedulePaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SchedulePayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchedulePayment(ctx, exec, o.SchedulePaymentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchedulePaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchedulePaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `SchedulePayment`.* FROM `SchedulePayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SchedulePaymentSlice")
	}

	*o = slice

	return nil
}

// SchedulePaymentExists checks if the SchedulePayment row exists.
func SchedulePaymentExists(ctx context.Context, exec boil.ContextExecutor, schedulePaymentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `SchedulePayment` where `schedule_payment_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, schedulePaymentID)
	}

	row := exec.QueryRowContext(ctx, sql, schedulePaymentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if SchedulePayment exists")
	}

	return exists, nil
}
