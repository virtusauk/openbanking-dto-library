// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentLimit is an object representing the database table.
type PaymentLimit struct {
	PaymentLimitID           int           `boil:"payment_limit_id" json:"payment_limit_id" toml:"payment_limit_id" yaml:"payment_limit_id"`
	PartyID                  int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	AcountID                 int           `boil:"acount_id" json:"acount_id" toml:"acount_id" yaml:"acount_id"`
	NoOfTransactionPerDay    int           `boil:"no_of_transaction_per_day" json:"no_of_transaction_per_day" toml:"no_of_transaction_per_day" yaml:"no_of_transaction_per_day"`
	MaximumTransactionAmount types.Decimal `boil:"maximum_transaction_amount" json:"maximum_transaction_amount" toml:"maximum_transaction_amount" yaml:"maximum_transaction_amount"`
	MinimumTransactionAmount types.Decimal `boil:"minimum_transaction_amount" json:"minimum_transaction_amount" toml:"minimum_transaction_amount" yaml:"minimum_transaction_amount"`
	CurrencyCode             string        `boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	MakerDate                time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate              null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                  string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy               null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate             null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentLimitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentLimitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentLimitColumns = struct {
	PaymentLimitID           string
	PartyID                  string
	AcountID                 string
	NoOfTransactionPerDay    string
	MaximumTransactionAmount string
	MinimumTransactionAmount string
	CurrencyCode             string
	MakerDate                string
	CheckerDate              string
	MakerID                  string
	CheckerID                string
	ModifiedBy               string
	ModifiedDate             string
}{
	PaymentLimitID:           "payment_limit_id",
	PartyID:                  "party_id",
	AcountID:                 "acount_id",
	NoOfTransactionPerDay:    "no_of_transaction_per_day",
	MaximumTransactionAmount: "maximum_transaction_amount",
	MinimumTransactionAmount: "minimum_transaction_amount",
	CurrencyCode:             "currency_code",
	MakerDate:                "maker_date",
	CheckerDate:              "checker_date",
	MakerID:                  "maker_id",
	CheckerID:                "checker_id",
	ModifiedBy:               "modified_by",
	ModifiedDate:             "modified_date",
}

// Generated where

var PaymentLimitWhere = struct {
	PaymentLimitID           whereHelperint
	PartyID                  whereHelperint
	AcountID                 whereHelperint
	NoOfTransactionPerDay    whereHelperint
	MaximumTransactionAmount whereHelpertypes_Decimal
	MinimumTransactionAmount whereHelpertypes_Decimal
	CurrencyCode             whereHelperstring
	MakerDate                whereHelpertime_Time
	CheckerDate              whereHelpernull_Time
	MakerID                  whereHelperstring
	CheckerID                whereHelpernull_String
	ModifiedBy               whereHelpernull_String
	ModifiedDate             whereHelpernull_Time
}{
	PaymentLimitID:           whereHelperint{field: `payment_limit_id`},
	PartyID:                  whereHelperint{field: `party_id`},
	AcountID:                 whereHelperint{field: `acount_id`},
	NoOfTransactionPerDay:    whereHelperint{field: `no_of_transaction_per_day`},
	MaximumTransactionAmount: whereHelpertypes_Decimal{field: `maximum_transaction_amount`},
	MinimumTransactionAmount: whereHelpertypes_Decimal{field: `minimum_transaction_amount`},
	CurrencyCode:             whereHelperstring{field: `currency_code`},
	MakerDate:                whereHelpertime_Time{field: `maker_date`},
	CheckerDate:              whereHelpernull_Time{field: `checker_date`},
	MakerID:                  whereHelperstring{field: `maker_id`},
	CheckerID:                whereHelpernull_String{field: `checker_id`},
	ModifiedBy:               whereHelpernull_String{field: `modified_by`},
	ModifiedDate:             whereHelpernull_Time{field: `modified_date`},
}

// PaymentLimitRels is where relationship names are stored.
var PaymentLimitRels = struct {
	Acount string
}{
	Acount: "Acount",
}

// paymentLimitR is where relationships are stored.
type paymentLimitR struct {
	Acount *Account
}

// NewStruct creates a new relationship struct
func (*paymentLimitR) NewStruct() *paymentLimitR {
	return &paymentLimitR{}
}

// paymentLimitL is where Load methods for each relationship are stored.
type paymentLimitL struct{}

var (
	paymentLimitColumns               = []string{"payment_limit_id", "party_id", "acount_id", "no_of_transaction_per_day", "maximum_transaction_amount", "minimum_transaction_amount", "currency_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentLimitColumnsWithoutDefault = []string{"party_id", "acount_id", "no_of_transaction_per_day", "maximum_transaction_amount", "minimum_transaction_amount", "currency_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentLimitColumnsWithDefault    = []string{"payment_limit_id"}
	paymentLimitPrimaryKeyColumns     = []string{"payment_limit_id"}
)

type (
	// PaymentLimitSlice is an alias for a slice of pointers to PaymentLimit.
	// This should generally be used opposed to []PaymentLimit.
	PaymentLimitSlice []*PaymentLimit
	// PaymentLimitHook is the signature for custom PaymentLimit hook methods
	PaymentLimitHook func(context.Context, boil.ContextExecutor, *PaymentLimit) error

	paymentLimitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentLimitType                 = reflect.TypeOf(&PaymentLimit{})
	paymentLimitMapping              = queries.MakeStructMapping(paymentLimitType)
	paymentLimitPrimaryKeyMapping, _ = queries.BindMapping(paymentLimitType, paymentLimitMapping, paymentLimitPrimaryKeyColumns)
	paymentLimitInsertCacheMut       sync.RWMutex
	paymentLimitInsertCache          = make(map[string]insertCache)
	paymentLimitUpdateCacheMut       sync.RWMutex
	paymentLimitUpdateCache          = make(map[string]updateCache)
	paymentLimitUpsertCacheMut       sync.RWMutex
	paymentLimitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentLimitBeforeInsertHooks []PaymentLimitHook
var paymentLimitBeforeUpdateHooks []PaymentLimitHook
var paymentLimitBeforeDeleteHooks []PaymentLimitHook
var paymentLimitBeforeUpsertHooks []PaymentLimitHook

var paymentLimitAfterInsertHooks []PaymentLimitHook
var paymentLimitAfterSelectHooks []PaymentLimitHook
var paymentLimitAfterUpdateHooks []PaymentLimitHook
var paymentLimitAfterDeleteHooks []PaymentLimitHook
var paymentLimitAfterUpsertHooks []PaymentLimitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentLimit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentLimit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentLimit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentLimit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentLimit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentLimit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentLimit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentLimit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentLimit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentLimitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentLimitHook registers your hook function for all future operations.
func AddPaymentLimitHook(hookPoint boil.HookPoint, paymentLimitHook PaymentLimitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentLimitBeforeInsertHooks = append(paymentLimitBeforeInsertHooks, paymentLimitHook)
	case boil.BeforeUpdateHook:
		paymentLimitBeforeUpdateHooks = append(paymentLimitBeforeUpdateHooks, paymentLimitHook)
	case boil.BeforeDeleteHook:
		paymentLimitBeforeDeleteHooks = append(paymentLimitBeforeDeleteHooks, paymentLimitHook)
	case boil.BeforeUpsertHook:
		paymentLimitBeforeUpsertHooks = append(paymentLimitBeforeUpsertHooks, paymentLimitHook)
	case boil.AfterInsertHook:
		paymentLimitAfterInsertHooks = append(paymentLimitAfterInsertHooks, paymentLimitHook)
	case boil.AfterSelectHook:
		paymentLimitAfterSelectHooks = append(paymentLimitAfterSelectHooks, paymentLimitHook)
	case boil.AfterUpdateHook:
		paymentLimitAfterUpdateHooks = append(paymentLimitAfterUpdateHooks, paymentLimitHook)
	case boil.AfterDeleteHook:
		paymentLimitAfterDeleteHooks = append(paymentLimitAfterDeleteHooks, paymentLimitHook)
	case boil.AfterUpsertHook:
		paymentLimitAfterUpsertHooks = append(paymentLimitAfterUpsertHooks, paymentLimitHook)
	}
}

// One returns a single paymentLimit record from the query.
func (q paymentLimitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentLimit, error) {
	o := &PaymentLimit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentLimit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentLimit records from the query.
func (q paymentLimitQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentLimitSlice, error) {
	var o []*PaymentLimit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentLimit slice")
	}

	if len(paymentLimitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentLimit records in the query.
func (q paymentLimitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentLimit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentLimitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentLimit exists")
	}

	return count > 0, nil
}

// Acount pointed to by the foreign key.
func (o *PaymentLimit) Acount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AcountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// LoadAcount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentLimitL) LoadAcount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentLimit interface{}, mods queries.Applicator) error {
	var slice []*PaymentLimit
	var object *PaymentLimit

	if singular {
		object = maybePaymentLimit.(*PaymentLimit)
	} else {
		slice = *maybePaymentLimit.(*[]*PaymentLimit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentLimitR{}
		}
		args = append(args, object.AcountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentLimitR{}
			}

			for _, a := range args {
				if a == obj.AcountID {
					continue Outer
				}
			}

			args = append(args, obj.AcountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentLimitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Acount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AcountPaymentLimits = append(foreign.R.AcountPaymentLimits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AcountID == foreign.AccountID {
				local.R.Acount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AcountPaymentLimits = append(foreign.R.AcountPaymentLimits, local)
				break
			}
		}
	}

	return nil
}

// SetAcount of the paymentLimit to the related item.
// Sets o.R.Acount to related.
// Adds o to related.R.AcountPaymentLimits.
func (o *PaymentLimit) SetAcount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentLimit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"acount_id"}),
		strmangle.WhereClause("`", "`", 0, paymentLimitPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentLimitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AcountID = related.AccountID
	if o.R == nil {
		o.R = &paymentLimitR{
			Acount: related,
		}
	} else {
		o.R.Acount = related
	}

	if related.R == nil {
		related.R = &accountR{
			AcountPaymentLimits: PaymentLimitSlice{o},
		}
	} else {
		related.R.AcountPaymentLimits = append(related.R.AcountPaymentLimits, o)
	}

	return nil
}

// PaymentLimits retrieves all the records using an executor.
func PaymentLimits(mods ...qm.QueryMod) paymentLimitQuery {
	mods = append(mods, qm.From("`PaymentLimit`"))
	return paymentLimitQuery{NewQuery(mods...)}
}

// FindPaymentLimit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentLimit(ctx context.Context, exec boil.ContextExecutor, paymentLimitID int, selectCols ...string) (*PaymentLimit, error) {
	paymentLimitObj := &PaymentLimit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentLimit` where `payment_limit_id`=?", sel,
	)

	q := queries.Raw(query, paymentLimitID)

	err := q.Bind(ctx, exec, paymentLimitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentLimit")
	}

	return paymentLimitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentLimit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentLimit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentLimitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentLimitInsertCacheMut.RLock()
	cache, cached := paymentLimitInsertCache[key]
	paymentLimitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentLimitColumns,
			paymentLimitColumnsWithDefault,
			paymentLimitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentLimit` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentLimit` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentLimit` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentLimitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentLimit")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentLimitID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentLimitMapping["PaymentLimitID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentLimitID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentLimit")
	}

CacheNoHooks:
	if !cached {
		paymentLimitInsertCacheMut.Lock()
		paymentLimitInsertCache[key] = cache
		paymentLimitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentLimit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentLimit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentLimitUpdateCacheMut.RLock()
	cache, cached := paymentLimitUpdateCache[key]
	paymentLimitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentLimitColumns,
			paymentLimitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentLimit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentLimit` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentLimitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, append(wl, paymentLimitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentLimit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentLimit")
	}

	if !cached {
		paymentLimitUpdateCacheMut.Lock()
		paymentLimitUpdateCache[key] = cache
		paymentLimitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentLimitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentLimit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentLimit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentLimitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLimitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentLimit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLimitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentLimit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentLimit")
	}
	return rowsAff, nil
}

var mySQLPaymentLimitUniqueColumns = []string{
	"payment_limit_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentLimit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentLimit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentLimitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentLimitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentLimitUpsertCacheMut.RLock()
	cache, cached := paymentLimitUpsertCache[key]
	paymentLimitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentLimitColumns,
			paymentLimitColumnsWithDefault,
			paymentLimitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentLimitColumns,
			paymentLimitPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentLimit, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentLimit", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentLimit` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentLimit")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentLimitID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentLimitMapping["payment_limit_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentLimitType, paymentLimitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentLimit")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentLimit")
	}

CacheNoHooks:
	if !cached {
		paymentLimitUpsertCacheMut.Lock()
		paymentLimitUpsertCache[key] = cache
		paymentLimitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentLimit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentLimit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentLimit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentLimitPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentLimit` WHERE `payment_limit_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentLimit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentLimit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentLimitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentLimitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentLimit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentLimit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentLimitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentLimit slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentLimitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLimitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentLimit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLimitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentLimit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentLimit")
	}

	if len(paymentLimitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentLimit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentLimit(ctx, exec, o.PaymentLimitID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentLimitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentLimitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentLimitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentLimit`.* FROM `PaymentLimit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentLimitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentLimitSlice")
	}

	*o = slice

	return nil
}

// PaymentLimitExists checks if the PaymentLimit row exists.
func PaymentLimitExists(ctx context.Context, exec boil.ContextExecutor, paymentLimitID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentLimit` where `payment_limit_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentLimitID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentLimitID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentLimit exists")
	}

	return exists, nil
}
