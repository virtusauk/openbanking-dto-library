// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DerivedTxn is an object representing the database table.
type DerivedTxn struct {
	OrgID                      int         `boil:"org_id" json:"org_id" toml:"org_id" yaml:"org_id"`
	PCTOpenAcTXN               null.Int    `boil:"pct_open_ac_txn" json:"pct_open_ac_txn,omitempty" toml:"pct_open_ac_txn" yaml:"pct_open_ac_txn,omitempty"`
	PCTTXNWithoutLC            null.Int    `boil:"pct_txn_without_lc" json:"pct_txn_without_lc,omitempty" toml:"pct_txn_without_lc" yaml:"pct_txn_without_lc,omitempty"`
	PCTHighValueImportTXN      null.Int    `boil:"pct_high_value_import_txn" json:"pct_high_value_import_txn,omitempty" toml:"pct_high_value_import_txn" yaml:"pct_high_value_import_txn,omitempty"`
	VolImportUsingLC           null.String `boil:"vol_import_using_lc" json:"vol_import_using_lc,omitempty" toml:"vol_import_using_lc" yaml:"vol_import_using_lc,omitempty"`
	PCTIncInOutstandingExports null.Int    `boil:"pct_inc_in_outstanding_exports" json:"pct_inc_in_outstanding_exports,omitempty" toml:"pct_inc_in_outstanding_exports" yaml:"pct_inc_in_outstanding_exports,omitempty"`
	TotalExports               null.Int    `boil:"total_exports" json:"total_exports,omitempty" toml:"total_exports" yaml:"total_exports,omitempty"`
	TotalImports               null.Int    `boil:"total_imports" json:"total_imports,omitempty" toml:"total_imports" yaml:"total_imports,omitempty"`

	R *derivedTxnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L derivedTxnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DerivedTxnColumns = struct {
	OrgID                      string
	PCTOpenAcTXN               string
	PCTTXNWithoutLC            string
	PCTHighValueImportTXN      string
	VolImportUsingLC           string
	PCTIncInOutstandingExports string
	TotalExports               string
	TotalImports               string
}{
	OrgID:                      "org_id",
	PCTOpenAcTXN:               "pct_open_ac_txn",
	PCTTXNWithoutLC:            "pct_txn_without_lc",
	PCTHighValueImportTXN:      "pct_high_value_import_txn",
	VolImportUsingLC:           "vol_import_using_lc",
	PCTIncInOutstandingExports: "pct_inc_in_outstanding_exports",
	TotalExports:               "total_exports",
	TotalImports:               "total_imports",
}

// Generated where

var DerivedTxnWhere = struct {
	OrgID                      whereHelperint
	PCTOpenAcTXN               whereHelpernull_Int
	PCTTXNWithoutLC            whereHelpernull_Int
	PCTHighValueImportTXN      whereHelpernull_Int
	VolImportUsingLC           whereHelpernull_String
	PCTIncInOutstandingExports whereHelpernull_Int
	TotalExports               whereHelpernull_Int
	TotalImports               whereHelpernull_Int
}{
	OrgID:                      whereHelperint{field: `org_id`},
	PCTOpenAcTXN:               whereHelpernull_Int{field: `pct_open_ac_txn`},
	PCTTXNWithoutLC:            whereHelpernull_Int{field: `pct_txn_without_lc`},
	PCTHighValueImportTXN:      whereHelpernull_Int{field: `pct_high_value_import_txn`},
	VolImportUsingLC:           whereHelpernull_String{field: `vol_import_using_lc`},
	PCTIncInOutstandingExports: whereHelpernull_Int{field: `pct_inc_in_outstanding_exports`},
	TotalExports:               whereHelpernull_Int{field: `total_exports`},
	TotalImports:               whereHelpernull_Int{field: `total_imports`},
}

// DerivedTxnRels is where relationship names are stored.
var DerivedTxnRels = struct {
}{}

// derivedTxnR is where relationships are stored.
type derivedTxnR struct {
}

// NewStruct creates a new relationship struct
func (*derivedTxnR) NewStruct() *derivedTxnR {
	return &derivedTxnR{}
}

// derivedTxnL is where Load methods for each relationship are stored.
type derivedTxnL struct{}

var (
	derivedTxnColumns               = []string{"org_id", "pct_open_ac_txn", "pct_txn_without_lc", "pct_high_value_import_txn", "vol_import_using_lc", "pct_inc_in_outstanding_exports", "total_exports", "total_imports"}
	derivedTxnColumnsWithoutDefault = []string{"org_id", "pct_open_ac_txn", "pct_txn_without_lc", "pct_high_value_import_txn", "vol_import_using_lc", "pct_inc_in_outstanding_exports", "total_exports", "total_imports"}
	derivedTxnColumnsWithDefault    = []string{}
	derivedTxnPrimaryKeyColumns     = []string{"org_id"}
)

type (
	// DerivedTxnSlice is an alias for a slice of pointers to DerivedTxn.
	// This should generally be used opposed to []DerivedTxn.
	DerivedTxnSlice []*DerivedTxn
	// DerivedTxnHook is the signature for custom DerivedTxn hook methods
	DerivedTxnHook func(context.Context, boil.ContextExecutor, *DerivedTxn) error

	derivedTxnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	derivedTxnType                 = reflect.TypeOf(&DerivedTxn{})
	derivedTxnMapping              = queries.MakeStructMapping(derivedTxnType)
	derivedTxnPrimaryKeyMapping, _ = queries.BindMapping(derivedTxnType, derivedTxnMapping, derivedTxnPrimaryKeyColumns)
	derivedTxnInsertCacheMut       sync.RWMutex
	derivedTxnInsertCache          = make(map[string]insertCache)
	derivedTxnUpdateCacheMut       sync.RWMutex
	derivedTxnUpdateCache          = make(map[string]updateCache)
	derivedTxnUpsertCacheMut       sync.RWMutex
	derivedTxnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var derivedTxnBeforeInsertHooks []DerivedTxnHook
var derivedTxnBeforeUpdateHooks []DerivedTxnHook
var derivedTxnBeforeDeleteHooks []DerivedTxnHook
var derivedTxnBeforeUpsertHooks []DerivedTxnHook

var derivedTxnAfterInsertHooks []DerivedTxnHook
var derivedTxnAfterSelectHooks []DerivedTxnHook
var derivedTxnAfterUpdateHooks []DerivedTxnHook
var derivedTxnAfterDeleteHooks []DerivedTxnHook
var derivedTxnAfterUpsertHooks []DerivedTxnHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DerivedTxn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DerivedTxn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DerivedTxn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DerivedTxn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DerivedTxn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DerivedTxn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DerivedTxn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DerivedTxn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DerivedTxn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range derivedTxnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDerivedTxnHook registers your hook function for all future operations.
func AddDerivedTxnHook(hookPoint boil.HookPoint, derivedTxnHook DerivedTxnHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		derivedTxnBeforeInsertHooks = append(derivedTxnBeforeInsertHooks, derivedTxnHook)
	case boil.BeforeUpdateHook:
		derivedTxnBeforeUpdateHooks = append(derivedTxnBeforeUpdateHooks, derivedTxnHook)
	case boil.BeforeDeleteHook:
		derivedTxnBeforeDeleteHooks = append(derivedTxnBeforeDeleteHooks, derivedTxnHook)
	case boil.BeforeUpsertHook:
		derivedTxnBeforeUpsertHooks = append(derivedTxnBeforeUpsertHooks, derivedTxnHook)
	case boil.AfterInsertHook:
		derivedTxnAfterInsertHooks = append(derivedTxnAfterInsertHooks, derivedTxnHook)
	case boil.AfterSelectHook:
		derivedTxnAfterSelectHooks = append(derivedTxnAfterSelectHooks, derivedTxnHook)
	case boil.AfterUpdateHook:
		derivedTxnAfterUpdateHooks = append(derivedTxnAfterUpdateHooks, derivedTxnHook)
	case boil.AfterDeleteHook:
		derivedTxnAfterDeleteHooks = append(derivedTxnAfterDeleteHooks, derivedTxnHook)
	case boil.AfterUpsertHook:
		derivedTxnAfterUpsertHooks = append(derivedTxnAfterUpsertHooks, derivedTxnHook)
	}
}

// One returns a single derivedTxn record from the query.
func (q derivedTxnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DerivedTxn, error) {
	o := &DerivedTxn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DerivedTxn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DerivedTxn records from the query.
func (q derivedTxnQuery) All(ctx context.Context, exec boil.ContextExecutor) (DerivedTxnSlice, error) {
	var o []*DerivedTxn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DerivedTxn slice")
	}

	if len(derivedTxnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DerivedTxn records in the query.
func (q derivedTxnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DerivedTxn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q derivedTxnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DerivedTxn exists")
	}

	return count > 0, nil
}

// DerivedTxns retrieves all the records using an executor.
func DerivedTxns(mods ...qm.QueryMod) derivedTxnQuery {
	mods = append(mods, qm.From("`DerivedTxn`"))
	return derivedTxnQuery{NewQuery(mods...)}
}

// FindDerivedTxn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDerivedTxn(ctx context.Context, exec boil.ContextExecutor, orgID int, selectCols ...string) (*DerivedTxn, error) {
	derivedTxnObj := &DerivedTxn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `DerivedTxn` where `org_id`=?", sel,
	)

	q := queries.Raw(query, orgID)

	err := q.Bind(ctx, exec, derivedTxnObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DerivedTxn")
	}

	return derivedTxnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DerivedTxn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DerivedTxn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(derivedTxnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	derivedTxnInsertCacheMut.RLock()
	cache, cached := derivedTxnInsertCache[key]
	derivedTxnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			derivedTxnColumns,
			derivedTxnColumnsWithDefault,
			derivedTxnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `DerivedTxn` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `DerivedTxn` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `DerivedTxn` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, derivedTxnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DerivedTxn")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrgID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for DerivedTxn")
	}

CacheNoHooks:
	if !cached {
		derivedTxnInsertCacheMut.Lock()
		derivedTxnInsertCache[key] = cache
		derivedTxnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DerivedTxn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DerivedTxn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	derivedTxnUpdateCacheMut.RLock()
	cache, cached := derivedTxnUpdateCache[key]
	derivedTxnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			derivedTxnColumns,
			derivedTxnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DerivedTxn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `DerivedTxn` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, derivedTxnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, append(wl, derivedTxnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DerivedTxn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DerivedTxn")
	}

	if !cached {
		derivedTxnUpdateCacheMut.Lock()
		derivedTxnUpdateCache[key] = cache
		derivedTxnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q derivedTxnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DerivedTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DerivedTxn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DerivedTxnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivedTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `DerivedTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, derivedTxnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in derivedTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all derivedTxn")
	}
	return rowsAff, nil
}

var mySQLDerivedTxnUniqueColumns = []string{
	"org_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DerivedTxn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DerivedTxn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(derivedTxnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDerivedTxnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	derivedTxnUpsertCacheMut.RLock()
	cache, cached := derivedTxnUpsertCache[key]
	derivedTxnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			derivedTxnColumns,
			derivedTxnColumnsWithDefault,
			derivedTxnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			derivedTxnColumns,
			derivedTxnPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert DerivedTxn, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "DerivedTxn", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `DerivedTxn` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for DerivedTxn")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(derivedTxnType, derivedTxnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for DerivedTxn")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for DerivedTxn")
	}

CacheNoHooks:
	if !cached {
		derivedTxnUpsertCacheMut.Lock()
		derivedTxnUpsertCache[key] = cache
		derivedTxnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DerivedTxn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DerivedTxn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DerivedTxn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), derivedTxnPrimaryKeyMapping)
	sql := "DELETE FROM `DerivedTxn` WHERE `org_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DerivedTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DerivedTxn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q derivedTxnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no derivedTxnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DerivedTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DerivedTxn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DerivedTxnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DerivedTxn slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(derivedTxnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivedTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `DerivedTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, derivedTxnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from derivedTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DerivedTxn")
	}

	if len(derivedTxnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DerivedTxn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDerivedTxn(ctx, exec, o.OrgID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DerivedTxnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DerivedTxnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), derivedTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `DerivedTxn`.* FROM `DerivedTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, derivedTxnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DerivedTxnSlice")
	}

	*o = slice

	return nil
}

// DerivedTxnExists checks if the DerivedTxn row exists.
func DerivedTxnExists(ctx context.Context, exec boil.ContextExecutor, orgID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `DerivedTxn` where `org_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, orgID)
	}

	row := exec.QueryRowContext(ctx, sql, orgID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DerivedTxn exists")
	}

	return exists, nil
}
