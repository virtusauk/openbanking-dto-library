// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// LineOfCredit is an object representing the database table.
type LineOfCredit struct {
	LineofCreditID int           `boil:"lineof_credit_id" json:"lineof_credit_id" toml:"lineof_credit_id" yaml:"lineof_credit_id"`
	Amount         types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	ExpireDate     time.Time     `boil:"expire_date" json:"expire_date" toml:"expire_date" yaml:"expire_date"`
	Notes          null.String   `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	StartDate      null.Time     `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	PartyID        int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	ClosedDate     null.Time     `boil:"closed_date" json:"closed_date,omitempty" toml:"closed_date" yaml:"closed_date,omitempty"`
	State          null.String   `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	LineCurrency   null.String   `boil:"line_currency" json:"line_currency,omitempty" toml:"line_currency" yaml:"line_currency,omitempty"`
	MakerDate      time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate    null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID        string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID      null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy     null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate   null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *lineOfCreditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lineOfCreditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LineOfCreditColumns = struct {
	LineofCreditID string
	Amount         string
	ExpireDate     string
	Notes          string
	StartDate      string
	PartyID        string
	ClosedDate     string
	State          string
	LineCurrency   string
	MakerDate      string
	CheckerDate    string
	MakerID        string
	CheckerID      string
	ModifiedBy     string
	ModifiedDate   string
}{
	LineofCreditID: "lineof_credit_id",
	Amount:         "amount",
	ExpireDate:     "expire_date",
	Notes:          "notes",
	StartDate:      "start_date",
	PartyID:        "party_id",
	ClosedDate:     "closed_date",
	State:          "state",
	LineCurrency:   "line_currency",
	MakerDate:      "maker_date",
	CheckerDate:    "checker_date",
	MakerID:        "maker_id",
	CheckerID:      "checker_id",
	ModifiedBy:     "modified_by",
	ModifiedDate:   "modified_date",
}

// Generated where

var LineOfCreditWhere = struct {
	LineofCreditID whereHelperint
	Amount         whereHelpertypes_Decimal
	ExpireDate     whereHelpertime_Time
	Notes          whereHelpernull_String
	StartDate      whereHelpernull_Time
	PartyID        whereHelperint
	ClosedDate     whereHelpernull_Time
	State          whereHelpernull_String
	LineCurrency   whereHelpernull_String
	MakerDate      whereHelpertime_Time
	CheckerDate    whereHelpernull_Time
	MakerID        whereHelperstring
	CheckerID      whereHelpernull_String
	ModifiedBy     whereHelpernull_String
	ModifiedDate   whereHelpernull_Time
}{
	LineofCreditID: whereHelperint{field: `lineof_credit_id`},
	Amount:         whereHelpertypes_Decimal{field: `amount`},
	ExpireDate:     whereHelpertime_Time{field: `expire_date`},
	Notes:          whereHelpernull_String{field: `notes`},
	StartDate:      whereHelpernull_Time{field: `start_date`},
	PartyID:        whereHelperint{field: `party_id`},
	ClosedDate:     whereHelpernull_Time{field: `closed_date`},
	State:          whereHelpernull_String{field: `state`},
	LineCurrency:   whereHelpernull_String{field: `line_currency`},
	MakerDate:      whereHelpertime_Time{field: `maker_date`},
	CheckerDate:    whereHelpernull_Time{field: `checker_date`},
	MakerID:        whereHelperstring{field: `maker_id`},
	CheckerID:      whereHelpernull_String{field: `checker_id`},
	ModifiedBy:     whereHelpernull_String{field: `modified_by`},
	ModifiedDate:   whereHelpernull_Time{field: `modified_date`},
}

// LineOfCreditRels is where relationship names are stored.
var LineOfCreditRels = struct {
	Party string
}{
	Party: "Party",
}

// lineOfCreditR is where relationships are stored.
type lineOfCreditR struct {
	Party *Party
}

// NewStruct creates a new relationship struct
func (*lineOfCreditR) NewStruct() *lineOfCreditR {
	return &lineOfCreditR{}
}

// lineOfCreditL is where Load methods for each relationship are stored.
type lineOfCreditL struct{}

var (
	lineOfCreditColumns               = []string{"lineof_credit_id", "amount", "expire_date", "notes", "start_date", "party_id", "closed_date", "state", "line_currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	lineOfCreditColumnsWithoutDefault = []string{"amount", "expire_date", "notes", "start_date", "party_id", "closed_date", "state", "line_currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	lineOfCreditColumnsWithDefault    = []string{"lineof_credit_id"}
	lineOfCreditPrimaryKeyColumns     = []string{"lineof_credit_id"}
)

type (
	// LineOfCreditSlice is an alias for a slice of pointers to LineOfCredit.
	// This should generally be used opposed to []LineOfCredit.
	LineOfCreditSlice []*LineOfCredit
	// LineOfCreditHook is the signature for custom LineOfCredit hook methods
	LineOfCreditHook func(context.Context, boil.ContextExecutor, *LineOfCredit) error

	lineOfCreditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lineOfCreditType                 = reflect.TypeOf(&LineOfCredit{})
	lineOfCreditMapping              = queries.MakeStructMapping(lineOfCreditType)
	lineOfCreditPrimaryKeyMapping, _ = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, lineOfCreditPrimaryKeyColumns)
	lineOfCreditInsertCacheMut       sync.RWMutex
	lineOfCreditInsertCache          = make(map[string]insertCache)
	lineOfCreditUpdateCacheMut       sync.RWMutex
	lineOfCreditUpdateCache          = make(map[string]updateCache)
	lineOfCreditUpsertCacheMut       sync.RWMutex
	lineOfCreditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lineOfCreditBeforeInsertHooks []LineOfCreditHook
var lineOfCreditBeforeUpdateHooks []LineOfCreditHook
var lineOfCreditBeforeDeleteHooks []LineOfCreditHook
var lineOfCreditBeforeUpsertHooks []LineOfCreditHook

var lineOfCreditAfterInsertHooks []LineOfCreditHook
var lineOfCreditAfterSelectHooks []LineOfCreditHook
var lineOfCreditAfterUpdateHooks []LineOfCreditHook
var lineOfCreditAfterDeleteHooks []LineOfCreditHook
var lineOfCreditAfterUpsertHooks []LineOfCreditHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LineOfCredit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LineOfCredit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LineOfCredit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LineOfCredit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LineOfCredit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LineOfCredit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LineOfCredit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LineOfCredit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LineOfCredit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineOfCreditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLineOfCreditHook registers your hook function for all future operations.
func AddLineOfCreditHook(hookPoint boil.HookPoint, lineOfCreditHook LineOfCreditHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lineOfCreditBeforeInsertHooks = append(lineOfCreditBeforeInsertHooks, lineOfCreditHook)
	case boil.BeforeUpdateHook:
		lineOfCreditBeforeUpdateHooks = append(lineOfCreditBeforeUpdateHooks, lineOfCreditHook)
	case boil.BeforeDeleteHook:
		lineOfCreditBeforeDeleteHooks = append(lineOfCreditBeforeDeleteHooks, lineOfCreditHook)
	case boil.BeforeUpsertHook:
		lineOfCreditBeforeUpsertHooks = append(lineOfCreditBeforeUpsertHooks, lineOfCreditHook)
	case boil.AfterInsertHook:
		lineOfCreditAfterInsertHooks = append(lineOfCreditAfterInsertHooks, lineOfCreditHook)
	case boil.AfterSelectHook:
		lineOfCreditAfterSelectHooks = append(lineOfCreditAfterSelectHooks, lineOfCreditHook)
	case boil.AfterUpdateHook:
		lineOfCreditAfterUpdateHooks = append(lineOfCreditAfterUpdateHooks, lineOfCreditHook)
	case boil.AfterDeleteHook:
		lineOfCreditAfterDeleteHooks = append(lineOfCreditAfterDeleteHooks, lineOfCreditHook)
	case boil.AfterUpsertHook:
		lineOfCreditAfterUpsertHooks = append(lineOfCreditAfterUpsertHooks, lineOfCreditHook)
	}
}

// One returns a single lineOfCredit record from the query.
func (q lineOfCreditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LineOfCredit, error) {
	o := &LineOfCredit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for LineOfCredit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LineOfCredit records from the query.
func (q lineOfCreditQuery) All(ctx context.Context, exec boil.ContextExecutor) (LineOfCreditSlice, error) {
	var o []*LineOfCredit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LineOfCredit slice")
	}

	if len(lineOfCreditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LineOfCredit records in the query.
func (q lineOfCreditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count LineOfCredit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lineOfCreditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if LineOfCredit exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *LineOfCredit) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lineOfCreditL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLineOfCredit interface{}, mods queries.Applicator) error {
	var slice []*LineOfCredit
	var object *LineOfCredit

	if singular {
		object = maybeLineOfCredit.(*LineOfCredit)
	} else {
		slice = *maybeLineOfCredit.(*[]*LineOfCredit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lineOfCreditR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lineOfCreditR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(lineOfCreditAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyLineOfCredits = append(foreign.R.PartyLineOfCredits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyLineOfCredits = append(foreign.R.PartyLineOfCredits, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the lineOfCredit to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyLineOfCredits.
func (o *LineOfCredit) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `LineOfCredit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, lineOfCreditPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.LineofCreditID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &lineOfCreditR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyLineOfCredits: LineOfCreditSlice{o},
		}
	} else {
		related.R.PartyLineOfCredits = append(related.R.PartyLineOfCredits, o)
	}

	return nil
}

// LineOfCredits retrieves all the records using an executor.
func LineOfCredits(mods ...qm.QueryMod) lineOfCreditQuery {
	mods = append(mods, qm.From("`LineOfCredit`"))
	return lineOfCreditQuery{NewQuery(mods...)}
}

// FindLineOfCredit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLineOfCredit(ctx context.Context, exec boil.ContextExecutor, lineofCreditID int, selectCols ...string) (*LineOfCredit, error) {
	lineOfCreditObj := &LineOfCredit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `LineOfCredit` where `lineof_credit_id`=?", sel,
	)

	q := queries.Raw(query, lineofCreditID)

	err := q.Bind(ctx, exec, lineOfCreditObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from LineOfCredit")
	}

	return lineOfCreditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LineOfCredit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LineOfCredit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineOfCreditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lineOfCreditInsertCacheMut.RLock()
	cache, cached := lineOfCreditInsertCache[key]
	lineOfCreditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lineOfCreditColumns,
			lineOfCreditColumnsWithDefault,
			lineOfCreditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `LineOfCredit` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `LineOfCredit` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `LineOfCredit` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, lineOfCreditPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into LineOfCredit")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LineofCreditID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lineOfCreditMapping["LineofCreditID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.LineofCreditID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LineOfCredit")
	}

CacheNoHooks:
	if !cached {
		lineOfCreditInsertCacheMut.Lock()
		lineOfCreditInsertCache[key] = cache
		lineOfCreditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LineOfCredit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LineOfCredit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lineOfCreditUpdateCacheMut.RLock()
	cache, cached := lineOfCreditUpdateCache[key]
	lineOfCreditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lineOfCreditColumns,
			lineOfCreditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update LineOfCredit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `LineOfCredit` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, lineOfCreditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, append(wl, lineOfCreditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update LineOfCredit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for LineOfCredit")
	}

	if !cached {
		lineOfCreditUpdateCacheMut.Lock()
		lineOfCreditUpdateCache[key] = cache
		lineOfCreditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lineOfCreditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for LineOfCredit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for LineOfCredit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LineOfCreditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineOfCreditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `LineOfCredit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineOfCreditPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lineOfCredit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lineOfCredit")
	}
	return rowsAff, nil
}

var mySQLLineOfCreditUniqueColumns = []string{
	"lineof_credit_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LineOfCredit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LineOfCredit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineOfCreditColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLineOfCreditUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lineOfCreditUpsertCacheMut.RLock()
	cache, cached := lineOfCreditUpsertCache[key]
	lineOfCreditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lineOfCreditColumns,
			lineOfCreditColumnsWithDefault,
			lineOfCreditColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lineOfCreditColumns,
			lineOfCreditPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert LineOfCredit, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "LineOfCredit", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `LineOfCredit` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for LineOfCredit")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LineofCreditID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lineOfCreditMapping["lineof_credit_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(lineOfCreditType, lineOfCreditMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for LineOfCredit")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LineOfCredit")
	}

CacheNoHooks:
	if !cached {
		lineOfCreditUpsertCacheMut.Lock()
		lineOfCreditUpsertCache[key] = cache
		lineOfCreditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LineOfCredit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LineOfCredit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LineOfCredit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lineOfCreditPrimaryKeyMapping)
	sql := "DELETE FROM `LineOfCredit` WHERE `lineof_credit_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from LineOfCredit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for LineOfCredit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lineOfCreditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lineOfCreditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from LineOfCredit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LineOfCredit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LineOfCreditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LineOfCredit slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(lineOfCreditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineOfCreditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `LineOfCredit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineOfCreditPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lineOfCredit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LineOfCredit")
	}

	if len(lineOfCreditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LineOfCredit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLineOfCredit(ctx, exec, o.LineofCreditID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LineOfCreditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LineOfCreditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineOfCreditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `LineOfCredit`.* FROM `LineOfCredit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineOfCreditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LineOfCreditSlice")
	}

	*o = slice

	return nil
}

// LineOfCreditExists checks if the LineOfCredit row exists.
func LineOfCreditExists(ctx context.Context, exec boil.ContextExecutor, lineofCreditID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `LineOfCredit` where `lineof_credit_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, lineofCreditID)
	}

	row := exec.QueryRowContext(ctx, sql, lineofCreditID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if LineOfCredit exists")
	}

	return exists, nil
}
