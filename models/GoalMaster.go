// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GoalMaster is an object representing the database table.
type GoalMaster struct {
	GoalID          int         `boil:"goal_id" json:"goal_id" toml:"goal_id" yaml:"goal_id"`
	GoalDescription string      `boil:"goal_description" json:"goal_description" toml:"goal_description" yaml:"goal_description"`
	Enabled         null.Int    `boil:"enabled" json:"enabled,omitempty" toml:"enabled" yaml:"enabled,omitempty"`
	BankID          int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate       time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate     null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID         string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID       null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy      null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate    null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *goalMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goalMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoalMasterColumns = struct {
	GoalID          string
	GoalDescription string
	Enabled         string
	BankID          string
	MakerDate       string
	CheckerDate     string
	MakerID         string
	CheckerID       string
	ModifiedBy      string
	ModifiedDate    string
}{
	GoalID:          "goal_id",
	GoalDescription: "goal_description",
	Enabled:         "enabled",
	BankID:          "bank_id",
	MakerDate:       "maker_date",
	CheckerDate:     "checker_date",
	MakerID:         "maker_id",
	CheckerID:       "checker_id",
	ModifiedBy:      "modified_by",
	ModifiedDate:    "modified_date",
}

// Generated where

var GoalMasterWhere = struct {
	GoalID          whereHelperint
	GoalDescription whereHelperstring
	Enabled         whereHelpernull_Int
	BankID          whereHelperint
	MakerDate       whereHelpertime_Time
	CheckerDate     whereHelpernull_Time
	MakerID         whereHelperstring
	CheckerID       whereHelpernull_String
	ModifiedBy      whereHelpernull_String
	ModifiedDate    whereHelpernull_Time
}{
	GoalID:          whereHelperint{field: `goal_id`},
	GoalDescription: whereHelperstring{field: `goal_description`},
	Enabled:         whereHelpernull_Int{field: `enabled`},
	BankID:          whereHelperint{field: `bank_id`},
	MakerDate:       whereHelpertime_Time{field: `maker_date`},
	CheckerDate:     whereHelpernull_Time{field: `checker_date`},
	MakerID:         whereHelperstring{field: `maker_id`},
	CheckerID:       whereHelpernull_String{field: `checker_id`},
	ModifiedBy:      whereHelpernull_String{field: `modified_by`},
	ModifiedDate:    whereHelpernull_Time{field: `modified_date`},
}

// GoalMasterRels is where relationship names are stored.
var GoalMasterRels = struct {
	GoalCustomerGoalSummaries  string
	GoalPortfolioGoalSummaries string
	GoalRecommendations        string
}{
	GoalCustomerGoalSummaries:  "GoalCustomerGoalSummaries",
	GoalPortfolioGoalSummaries: "GoalPortfolioGoalSummaries",
	GoalRecommendations:        "GoalRecommendations",
}

// goalMasterR is where relationships are stored.
type goalMasterR struct {
	GoalCustomerGoalSummaries  CustomerGoalSummarySlice
	GoalPortfolioGoalSummaries PortfolioGoalSummarySlice
	GoalRecommendations        RecommendationSlice
}

// NewStruct creates a new relationship struct
func (*goalMasterR) NewStruct() *goalMasterR {
	return &goalMasterR{}
}

// goalMasterL is where Load methods for each relationship are stored.
type goalMasterL struct{}

var (
	goalMasterColumns               = []string{"goal_id", "goal_description", "enabled", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	goalMasterColumnsWithoutDefault = []string{"goal_id", "goal_description", "enabled", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	goalMasterColumnsWithDefault    = []string{}
	goalMasterPrimaryKeyColumns     = []string{"goal_id"}
)

type (
	// GoalMasterSlice is an alias for a slice of pointers to GoalMaster.
	// This should generally be used opposed to []GoalMaster.
	GoalMasterSlice []*GoalMaster
	// GoalMasterHook is the signature for custom GoalMaster hook methods
	GoalMasterHook func(context.Context, boil.ContextExecutor, *GoalMaster) error

	goalMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goalMasterType                 = reflect.TypeOf(&GoalMaster{})
	goalMasterMapping              = queries.MakeStructMapping(goalMasterType)
	goalMasterPrimaryKeyMapping, _ = queries.BindMapping(goalMasterType, goalMasterMapping, goalMasterPrimaryKeyColumns)
	goalMasterInsertCacheMut       sync.RWMutex
	goalMasterInsertCache          = make(map[string]insertCache)
	goalMasterUpdateCacheMut       sync.RWMutex
	goalMasterUpdateCache          = make(map[string]updateCache)
	goalMasterUpsertCacheMut       sync.RWMutex
	goalMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goalMasterBeforeInsertHooks []GoalMasterHook
var goalMasterBeforeUpdateHooks []GoalMasterHook
var goalMasterBeforeDeleteHooks []GoalMasterHook
var goalMasterBeforeUpsertHooks []GoalMasterHook

var goalMasterAfterInsertHooks []GoalMasterHook
var goalMasterAfterSelectHooks []GoalMasterHook
var goalMasterAfterUpdateHooks []GoalMasterHook
var goalMasterAfterDeleteHooks []GoalMasterHook
var goalMasterAfterUpsertHooks []GoalMasterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoalMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoalMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoalMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoalMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoalMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoalMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoalMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoalMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoalMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoalMasterHook registers your hook function for all future operations.
func AddGoalMasterHook(hookPoint boil.HookPoint, goalMasterHook GoalMasterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		goalMasterBeforeInsertHooks = append(goalMasterBeforeInsertHooks, goalMasterHook)
	case boil.BeforeUpdateHook:
		goalMasterBeforeUpdateHooks = append(goalMasterBeforeUpdateHooks, goalMasterHook)
	case boil.BeforeDeleteHook:
		goalMasterBeforeDeleteHooks = append(goalMasterBeforeDeleteHooks, goalMasterHook)
	case boil.BeforeUpsertHook:
		goalMasterBeforeUpsertHooks = append(goalMasterBeforeUpsertHooks, goalMasterHook)
	case boil.AfterInsertHook:
		goalMasterAfterInsertHooks = append(goalMasterAfterInsertHooks, goalMasterHook)
	case boil.AfterSelectHook:
		goalMasterAfterSelectHooks = append(goalMasterAfterSelectHooks, goalMasterHook)
	case boil.AfterUpdateHook:
		goalMasterAfterUpdateHooks = append(goalMasterAfterUpdateHooks, goalMasterHook)
	case boil.AfterDeleteHook:
		goalMasterAfterDeleteHooks = append(goalMasterAfterDeleteHooks, goalMasterHook)
	case boil.AfterUpsertHook:
		goalMasterAfterUpsertHooks = append(goalMasterAfterUpsertHooks, goalMasterHook)
	}
}

// One returns a single goalMaster record from the query.
func (q goalMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoalMaster, error) {
	o := &GoalMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for GoalMaster")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoalMaster records from the query.
func (q goalMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoalMasterSlice, error) {
	var o []*GoalMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GoalMaster slice")
	}

	if len(goalMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoalMaster records in the query.
func (q goalMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count GoalMaster rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goalMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if GoalMaster exists")
	}

	return count > 0, nil
}

// GoalCustomerGoalSummaries retrieves all the CustomerGoalSummary's CustomerGoalSummaries with an executor via goal_id column.
func (o *GoalMaster) GoalCustomerGoalSummaries(mods ...qm.QueryMod) customerGoalSummaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`CustomerGoalSummary`.`goal_id`=?", o.GoalID),
	)

	query := CustomerGoalSummaries(queryMods...)
	queries.SetFrom(query.Query, "`CustomerGoalSummary`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`CustomerGoalSummary`.*"})
	}

	return query
}

// GoalPortfolioGoalSummaries retrieves all the PortfolioGoalSummary's PortfolioGoalSummaries with an executor via goal_id column.
func (o *GoalMaster) GoalPortfolioGoalSummaries(mods ...qm.QueryMod) portfolioGoalSummaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PortfolioGoalSummary`.`goal_id`=?", o.GoalID),
	)

	query := PortfolioGoalSummaries(queryMods...)
	queries.SetFrom(query.Query, "`PortfolioGoalSummary`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`PortfolioGoalSummary`.*"})
	}

	return query
}

// GoalRecommendations retrieves all the Recommendation's Recommendations with an executor via goal_id column.
func (o *GoalMaster) GoalRecommendations(mods ...qm.QueryMod) recommendationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Recommendations`.`goal_id`=?", o.GoalID),
	)

	query := Recommendations(queryMods...)
	queries.SetFrom(query.Query, "`Recommendations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Recommendations`.*"})
	}

	return query
}

// LoadGoalCustomerGoalSummaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goalMasterL) LoadGoalCustomerGoalSummaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoalMaster interface{}, mods queries.Applicator) error {
	var slice []*GoalMaster
	var object *GoalMaster

	if singular {
		object = maybeGoalMaster.(*GoalMaster)
	} else {
		slice = *maybeGoalMaster.(*[]*GoalMaster)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &goalMasterR{}
		}
		args = append(args, object.GoalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goalMasterR{}
			}

			for _, a := range args {
				if a == obj.GoalID {
					continue Outer
				}
			}

			args = append(args, obj.GoalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CustomerGoalSummary`), qm.WhereIn(`goal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CustomerGoalSummary")
	}

	var resultSlice []*CustomerGoalSummary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CustomerGoalSummary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on CustomerGoalSummary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CustomerGoalSummary")
	}

	if len(customerGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoalCustomerGoalSummaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerGoalSummaryR{}
			}
			foreign.R.Goal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GoalID == foreign.GoalID {
				local.R.GoalCustomerGoalSummaries = append(local.R.GoalCustomerGoalSummaries, foreign)
				if foreign.R == nil {
					foreign.R = &customerGoalSummaryR{}
				}
				foreign.R.Goal = local
				break
			}
		}
	}

	return nil
}

// LoadGoalPortfolioGoalSummaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goalMasterL) LoadGoalPortfolioGoalSummaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoalMaster interface{}, mods queries.Applicator) error {
	var slice []*GoalMaster
	var object *GoalMaster

	if singular {
		object = maybeGoalMaster.(*GoalMaster)
	} else {
		slice = *maybeGoalMaster.(*[]*GoalMaster)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &goalMasterR{}
		}
		args = append(args, object.GoalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goalMasterR{}
			}

			for _, a := range args {
				if a == obj.GoalID {
					continue Outer
				}
			}

			args = append(args, obj.GoalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PortfolioGoalSummary`), qm.WhereIn(`goal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PortfolioGoalSummary")
	}

	var resultSlice []*PortfolioGoalSummary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PortfolioGoalSummary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PortfolioGoalSummary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PortfolioGoalSummary")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoalPortfolioGoalSummaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &portfolioGoalSummaryR{}
			}
			foreign.R.Goal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GoalID == foreign.GoalID {
				local.R.GoalPortfolioGoalSummaries = append(local.R.GoalPortfolioGoalSummaries, foreign)
				if foreign.R == nil {
					foreign.R = &portfolioGoalSummaryR{}
				}
				foreign.R.Goal = local
				break
			}
		}
	}

	return nil
}

// LoadGoalRecommendations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (goalMasterL) LoadGoalRecommendations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoalMaster interface{}, mods queries.Applicator) error {
	var slice []*GoalMaster
	var object *GoalMaster

	if singular {
		object = maybeGoalMaster.(*GoalMaster)
	} else {
		slice = *maybeGoalMaster.(*[]*GoalMaster)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &goalMasterR{}
		}
		args = append(args, object.GoalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goalMasterR{}
			}

			for _, a := range args {
				if a == obj.GoalID {
					continue Outer
				}
			}

			args = append(args, obj.GoalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Recommendations`), qm.WhereIn(`goal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recommendations")
	}

	var resultSlice []*Recommendation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recommendations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Recommendations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Recommendations")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GoalRecommendations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recommendationR{}
			}
			foreign.R.Goal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GoalID == foreign.GoalID {
				local.R.GoalRecommendations = append(local.R.GoalRecommendations, foreign)
				if foreign.R == nil {
					foreign.R = &recommendationR{}
				}
				foreign.R.Goal = local
				break
			}
		}
	}

	return nil
}

// AddGoalCustomerGoalSummaries adds the given related objects to the existing relationships
// of the GoalMaster, optionally inserting them as new records.
// Appends related to o.R.GoalCustomerGoalSummaries.
// Sets related.R.Goal appropriately.
func (o *GoalMaster) AddGoalCustomerGoalSummaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomerGoalSummary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoalID = o.GoalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `CustomerGoalSummary` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"goal_id"}),
				strmangle.WhereClause("`", "`", 0, customerGoalSummaryPrimaryKeyColumns),
			)
			values := []interface{}{o.GoalID, rel.CustomerGoalSummaryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoalID = o.GoalID
		}
	}

	if o.R == nil {
		o.R = &goalMasterR{
			GoalCustomerGoalSummaries: related,
		}
	} else {
		o.R.GoalCustomerGoalSummaries = append(o.R.GoalCustomerGoalSummaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerGoalSummaryR{
				Goal: o,
			}
		} else {
			rel.R.Goal = o
		}
	}
	return nil
}

// AddGoalPortfolioGoalSummaries adds the given related objects to the existing relationships
// of the GoalMaster, optionally inserting them as new records.
// Appends related to o.R.GoalPortfolioGoalSummaries.
// Sets related.R.Goal appropriately.
func (o *GoalMaster) AddGoalPortfolioGoalSummaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PortfolioGoalSummary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoalID = o.GoalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"goal_id"}),
				strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
			)
			values := []interface{}{o.GoalID, rel.PartyID, rel.GoalID, rel.ReportDate}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoalID = o.GoalID
		}
	}

	if o.R == nil {
		o.R = &goalMasterR{
			GoalPortfolioGoalSummaries: related,
		}
	} else {
		o.R.GoalPortfolioGoalSummaries = append(o.R.GoalPortfolioGoalSummaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &portfolioGoalSummaryR{
				Goal: o,
			}
		} else {
			rel.R.Goal = o
		}
	}
	return nil
}

// AddGoalRecommendations adds the given related objects to the existing relationships
// of the GoalMaster, optionally inserting them as new records.
// Appends related to o.R.GoalRecommendations.
// Sets related.R.Goal appropriately.
func (o *GoalMaster) AddGoalRecommendations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Recommendation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GoalID = o.GoalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Recommendations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"goal_id"}),
				strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns),
			)
			values := []interface{}{o.GoalID, rel.RecommendationNumber, rel.RecommendetionDate}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GoalID = o.GoalID
		}
	}

	if o.R == nil {
		o.R = &goalMasterR{
			GoalRecommendations: related,
		}
	} else {
		o.R.GoalRecommendations = append(o.R.GoalRecommendations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recommendationR{
				Goal: o,
			}
		} else {
			rel.R.Goal = o
		}
	}
	return nil
}

// GoalMasters retrieves all the records using an executor.
func GoalMasters(mods ...qm.QueryMod) goalMasterQuery {
	mods = append(mods, qm.From("`GoalMaster`"))
	return goalMasterQuery{NewQuery(mods...)}
}

// FindGoalMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoalMaster(ctx context.Context, exec boil.ContextExecutor, goalID int, selectCols ...string) (*GoalMaster, error) {
	goalMasterObj := &GoalMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `GoalMaster` where `goal_id`=?", sel,
	)

	q := queries.Raw(query, goalID)

	err := q.Bind(ctx, exec, goalMasterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from GoalMaster")
	}

	return goalMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoalMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GoalMaster provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goalMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goalMasterInsertCacheMut.RLock()
	cache, cached := goalMasterInsertCache[key]
	goalMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goalMasterColumns,
			goalMasterColumnsWithDefault,
			goalMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goalMasterType, goalMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goalMasterType, goalMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `GoalMaster` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `GoalMaster` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `GoalMaster` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, goalMasterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into GoalMaster")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GoalID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for GoalMaster")
	}

CacheNoHooks:
	if !cached {
		goalMasterInsertCacheMut.Lock()
		goalMasterInsertCache[key] = cache
		goalMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoalMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoalMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goalMasterUpdateCacheMut.RLock()
	cache, cached := goalMasterUpdateCache[key]
	goalMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goalMasterColumns,
			goalMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update GoalMaster, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `GoalMaster` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, goalMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goalMasterType, goalMasterMapping, append(wl, goalMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update GoalMaster row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for GoalMaster")
	}

	if !cached {
		goalMasterUpdateCacheMut.Lock()
		goalMasterUpdateCache[key] = cache
		goalMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goalMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for GoalMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for GoalMaster")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoalMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `GoalMaster` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goalMasterPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in goalMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all goalMaster")
	}
	return rowsAff, nil
}

var mySQLGoalMasterUniqueColumns = []string{
	"goal_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoalMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GoalMaster provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goalMasterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGoalMasterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goalMasterUpsertCacheMut.RLock()
	cache, cached := goalMasterUpsertCache[key]
	goalMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			goalMasterColumns,
			goalMasterColumnsWithDefault,
			goalMasterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			goalMasterColumns,
			goalMasterPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert GoalMaster, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "GoalMaster", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `GoalMaster` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(goalMasterType, goalMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goalMasterType, goalMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for GoalMaster")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(goalMasterType, goalMasterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for GoalMaster")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for GoalMaster")
	}

CacheNoHooks:
	if !cached {
		goalMasterUpsertCacheMut.Lock()
		goalMasterUpsertCache[key] = cache
		goalMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoalMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoalMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoalMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goalMasterPrimaryKeyMapping)
	sql := "DELETE FROM `GoalMaster` WHERE `goal_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from GoalMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for GoalMaster")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goalMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no goalMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from GoalMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GoalMaster")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoalMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoalMaster slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(goalMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `GoalMaster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goalMasterPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goalMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GoalMaster")
	}

	if len(goalMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoalMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoalMaster(ctx, exec, o.GoalID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoalMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoalMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `GoalMaster`.* FROM `GoalMaster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goalMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoalMasterSlice")
	}

	*o = slice

	return nil
}

// GoalMasterExists checks if the GoalMaster row exists.
func GoalMasterExists(ctx context.Context, exec boil.ContextExecutor, goalID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `GoalMaster` where `goal_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, goalID)
	}

	row := exec.QueryRowContext(ctx, sql, goalID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if GoalMaster exists")
	}

	return exists, nil
}
