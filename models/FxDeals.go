// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// FxDeal is an object representing the database table.
type FxDeal struct {
	FXDealID   int               `boil:"fx_deal_id" json:"fx_deal_id" toml:"fx_deal_id" yaml:"fx_deal_id"`
	PartyID    null.Int          `boil:"party_id" json:"party_id,omitempty" toml:"party_id" yaml:"party_id,omitempty"`
	AccountNum null.String       `boil:"account_num" json:"account_num,omitempty" toml:"account_num" yaml:"account_num,omitempty"`
	AccountID  int               `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	BuyRate    types.NullDecimal `boil:"buy_rate" json:"buy_rate,omitempty" toml:"buy_rate" yaml:"buy_rate,omitempty"`
	SellRate   types.NullDecimal `boil:"sell_rate" json:"sell_rate,omitempty" toml:"sell_rate" yaml:"sell_rate,omitempty"`
	Amount     types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	FXDealDate null.Time         `boil:"fx_deal_date" json:"fx_deal_date,omitempty" toml:"fx_deal_date" yaml:"fx_deal_date,omitempty"`

	R *fxDealR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fxDealL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FxDealColumns = struct {
	FXDealID   string
	PartyID    string
	AccountNum string
	AccountID  string
	BuyRate    string
	SellRate   string
	Amount     string
	FXDealDate string
}{
	FXDealID:   "fx_deal_id",
	PartyID:    "party_id",
	AccountNum: "account_num",
	AccountID:  "account_id",
	BuyRate:    "buy_rate",
	SellRate:   "sell_rate",
	Amount:     "amount",
	FXDealDate: "fx_deal_date",
}

// Generated where

var FxDealWhere = struct {
	FXDealID   whereHelperint
	PartyID    whereHelpernull_Int
	AccountNum whereHelpernull_String
	AccountID  whereHelperint
	BuyRate    whereHelpertypes_NullDecimal
	SellRate   whereHelpertypes_NullDecimal
	Amount     whereHelpertypes_NullDecimal
	FXDealDate whereHelpernull_Time
}{
	FXDealID:   whereHelperint{field: `fx_deal_id`},
	PartyID:    whereHelpernull_Int{field: `party_id`},
	AccountNum: whereHelpernull_String{field: `account_num`},
	AccountID:  whereHelperint{field: `account_id`},
	BuyRate:    whereHelpertypes_NullDecimal{field: `buy_rate`},
	SellRate:   whereHelpertypes_NullDecimal{field: `sell_rate`},
	Amount:     whereHelpertypes_NullDecimal{field: `amount`},
	FXDealDate: whereHelpernull_Time{field: `fx_deal_date`},
}

// FxDealRels is where relationship names are stored.
var FxDealRels = struct {
	Account string
	Party   string
}{
	Account: "Account",
	Party:   "Party",
}

// fxDealR is where relationships are stored.
type fxDealR struct {
	Account *Account
	Party   *Party
}

// NewStruct creates a new relationship struct
func (*fxDealR) NewStruct() *fxDealR {
	return &fxDealR{}
}

// fxDealL is where Load methods for each relationship are stored.
type fxDealL struct{}

var (
	fxDealColumns               = []string{"fx_deal_id", "party_id", "account_num", "account_id", "buy_rate", "sell_rate", "amount", "fx_deal_date"}
	fxDealColumnsWithoutDefault = []string{"fx_deal_id", "party_id", "account_num", "account_id", "buy_rate", "sell_rate", "amount", "fx_deal_date"}
	fxDealColumnsWithDefault    = []string{}
	fxDealPrimaryKeyColumns     = []string{"fx_deal_id"}
)

type (
	// FxDealSlice is an alias for a slice of pointers to FxDeal.
	// This should generally be used opposed to []FxDeal.
	FxDealSlice []*FxDeal
	// FxDealHook is the signature for custom FxDeal hook methods
	FxDealHook func(context.Context, boil.ContextExecutor, *FxDeal) error

	fxDealQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fxDealType                 = reflect.TypeOf(&FxDeal{})
	fxDealMapping              = queries.MakeStructMapping(fxDealType)
	fxDealPrimaryKeyMapping, _ = queries.BindMapping(fxDealType, fxDealMapping, fxDealPrimaryKeyColumns)
	fxDealInsertCacheMut       sync.RWMutex
	fxDealInsertCache          = make(map[string]insertCache)
	fxDealUpdateCacheMut       sync.RWMutex
	fxDealUpdateCache          = make(map[string]updateCache)
	fxDealUpsertCacheMut       sync.RWMutex
	fxDealUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fxDealBeforeInsertHooks []FxDealHook
var fxDealBeforeUpdateHooks []FxDealHook
var fxDealBeforeDeleteHooks []FxDealHook
var fxDealBeforeUpsertHooks []FxDealHook

var fxDealAfterInsertHooks []FxDealHook
var fxDealAfterSelectHooks []FxDealHook
var fxDealAfterUpdateHooks []FxDealHook
var fxDealAfterDeleteHooks []FxDealHook
var fxDealAfterUpsertHooks []FxDealHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FxDeal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FxDeal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FxDeal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FxDeal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FxDeal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FxDeal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FxDeal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FxDeal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FxDeal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxDealAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFxDealHook registers your hook function for all future operations.
func AddFxDealHook(hookPoint boil.HookPoint, fxDealHook FxDealHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fxDealBeforeInsertHooks = append(fxDealBeforeInsertHooks, fxDealHook)
	case boil.BeforeUpdateHook:
		fxDealBeforeUpdateHooks = append(fxDealBeforeUpdateHooks, fxDealHook)
	case boil.BeforeDeleteHook:
		fxDealBeforeDeleteHooks = append(fxDealBeforeDeleteHooks, fxDealHook)
	case boil.BeforeUpsertHook:
		fxDealBeforeUpsertHooks = append(fxDealBeforeUpsertHooks, fxDealHook)
	case boil.AfterInsertHook:
		fxDealAfterInsertHooks = append(fxDealAfterInsertHooks, fxDealHook)
	case boil.AfterSelectHook:
		fxDealAfterSelectHooks = append(fxDealAfterSelectHooks, fxDealHook)
	case boil.AfterUpdateHook:
		fxDealAfterUpdateHooks = append(fxDealAfterUpdateHooks, fxDealHook)
	case boil.AfterDeleteHook:
		fxDealAfterDeleteHooks = append(fxDealAfterDeleteHooks, fxDealHook)
	case boil.AfterUpsertHook:
		fxDealAfterUpsertHooks = append(fxDealAfterUpsertHooks, fxDealHook)
	}
}

// One returns a single fxDeal record from the query.
func (q fxDealQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FxDeal, error) {
	o := &FxDeal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FxDeals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FxDeal records from the query.
func (q fxDealQuery) All(ctx context.Context, exec boil.ContextExecutor) (FxDealSlice, error) {
	var o []*FxDeal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FxDeal slice")
	}

	if len(fxDealAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FxDeal records in the query.
func (q fxDealQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FxDeals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fxDealQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FxDeals exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *FxDeal) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Party pointed to by the foreign key.
func (o *FxDeal) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fxDealL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFxDeal interface{}, mods queries.Applicator) error {
	var slice []*FxDeal
	var object *FxDeal

	if singular {
		object = maybeFxDeal.(*FxDeal)
	} else {
		slice = *maybeFxDeal.(*[]*FxDeal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fxDealR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fxDealR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(fxDealAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountFxDeals = append(foreign.R.AccountFxDeals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountFxDeals = append(foreign.R.AccountFxDeals, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fxDealL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFxDeal interface{}, mods queries.Applicator) error {
	var slice []*FxDeal
	var object *FxDeal

	if singular {
		object = maybeFxDeal.(*FxDeal)
	} else {
		slice = *maybeFxDeal.(*[]*FxDeal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fxDealR{}
		}
		if !queries.IsNil(object.PartyID) {
			args = append(args, object.PartyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fxDealR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartyID) {
				args = append(args, obj.PartyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(fxDealAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyFxDeals = append(foreign.R.PartyFxDeals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartyID, foreign.PartyID) {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyFxDeals = append(foreign.R.PartyFxDeals, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the fxDeal to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountFxDeals.
func (o *FxDeal) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FxDeals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, fxDealPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.FXDealID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &fxDealR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountFxDeals: FxDealSlice{o},
		}
	} else {
		related.R.AccountFxDeals = append(related.R.AccountFxDeals, o)
	}

	return nil
}

// SetParty of the fxDeal to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyFxDeals.
func (o *FxDeal) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FxDeals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, fxDealPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.FXDealID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartyID, related.PartyID)
	if o.R == nil {
		o.R = &fxDealR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyFxDeals: FxDealSlice{o},
		}
	} else {
		related.R.PartyFxDeals = append(related.R.PartyFxDeals, o)
	}

	return nil
}

// RemoveParty relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *FxDeal) RemoveParty(ctx context.Context, exec boil.ContextExecutor, related *Party) error {
	var err error

	queries.SetScanner(&o.PartyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("party_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Party = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartyFxDeals {
		if queries.Equal(o.PartyID, ri.PartyID) {
			continue
		}

		ln := len(related.R.PartyFxDeals)
		if ln > 1 && i < ln-1 {
			related.R.PartyFxDeals[i] = related.R.PartyFxDeals[ln-1]
		}
		related.R.PartyFxDeals = related.R.PartyFxDeals[:ln-1]
		break
	}
	return nil
}

// FxDeals retrieves all the records using an executor.
func FxDeals(mods ...qm.QueryMod) fxDealQuery {
	mods = append(mods, qm.From("`FxDeals`"))
	return fxDealQuery{NewQuery(mods...)}
}

// FindFxDeal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFxDeal(ctx context.Context, exec boil.ContextExecutor, fXDealID int, selectCols ...string) (*FxDeal, error) {
	fxDealObj := &FxDeal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FxDeals` where `fx_deal_id`=?", sel,
	)

	q := queries.Raw(query, fXDealID)

	err := q.Bind(ctx, exec, fxDealObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FxDeals")
	}

	return fxDealObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FxDeal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FxDeals provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxDealColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fxDealInsertCacheMut.RLock()
	cache, cached := fxDealInsertCache[key]
	fxDealInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fxDealColumns,
			fxDealColumnsWithDefault,
			fxDealColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fxDealType, fxDealMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fxDealType, fxDealMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FxDeals` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FxDeals` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FxDeals` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fxDealPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FxDeals")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FXDealID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FxDeals")
	}

CacheNoHooks:
	if !cached {
		fxDealInsertCacheMut.Lock()
		fxDealInsertCache[key] = cache
		fxDealInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FxDeal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FxDeal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fxDealUpdateCacheMut.RLock()
	cache, cached := fxDealUpdateCache[key]
	fxDealUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fxDealColumns,
			fxDealPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FxDeals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FxDeals` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fxDealPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fxDealType, fxDealMapping, append(wl, fxDealPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FxDeals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FxDeals")
	}

	if !cached {
		fxDealUpdateCacheMut.Lock()
		fxDealUpdateCache[key] = cache
		fxDealUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fxDealQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FxDeals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FxDeals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FxDealSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxDealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FxDeals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxDealPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fxDeal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fxDeal")
	}
	return rowsAff, nil
}

var mySQLFxDealUniqueColumns = []string{
	"fx_deal_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FxDeal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FxDeals provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxDealColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFxDealUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fxDealUpsertCacheMut.RLock()
	cache, cached := fxDealUpsertCache[key]
	fxDealUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fxDealColumns,
			fxDealColumnsWithDefault,
			fxDealColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fxDealColumns,
			fxDealPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert FxDeals, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "FxDeals", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FxDeals` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fxDealType, fxDealMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fxDealType, fxDealMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for FxDeals")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fxDealType, fxDealMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for FxDeals")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FxDeals")
	}

CacheNoHooks:
	if !cached {
		fxDealUpsertCacheMut.Lock()
		fxDealUpsertCache[key] = cache
		fxDealUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FxDeal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FxDeal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FxDeal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fxDealPrimaryKeyMapping)
	sql := "DELETE FROM `FxDeals` WHERE `fx_deal_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FxDeals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FxDeals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fxDealQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fxDealQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FxDeals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FxDeals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FxDealSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FxDeal slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fxDealBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxDealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FxDeals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxDealPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fxDeal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FxDeals")
	}

	if len(fxDealAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FxDeal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFxDeal(ctx, exec, o.FXDealID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FxDealSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FxDealSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxDealPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FxDeals`.* FROM `FxDeals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fxDealPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FxDealSlice")
	}

	*o = slice

	return nil
}

// FxDealExists checks if the FxDeal row exists.
func FxDealExists(ctx context.Context, exec boil.ContextExecutor, fXDealID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FxDeals` where `fx_deal_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, fXDealID)
	}

	row := exec.QueryRowContext(ctx, sql, fXDealID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FxDeals exists")
	}

	return exists, nil
}
