// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RtpToken is an object representing the database table.
type RtpToken struct {
	TokenID      int         `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	Token        string      `boil:"token" json:"token" toml:"token" yaml:"token"`
	TokenType    string      `boil:"token_type" json:"token_type" toml:"token_type" yaml:"token_type"`
	RTPID        int         `boil:"rtp_id" json:"rtp_id" toml:"rtp_id" yaml:"rtp_id"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *rtpTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rtpTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RtpTokenColumns = struct {
	TokenID      string
	Token        string
	TokenType    string
	RTPID        string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	TokenID:      "token_id",
	Token:        "token",
	TokenType:    "token_type",
	RTPID:        "rtp_id",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var RtpTokenWhere = struct {
	TokenID      whereHelperint
	Token        whereHelperstring
	TokenType    whereHelperstring
	RTPID        whereHelperint
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	TokenID:      whereHelperint{field: `token_id`},
	Token:        whereHelperstring{field: `token`},
	TokenType:    whereHelperstring{field: `token_type`},
	RTPID:        whereHelperint{field: `rtp_id`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// RtpTokenRels is where relationship names are stored.
var RtpTokenRels = struct {
	RTP                       string
	ReceiverTokenPaymentRtps  string
	RequesterTokenRtpRequests string
	ResponderTokenRtpRequests string
}{
	RTP:                       "RTP",
	ReceiverTokenPaymentRtps:  "ReceiverTokenPaymentRtps",
	RequesterTokenRtpRequests: "RequesterTokenRtpRequests",
	ResponderTokenRtpRequests: "ResponderTokenRtpRequests",
}

// rtpTokenR is where relationships are stored.
type rtpTokenR struct {
	RTP                       *RTP
	ReceiverTokenPaymentRtps  PaymentRtpSlice
	RequesterTokenRtpRequests RtpRequestSlice
	ResponderTokenRtpRequests RtpRequestSlice
}

// NewStruct creates a new relationship struct
func (*rtpTokenR) NewStruct() *rtpTokenR {
	return &rtpTokenR{}
}

// rtpTokenL is where Load methods for each relationship are stored.
type rtpTokenL struct{}

var (
	rtpTokenColumns               = []string{"token_id", "token", "token_type", "rtp_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	rtpTokenColumnsWithoutDefault = []string{"token", "token_type", "rtp_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	rtpTokenColumnsWithDefault    = []string{"token_id"}
	rtpTokenPrimaryKeyColumns     = []string{"token_id"}
)

type (
	// RtpTokenSlice is an alias for a slice of pointers to RtpToken.
	// This should generally be used opposed to []RtpToken.
	RtpTokenSlice []*RtpToken
	// RtpTokenHook is the signature for custom RtpToken hook methods
	RtpTokenHook func(context.Context, boil.ContextExecutor, *RtpToken) error

	rtpTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rtpTokenType                 = reflect.TypeOf(&RtpToken{})
	rtpTokenMapping              = queries.MakeStructMapping(rtpTokenType)
	rtpTokenPrimaryKeyMapping, _ = queries.BindMapping(rtpTokenType, rtpTokenMapping, rtpTokenPrimaryKeyColumns)
	rtpTokenInsertCacheMut       sync.RWMutex
	rtpTokenInsertCache          = make(map[string]insertCache)
	rtpTokenUpdateCacheMut       sync.RWMutex
	rtpTokenUpdateCache          = make(map[string]updateCache)
	rtpTokenUpsertCacheMut       sync.RWMutex
	rtpTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rtpTokenBeforeInsertHooks []RtpTokenHook
var rtpTokenBeforeUpdateHooks []RtpTokenHook
var rtpTokenBeforeDeleteHooks []RtpTokenHook
var rtpTokenBeforeUpsertHooks []RtpTokenHook

var rtpTokenAfterInsertHooks []RtpTokenHook
var rtpTokenAfterSelectHooks []RtpTokenHook
var rtpTokenAfterUpdateHooks []RtpTokenHook
var rtpTokenAfterDeleteHooks []RtpTokenHook
var rtpTokenAfterUpsertHooks []RtpTokenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RtpToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RtpToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RtpToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RtpToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RtpToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RtpToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RtpToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RtpToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RtpToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRtpTokenHook registers your hook function for all future operations.
func AddRtpTokenHook(hookPoint boil.HookPoint, rtpTokenHook RtpTokenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rtpTokenBeforeInsertHooks = append(rtpTokenBeforeInsertHooks, rtpTokenHook)
	case boil.BeforeUpdateHook:
		rtpTokenBeforeUpdateHooks = append(rtpTokenBeforeUpdateHooks, rtpTokenHook)
	case boil.BeforeDeleteHook:
		rtpTokenBeforeDeleteHooks = append(rtpTokenBeforeDeleteHooks, rtpTokenHook)
	case boil.BeforeUpsertHook:
		rtpTokenBeforeUpsertHooks = append(rtpTokenBeforeUpsertHooks, rtpTokenHook)
	case boil.AfterInsertHook:
		rtpTokenAfterInsertHooks = append(rtpTokenAfterInsertHooks, rtpTokenHook)
	case boil.AfterSelectHook:
		rtpTokenAfterSelectHooks = append(rtpTokenAfterSelectHooks, rtpTokenHook)
	case boil.AfterUpdateHook:
		rtpTokenAfterUpdateHooks = append(rtpTokenAfterUpdateHooks, rtpTokenHook)
	case boil.AfterDeleteHook:
		rtpTokenAfterDeleteHooks = append(rtpTokenAfterDeleteHooks, rtpTokenHook)
	case boil.AfterUpsertHook:
		rtpTokenAfterUpsertHooks = append(rtpTokenAfterUpsertHooks, rtpTokenHook)
	}
}

// One returns a single rtpToken record from the query.
func (q rtpTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RtpToken, error) {
	o := &RtpToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for RtpToken")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RtpToken records from the query.
func (q rtpTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (RtpTokenSlice, error) {
	var o []*RtpToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RtpToken slice")
	}

	if len(rtpTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RtpToken records in the query.
func (q rtpTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count RtpToken rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rtpTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if RtpToken exists")
	}

	return count > 0, nil
}

// RTP pointed to by the foreign key.
func (o *RtpToken) RTP(mods ...qm.QueryMod) rtpQuery {
	queryMods := []qm.QueryMod{
		qm.Where("rtp_id=?", o.RTPID),
	}

	queryMods = append(queryMods, mods...)

	query := RTPS(queryMods...)
	queries.SetFrom(query.Query, "`Rtp`")

	return query
}

// ReceiverTokenPaymentRtps retrieves all the PaymentRtp's PaymentRtps with an executor via receiver_token_id column.
func (o *RtpToken) ReceiverTokenPaymentRtps(mods ...qm.QueryMod) paymentRtpQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PaymentRtp`.`receiver_token_id`=?", o.TokenID),
	)

	query := PaymentRtps(queryMods...)
	queries.SetFrom(query.Query, "`PaymentRtp`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`PaymentRtp`.*"})
	}

	return query
}

// RequesterTokenRtpRequests retrieves all the RtpRequest's RtpRequests with an executor via requester_token_id column.
func (o *RtpToken) RequesterTokenRtpRequests(mods ...qm.QueryMod) rtpRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`RtpRequest`.`requester_token_id`=?", o.TokenID),
	)

	query := RtpRequests(queryMods...)
	queries.SetFrom(query.Query, "`RtpRequest`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`RtpRequest`.*"})
	}

	return query
}

// ResponderTokenRtpRequests retrieves all the RtpRequest's RtpRequests with an executor via responder_token_id column.
func (o *RtpToken) ResponderTokenRtpRequests(mods ...qm.QueryMod) rtpRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`RtpRequest`.`responder_token_id`=?", o.TokenID),
	)

	query := RtpRequests(queryMods...)
	queries.SetFrom(query.Query, "`RtpRequest`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`RtpRequest`.*"})
	}

	return query
}

// LoadRTP allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rtpTokenL) LoadRTP(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRtpToken interface{}, mods queries.Applicator) error {
	var slice []*RtpToken
	var object *RtpToken

	if singular {
		object = maybeRtpToken.(*RtpToken)
	} else {
		slice = *maybeRtpToken.(*[]*RtpToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpTokenR{}
		}
		args = append(args, object.RTPID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpTokenR{}
			}

			for _, a := range args {
				if a == obj.RTPID {
					continue Outer
				}
			}

			args = append(args, obj.RTPID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Rtp`), qm.WhereIn(`rtp_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RTP")
	}

	var resultSlice []*RTP
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RTP")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Rtp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Rtp")
	}

	if len(rtpTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RTP = foreign
		if foreign.R == nil {
			foreign.R = &rtpR{}
		}
		foreign.R.RTPRtpTokens = append(foreign.R.RTPRtpTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RTPID == foreign.RTPID {
				local.R.RTP = foreign
				if foreign.R == nil {
					foreign.R = &rtpR{}
				}
				foreign.R.RTPRtpTokens = append(foreign.R.RTPRtpTokens, local)
				break
			}
		}
	}

	return nil
}

// LoadReceiverTokenPaymentRtps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rtpTokenL) LoadReceiverTokenPaymentRtps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRtpToken interface{}, mods queries.Applicator) error {
	var slice []*RtpToken
	var object *RtpToken

	if singular {
		object = maybeRtpToken.(*RtpToken)
	} else {
		slice = *maybeRtpToken.(*[]*RtpToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpTokenR{}
		}
		args = append(args, object.TokenID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpTokenR{}
			}

			for _, a := range args {
				if a == obj.TokenID {
					continue Outer
				}
			}

			args = append(args, obj.TokenID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentRtp`), qm.WhereIn(`receiver_token_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentRtp")
	}

	var resultSlice []*PaymentRtp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentRtp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PaymentRtp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentRtp")
	}

	if len(paymentRtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReceiverTokenPaymentRtps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentRtpR{}
			}
			foreign.R.ReceiverToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TokenID == foreign.ReceiverTokenID {
				local.R.ReceiverTokenPaymentRtps = append(local.R.ReceiverTokenPaymentRtps, foreign)
				if foreign.R == nil {
					foreign.R = &paymentRtpR{}
				}
				foreign.R.ReceiverToken = local
				break
			}
		}
	}

	return nil
}

// LoadRequesterTokenRtpRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rtpTokenL) LoadRequesterTokenRtpRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRtpToken interface{}, mods queries.Applicator) error {
	var slice []*RtpToken
	var object *RtpToken

	if singular {
		object = maybeRtpToken.(*RtpToken)
	} else {
		slice = *maybeRtpToken.(*[]*RtpToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpTokenR{}
		}
		args = append(args, object.TokenID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpTokenR{}
			}

			for _, a := range args {
				if a == obj.TokenID {
					continue Outer
				}
			}

			args = append(args, obj.TokenID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`RtpRequest`), qm.WhereIn(`requester_token_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RtpRequest")
	}

	var resultSlice []*RtpRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RtpRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on RtpRequest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RtpRequest")
	}

	if len(rtpRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RequesterTokenRtpRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rtpRequestR{}
			}
			foreign.R.RequesterToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TokenID == foreign.RequesterTokenID {
				local.R.RequesterTokenRtpRequests = append(local.R.RequesterTokenRtpRequests, foreign)
				if foreign.R == nil {
					foreign.R = &rtpRequestR{}
				}
				foreign.R.RequesterToken = local
				break
			}
		}
	}

	return nil
}

// LoadResponderTokenRtpRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rtpTokenL) LoadResponderTokenRtpRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRtpToken interface{}, mods queries.Applicator) error {
	var slice []*RtpToken
	var object *RtpToken

	if singular {
		object = maybeRtpToken.(*RtpToken)
	} else {
		slice = *maybeRtpToken.(*[]*RtpToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpTokenR{}
		}
		args = append(args, object.TokenID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpTokenR{}
			}

			for _, a := range args {
				if a == obj.TokenID {
					continue Outer
				}
			}

			args = append(args, obj.TokenID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`RtpRequest`), qm.WhereIn(`responder_token_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RtpRequest")
	}

	var resultSlice []*RtpRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RtpRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on RtpRequest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RtpRequest")
	}

	if len(rtpRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResponderTokenRtpRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rtpRequestR{}
			}
			foreign.R.ResponderToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TokenID == foreign.ResponderTokenID {
				local.R.ResponderTokenRtpRequests = append(local.R.ResponderTokenRtpRequests, foreign)
				if foreign.R == nil {
					foreign.R = &rtpRequestR{}
				}
				foreign.R.ResponderToken = local
				break
			}
		}
	}

	return nil
}

// SetRTP of the rtpToken to the related item.
// Sets o.R.RTP to related.
// Adds o to related.R.RTPRtpTokens.
func (o *RtpToken) SetRTP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RTP) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `RtpToken` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"rtp_id"}),
		strmangle.WhereClause("`", "`", 0, rtpTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.RTPID, o.TokenID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RTPID = related.RTPID
	if o.R == nil {
		o.R = &rtpTokenR{
			RTP: related,
		}
	} else {
		o.R.RTP = related
	}

	if related.R == nil {
		related.R = &rtpR{
			RTPRtpTokens: RtpTokenSlice{o},
		}
	} else {
		related.R.RTPRtpTokens = append(related.R.RTPRtpTokens, o)
	}

	return nil
}

// AddReceiverTokenPaymentRtps adds the given related objects to the existing relationships
// of the RtpToken, optionally inserting them as new records.
// Appends related to o.R.ReceiverTokenPaymentRtps.
// Sets related.R.ReceiverToken appropriately.
func (o *RtpToken) AddReceiverTokenPaymentRtps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentRtp) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReceiverTokenID = o.TokenID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PaymentRtp` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"receiver_token_id"}),
				strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns),
			)
			values := []interface{}{o.TokenID, rel.PaymentRTPID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReceiverTokenID = o.TokenID
		}
	}

	if o.R == nil {
		o.R = &rtpTokenR{
			ReceiverTokenPaymentRtps: related,
		}
	} else {
		o.R.ReceiverTokenPaymentRtps = append(o.R.ReceiverTokenPaymentRtps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentRtpR{
				ReceiverToken: o,
			}
		} else {
			rel.R.ReceiverToken = o
		}
	}
	return nil
}

// AddRequesterTokenRtpRequests adds the given related objects to the existing relationships
// of the RtpToken, optionally inserting them as new records.
// Appends related to o.R.RequesterTokenRtpRequests.
// Sets related.R.RequesterToken appropriately.
func (o *RtpToken) AddRequesterTokenRtpRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RtpRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RequesterTokenID = o.TokenID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `RtpRequest` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"requester_token_id"}),
				strmangle.WhereClause("`", "`", 0, rtpRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.TokenID, rel.RTPRequestID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RequesterTokenID = o.TokenID
		}
	}

	if o.R == nil {
		o.R = &rtpTokenR{
			RequesterTokenRtpRequests: related,
		}
	} else {
		o.R.RequesterTokenRtpRequests = append(o.R.RequesterTokenRtpRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rtpRequestR{
				RequesterToken: o,
			}
		} else {
			rel.R.RequesterToken = o
		}
	}
	return nil
}

// AddResponderTokenRtpRequests adds the given related objects to the existing relationships
// of the RtpToken, optionally inserting them as new records.
// Appends related to o.R.ResponderTokenRtpRequests.
// Sets related.R.ResponderToken appropriately.
func (o *RtpToken) AddResponderTokenRtpRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RtpRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResponderTokenID = o.TokenID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `RtpRequest` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"responder_token_id"}),
				strmangle.WhereClause("`", "`", 0, rtpRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.TokenID, rel.RTPRequestID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResponderTokenID = o.TokenID
		}
	}

	if o.R == nil {
		o.R = &rtpTokenR{
			ResponderTokenRtpRequests: related,
		}
	} else {
		o.R.ResponderTokenRtpRequests = append(o.R.ResponderTokenRtpRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rtpRequestR{
				ResponderToken: o,
			}
		} else {
			rel.R.ResponderToken = o
		}
	}
	return nil
}

// RtpTokens retrieves all the records using an executor.
func RtpTokens(mods ...qm.QueryMod) rtpTokenQuery {
	mods = append(mods, qm.From("`RtpToken`"))
	return rtpTokenQuery{NewQuery(mods...)}
}

// FindRtpToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRtpToken(ctx context.Context, exec boil.ContextExecutor, tokenID int, selectCols ...string) (*RtpToken, error) {
	rtpTokenObj := &RtpToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `RtpToken` where `token_id`=?", sel,
	)

	q := queries.Raw(query, tokenID)

	err := q.Bind(ctx, exec, rtpTokenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from RtpToken")
	}

	return rtpTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RtpToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RtpToken provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rtpTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rtpTokenInsertCacheMut.RLock()
	cache, cached := rtpTokenInsertCache[key]
	rtpTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rtpTokenColumns,
			rtpTokenColumnsWithDefault,
			rtpTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `RtpToken` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `RtpToken` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `RtpToken` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rtpTokenPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into RtpToken")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TokenID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rtpTokenMapping["TokenID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TokenID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RtpToken")
	}

CacheNoHooks:
	if !cached {
		rtpTokenInsertCacheMut.Lock()
		rtpTokenInsertCache[key] = cache
		rtpTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RtpToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RtpToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rtpTokenUpdateCacheMut.RLock()
	cache, cached := rtpTokenUpdateCache[key]
	rtpTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rtpTokenColumns,
			rtpTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update RtpToken, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `RtpToken` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rtpTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, append(wl, rtpTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update RtpToken row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for RtpToken")
	}

	if !cached {
		rtpTokenUpdateCacheMut.Lock()
		rtpTokenUpdateCache[key] = cache
		rtpTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rtpTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for RtpToken")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for RtpToken")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RtpTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `RtpToken` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpTokenPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rtpToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rtpToken")
	}
	return rowsAff, nil
}

var mySQLRtpTokenUniqueColumns = []string{
	"token_id",
	"token",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RtpToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RtpToken provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rtpTokenColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRtpTokenUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rtpTokenUpsertCacheMut.RLock()
	cache, cached := rtpTokenUpsertCache[key]
	rtpTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rtpTokenColumns,
			rtpTokenColumnsWithDefault,
			rtpTokenColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rtpTokenColumns,
			rtpTokenPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert RtpToken, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "RtpToken", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `RtpToken` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for RtpToken")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TokenID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rtpTokenMapping["token_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rtpTokenType, rtpTokenMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for RtpToken")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RtpToken")
	}

CacheNoHooks:
	if !cached {
		rtpTokenUpsertCacheMut.Lock()
		rtpTokenUpsertCache[key] = cache
		rtpTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RtpToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RtpToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RtpToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rtpTokenPrimaryKeyMapping)
	sql := "DELETE FROM `RtpToken` WHERE `token_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from RtpToken")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for RtpToken")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rtpTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rtpTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from RtpToken")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RtpToken")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RtpTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RtpToken slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(rtpTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `RtpToken` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpTokenPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rtpToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RtpToken")
	}

	if len(rtpTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RtpToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRtpToken(ctx, exec, o.TokenID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RtpTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RtpTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `RtpToken`.* FROM `RtpToken` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RtpTokenSlice")
	}

	*o = slice

	return nil
}

// RtpTokenExists checks if the RtpToken row exists.
func RtpTokenExists(ctx context.Context, exec boil.ContextExecutor, tokenID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `RtpToken` where `token_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tokenID)
	}

	row := exec.QueryRowContext(ctx, sql, tokenID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if RtpToken exists")
	}

	return exists, nil
}
