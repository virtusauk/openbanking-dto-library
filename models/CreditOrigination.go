// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CreditOrigination is an object representing the database table.
type CreditOrigination struct {
	CreditOriginationID  int               `boil:"credit_origination_id" json:"credit_origination_id" toml:"credit_origination_id" yaml:"credit_origination_id"`
	PartyID              int               `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	ProspectNumber       null.String       `boil:"prospect_number" json:"prospect_number,omitempty" toml:"prospect_number" yaml:"prospect_number,omitempty"`
	LoanType             string            `boil:"loan_type" json:"loan_type" toml:"loan_type" yaml:"loan_type"`
	AssetID              null.Int          `boil:"asset_id" json:"asset_id,omitempty" toml:"asset_id" yaml:"asset_id,omitempty"`
	LoanAmnt             int               `boil:"loan_amnt" json:"loan_amnt" toml:"loan_amnt" yaml:"loan_amnt"`
	FundedAmnt           null.Int          `boil:"funded_amnt" json:"funded_amnt,omitempty" toml:"funded_amnt" yaml:"funded_amnt,omitempty"`
	FundedAmntInv        null.Int          `boil:"funded_amnt_inv" json:"funded_amnt_inv,omitempty" toml:"funded_amnt_inv" yaml:"funded_amnt_inv,omitempty"`
	Term                 null.String       `boil:"term" json:"term,omitempty" toml:"term" yaml:"term,omitempty"`
	IntRate              types.NullDecimal `boil:"int_rate" json:"int_rate,omitempty" toml:"int_rate" yaml:"int_rate,omitempty"`
	Installment          null.Int          `boil:"installment" json:"installment,omitempty" toml:"installment" yaml:"installment,omitempty"`
	Grade                null.String       `boil:"grade" json:"grade,omitempty" toml:"grade" yaml:"grade,omitempty"`
	SubGrade             null.String       `boil:"sub_grade" json:"sub_grade,omitempty" toml:"sub_grade" yaml:"sub_grade,omitempty"`
	EmpTitle             null.String       `boil:"emp_title" json:"emp_title,omitempty" toml:"emp_title" yaml:"emp_title,omitempty"`
	EmpLength            null.Int          `boil:"emp_length" json:"emp_length,omitempty" toml:"emp_length" yaml:"emp_length,omitempty"`
	HomeOwnership        null.String       `boil:"home_ownership" json:"home_ownership,omitempty" toml:"home_ownership" yaml:"home_ownership,omitempty"`
	AnnualInc            null.Int          `boil:"annual_inc" json:"annual_inc,omitempty" toml:"annual_inc" yaml:"annual_inc,omitempty"`
	VerificationStatus   null.String       `boil:"verification_status" json:"verification_status,omitempty" toml:"verification_status" yaml:"verification_status,omitempty"`
	IssueD               null.Time         `boil:"issue_d" json:"issue_d,omitempty" toml:"issue_d" yaml:"issue_d,omitempty"`
	LoanStatus           null.String       `boil:"loan_status" json:"loan_status,omitempty" toml:"loan_status" yaml:"loan_status,omitempty"`
	PymntPlan            null.String       `boil:"pymnt_plan" json:"pymnt_plan,omitempty" toml:"pymnt_plan" yaml:"pymnt_plan,omitempty"`
	Purpose              null.String       `boil:"purpose" json:"purpose,omitempty" toml:"purpose" yaml:"purpose,omitempty"`
	Title                null.String       `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	ZipCode              null.String       `boil:"zip_code" json:"zip_code,omitempty" toml:"zip_code" yaml:"zip_code,omitempty"`
	AddrState            null.String       `boil:"addr_state" json:"addr_state,omitempty" toml:"addr_state" yaml:"addr_state,omitempty"`
	Dti                  null.Float64      `boil:"dti" json:"dti,omitempty" toml:"dti" yaml:"dti,omitempty"`
	Delinq2yrs           null.Int          `boil:"delinq_2yrs" json:"delinq_2yrs,omitempty" toml:"delinq_2yrs" yaml:"delinq_2yrs,omitempty"`
	EarliestCRLine       null.String       `boil:"earliest_cr_line" json:"earliest_cr_line,omitempty" toml:"earliest_cr_line" yaml:"earliest_cr_line,omitempty"`
	PolicyCode           null.Int          `boil:"policy_code" json:"policy_code,omitempty" toml:"policy_code" yaml:"policy_code,omitempty"`
	ApplicationType      null.String       `boil:"application_type" json:"application_type,omitempty" toml:"application_type" yaml:"application_type,omitempty"`
	LoanStage            null.String       `boil:"loan_stage" json:"loan_stage,omitempty" toml:"loan_stage" yaml:"loan_stage,omitempty"`
	Employer             null.String       `boil:"employer" json:"employer,omitempty" toml:"employer" yaml:"employer,omitempty"`
	EmployeePartyID      null.Int          `boil:"employee_party_id" json:"employee_party_id,omitempty" toml:"employee_party_id" yaml:"employee_party_id,omitempty"`
	GeographyOfOperation null.String       `boil:"geography_of_operation" json:"geography_of_operation,omitempty" toml:"geography_of_operation" yaml:"geography_of_operation,omitempty"`
	DrivingLicenseNo     null.String       `boil:"driving_license_no" json:"driving_license_no,omitempty" toml:"driving_license_no" yaml:"driving_license_no,omitempty"`
	DefaultHistory       int               `boil:"default_history" json:"default_history" toml:"default_history" yaml:"default_history"`
	AverageSavings       types.Decimal     `boil:"average_savings" json:"average_savings" toml:"average_savings" yaml:"average_savings"`
	DrugAbuse            string            `boil:"drug_abuse" json:"drug_abuse" toml:"drug_abuse" yaml:"drug_abuse"`
	ExistingDebt         types.Decimal     `boil:"existing_debt" json:"existing_debt" toml:"existing_debt" yaml:"existing_debt"`
	TotalAssetValue      types.NullDecimal `boil:"total_asset_value" json:"total_asset_value,omitempty" toml:"total_asset_value" yaml:"total_asset_value,omitempty"`
	BankID               int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate            time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *creditOriginationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditOriginationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditOriginationColumns = struct {
	CreditOriginationID  string
	PartyID              string
	ProspectNumber       string
	LoanType             string
	AssetID              string
	LoanAmnt             string
	FundedAmnt           string
	FundedAmntInv        string
	Term                 string
	IntRate              string
	Installment          string
	Grade                string
	SubGrade             string
	EmpTitle             string
	EmpLength            string
	HomeOwnership        string
	AnnualInc            string
	VerificationStatus   string
	IssueD               string
	LoanStatus           string
	PymntPlan            string
	Purpose              string
	Title                string
	ZipCode              string
	AddrState            string
	Dti                  string
	Delinq2yrs           string
	EarliestCRLine       string
	PolicyCode           string
	ApplicationType      string
	LoanStage            string
	Employer             string
	EmployeePartyID      string
	GeographyOfOperation string
	DrivingLicenseNo     string
	DefaultHistory       string
	AverageSavings       string
	DrugAbuse            string
	ExistingDebt         string
	TotalAssetValue      string
	BankID               string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	CreditOriginationID:  "credit_origination_id",
	PartyID:              "party_id",
	ProspectNumber:       "prospect_number",
	LoanType:             "loan_type",
	AssetID:              "asset_id",
	LoanAmnt:             "loan_amnt",
	FundedAmnt:           "funded_amnt",
	FundedAmntInv:        "funded_amnt_inv",
	Term:                 "term",
	IntRate:              "int_rate",
	Installment:          "installment",
	Grade:                "grade",
	SubGrade:             "sub_grade",
	EmpTitle:             "emp_title",
	EmpLength:            "emp_length",
	HomeOwnership:        "home_ownership",
	AnnualInc:            "annual_inc",
	VerificationStatus:   "verification_status",
	IssueD:               "issue_d",
	LoanStatus:           "loan_status",
	PymntPlan:            "pymnt_plan",
	Purpose:              "purpose",
	Title:                "title",
	ZipCode:              "zip_code",
	AddrState:            "addr_state",
	Dti:                  "dti",
	Delinq2yrs:           "delinq_2yrs",
	EarliestCRLine:       "earliest_cr_line",
	PolicyCode:           "policy_code",
	ApplicationType:      "application_type",
	LoanStage:            "loan_stage",
	Employer:             "employer",
	EmployeePartyID:      "employee_party_id",
	GeographyOfOperation: "geography_of_operation",
	DrivingLicenseNo:     "driving_license_no",
	DefaultHistory:       "default_history",
	AverageSavings:       "average_savings",
	DrugAbuse:            "drug_abuse",
	ExistingDebt:         "existing_debt",
	TotalAssetValue:      "total_asset_value",
	BankID:               "bank_id",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CreditOriginationWhere = struct {
	CreditOriginationID  whereHelperint
	PartyID              whereHelperint
	ProspectNumber       whereHelpernull_String
	LoanType             whereHelperstring
	AssetID              whereHelpernull_Int
	LoanAmnt             whereHelperint
	FundedAmnt           whereHelpernull_Int
	FundedAmntInv        whereHelpernull_Int
	Term                 whereHelpernull_String
	IntRate              whereHelpertypes_NullDecimal
	Installment          whereHelpernull_Int
	Grade                whereHelpernull_String
	SubGrade             whereHelpernull_String
	EmpTitle             whereHelpernull_String
	EmpLength            whereHelpernull_Int
	HomeOwnership        whereHelpernull_String
	AnnualInc            whereHelpernull_Int
	VerificationStatus   whereHelpernull_String
	IssueD               whereHelpernull_Time
	LoanStatus           whereHelpernull_String
	PymntPlan            whereHelpernull_String
	Purpose              whereHelpernull_String
	Title                whereHelpernull_String
	ZipCode              whereHelpernull_String
	AddrState            whereHelpernull_String
	Dti                  whereHelpernull_Float64
	Delinq2yrs           whereHelpernull_Int
	EarliestCRLine       whereHelpernull_String
	PolicyCode           whereHelpernull_Int
	ApplicationType      whereHelpernull_String
	LoanStage            whereHelpernull_String
	Employer             whereHelpernull_String
	EmployeePartyID      whereHelpernull_Int
	GeographyOfOperation whereHelpernull_String
	DrivingLicenseNo     whereHelpernull_String
	DefaultHistory       whereHelperint
	AverageSavings       whereHelpertypes_Decimal
	DrugAbuse            whereHelperstring
	ExistingDebt         whereHelpertypes_Decimal
	TotalAssetValue      whereHelpertypes_NullDecimal
	BankID               whereHelperint
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	CreditOriginationID:  whereHelperint{field: `credit_origination_id`},
	PartyID:              whereHelperint{field: `party_id`},
	ProspectNumber:       whereHelpernull_String{field: `prospect_number`},
	LoanType:             whereHelperstring{field: `loan_type`},
	AssetID:              whereHelpernull_Int{field: `asset_id`},
	LoanAmnt:             whereHelperint{field: `loan_amnt`},
	FundedAmnt:           whereHelpernull_Int{field: `funded_amnt`},
	FundedAmntInv:        whereHelpernull_Int{field: `funded_amnt_inv`},
	Term:                 whereHelpernull_String{field: `term`},
	IntRate:              whereHelpertypes_NullDecimal{field: `int_rate`},
	Installment:          whereHelpernull_Int{field: `installment`},
	Grade:                whereHelpernull_String{field: `grade`},
	SubGrade:             whereHelpernull_String{field: `sub_grade`},
	EmpTitle:             whereHelpernull_String{field: `emp_title`},
	EmpLength:            whereHelpernull_Int{field: `emp_length`},
	HomeOwnership:        whereHelpernull_String{field: `home_ownership`},
	AnnualInc:            whereHelpernull_Int{field: `annual_inc`},
	VerificationStatus:   whereHelpernull_String{field: `verification_status`},
	IssueD:               whereHelpernull_Time{field: `issue_d`},
	LoanStatus:           whereHelpernull_String{field: `loan_status`},
	PymntPlan:            whereHelpernull_String{field: `pymnt_plan`},
	Purpose:              whereHelpernull_String{field: `purpose`},
	Title:                whereHelpernull_String{field: `title`},
	ZipCode:              whereHelpernull_String{field: `zip_code`},
	AddrState:            whereHelpernull_String{field: `addr_state`},
	Dti:                  whereHelpernull_Float64{field: `dti`},
	Delinq2yrs:           whereHelpernull_Int{field: `delinq_2yrs`},
	EarliestCRLine:       whereHelpernull_String{field: `earliest_cr_line`},
	PolicyCode:           whereHelpernull_Int{field: `policy_code`},
	ApplicationType:      whereHelpernull_String{field: `application_type`},
	LoanStage:            whereHelpernull_String{field: `loan_stage`},
	Employer:             whereHelpernull_String{field: `employer`},
	EmployeePartyID:      whereHelpernull_Int{field: `employee_party_id`},
	GeographyOfOperation: whereHelpernull_String{field: `geography_of_operation`},
	DrivingLicenseNo:     whereHelpernull_String{field: `driving_license_no`},
	DefaultHistory:       whereHelperint{field: `default_history`},
	AverageSavings:       whereHelpertypes_Decimal{field: `average_savings`},
	DrugAbuse:            whereHelperstring{field: `drug_abuse`},
	ExistingDebt:         whereHelpertypes_Decimal{field: `existing_debt`},
	TotalAssetValue:      whereHelpertypes_NullDecimal{field: `total_asset_value`},
	BankID:               whereHelperint{field: `bank_id`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// CreditOriginationRels is where relationship names are stored.
var CreditOriginationRels = struct {
	Asset                                           string
	Party                                           string
	CreditOriginationCreditOrginationAssetHistories string
	CreditOriginRefLoans                            string
}{
	Asset: "Asset",
	Party: "Party",
	CreditOriginationCreditOrginationAssetHistories: "CreditOriginationCreditOrginationAssetHistories",
	CreditOriginRefLoans:                            "CreditOriginRefLoans",
}

// creditOriginationR is where relationships are stored.
type creditOriginationR struct {
	Asset                                           *Asset
	Party                                           *Party
	CreditOriginationCreditOrginationAssetHistories CreditOrginationAssetHistorySlice
	CreditOriginRefLoans                            LoanSlice
}

// NewStruct creates a new relationship struct
func (*creditOriginationR) NewStruct() *creditOriginationR {
	return &creditOriginationR{}
}

// creditOriginationL is where Load methods for each relationship are stored.
type creditOriginationL struct{}

var (
	creditOriginationColumns               = []string{"credit_origination_id", "party_id", "prospect_number", "loan_type", "asset_id", "loan_amnt", "funded_amnt", "funded_amnt_inv", "term", "int_rate", "installment", "grade", "sub_grade", "emp_title", "emp_length", "home_ownership", "annual_inc", "verification_status", "issue_d", "loan_status", "pymnt_plan", "purpose", "title", "zip_code", "addr_state", "dti", "delinq_2yrs", "earliest_cr_line", "policy_code", "application_type", "loan_stage", "employer", "employee_party_id", "geography_of_operation", "driving_license_no", "default_history", "average_savings", "drug_abuse", "existing_debt", "total_asset_value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	creditOriginationColumnsWithoutDefault = []string{"prospect_number", "loan_type", "asset_id", "loan_amnt", "funded_amnt", "funded_amnt_inv", "term", "int_rate", "installment", "grade", "sub_grade", "emp_title", "emp_length", "home_ownership", "annual_inc", "verification_status", "issue_d", "loan_status", "pymnt_plan", "purpose", "title", "zip_code", "addr_state", "dti", "delinq_2yrs", "earliest_cr_line", "policy_code", "application_type", "loan_stage", "employer", "employee_party_id", "geography_of_operation", "driving_license_no", "default_history", "average_savings", "drug_abuse", "existing_debt", "total_asset_value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	creditOriginationColumnsWithDefault    = []string{"credit_origination_id", "party_id"}
	creditOriginationPrimaryKeyColumns     = []string{"credit_origination_id"}
)

type (
	// CreditOriginationSlice is an alias for a slice of pointers to CreditOrigination.
	// This should generally be used opposed to []CreditOrigination.
	CreditOriginationSlice []*CreditOrigination
	// CreditOriginationHook is the signature for custom CreditOrigination hook methods
	CreditOriginationHook func(context.Context, boil.ContextExecutor, *CreditOrigination) error

	creditOriginationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditOriginationType                 = reflect.TypeOf(&CreditOrigination{})
	creditOriginationMapping              = queries.MakeStructMapping(creditOriginationType)
	creditOriginationPrimaryKeyMapping, _ = queries.BindMapping(creditOriginationType, creditOriginationMapping, creditOriginationPrimaryKeyColumns)
	creditOriginationInsertCacheMut       sync.RWMutex
	creditOriginationInsertCache          = make(map[string]insertCache)
	creditOriginationUpdateCacheMut       sync.RWMutex
	creditOriginationUpdateCache          = make(map[string]updateCache)
	creditOriginationUpsertCacheMut       sync.RWMutex
	creditOriginationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditOriginationBeforeInsertHooks []CreditOriginationHook
var creditOriginationBeforeUpdateHooks []CreditOriginationHook
var creditOriginationBeforeDeleteHooks []CreditOriginationHook
var creditOriginationBeforeUpsertHooks []CreditOriginationHook

var creditOriginationAfterInsertHooks []CreditOriginationHook
var creditOriginationAfterSelectHooks []CreditOriginationHook
var creditOriginationAfterUpdateHooks []CreditOriginationHook
var creditOriginationAfterDeleteHooks []CreditOriginationHook
var creditOriginationAfterUpsertHooks []CreditOriginationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CreditOrigination) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CreditOrigination) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CreditOrigination) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CreditOrigination) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CreditOrigination) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CreditOrigination) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CreditOrigination) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CreditOrigination) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CreditOrigination) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditOriginationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditOriginationHook registers your hook function for all future operations.
func AddCreditOriginationHook(hookPoint boil.HookPoint, creditOriginationHook CreditOriginationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		creditOriginationBeforeInsertHooks = append(creditOriginationBeforeInsertHooks, creditOriginationHook)
	case boil.BeforeUpdateHook:
		creditOriginationBeforeUpdateHooks = append(creditOriginationBeforeUpdateHooks, creditOriginationHook)
	case boil.BeforeDeleteHook:
		creditOriginationBeforeDeleteHooks = append(creditOriginationBeforeDeleteHooks, creditOriginationHook)
	case boil.BeforeUpsertHook:
		creditOriginationBeforeUpsertHooks = append(creditOriginationBeforeUpsertHooks, creditOriginationHook)
	case boil.AfterInsertHook:
		creditOriginationAfterInsertHooks = append(creditOriginationAfterInsertHooks, creditOriginationHook)
	case boil.AfterSelectHook:
		creditOriginationAfterSelectHooks = append(creditOriginationAfterSelectHooks, creditOriginationHook)
	case boil.AfterUpdateHook:
		creditOriginationAfterUpdateHooks = append(creditOriginationAfterUpdateHooks, creditOriginationHook)
	case boil.AfterDeleteHook:
		creditOriginationAfterDeleteHooks = append(creditOriginationAfterDeleteHooks, creditOriginationHook)
	case boil.AfterUpsertHook:
		creditOriginationAfterUpsertHooks = append(creditOriginationAfterUpsertHooks, creditOriginationHook)
	}
}

// One returns a single creditOrigination record from the query.
func (q creditOriginationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CreditOrigination, error) {
	o := &CreditOrigination{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CreditOrigination")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CreditOrigination records from the query.
func (q creditOriginationQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditOriginationSlice, error) {
	var o []*CreditOrigination

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CreditOrigination slice")
	}

	if len(creditOriginationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CreditOrigination records in the query.
func (q creditOriginationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CreditOrigination rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q creditOriginationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CreditOrigination exists")
	}

	return count > 0, nil
}

// Asset pointed to by the foreign key.
func (o *CreditOrigination) Asset(mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("asset_id=?", o.AssetID),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(queryMods...)
	queries.SetFrom(query.Query, "`Assets`")

	return query
}

// Party pointed to by the foreign key.
func (o *CreditOrigination) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// CreditOriginationCreditOrginationAssetHistories retrieves all the CreditOrginationAssetHistory's CreditOrginationAssetHistories with an executor via credit_origination_id column.
func (o *CreditOrigination) CreditOriginationCreditOrginationAssetHistories(mods ...qm.QueryMod) creditOrginationAssetHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`CreditOrginationAssetHistory`.`credit_origination_id`=?", o.CreditOriginationID),
	)

	query := CreditOrginationAssetHistories(queryMods...)
	queries.SetFrom(query.Query, "`CreditOrginationAssetHistory`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`CreditOrginationAssetHistory`.*"})
	}

	return query
}

// CreditOriginRefLoans retrieves all the Loan's Loans with an executor via credit_origin_ref column.
func (o *CreditOrigination) CreditOriginRefLoans(mods ...qm.QueryMod) loanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Loan`.`credit_origin_ref`=?", o.CreditOriginationID),
	)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Loan`.*"})
	}

	return query
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditOriginationL) LoadAsset(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrigination interface{}, mods queries.Applicator) error {
	var slice []*CreditOrigination
	var object *CreditOrigination

	if singular {
		object = maybeCreditOrigination.(*CreditOrigination)
	} else {
		slice = *maybeCreditOrigination.(*[]*CreditOrigination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOriginationR{}
		}
		if !queries.IsNil(object.AssetID) {
			args = append(args, object.AssetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOriginationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AssetID) {
				args = append(args, obj.AssetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Assets`), qm.WhereIn(`asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Assets")
	}

	if len(creditOriginationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Asset = foreign
		if foreign.R == nil {
			foreign.R = &assetR{}
		}
		foreign.R.AssetCreditOriginations = append(foreign.R.AssetCreditOriginations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AssetID, foreign.AssetID) {
				local.R.Asset = foreign
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.AssetCreditOriginations = append(foreign.R.AssetCreditOriginations, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditOriginationL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrigination interface{}, mods queries.Applicator) error {
	var slice []*CreditOrigination
	var object *CreditOrigination

	if singular {
		object = maybeCreditOrigination.(*CreditOrigination)
	} else {
		slice = *maybeCreditOrigination.(*[]*CreditOrigination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOriginationR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOriginationR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(creditOriginationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyCreditOriginations = append(foreign.R.PartyCreditOriginations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyCreditOriginations = append(foreign.R.PartyCreditOriginations, local)
				break
			}
		}
	}

	return nil
}

// LoadCreditOriginationCreditOrginationAssetHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (creditOriginationL) LoadCreditOriginationCreditOrginationAssetHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrigination interface{}, mods queries.Applicator) error {
	var slice []*CreditOrigination
	var object *CreditOrigination

	if singular {
		object = maybeCreditOrigination.(*CreditOrigination)
	} else {
		slice = *maybeCreditOrigination.(*[]*CreditOrigination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOriginationR{}
		}
		args = append(args, object.CreditOriginationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOriginationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreditOriginationID) {
					continue Outer
				}
			}

			args = append(args, obj.CreditOriginationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CreditOrginationAssetHistory`), qm.WhereIn(`credit_origination_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditOrginationAssetHistory")
	}

	var resultSlice []*CreditOrginationAssetHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditOrginationAssetHistory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on CreditOrginationAssetHistory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CreditOrginationAssetHistory")
	}

	if len(creditOrginationAssetHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditOriginationCreditOrginationAssetHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditOrginationAssetHistoryR{}
			}
			foreign.R.CreditOrigination = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CreditOriginationID, foreign.CreditOriginationID) {
				local.R.CreditOriginationCreditOrginationAssetHistories = append(local.R.CreditOriginationCreditOrginationAssetHistories, foreign)
				if foreign.R == nil {
					foreign.R = &creditOrginationAssetHistoryR{}
				}
				foreign.R.CreditOrigination = local
				break
			}
		}
	}

	return nil
}

// LoadCreditOriginRefLoans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (creditOriginationL) LoadCreditOriginRefLoans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCreditOrigination interface{}, mods queries.Applicator) error {
	var slice []*CreditOrigination
	var object *CreditOrigination

	if singular {
		object = maybeCreditOrigination.(*CreditOrigination)
	} else {
		slice = *maybeCreditOrigination.(*[]*CreditOrigination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditOriginationR{}
		}
		args = append(args, object.CreditOriginationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditOriginationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreditOriginationID) {
					continue Outer
				}
			}

			args = append(args, obj.CreditOriginationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`credit_origin_ref in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(loanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditOriginRefLoans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &loanR{}
			}
			foreign.R.CreditOriginRef = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CreditOriginationID, foreign.CreditOriginRef) {
				local.R.CreditOriginRefLoans = append(local.R.CreditOriginRefLoans, foreign)
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.CreditOriginRef = local
				break
			}
		}
	}

	return nil
}

// SetAsset of the creditOrigination to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.AssetCreditOriginations.
func (o *CreditOrigination) SetAsset(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CreditOrigination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"asset_id"}),
		strmangle.WhereClause("`", "`", 0, creditOriginationPrimaryKeyColumns),
	)
	values := []interface{}{related.AssetID, o.CreditOriginationID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AssetID, related.AssetID)
	if o.R == nil {
		o.R = &creditOriginationR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			AssetCreditOriginations: CreditOriginationSlice{o},
		}
	} else {
		related.R.AssetCreditOriginations = append(related.R.AssetCreditOriginations, o)
	}

	return nil
}

// RemoveAsset relationship.
// Sets o.R.Asset to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CreditOrigination) RemoveAsset(ctx context.Context, exec boil.ContextExecutor, related *Asset) error {
	var err error

	queries.SetScanner(&o.AssetID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("asset_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Asset = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssetCreditOriginations {
		if queries.Equal(o.AssetID, ri.AssetID) {
			continue
		}

		ln := len(related.R.AssetCreditOriginations)
		if ln > 1 && i < ln-1 {
			related.R.AssetCreditOriginations[i] = related.R.AssetCreditOriginations[ln-1]
		}
		related.R.AssetCreditOriginations = related.R.AssetCreditOriginations[:ln-1]
		break
	}
	return nil
}

// SetParty of the creditOrigination to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyCreditOriginations.
func (o *CreditOrigination) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CreditOrigination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, creditOriginationPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.CreditOriginationID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &creditOriginationR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyCreditOriginations: CreditOriginationSlice{o},
		}
	} else {
		related.R.PartyCreditOriginations = append(related.R.PartyCreditOriginations, o)
	}

	return nil
}

// AddCreditOriginationCreditOrginationAssetHistories adds the given related objects to the existing relationships
// of the CreditOrigination, optionally inserting them as new records.
// Appends related to o.R.CreditOriginationCreditOrginationAssetHistories.
// Sets related.R.CreditOrigination appropriately.
func (o *CreditOrigination) AddCreditOriginationCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrginationAssetHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreditOriginationID, o.CreditOriginationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"credit_origination_id"}),
				strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.CreditOriginationID, rel.CreditOriginationAssetHistoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreditOriginationID, o.CreditOriginationID)
		}
	}

	if o.R == nil {
		o.R = &creditOriginationR{
			CreditOriginationCreditOrginationAssetHistories: related,
		}
	} else {
		o.R.CreditOriginationCreditOrginationAssetHistories = append(o.R.CreditOriginationCreditOrginationAssetHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditOrginationAssetHistoryR{
				CreditOrigination: o,
			}
		} else {
			rel.R.CreditOrigination = o
		}
	}
	return nil
}

// SetCreditOriginationCreditOrginationAssetHistories removes all previously related items of the
// CreditOrigination replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreditOrigination's CreditOriginationCreditOrginationAssetHistories accordingly.
// Replaces o.R.CreditOriginationCreditOrginationAssetHistories with related.
// Sets related.R.CreditOrigination's CreditOriginationCreditOrginationAssetHistories accordingly.
func (o *CreditOrigination) SetCreditOriginationCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrginationAssetHistory) error {
	query := "update `CreditOrginationAssetHistory` set `credit_origination_id` = null where `credit_origination_id` = ?"
	values := []interface{}{o.CreditOriginationID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreditOriginationCreditOrginationAssetHistories {
			queries.SetScanner(&rel.CreditOriginationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreditOrigination = nil
		}

		o.R.CreditOriginationCreditOrginationAssetHistories = nil
	}
	return o.AddCreditOriginationCreditOrginationAssetHistories(ctx, exec, insert, related...)
}

// RemoveCreditOriginationCreditOrginationAssetHistories relationships from objects passed in.
// Removes related items from R.CreditOriginationCreditOrginationAssetHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.CreditOrigination.
func (o *CreditOrigination) RemoveCreditOriginationCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, related ...*CreditOrginationAssetHistory) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreditOriginationID, nil)
		if rel.R != nil {
			rel.R.CreditOrigination = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("credit_origination_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreditOriginationCreditOrginationAssetHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreditOriginationCreditOrginationAssetHistories)
			if ln > 1 && i < ln-1 {
				o.R.CreditOriginationCreditOrginationAssetHistories[i] = o.R.CreditOriginationCreditOrginationAssetHistories[ln-1]
			}
			o.R.CreditOriginationCreditOrginationAssetHistories = o.R.CreditOriginationCreditOrginationAssetHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddCreditOriginRefLoans adds the given related objects to the existing relationships
// of the CreditOrigination, optionally inserting them as new records.
// Appends related to o.R.CreditOriginRefLoans.
// Sets related.R.CreditOriginRef appropriately.
func (o *CreditOrigination) AddCreditOriginRefLoans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Loan) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreditOriginRef, o.CreditOriginationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Loan` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"credit_origin_ref"}),
				strmangle.WhereClause("`", "`", 0, loanPrimaryKeyColumns),
			)
			values := []interface{}{o.CreditOriginationID, rel.LoanID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreditOriginRef, o.CreditOriginationID)
		}
	}

	if o.R == nil {
		o.R = &creditOriginationR{
			CreditOriginRefLoans: related,
		}
	} else {
		o.R.CreditOriginRefLoans = append(o.R.CreditOriginRefLoans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &loanR{
				CreditOriginRef: o,
			}
		} else {
			rel.R.CreditOriginRef = o
		}
	}
	return nil
}

// SetCreditOriginRefLoans removes all previously related items of the
// CreditOrigination replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreditOriginRef's CreditOriginRefLoans accordingly.
// Replaces o.R.CreditOriginRefLoans with related.
// Sets related.R.CreditOriginRef's CreditOriginRefLoans accordingly.
func (o *CreditOrigination) SetCreditOriginRefLoans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Loan) error {
	query := "update `Loan` set `credit_origin_ref` = null where `credit_origin_ref` = ?"
	values := []interface{}{o.CreditOriginationID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreditOriginRefLoans {
			queries.SetScanner(&rel.CreditOriginRef, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreditOriginRef = nil
		}

		o.R.CreditOriginRefLoans = nil
	}
	return o.AddCreditOriginRefLoans(ctx, exec, insert, related...)
}

// RemoveCreditOriginRefLoans relationships from objects passed in.
// Removes related items from R.CreditOriginRefLoans (uses pointer comparison, removal does not keep order)
// Sets related.R.CreditOriginRef.
func (o *CreditOrigination) RemoveCreditOriginRefLoans(ctx context.Context, exec boil.ContextExecutor, related ...*Loan) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreditOriginRef, nil)
		if rel.R != nil {
			rel.R.CreditOriginRef = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("credit_origin_ref")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreditOriginRefLoans {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreditOriginRefLoans)
			if ln > 1 && i < ln-1 {
				o.R.CreditOriginRefLoans[i] = o.R.CreditOriginRefLoans[ln-1]
			}
			o.R.CreditOriginRefLoans = o.R.CreditOriginRefLoans[:ln-1]
			break
		}
	}

	return nil
}

// CreditOriginations retrieves all the records using an executor.
func CreditOriginations(mods ...qm.QueryMod) creditOriginationQuery {
	mods = append(mods, qm.From("`CreditOrigination`"))
	return creditOriginationQuery{NewQuery(mods...)}
}

// FindCreditOrigination retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCreditOrigination(ctx context.Context, exec boil.ContextExecutor, creditOriginationID int, selectCols ...string) (*CreditOrigination, error) {
	creditOriginationObj := &CreditOrigination{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CreditOrigination` where `credit_origination_id`=?", sel,
	)

	q := queries.Raw(query, creditOriginationID)

	err := q.Bind(ctx, exec, creditOriginationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CreditOrigination")
	}

	return creditOriginationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CreditOrigination) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CreditOrigination provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOriginationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditOriginationInsertCacheMut.RLock()
	cache, cached := creditOriginationInsertCache[key]
	creditOriginationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditOriginationColumns,
			creditOriginationColumnsWithDefault,
			creditOriginationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CreditOrigination` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CreditOrigination` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CreditOrigination` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, creditOriginationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CreditOrigination")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CreditOriginationID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == creditOriginationMapping["CreditOriginationID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditOriginationID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CreditOrigination")
	}

CacheNoHooks:
	if !cached {
		creditOriginationInsertCacheMut.Lock()
		creditOriginationInsertCache[key] = cache
		creditOriginationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CreditOrigination.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CreditOrigination) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditOriginationUpdateCacheMut.RLock()
	cache, cached := creditOriginationUpdateCache[key]
	creditOriginationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditOriginationColumns,
			creditOriginationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CreditOrigination, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CreditOrigination` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, creditOriginationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, append(wl, creditOriginationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CreditOrigination row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CreditOrigination")
	}

	if !cached {
		creditOriginationUpdateCacheMut.Lock()
		creditOriginationUpdateCache[key] = cache
		creditOriginationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q creditOriginationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CreditOrigination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CreditOrigination")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditOriginationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOriginationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CreditOrigination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOriginationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in creditOrigination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all creditOrigination")
	}
	return rowsAff, nil
}

var mySQLCreditOriginationUniqueColumns = []string{
	"credit_origination_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CreditOrigination) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CreditOrigination provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditOriginationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCreditOriginationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditOriginationUpsertCacheMut.RLock()
	cache, cached := creditOriginationUpsertCache[key]
	creditOriginationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			creditOriginationColumns,
			creditOriginationColumnsWithDefault,
			creditOriginationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			creditOriginationColumns,
			creditOriginationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert CreditOrigination, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "CreditOrigination", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CreditOrigination` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CreditOrigination")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CreditOriginationID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == creditOriginationMapping["credit_origination_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(creditOriginationType, creditOriginationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CreditOrigination")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CreditOrigination")
	}

CacheNoHooks:
	if !cached {
		creditOriginationUpsertCacheMut.Lock()
		creditOriginationUpsertCache[key] = cache
		creditOriginationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CreditOrigination record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CreditOrigination) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOrigination provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditOriginationPrimaryKeyMapping)
	sql := "DELETE FROM `CreditOrigination` WHERE `credit_origination_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CreditOrigination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CreditOrigination")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q creditOriginationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditOriginationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CreditOrigination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CreditOrigination")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditOriginationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CreditOrigination slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(creditOriginationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOriginationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CreditOrigination` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOriginationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from creditOrigination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CreditOrigination")
	}

	if len(creditOriginationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CreditOrigination) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCreditOrigination(ctx, exec, o.CreditOriginationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditOriginationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditOriginationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditOriginationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CreditOrigination`.* FROM `CreditOrigination` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, creditOriginationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditOriginationSlice")
	}

	*o = slice

	return nil
}

// CreditOriginationExists checks if the CreditOrigination row exists.
func CreditOriginationExists(ctx context.Context, exec boil.ContextExecutor, creditOriginationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CreditOrigination` where `credit_origination_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, creditOriginationID)
	}

	row := exec.QueryRowContext(ctx, sql, creditOriginationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CreditOrigination exists")
	}

	return exists, nil
}
