// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// AssetCondition is an object representing the database table.
type AssetCondition struct {
	ID                            int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	AssetID                       int           `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	CurrentNPV                    types.Decimal `boil:"current_npv" json:"current_npv" toml:"current_npv" yaml:"current_npv"`
	Utilization                   int           `boil:"utilization" json:"utilization" toml:"utilization" yaml:"utilization"`
	Maintenance                   string        `boil:"maintenance" json:"maintenance" toml:"maintenance" yaml:"maintenance"`
	MaintenanceScore              types.Decimal `boil:"maintenance_score" json:"maintenance_score" toml:"maintenance_score" yaml:"maintenance_score"`
	AssetCondition                types.Decimal `boil:"asset_condition" json:"asset_condition" toml:"asset_condition" yaml:"asset_condition"`
	RecordedDate                  time.Time     `boil:"recorded_date" json:"recorded_date" toml:"recorded_date" yaml:"recorded_date"`
	ValidTill                     time.Time     `boil:"valid_till" json:"valid_till" toml:"valid_till" yaml:"valid_till"`
	LastMaintenanceDate           null.Time     `boil:"last_maintenance_date" json:"last_maintenance_date,omitempty" toml:"last_maintenance_date" yaml:"last_maintenance_date,omitempty"`
	NoOfMaintenanceLastThreeMonth null.Int      `boil:"no_of_maintenance_last_three_month" json:"no_of_maintenance_last_three_month,omitempty" toml:"no_of_maintenance_last_three_month" yaml:"no_of_maintenance_last_three_month,omitempty"`
	MaintenanaceOnTime            null.String   `boil:"maintenanace_on_time" json:"maintenanace_on_time,omitempty" toml:"maintenanace_on_time" yaml:"maintenanace_on_time,omitempty"`
	BankID                        int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate                     time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                   null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                       string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                     null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                    null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                  null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *assetConditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetConditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetConditionColumns = struct {
	ID                            string
	AssetID                       string
	CurrentNPV                    string
	Utilization                   string
	Maintenance                   string
	MaintenanceScore              string
	AssetCondition                string
	RecordedDate                  string
	ValidTill                     string
	LastMaintenanceDate           string
	NoOfMaintenanceLastThreeMonth string
	MaintenanaceOnTime            string
	BankID                        string
	MakerDate                     string
	CheckerDate                   string
	MakerID                       string
	CheckerID                     string
	ModifiedBy                    string
	ModifiedDate                  string
}{
	ID:                            "id",
	AssetID:                       "asset_id",
	CurrentNPV:                    "current_npv",
	Utilization:                   "utilization",
	Maintenance:                   "maintenance",
	MaintenanceScore:              "maintenance_score",
	AssetCondition:                "asset_condition",
	RecordedDate:                  "recorded_date",
	ValidTill:                     "valid_till",
	LastMaintenanceDate:           "last_maintenance_date",
	NoOfMaintenanceLastThreeMonth: "no_of_maintenance_last_three_month",
	MaintenanaceOnTime:            "maintenanace_on_time",
	BankID:                        "bank_id",
	MakerDate:                     "maker_date",
	CheckerDate:                   "checker_date",
	MakerID:                       "maker_id",
	CheckerID:                     "checker_id",
	ModifiedBy:                    "modified_by",
	ModifiedDate:                  "modified_date",
}

// Generated where

var AssetConditionWhere = struct {
	ID                            whereHelperint
	AssetID                       whereHelperint
	CurrentNPV                    whereHelpertypes_Decimal
	Utilization                   whereHelperint
	Maintenance                   whereHelperstring
	MaintenanceScore              whereHelpertypes_Decimal
	AssetCondition                whereHelpertypes_Decimal
	RecordedDate                  whereHelpertime_Time
	ValidTill                     whereHelpertime_Time
	LastMaintenanceDate           whereHelpernull_Time
	NoOfMaintenanceLastThreeMonth whereHelpernull_Int
	MaintenanaceOnTime            whereHelpernull_String
	BankID                        whereHelperint
	MakerDate                     whereHelpertime_Time
	CheckerDate                   whereHelpernull_Time
	MakerID                       whereHelperstring
	CheckerID                     whereHelpernull_String
	ModifiedBy                    whereHelpernull_String
	ModifiedDate                  whereHelpernull_Time
}{
	ID:                            whereHelperint{field: `id`},
	AssetID:                       whereHelperint{field: `asset_id`},
	CurrentNPV:                    whereHelpertypes_Decimal{field: `current_npv`},
	Utilization:                   whereHelperint{field: `utilization`},
	Maintenance:                   whereHelperstring{field: `maintenance`},
	MaintenanceScore:              whereHelpertypes_Decimal{field: `maintenance_score`},
	AssetCondition:                whereHelpertypes_Decimal{field: `asset_condition`},
	RecordedDate:                  whereHelpertime_Time{field: `recorded_date`},
	ValidTill:                     whereHelpertime_Time{field: `valid_till`},
	LastMaintenanceDate:           whereHelpernull_Time{field: `last_maintenance_date`},
	NoOfMaintenanceLastThreeMonth: whereHelpernull_Int{field: `no_of_maintenance_last_three_month`},
	MaintenanaceOnTime:            whereHelpernull_String{field: `maintenanace_on_time`},
	BankID:                        whereHelperint{field: `bank_id`},
	MakerDate:                     whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                   whereHelpernull_Time{field: `checker_date`},
	MakerID:                       whereHelperstring{field: `maker_id`},
	CheckerID:                     whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                    whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                  whereHelpernull_Time{field: `modified_date`},
}

// AssetConditionRels is where relationship names are stored.
var AssetConditionRels = struct {
	Asset string
}{
	Asset: "Asset",
}

// assetConditionR is where relationships are stored.
type assetConditionR struct {
	Asset *Asset
}

// NewStruct creates a new relationship struct
func (*assetConditionR) NewStruct() *assetConditionR {
	return &assetConditionR{}
}

// assetConditionL is where Load methods for each relationship are stored.
type assetConditionL struct{}

var (
	assetConditionColumns               = []string{"id", "asset_id", "current_npv", "utilization", "maintenance", "maintenance_score", "asset_condition", "recorded_date", "valid_till", "last_maintenance_date", "no_of_maintenance_last_three_month", "maintenanace_on_time", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetConditionColumnsWithoutDefault = []string{"id", "asset_id", "current_npv", "utilization", "maintenance", "maintenance_score", "asset_condition", "recorded_date", "valid_till", "last_maintenance_date", "no_of_maintenance_last_three_month", "maintenanace_on_time", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetConditionColumnsWithDefault    = []string{}
	assetConditionPrimaryKeyColumns     = []string{"id"}
)

type (
	// AssetConditionSlice is an alias for a slice of pointers to AssetCondition.
	// This should generally be used opposed to []AssetCondition.
	AssetConditionSlice []*AssetCondition
	// AssetConditionHook is the signature for custom AssetCondition hook methods
	AssetConditionHook func(context.Context, boil.ContextExecutor, *AssetCondition) error

	assetConditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetConditionType                 = reflect.TypeOf(&AssetCondition{})
	assetConditionMapping              = queries.MakeStructMapping(assetConditionType)
	assetConditionPrimaryKeyMapping, _ = queries.BindMapping(assetConditionType, assetConditionMapping, assetConditionPrimaryKeyColumns)
	assetConditionInsertCacheMut       sync.RWMutex
	assetConditionInsertCache          = make(map[string]insertCache)
	assetConditionUpdateCacheMut       sync.RWMutex
	assetConditionUpdateCache          = make(map[string]updateCache)
	assetConditionUpsertCacheMut       sync.RWMutex
	assetConditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetConditionBeforeInsertHooks []AssetConditionHook
var assetConditionBeforeUpdateHooks []AssetConditionHook
var assetConditionBeforeDeleteHooks []AssetConditionHook
var assetConditionBeforeUpsertHooks []AssetConditionHook

var assetConditionAfterInsertHooks []AssetConditionHook
var assetConditionAfterSelectHooks []AssetConditionHook
var assetConditionAfterUpdateHooks []AssetConditionHook
var assetConditionAfterDeleteHooks []AssetConditionHook
var assetConditionAfterUpsertHooks []AssetConditionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetCondition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetCondition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetCondition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetCondition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetCondition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetCondition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetCondition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetCondition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetCondition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetConditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetConditionHook registers your hook function for all future operations.
func AddAssetConditionHook(hookPoint boil.HookPoint, assetConditionHook AssetConditionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetConditionBeforeInsertHooks = append(assetConditionBeforeInsertHooks, assetConditionHook)
	case boil.BeforeUpdateHook:
		assetConditionBeforeUpdateHooks = append(assetConditionBeforeUpdateHooks, assetConditionHook)
	case boil.BeforeDeleteHook:
		assetConditionBeforeDeleteHooks = append(assetConditionBeforeDeleteHooks, assetConditionHook)
	case boil.BeforeUpsertHook:
		assetConditionBeforeUpsertHooks = append(assetConditionBeforeUpsertHooks, assetConditionHook)
	case boil.AfterInsertHook:
		assetConditionAfterInsertHooks = append(assetConditionAfterInsertHooks, assetConditionHook)
	case boil.AfterSelectHook:
		assetConditionAfterSelectHooks = append(assetConditionAfterSelectHooks, assetConditionHook)
	case boil.AfterUpdateHook:
		assetConditionAfterUpdateHooks = append(assetConditionAfterUpdateHooks, assetConditionHook)
	case boil.AfterDeleteHook:
		assetConditionAfterDeleteHooks = append(assetConditionAfterDeleteHooks, assetConditionHook)
	case boil.AfterUpsertHook:
		assetConditionAfterUpsertHooks = append(assetConditionAfterUpsertHooks, assetConditionHook)
	}
}

// One returns a single assetCondition record from the query.
func (q assetConditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssetCondition, error) {
	o := &AssetCondition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AssetCondition")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssetCondition records from the query.
func (q assetConditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssetConditionSlice, error) {
	var o []*AssetCondition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssetCondition slice")
	}

	if len(assetConditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssetCondition records in the query.
func (q assetConditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AssetCondition rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetConditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AssetCondition exists")
	}

	return count > 0, nil
}

// Asset pointed to by the foreign key.
func (o *AssetCondition) Asset(mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("asset_id=?", o.AssetID),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(queryMods...)
	queries.SetFrom(query.Query, "`Assets`")

	return query
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetConditionL) LoadAsset(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssetCondition interface{}, mods queries.Applicator) error {
	var slice []*AssetCondition
	var object *AssetCondition

	if singular {
		object = maybeAssetCondition.(*AssetCondition)
	} else {
		slice = *maybeAssetCondition.(*[]*AssetCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetConditionR{}
		}
		args = append(args, object.AssetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetConditionR{}
			}

			for _, a := range args {
				if a == obj.AssetID {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Assets`), qm.WhereIn(`asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Assets")
	}

	if len(assetConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Asset = foreign
		if foreign.R == nil {
			foreign.R = &assetR{}
		}
		foreign.R.AssetAssetConditions = append(foreign.R.AssetAssetConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssetID == foreign.AssetID {
				local.R.Asset = foreign
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.AssetAssetConditions = append(foreign.R.AssetAssetConditions, local)
				break
			}
		}
	}

	return nil
}

// SetAsset of the assetCondition to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.AssetAssetConditions.
func (o *AssetCondition) SetAsset(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `AssetCondition` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"asset_id"}),
		strmangle.WhereClause("`", "`", 0, assetConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.AssetID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssetID = related.AssetID
	if o.R == nil {
		o.R = &assetConditionR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			AssetAssetConditions: AssetConditionSlice{o},
		}
	} else {
		related.R.AssetAssetConditions = append(related.R.AssetAssetConditions, o)
	}

	return nil
}

// AssetConditions retrieves all the records using an executor.
func AssetConditions(mods ...qm.QueryMod) assetConditionQuery {
	mods = append(mods, qm.From("`AssetCondition`"))
	return assetConditionQuery{NewQuery(mods...)}
}

// FindAssetCondition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetCondition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AssetCondition, error) {
	assetConditionObj := &AssetCondition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `AssetCondition` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assetConditionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AssetCondition")
	}

	return assetConditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetCondition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AssetCondition provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetConditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetConditionInsertCacheMut.RLock()
	cache, cached := assetConditionInsertCache[key]
	assetConditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetConditionColumns,
			assetConditionColumnsWithDefault,
			assetConditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetConditionType, assetConditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetConditionType, assetConditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `AssetCondition` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `AssetCondition` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `AssetCondition` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, assetConditionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AssetCondition")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AssetCondition")
	}

CacheNoHooks:
	if !cached {
		assetConditionInsertCacheMut.Lock()
		assetConditionInsertCache[key] = cache
		assetConditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssetCondition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetCondition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetConditionUpdateCacheMut.RLock()
	cache, cached := assetConditionUpdateCache[key]
	assetConditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetConditionColumns,
			assetConditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AssetCondition, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `AssetCondition` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, assetConditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetConditionType, assetConditionMapping, append(wl, assetConditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AssetCondition row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AssetCondition")
	}

	if !cached {
		assetConditionUpdateCacheMut.Lock()
		assetConditionUpdateCache[key] = cache
		assetConditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetConditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AssetCondition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AssetCondition")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetConditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `AssetCondition` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetConditionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assetCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assetCondition")
	}
	return rowsAff, nil
}

var mySQLAssetConditionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetCondition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AssetCondition provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetConditionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAssetConditionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetConditionUpsertCacheMut.RLock()
	cache, cached := assetConditionUpsertCache[key]
	assetConditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetConditionColumns,
			assetConditionColumnsWithDefault,
			assetConditionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetConditionColumns,
			assetConditionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert AssetCondition, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "AssetCondition", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `AssetCondition` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(assetConditionType, assetConditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetConditionType, assetConditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for AssetCondition")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(assetConditionType, assetConditionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for AssetCondition")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AssetCondition")
	}

CacheNoHooks:
	if !cached {
		assetConditionUpsertCacheMut.Lock()
		assetConditionUpsertCache[key] = cache
		assetConditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssetCondition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetCondition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssetCondition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetConditionPrimaryKeyMapping)
	sql := "DELETE FROM `AssetCondition` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AssetCondition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AssetCondition")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetConditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assetConditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AssetCondition")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AssetCondition")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetConditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssetCondition slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(assetConditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `AssetCondition` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetConditionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assetCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AssetCondition")
	}

	if len(assetConditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetCondition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssetCondition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetConditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetConditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `AssetCondition`.* FROM `AssetCondition` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetConditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssetConditionSlice")
	}

	*o = slice

	return nil
}

// AssetConditionExists checks if the AssetCondition row exists.
func AssetConditionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `AssetCondition` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AssetCondition exists")
	}

	return exists, nil
}
