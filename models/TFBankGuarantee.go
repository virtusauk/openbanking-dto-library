// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFBankGuarantee is an object representing the database table.
type TFBankGuarantee struct {
	TFBankGuaranteeID int           `boil:"tf_bank_guarantee_id" json:"tf_bank_guarantee_id" toml:"tf_bank_guarantee_id" yaml:"tf_bank_guarantee_id"`
	ReferenceID       string        `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	BranchID          int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID           int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	Status            string        `boil:"status" json:"status" toml:"status" yaml:"status"`
	GuaranteeNumber   string        `boil:"guarantee_number" json:"guarantee_number" toml:"guarantee_number" yaml:"guarantee_number"`
	GuaranteeType     string        `boil:"guarantee_type" json:"guarantee_type" toml:"guarantee_type" yaml:"guarantee_type"`
	ValueDate         time.Time     `boil:"value_date" json:"value_date" toml:"value_date" yaml:"value_date"`
	ExpiryDate        time.Time     `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	GuaranteeCcy      string        `boil:"guarantee_ccy" json:"guarantee_ccy" toml:"guarantee_ccy" yaml:"guarantee_ccy"`
	GuaranteeAmt      types.Decimal `boil:"guarantee_amt" json:"guarantee_amt" toml:"guarantee_amt" yaml:"guarantee_amt"`
	LinkedAccountID   int           `boil:"linked_account_id" json:"linked_account_id" toml:"linked_account_id" yaml:"linked_account_id"`
	BankID            int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate         time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate       null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID           string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID         null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy        null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate      null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFBankGuaranteeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFBankGuaranteeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFBankGuaranteeColumns = struct {
	TFBankGuaranteeID string
	ReferenceID       string
	BranchID          string
	PartyID           string
	Status            string
	GuaranteeNumber   string
	GuaranteeType     string
	ValueDate         string
	ExpiryDate        string
	GuaranteeCcy      string
	GuaranteeAmt      string
	LinkedAccountID   string
	BankID            string
	MakerDate         string
	CheckerDate       string
	MakerID           string
	CheckerID         string
	ModifiedBy        string
	ModifiedDate      string
}{
	TFBankGuaranteeID: "tf_bank_guarantee_id",
	ReferenceID:       "reference_id",
	BranchID:          "branch_id",
	PartyID:           "party_id",
	Status:            "status",
	GuaranteeNumber:   "guarantee_number",
	GuaranteeType:     "guarantee_type",
	ValueDate:         "value_date",
	ExpiryDate:        "expiry_date",
	GuaranteeCcy:      "guarantee_ccy",
	GuaranteeAmt:      "guarantee_amt",
	LinkedAccountID:   "linked_account_id",
	BankID:            "bank_id",
	MakerDate:         "maker_date",
	CheckerDate:       "checker_date",
	MakerID:           "maker_id",
	CheckerID:         "checker_id",
	ModifiedBy:        "modified_by",
	ModifiedDate:      "modified_date",
}

// Generated where

var TFBankGuaranteeWhere = struct {
	TFBankGuaranteeID whereHelperint
	ReferenceID       whereHelperstring
	BranchID          whereHelperint
	PartyID           whereHelperint
	Status            whereHelperstring
	GuaranteeNumber   whereHelperstring
	GuaranteeType     whereHelperstring
	ValueDate         whereHelpertime_Time
	ExpiryDate        whereHelpertime_Time
	GuaranteeCcy      whereHelperstring
	GuaranteeAmt      whereHelpertypes_Decimal
	LinkedAccountID   whereHelperint
	BankID            whereHelperint
	MakerDate         whereHelpertime_Time
	CheckerDate       whereHelpernull_Time
	MakerID           whereHelperstring
	CheckerID         whereHelpernull_String
	ModifiedBy        whereHelpernull_String
	ModifiedDate      whereHelpernull_Time
}{
	TFBankGuaranteeID: whereHelperint{field: `tf_bank_guarantee_id`},
	ReferenceID:       whereHelperstring{field: `reference_id`},
	BranchID:          whereHelperint{field: `branch_id`},
	PartyID:           whereHelperint{field: `party_id`},
	Status:            whereHelperstring{field: `status`},
	GuaranteeNumber:   whereHelperstring{field: `guarantee_number`},
	GuaranteeType:     whereHelperstring{field: `guarantee_type`},
	ValueDate:         whereHelpertime_Time{field: `value_date`},
	ExpiryDate:        whereHelpertime_Time{field: `expiry_date`},
	GuaranteeCcy:      whereHelperstring{field: `guarantee_ccy`},
	GuaranteeAmt:      whereHelpertypes_Decimal{field: `guarantee_amt`},
	LinkedAccountID:   whereHelperint{field: `linked_account_id`},
	BankID:            whereHelperint{field: `bank_id`},
	MakerDate:         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:       whereHelpernull_Time{field: `checker_date`},
	MakerID:           whereHelperstring{field: `maker_id`},
	CheckerID:         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:      whereHelpernull_Time{field: `modified_date`},
}

// TFBankGuaranteeRels is where relationship names are stored.
var TFBankGuaranteeRels = struct {
	Bank   string
	Branch string
	Party  string
}{
	Bank:   "Bank",
	Branch: "Branch",
	Party:  "Party",
}

// tFBankGuaranteeR is where relationships are stored.
type tFBankGuaranteeR struct {
	Bank   *Bank
	Branch *Branch
	Party  *Party
}

// NewStruct creates a new relationship struct
func (*tFBankGuaranteeR) NewStruct() *tFBankGuaranteeR {
	return &tFBankGuaranteeR{}
}

// tFBankGuaranteeL is where Load methods for each relationship are stored.
type tFBankGuaranteeL struct{}

var (
	tFBankGuaranteeColumns               = []string{"tf_bank_guarantee_id", "reference_id", "branch_id", "party_id", "status", "guarantee_number", "guarantee_type", "value_date", "expiry_date", "guarantee_ccy", "guarantee_amt", "linked_account_id", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFBankGuaranteeColumnsWithoutDefault = []string{"tf_bank_guarantee_id", "reference_id", "branch_id", "party_id", "status", "guarantee_number", "guarantee_type", "value_date", "expiry_date", "guarantee_ccy", "guarantee_amt", "linked_account_id", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFBankGuaranteeColumnsWithDefault    = []string{}
	tFBankGuaranteePrimaryKeyColumns     = []string{"tf_bank_guarantee_id"}
)

type (
	// TFBankGuaranteeSlice is an alias for a slice of pointers to TFBankGuarantee.
	// This should generally be used opposed to []TFBankGuarantee.
	TFBankGuaranteeSlice []*TFBankGuarantee
	// TFBankGuaranteeHook is the signature for custom TFBankGuarantee hook methods
	TFBankGuaranteeHook func(context.Context, boil.ContextExecutor, *TFBankGuarantee) error

	tFBankGuaranteeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFBankGuaranteeType                 = reflect.TypeOf(&TFBankGuarantee{})
	tFBankGuaranteeMapping              = queries.MakeStructMapping(tFBankGuaranteeType)
	tFBankGuaranteePrimaryKeyMapping, _ = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, tFBankGuaranteePrimaryKeyColumns)
	tFBankGuaranteeInsertCacheMut       sync.RWMutex
	tFBankGuaranteeInsertCache          = make(map[string]insertCache)
	tFBankGuaranteeUpdateCacheMut       sync.RWMutex
	tFBankGuaranteeUpdateCache          = make(map[string]updateCache)
	tFBankGuaranteeUpsertCacheMut       sync.RWMutex
	tFBankGuaranteeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFBankGuaranteeBeforeInsertHooks []TFBankGuaranteeHook
var tFBankGuaranteeBeforeUpdateHooks []TFBankGuaranteeHook
var tFBankGuaranteeBeforeDeleteHooks []TFBankGuaranteeHook
var tFBankGuaranteeBeforeUpsertHooks []TFBankGuaranteeHook

var tFBankGuaranteeAfterInsertHooks []TFBankGuaranteeHook
var tFBankGuaranteeAfterSelectHooks []TFBankGuaranteeHook
var tFBankGuaranteeAfterUpdateHooks []TFBankGuaranteeHook
var tFBankGuaranteeAfterDeleteHooks []TFBankGuaranteeHook
var tFBankGuaranteeAfterUpsertHooks []TFBankGuaranteeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFBankGuarantee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFBankGuarantee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFBankGuarantee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFBankGuarantee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFBankGuarantee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFBankGuarantee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFBankGuarantee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFBankGuarantee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFBankGuarantee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFBankGuaranteeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFBankGuaranteeHook registers your hook function for all future operations.
func AddTFBankGuaranteeHook(hookPoint boil.HookPoint, tFBankGuaranteeHook TFBankGuaranteeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFBankGuaranteeBeforeInsertHooks = append(tFBankGuaranteeBeforeInsertHooks, tFBankGuaranteeHook)
	case boil.BeforeUpdateHook:
		tFBankGuaranteeBeforeUpdateHooks = append(tFBankGuaranteeBeforeUpdateHooks, tFBankGuaranteeHook)
	case boil.BeforeDeleteHook:
		tFBankGuaranteeBeforeDeleteHooks = append(tFBankGuaranteeBeforeDeleteHooks, tFBankGuaranteeHook)
	case boil.BeforeUpsertHook:
		tFBankGuaranteeBeforeUpsertHooks = append(tFBankGuaranteeBeforeUpsertHooks, tFBankGuaranteeHook)
	case boil.AfterInsertHook:
		tFBankGuaranteeAfterInsertHooks = append(tFBankGuaranteeAfterInsertHooks, tFBankGuaranteeHook)
	case boil.AfterSelectHook:
		tFBankGuaranteeAfterSelectHooks = append(tFBankGuaranteeAfterSelectHooks, tFBankGuaranteeHook)
	case boil.AfterUpdateHook:
		tFBankGuaranteeAfterUpdateHooks = append(tFBankGuaranteeAfterUpdateHooks, tFBankGuaranteeHook)
	case boil.AfterDeleteHook:
		tFBankGuaranteeAfterDeleteHooks = append(tFBankGuaranteeAfterDeleteHooks, tFBankGuaranteeHook)
	case boil.AfterUpsertHook:
		tFBankGuaranteeAfterUpsertHooks = append(tFBankGuaranteeAfterUpsertHooks, tFBankGuaranteeHook)
	}
}

// One returns a single tFBankGuarantee record from the query.
func (q tFBankGuaranteeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFBankGuarantee, error) {
	o := &TFBankGuarantee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFBankGuarantee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFBankGuarantee records from the query.
func (q tFBankGuaranteeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFBankGuaranteeSlice, error) {
	var o []*TFBankGuarantee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFBankGuarantee slice")
	}

	if len(tFBankGuaranteeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFBankGuarantee records in the query.
func (q tFBankGuaranteeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFBankGuarantee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFBankGuaranteeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFBankGuarantee exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *TFBankGuarantee) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Branch pointed to by the foreign key.
func (o *TFBankGuarantee) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("branch_id=?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	query := Branches(queryMods...)
	queries.SetFrom(query.Query, "`Branches`")

	return query
}

// Party pointed to by the foreign key.
func (o *TFBankGuarantee) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFBankGuaranteeL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFBankGuarantee interface{}, mods queries.Applicator) error {
	var slice []*TFBankGuarantee
	var object *TFBankGuarantee

	if singular {
		object = maybeTFBankGuarantee.(*TFBankGuarantee)
	} else {
		slice = *maybeTFBankGuarantee.(*[]*TFBankGuarantee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFBankGuaranteeR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFBankGuaranteeR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(tFBankGuaranteeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankTFBankGuarantees = append(foreign.R.BankTFBankGuarantees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankTFBankGuarantees = append(foreign.R.BankTFBankGuarantees, local)
				break
			}
		}
	}

	return nil
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFBankGuaranteeL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFBankGuarantee interface{}, mods queries.Applicator) error {
	var slice []*TFBankGuarantee
	var object *TFBankGuarantee

	if singular {
		object = maybeTFBankGuarantee.(*TFBankGuarantee)
	} else {
		slice = *maybeTFBankGuarantee.(*[]*TFBankGuarantee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFBankGuaranteeR{}
		}
		args = append(args, object.BranchID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFBankGuaranteeR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Branches`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Branches")
	}

	if len(tFBankGuaranteeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.BranchTFBankGuarantees = append(foreign.R.BranchTFBankGuarantees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BranchID == foreign.BranchID {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.BranchTFBankGuarantees = append(foreign.R.BranchTFBankGuarantees, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFBankGuaranteeL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFBankGuarantee interface{}, mods queries.Applicator) error {
	var slice []*TFBankGuarantee
	var object *TFBankGuarantee

	if singular {
		object = maybeTFBankGuarantee.(*TFBankGuarantee)
	} else {
		slice = *maybeTFBankGuarantee.(*[]*TFBankGuarantee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFBankGuaranteeR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFBankGuaranteeR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFBankGuaranteeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFBankGuarantees = append(foreign.R.PartyTFBankGuarantees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFBankGuarantees = append(foreign.R.PartyTFBankGuarantees, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the tFBankGuarantee to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankTFBankGuarantees.
func (o *TFBankGuarantee) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFBankGuarantee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.TFBankGuaranteeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &tFBankGuaranteeR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankTFBankGuarantees: TFBankGuaranteeSlice{o},
		}
	} else {
		related.R.BankTFBankGuarantees = append(related.R.BankTFBankGuarantees, o)
	}

	return nil
}

// SetBranch of the tFBankGuarantee to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.BranchTFBankGuarantees.
func (o *TFBankGuarantee) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFBankGuarantee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
		strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns),
	)
	values := []interface{}{related.BranchID, o.TFBankGuaranteeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BranchID = related.BranchID
	if o.R == nil {
		o.R = &tFBankGuaranteeR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			BranchTFBankGuarantees: TFBankGuaranteeSlice{o},
		}
	} else {
		related.R.BranchTFBankGuarantees = append(related.R.BranchTFBankGuarantees, o)
	}

	return nil
}

// SetParty of the tFBankGuarantee to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFBankGuarantees.
func (o *TFBankGuarantee) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFBankGuarantee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFBankGuaranteeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFBankGuaranteeR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFBankGuarantees: TFBankGuaranteeSlice{o},
		}
	} else {
		related.R.PartyTFBankGuarantees = append(related.R.PartyTFBankGuarantees, o)
	}

	return nil
}

// TFBankGuarantees retrieves all the records using an executor.
func TFBankGuarantees(mods ...qm.QueryMod) tFBankGuaranteeQuery {
	mods = append(mods, qm.From("`TFBankGuarantee`"))
	return tFBankGuaranteeQuery{NewQuery(mods...)}
}

// FindTFBankGuarantee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFBankGuarantee(ctx context.Context, exec boil.ContextExecutor, tFBankGuaranteeID int, selectCols ...string) (*TFBankGuarantee, error) {
	tFBankGuaranteeObj := &TFBankGuarantee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFBankGuarantee` where `tf_bank_guarantee_id`=?", sel,
	)

	q := queries.Raw(query, tFBankGuaranteeID)

	err := q.Bind(ctx, exec, tFBankGuaranteeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFBankGuarantee")
	}

	return tFBankGuaranteeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFBankGuarantee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFBankGuarantee provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFBankGuaranteeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFBankGuaranteeInsertCacheMut.RLock()
	cache, cached := tFBankGuaranteeInsertCache[key]
	tFBankGuaranteeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFBankGuaranteeColumns,
			tFBankGuaranteeColumnsWithDefault,
			tFBankGuaranteeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFBankGuarantee` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFBankGuarantee` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFBankGuarantee` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFBankGuarantee")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFBankGuaranteeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFBankGuarantee")
	}

CacheNoHooks:
	if !cached {
		tFBankGuaranteeInsertCacheMut.Lock()
		tFBankGuaranteeInsertCache[key] = cache
		tFBankGuaranteeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFBankGuarantee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFBankGuarantee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFBankGuaranteeUpdateCacheMut.RLock()
	cache, cached := tFBankGuaranteeUpdateCache[key]
	tFBankGuaranteeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFBankGuaranteeColumns,
			tFBankGuaranteePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFBankGuarantee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFBankGuarantee` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, append(wl, tFBankGuaranteePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFBankGuarantee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFBankGuarantee")
	}

	if !cached {
		tFBankGuaranteeUpdateCacheMut.Lock()
		tFBankGuaranteeUpdateCache[key] = cache
		tFBankGuaranteeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFBankGuaranteeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFBankGuarantee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFBankGuarantee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFBankGuaranteeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFBankGuaranteePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFBankGuarantee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFBankGuaranteePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFBankGuarantee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFBankGuarantee")
	}
	return rowsAff, nil
}

var mySQLTFBankGuaranteeUniqueColumns = []string{
	"tf_bank_guarantee_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFBankGuarantee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFBankGuarantee provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFBankGuaranteeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFBankGuaranteeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFBankGuaranteeUpsertCacheMut.RLock()
	cache, cached := tFBankGuaranteeUpsertCache[key]
	tFBankGuaranteeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFBankGuaranteeColumns,
			tFBankGuaranteeColumnsWithDefault,
			tFBankGuaranteeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFBankGuaranteeColumns,
			tFBankGuaranteePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFBankGuarantee, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFBankGuarantee", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFBankGuarantee` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFBankGuarantee")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFBankGuaranteeType, tFBankGuaranteeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFBankGuarantee")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFBankGuarantee")
	}

CacheNoHooks:
	if !cached {
		tFBankGuaranteeUpsertCacheMut.Lock()
		tFBankGuaranteeUpsertCache[key] = cache
		tFBankGuaranteeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFBankGuarantee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFBankGuarantee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFBankGuarantee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFBankGuaranteePrimaryKeyMapping)
	sql := "DELETE FROM `TFBankGuarantee` WHERE `tf_bank_guarantee_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFBankGuarantee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFBankGuarantee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFBankGuaranteeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFBankGuaranteeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFBankGuarantee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFBankGuarantee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFBankGuaranteeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFBankGuarantee slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFBankGuaranteeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFBankGuaranteePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFBankGuarantee` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFBankGuaranteePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFBankGuarantee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFBankGuarantee")
	}

	if len(tFBankGuaranteeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFBankGuarantee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFBankGuarantee(ctx, exec, o.TFBankGuaranteeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFBankGuaranteeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFBankGuaranteeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFBankGuaranteePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFBankGuarantee`.* FROM `TFBankGuarantee` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFBankGuaranteePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFBankGuaranteeSlice")
	}

	*o = slice

	return nil
}

// TFBankGuaranteeExists checks if the TFBankGuarantee row exists.
func TFBankGuaranteeExists(ctx context.Context, exec boil.ContextExecutor, tFBankGuaranteeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFBankGuarantee` where `tf_bank_guarantee_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFBankGuaranteeID)
	}

	row := exec.QueryRowContext(ctx, sql, tFBankGuaranteeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFBankGuarantee exists")
	}

	return exists, nil
}
