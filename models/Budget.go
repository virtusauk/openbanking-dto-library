// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Budget is an object representing the database table.
type Budget struct {
	BudgetID     int           `boil:"budget_id" json:"budget_id" toml:"budget_id" yaml:"budget_id"`
	CategoryID   int           `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	PartyID      int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	Amount       types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	StartDate    time.Time     `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate      null.Time     `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	MakerDate    time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *budgetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L budgetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BudgetColumns = struct {
	BudgetID     string
	CategoryID   string
	PartyID      string
	Amount       string
	StartDate    string
	EndDate      string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	BudgetID:     "budget_id",
	CategoryID:   "category_id",
	PartyID:      "party_id",
	Amount:       "amount",
	StartDate:    "start_date",
	EndDate:      "end_date",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var BudgetWhere = struct {
	BudgetID     whereHelperint
	CategoryID   whereHelperint
	PartyID      whereHelperint
	Amount       whereHelpertypes_Decimal
	StartDate    whereHelpertime_Time
	EndDate      whereHelpernull_Time
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	BudgetID:     whereHelperint{field: `budget_id`},
	CategoryID:   whereHelperint{field: `category_id`},
	PartyID:      whereHelperint{field: `party_id`},
	Amount:       whereHelpertypes_Decimal{field: `amount`},
	StartDate:    whereHelpertime_Time{field: `start_date`},
	EndDate:      whereHelpernull_Time{field: `end_date`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// BudgetRels is where relationship names are stored.
var BudgetRels = struct {
	Category string
	Party    string
}{
	Category: "Category",
	Party:    "Party",
}

// budgetR is where relationships are stored.
type budgetR struct {
	Category *MccCode
	Party    *Party
}

// NewStruct creates a new relationship struct
func (*budgetR) NewStruct() *budgetR {
	return &budgetR{}
}

// budgetL is where Load methods for each relationship are stored.
type budgetL struct{}

var (
	budgetColumns               = []string{"budget_id", "category_id", "party_id", "amount", "start_date", "end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	budgetColumnsWithoutDefault = []string{"category_id", "party_id", "amount", "start_date", "end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	budgetColumnsWithDefault    = []string{"budget_id"}
	budgetPrimaryKeyColumns     = []string{"budget_id"}
)

type (
	// BudgetSlice is an alias for a slice of pointers to Budget.
	// This should generally be used opposed to []Budget.
	BudgetSlice []*Budget
	// BudgetHook is the signature for custom Budget hook methods
	BudgetHook func(context.Context, boil.ContextExecutor, *Budget) error

	budgetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	budgetType                 = reflect.TypeOf(&Budget{})
	budgetMapping              = queries.MakeStructMapping(budgetType)
	budgetPrimaryKeyMapping, _ = queries.BindMapping(budgetType, budgetMapping, budgetPrimaryKeyColumns)
	budgetInsertCacheMut       sync.RWMutex
	budgetInsertCache          = make(map[string]insertCache)
	budgetUpdateCacheMut       sync.RWMutex
	budgetUpdateCache          = make(map[string]updateCache)
	budgetUpsertCacheMut       sync.RWMutex
	budgetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var budgetBeforeInsertHooks []BudgetHook
var budgetBeforeUpdateHooks []BudgetHook
var budgetBeforeDeleteHooks []BudgetHook
var budgetBeforeUpsertHooks []BudgetHook

var budgetAfterInsertHooks []BudgetHook
var budgetAfterSelectHooks []BudgetHook
var budgetAfterUpdateHooks []BudgetHook
var budgetAfterDeleteHooks []BudgetHook
var budgetAfterUpsertHooks []BudgetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Budget) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Budget) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Budget) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Budget) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Budget) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Budget) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Budget) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Budget) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Budget) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range budgetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBudgetHook registers your hook function for all future operations.
func AddBudgetHook(hookPoint boil.HookPoint, budgetHook BudgetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		budgetBeforeInsertHooks = append(budgetBeforeInsertHooks, budgetHook)
	case boil.BeforeUpdateHook:
		budgetBeforeUpdateHooks = append(budgetBeforeUpdateHooks, budgetHook)
	case boil.BeforeDeleteHook:
		budgetBeforeDeleteHooks = append(budgetBeforeDeleteHooks, budgetHook)
	case boil.BeforeUpsertHook:
		budgetBeforeUpsertHooks = append(budgetBeforeUpsertHooks, budgetHook)
	case boil.AfterInsertHook:
		budgetAfterInsertHooks = append(budgetAfterInsertHooks, budgetHook)
	case boil.AfterSelectHook:
		budgetAfterSelectHooks = append(budgetAfterSelectHooks, budgetHook)
	case boil.AfterUpdateHook:
		budgetAfterUpdateHooks = append(budgetAfterUpdateHooks, budgetHook)
	case boil.AfterDeleteHook:
		budgetAfterDeleteHooks = append(budgetAfterDeleteHooks, budgetHook)
	case boil.AfterUpsertHook:
		budgetAfterUpsertHooks = append(budgetAfterUpsertHooks, budgetHook)
	}
}

// One returns a single budget record from the query.
func (q budgetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Budget, error) {
	o := &Budget{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Budget")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Budget records from the query.
func (q budgetQuery) All(ctx context.Context, exec boil.ContextExecutor) (BudgetSlice, error) {
	var o []*Budget

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Budget slice")
	}

	if len(budgetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Budget records in the query.
func (q budgetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Budget rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q budgetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Budget exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Budget) Category(mods ...qm.QueryMod) mccCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("mcc_code=?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := MccCodes(queryMods...)
	queries.SetFrom(query.Query, "`MccCode`")

	return query
}

// Party pointed to by the foreign key.
func (o *Budget) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (budgetL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBudget interface{}, mods queries.Applicator) error {
	var slice []*Budget
	var object *Budget

	if singular {
		object = maybeBudget.(*Budget)
	} else {
		slice = *maybeBudget.(*[]*Budget)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &budgetR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &budgetR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`MccCode`), qm.WhereIn(`mcc_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MccCode")
	}

	var resultSlice []*MccCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MccCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for MccCode")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for MccCode")
	}

	if len(budgetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &mccCodeR{}
		}
		foreign.R.CategoryBudgets = append(foreign.R.CategoryBudgets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.MCCCode {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &mccCodeR{}
				}
				foreign.R.CategoryBudgets = append(foreign.R.CategoryBudgets, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (budgetL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBudget interface{}, mods queries.Applicator) error {
	var slice []*Budget
	var object *Budget

	if singular {
		object = maybeBudget.(*Budget)
	} else {
		slice = *maybeBudget.(*[]*Budget)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &budgetR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &budgetR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(budgetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyBudgets = append(foreign.R.PartyBudgets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyBudgets = append(foreign.R.PartyBudgets, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the budget to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryBudgets.
func (o *Budget) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MccCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Budget` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, budgetPrimaryKeyColumns),
	)
	values := []interface{}{related.MCCCode, o.BudgetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.MCCCode
	if o.R == nil {
		o.R = &budgetR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &mccCodeR{
			CategoryBudgets: BudgetSlice{o},
		}
	} else {
		related.R.CategoryBudgets = append(related.R.CategoryBudgets, o)
	}

	return nil
}

// SetParty of the budget to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyBudgets.
func (o *Budget) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Budget` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, budgetPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.BudgetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &budgetR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyBudgets: BudgetSlice{o},
		}
	} else {
		related.R.PartyBudgets = append(related.R.PartyBudgets, o)
	}

	return nil
}

// Budgets retrieves all the records using an executor.
func Budgets(mods ...qm.QueryMod) budgetQuery {
	mods = append(mods, qm.From("`Budget`"))
	return budgetQuery{NewQuery(mods...)}
}

// FindBudget retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBudget(ctx context.Context, exec boil.ContextExecutor, budgetID int, selectCols ...string) (*Budget, error) {
	budgetObj := &Budget{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Budget` where `budget_id`=?", sel,
	)

	q := queries.Raw(query, budgetID)

	err := q.Bind(ctx, exec, budgetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Budget")
	}

	return budgetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Budget) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Budget provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(budgetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	budgetInsertCacheMut.RLock()
	cache, cached := budgetInsertCache[key]
	budgetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			budgetColumns,
			budgetColumnsWithDefault,
			budgetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(budgetType, budgetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(budgetType, budgetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Budget` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Budget` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Budget` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, budgetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Budget")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BudgetID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == budgetMapping["BudgetID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BudgetID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Budget")
	}

CacheNoHooks:
	if !cached {
		budgetInsertCacheMut.Lock()
		budgetInsertCache[key] = cache
		budgetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Budget.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Budget) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	budgetUpdateCacheMut.RLock()
	cache, cached := budgetUpdateCache[key]
	budgetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			budgetColumns,
			budgetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Budget, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Budget` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, budgetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(budgetType, budgetMapping, append(wl, budgetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Budget row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Budget")
	}

	if !cached {
		budgetUpdateCacheMut.Lock()
		budgetUpdateCache[key] = cache
		budgetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q budgetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Budget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Budget")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BudgetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Budget` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in budget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all budget")
	}
	return rowsAff, nil
}

var mySQLBudgetUniqueColumns = []string{
	"budget_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Budget) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Budget provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(budgetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBudgetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	budgetUpsertCacheMut.RLock()
	cache, cached := budgetUpsertCache[key]
	budgetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			budgetColumns,
			budgetColumnsWithDefault,
			budgetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			budgetColumns,
			budgetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Budget, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Budget", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Budget` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(budgetType, budgetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(budgetType, budgetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Budget")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BudgetID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == budgetMapping["budget_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(budgetType, budgetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Budget")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Budget")
	}

CacheNoHooks:
	if !cached {
		budgetUpsertCacheMut.Lock()
		budgetUpsertCache[key] = cache
		budgetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Budget record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Budget) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Budget provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), budgetPrimaryKeyMapping)
	sql := "DELETE FROM `Budget` WHERE `budget_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Budget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Budget")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q budgetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no budgetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Budget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Budget")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BudgetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Budget slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(budgetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Budget` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from budget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Budget")
	}

	if len(budgetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Budget) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBudget(ctx, exec, o.BudgetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BudgetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BudgetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), budgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Budget`.* FROM `Budget` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, budgetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BudgetSlice")
	}

	*o = slice

	return nil
}

// BudgetExists checks if the Budget row exists.
func BudgetExists(ctx context.Context, exec boil.ContextExecutor, budgetID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Budget` where `budget_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, budgetID)
	}

	row := exec.QueryRowContext(ctx, sql, budgetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Budget exists")
	}

	return exists, nil
}
