// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AccountRequest is an object representing the database table.
type AccountRequest struct {
	AccountRequestID             int         `boil:"account_request_id" json:"account_request_id" toml:"account_request_id" yaml:"account_request_id"`
	AccountIDRef                 string      `boil:"account_id_ref" json:"account_id_ref" toml:"account_id_ref" yaml:"account_id_ref"`
	AccountRequestReference      string      `boil:"account_request_reference" json:"account_request_reference" toml:"account_request_reference" yaml:"account_request_reference"`
	TokenJti                     null.String `boil:"token_jti" json:"token_jti,omitempty" toml:"token_jti" yaml:"token_jti,omitempty"`
	TokenSub                     null.String `boil:"token_sub" json:"token_sub,omitempty" toml:"token_sub" yaml:"token_sub,omitempty"`
	AccountID                    null.Int    `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	SchemeName                   string      `boil:"scheme_name" json:"scheme_name" toml:"scheme_name" yaml:"scheme_name"`
	AccountIdentification        string      `boil:"account_identification" json:"account_identification" toml:"account_identification" yaml:"account_identification"`
	PartyID                      null.Int    `boil:"party_id" json:"party_id,omitempty" toml:"party_id" yaml:"party_id,omitempty"`
	BankID                       null.Int    `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	Name                         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Status                       string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	ReadAccountsBasic            string      `boil:"read_accounts_basic" json:"read_accounts_basic" toml:"read_accounts_basic" yaml:"read_accounts_basic"`
	ReadAccountsDetail           string      `boil:"read_accounts_detail" json:"read_accounts_detail" toml:"read_accounts_detail" yaml:"read_accounts_detail"`
	ReadBalances                 string      `boil:"read_balances" json:"read_balances" toml:"read_balances" yaml:"read_balances"`
	ReadBeneficiariesBasic       string      `boil:"read_beneficiaries_basic" json:"read_beneficiaries_basic" toml:"read_beneficiaries_basic" yaml:"read_beneficiaries_basic"`
	ReadBeneficiariesDetail      string      `boil:"read_beneficiaries_detail" json:"read_beneficiaries_detail" toml:"read_beneficiaries_detail" yaml:"read_beneficiaries_detail"`
	ReadDirectDebits             string      `boil:"read_direct_debits" json:"read_direct_debits" toml:"read_direct_debits" yaml:"read_direct_debits"`
	ReadOffers                   string      `boil:"read_offers" json:"read_offers" toml:"read_offers" yaml:"read_offers"`
	ReadPan                      string      `boil:"read_pan" json:"read_pan" toml:"read_pan" yaml:"read_pan"`
	ReadParty                    string      `boil:"read_party" json:"read_party" toml:"read_party" yaml:"read_party"`
	ReadPartyPsu                 string      `boil:"read_party_psu" json:"read_party_psu" toml:"read_party_psu" yaml:"read_party_psu"`
	ReadProducts                 string      `boil:"read_products" json:"read_products" toml:"read_products" yaml:"read_products"`
	ReadScheduledPaymentsBasic   string      `boil:"read_scheduled_payments_basic" json:"read_scheduled_payments_basic" toml:"read_scheduled_payments_basic" yaml:"read_scheduled_payments_basic"`
	ReadScheduledPaymentsDfetail null.String `boil:"read_scheduled_payments_dfetail" json:"read_scheduled_payments_dfetail,omitempty" toml:"read_scheduled_payments_dfetail" yaml:"read_scheduled_payments_dfetail,omitempty"`
	ReadStandingOrdersBasic      string      `boil:"read_standing_orders_basic" json:"read_standing_orders_basic" toml:"read_standing_orders_basic" yaml:"read_standing_orders_basic"`
	ReadStandingOrdersDetail     string      `boil:"read_standing_orders_detail" json:"read_standing_orders_detail" toml:"read_standing_orders_detail" yaml:"read_standing_orders_detail"`
	ReadStatementsBasic          null.String `boil:"read_statements_basic" json:"read_statements_basic,omitempty" toml:"read_statements_basic" yaml:"read_statements_basic,omitempty"`
	ReadStatementsDetail         null.String `boil:"read_statements_detail" json:"read_statements_detail,omitempty" toml:"read_statements_detail" yaml:"read_statements_detail,omitempty"`
	ReadTransactionsBasic        string      `boil:"read_transactions_basic" json:"read_transactions_basic" toml:"read_transactions_basic" yaml:"read_transactions_basic"`
	ReadTransactionsCredits      string      `boil:"read_transactions_credits" json:"read_transactions_credits" toml:"read_transactions_credits" yaml:"read_transactions_credits"`
	ReadTransactionsDebits       string      `boil:"read_transactions_debits" json:"read_transactions_debits" toml:"read_transactions_debits" yaml:"read_transactions_debits"`
	ReadTransactionsDetail       string      `boil:"read_transactions_detail" json:"read_transactions_detail" toml:"read_transactions_detail" yaml:"read_transactions_detail"`
	ExpirationDateTime           time.Time   `boil:"expiration_date_time" json:"expiration_date_time" toml:"expiration_date_time" yaml:"expiration_date_time"`
	TransactionFromDateTime      time.Time   `boil:"transaction_from_date_time" json:"transaction_from_date_time" toml:"transaction_from_date_time" yaml:"transaction_from_date_time"`
	TransactionToDateTime        time.Time   `boil:"transaction_to_date_time" json:"transaction_to_date_time" toml:"transaction_to_date_time" yaml:"transaction_to_date_time"`
	ConsentID                    null.String `boil:"consent_id" json:"consent_id,omitempty" toml:"consent_id" yaml:"consent_id,omitempty"`
	CreationDateTime             null.Time   `boil:"creation_date_time" json:"creation_date_time,omitempty" toml:"creation_date_time" yaml:"creation_date_time,omitempty"`
	StatusUpdateDateTime         null.Time   `boil:"status_update_date_time" json:"status_update_date_time,omitempty" toml:"status_update_date_time" yaml:"status_update_date_time,omitempty"`
	ConsentRisk                  null.String `boil:"consent_risk" json:"consent_risk,omitempty" toml:"consent_risk" yaml:"consent_risk,omitempty"`
	MakerDate                    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                 null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *accountRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountRequestColumns = struct {
	AccountRequestID             string
	AccountIDRef                 string
	AccountRequestReference      string
	TokenJti                     string
	TokenSub                     string
	AccountID                    string
	SchemeName                   string
	AccountIdentification        string
	PartyID                      string
	BankID                       string
	Name                         string
	Status                       string
	ReadAccountsBasic            string
	ReadAccountsDetail           string
	ReadBalances                 string
	ReadBeneficiariesBasic       string
	ReadBeneficiariesDetail      string
	ReadDirectDebits             string
	ReadOffers                   string
	ReadPan                      string
	ReadParty                    string
	ReadPartyPsu                 string
	ReadProducts                 string
	ReadScheduledPaymentsBasic   string
	ReadScheduledPaymentsDfetail string
	ReadStandingOrdersBasic      string
	ReadStandingOrdersDetail     string
	ReadStatementsBasic          string
	ReadStatementsDetail         string
	ReadTransactionsBasic        string
	ReadTransactionsCredits      string
	ReadTransactionsDebits       string
	ReadTransactionsDetail       string
	ExpirationDateTime           string
	TransactionFromDateTime      string
	TransactionToDateTime        string
	ConsentID                    string
	CreationDateTime             string
	StatusUpdateDateTime         string
	ConsentRisk                  string
	MakerDate                    string
	CheckerDate                  string
	MakerID                      string
	CheckerID                    string
	ModifiedBy                   string
	ModifiedDate                 string
}{
	AccountRequestID:             "account_request_id",
	AccountIDRef:                 "account_id_ref",
	AccountRequestReference:      "account_request_reference",
	TokenJti:                     "token_jti",
	TokenSub:                     "token_sub",
	AccountID:                    "account_id",
	SchemeName:                   "scheme_name",
	AccountIdentification:        "account_identification",
	PartyID:                      "party_id",
	BankID:                       "bank_id",
	Name:                         "name",
	Status:                       "status",
	ReadAccountsBasic:            "read_accounts_basic",
	ReadAccountsDetail:           "read_accounts_detail",
	ReadBalances:                 "read_balances",
	ReadBeneficiariesBasic:       "read_beneficiaries_basic",
	ReadBeneficiariesDetail:      "read_beneficiaries_detail",
	ReadDirectDebits:             "read_direct_debits",
	ReadOffers:                   "read_offers",
	ReadPan:                      "read_pan",
	ReadParty:                    "read_party",
	ReadPartyPsu:                 "read_party_psu",
	ReadProducts:                 "read_products",
	ReadScheduledPaymentsBasic:   "read_scheduled_payments_basic",
	ReadScheduledPaymentsDfetail: "read_scheduled_payments_dfetail",
	ReadStandingOrdersBasic:      "read_standing_orders_basic",
	ReadStandingOrdersDetail:     "read_standing_orders_detail",
	ReadStatementsBasic:          "read_statements_basic",
	ReadStatementsDetail:         "read_statements_detail",
	ReadTransactionsBasic:        "read_transactions_basic",
	ReadTransactionsCredits:      "read_transactions_credits",
	ReadTransactionsDebits:       "read_transactions_debits",
	ReadTransactionsDetail:       "read_transactions_detail",
	ExpirationDateTime:           "expiration_date_time",
	TransactionFromDateTime:      "transaction_from_date_time",
	TransactionToDateTime:        "transaction_to_date_time",
	ConsentID:                    "consent_id",
	CreationDateTime:             "creation_date_time",
	StatusUpdateDateTime:         "status_update_date_time",
	ConsentRisk:                  "consent_risk",
	MakerDate:                    "maker_date",
	CheckerDate:                  "checker_date",
	MakerID:                      "maker_id",
	CheckerID:                    "checker_id",
	ModifiedBy:                   "modified_by",
	ModifiedDate:                 "modified_date",
}

// Generated where

var AccountRequestWhere = struct {
	AccountRequestID             whereHelperint
	AccountIDRef                 whereHelperstring
	AccountRequestReference      whereHelperstring
	TokenJti                     whereHelpernull_String
	TokenSub                     whereHelpernull_String
	AccountID                    whereHelpernull_Int
	SchemeName                   whereHelperstring
	AccountIdentification        whereHelperstring
	PartyID                      whereHelpernull_Int
	BankID                       whereHelpernull_Int
	Name                         whereHelperstring
	Status                       whereHelperstring
	ReadAccountsBasic            whereHelperstring
	ReadAccountsDetail           whereHelperstring
	ReadBalances                 whereHelperstring
	ReadBeneficiariesBasic       whereHelperstring
	ReadBeneficiariesDetail      whereHelperstring
	ReadDirectDebits             whereHelperstring
	ReadOffers                   whereHelperstring
	ReadPan                      whereHelperstring
	ReadParty                    whereHelperstring
	ReadPartyPsu                 whereHelperstring
	ReadProducts                 whereHelperstring
	ReadScheduledPaymentsBasic   whereHelperstring
	ReadScheduledPaymentsDfetail whereHelpernull_String
	ReadStandingOrdersBasic      whereHelperstring
	ReadStandingOrdersDetail     whereHelperstring
	ReadStatementsBasic          whereHelpernull_String
	ReadStatementsDetail         whereHelpernull_String
	ReadTransactionsBasic        whereHelperstring
	ReadTransactionsCredits      whereHelperstring
	ReadTransactionsDebits       whereHelperstring
	ReadTransactionsDetail       whereHelperstring
	ExpirationDateTime           whereHelpertime_Time
	TransactionFromDateTime      whereHelpertime_Time
	TransactionToDateTime        whereHelpertime_Time
	ConsentID                    whereHelpernull_String
	CreationDateTime             whereHelpernull_Time
	StatusUpdateDateTime         whereHelpernull_Time
	ConsentRisk                  whereHelpernull_String
	MakerDate                    whereHelpertime_Time
	CheckerDate                  whereHelpernull_Time
	MakerID                      whereHelperstring
	CheckerID                    whereHelpernull_String
	ModifiedBy                   whereHelpernull_String
	ModifiedDate                 whereHelpernull_Time
}{
	AccountRequestID:             whereHelperint{field: `account_request_id`},
	AccountIDRef:                 whereHelperstring{field: `account_id_ref`},
	AccountRequestReference:      whereHelperstring{field: `account_request_reference`},
	TokenJti:                     whereHelpernull_String{field: `token_jti`},
	TokenSub:                     whereHelpernull_String{field: `token_sub`},
	AccountID:                    whereHelpernull_Int{field: `account_id`},
	SchemeName:                   whereHelperstring{field: `scheme_name`},
	AccountIdentification:        whereHelperstring{field: `account_identification`},
	PartyID:                      whereHelpernull_Int{field: `party_id`},
	BankID:                       whereHelpernull_Int{field: `bank_id`},
	Name:                         whereHelperstring{field: `name`},
	Status:                       whereHelperstring{field: `status`},
	ReadAccountsBasic:            whereHelperstring{field: `read_accounts_basic`},
	ReadAccountsDetail:           whereHelperstring{field: `read_accounts_detail`},
	ReadBalances:                 whereHelperstring{field: `read_balances`},
	ReadBeneficiariesBasic:       whereHelperstring{field: `read_beneficiaries_basic`},
	ReadBeneficiariesDetail:      whereHelperstring{field: `read_beneficiaries_detail`},
	ReadDirectDebits:             whereHelperstring{field: `read_direct_debits`},
	ReadOffers:                   whereHelperstring{field: `read_offers`},
	ReadPan:                      whereHelperstring{field: `read_pan`},
	ReadParty:                    whereHelperstring{field: `read_party`},
	ReadPartyPsu:                 whereHelperstring{field: `read_party_psu`},
	ReadProducts:                 whereHelperstring{field: `read_products`},
	ReadScheduledPaymentsBasic:   whereHelperstring{field: `read_scheduled_payments_basic`},
	ReadScheduledPaymentsDfetail: whereHelpernull_String{field: `read_scheduled_payments_dfetail`},
	ReadStandingOrdersBasic:      whereHelperstring{field: `read_standing_orders_basic`},
	ReadStandingOrdersDetail:     whereHelperstring{field: `read_standing_orders_detail`},
	ReadStatementsBasic:          whereHelpernull_String{field: `read_statements_basic`},
	ReadStatementsDetail:         whereHelpernull_String{field: `read_statements_detail`},
	ReadTransactionsBasic:        whereHelperstring{field: `read_transactions_basic`},
	ReadTransactionsCredits:      whereHelperstring{field: `read_transactions_credits`},
	ReadTransactionsDebits:       whereHelperstring{field: `read_transactions_debits`},
	ReadTransactionsDetail:       whereHelperstring{field: `read_transactions_detail`},
	ExpirationDateTime:           whereHelpertime_Time{field: `expiration_date_time`},
	TransactionFromDateTime:      whereHelpertime_Time{field: `transaction_from_date_time`},
	TransactionToDateTime:        whereHelpertime_Time{field: `transaction_to_date_time`},
	ConsentID:                    whereHelpernull_String{field: `consent_id`},
	CreationDateTime:             whereHelpernull_Time{field: `creation_date_time`},
	StatusUpdateDateTime:         whereHelpernull_Time{field: `status_update_date_time`},
	ConsentRisk:                  whereHelpernull_String{field: `consent_risk`},
	MakerDate:                    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                  whereHelpernull_Time{field: `checker_date`},
	MakerID:                      whereHelperstring{field: `maker_id`},
	CheckerID:                    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                   whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                 whereHelpernull_Time{field: `modified_date`},
}

// AccountRequestRels is where relationship names are stored.
var AccountRequestRels = struct {
	Bank string
}{
	Bank: "Bank",
}

// accountRequestR is where relationships are stored.
type accountRequestR struct {
	Bank *Bank
}

// NewStruct creates a new relationship struct
func (*accountRequestR) NewStruct() *accountRequestR {
	return &accountRequestR{}
}

// accountRequestL is where Load methods for each relationship are stored.
type accountRequestL struct{}

var (
	accountRequestColumns               = []string{"account_request_id", "account_id_ref", "account_request_reference", "token_jti", "token_sub", "account_id", "scheme_name", "account_identification", "party_id", "bank_id", "name", "status", "read_accounts_basic", "read_accounts_detail", "read_balances", "read_beneficiaries_basic", "read_beneficiaries_detail", "read_direct_debits", "read_offers", "read_pan", "read_party", "read_party_psu", "read_products", "read_scheduled_payments_basic", "read_scheduled_payments_dfetail", "read_standing_orders_basic", "read_standing_orders_detail", "read_statements_basic", "read_statements_detail", "read_transactions_basic", "read_transactions_credits", "read_transactions_debits", "read_transactions_detail", "expiration_date_time", "transaction_from_date_time", "transaction_to_date_time", "consent_id", "creation_date_time", "status_update_date_time", "consent_risk", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	accountRequestColumnsWithoutDefault = []string{"account_request_id", "account_id_ref", "account_request_reference", "token_jti", "token_sub", "account_id", "scheme_name", "account_identification", "party_id", "bank_id", "name", "status", "read_accounts_basic", "read_accounts_detail", "read_balances", "read_beneficiaries_basic", "read_beneficiaries_detail", "read_direct_debits", "read_offers", "read_pan", "read_party", "read_party_psu", "read_products", "read_scheduled_payments_basic", "read_scheduled_payments_dfetail", "read_standing_orders_basic", "read_standing_orders_detail", "read_statements_basic", "read_statements_detail", "read_transactions_basic", "read_transactions_credits", "read_transactions_debits", "read_transactions_detail", "expiration_date_time", "transaction_from_date_time", "transaction_to_date_time", "consent_id", "creation_date_time", "status_update_date_time", "consent_risk", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	accountRequestColumnsWithDefault    = []string{}
	accountRequestPrimaryKeyColumns     = []string{"account_request_id"}
)

type (
	// AccountRequestSlice is an alias for a slice of pointers to AccountRequest.
	// This should generally be used opposed to []AccountRequest.
	AccountRequestSlice []*AccountRequest
	// AccountRequestHook is the signature for custom AccountRequest hook methods
	AccountRequestHook func(context.Context, boil.ContextExecutor, *AccountRequest) error

	accountRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountRequestType                 = reflect.TypeOf(&AccountRequest{})
	accountRequestMapping              = queries.MakeStructMapping(accountRequestType)
	accountRequestPrimaryKeyMapping, _ = queries.BindMapping(accountRequestType, accountRequestMapping, accountRequestPrimaryKeyColumns)
	accountRequestInsertCacheMut       sync.RWMutex
	accountRequestInsertCache          = make(map[string]insertCache)
	accountRequestUpdateCacheMut       sync.RWMutex
	accountRequestUpdateCache          = make(map[string]updateCache)
	accountRequestUpsertCacheMut       sync.RWMutex
	accountRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountRequestBeforeInsertHooks []AccountRequestHook
var accountRequestBeforeUpdateHooks []AccountRequestHook
var accountRequestBeforeDeleteHooks []AccountRequestHook
var accountRequestBeforeUpsertHooks []AccountRequestHook

var accountRequestAfterInsertHooks []AccountRequestHook
var accountRequestAfterSelectHooks []AccountRequestHook
var accountRequestAfterUpdateHooks []AccountRequestHook
var accountRequestAfterDeleteHooks []AccountRequestHook
var accountRequestAfterUpsertHooks []AccountRequestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountRequestHook registers your hook function for all future operations.
func AddAccountRequestHook(hookPoint boil.HookPoint, accountRequestHook AccountRequestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accountRequestBeforeInsertHooks = append(accountRequestBeforeInsertHooks, accountRequestHook)
	case boil.BeforeUpdateHook:
		accountRequestBeforeUpdateHooks = append(accountRequestBeforeUpdateHooks, accountRequestHook)
	case boil.BeforeDeleteHook:
		accountRequestBeforeDeleteHooks = append(accountRequestBeforeDeleteHooks, accountRequestHook)
	case boil.BeforeUpsertHook:
		accountRequestBeforeUpsertHooks = append(accountRequestBeforeUpsertHooks, accountRequestHook)
	case boil.AfterInsertHook:
		accountRequestAfterInsertHooks = append(accountRequestAfterInsertHooks, accountRequestHook)
	case boil.AfterSelectHook:
		accountRequestAfterSelectHooks = append(accountRequestAfterSelectHooks, accountRequestHook)
	case boil.AfterUpdateHook:
		accountRequestAfterUpdateHooks = append(accountRequestAfterUpdateHooks, accountRequestHook)
	case boil.AfterDeleteHook:
		accountRequestAfterDeleteHooks = append(accountRequestAfterDeleteHooks, accountRequestHook)
	case boil.AfterUpsertHook:
		accountRequestAfterUpsertHooks = append(accountRequestAfterUpsertHooks, accountRequestHook)
	}
}

// One returns a single accountRequest record from the query.
func (q accountRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountRequest, error) {
	o := &AccountRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AccountRequest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountRequest records from the query.
func (q accountRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountRequestSlice, error) {
	var o []*AccountRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountRequest slice")
	}

	if len(accountRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountRequest records in the query.
func (q accountRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AccountRequest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AccountRequest exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *AccountRequest) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountRequestL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountRequest interface{}, mods queries.Applicator) error {
	var slice []*AccountRequest
	var object *AccountRequest

	if singular {
		object = maybeAccountRequest.(*AccountRequest)
	} else {
		slice = *maybeAccountRequest.(*[]*AccountRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountRequestR{}
		}
		if !queries.IsNil(object.BankID) {
			args = append(args, object.BankID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BankID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BankID) {
				args = append(args, obj.BankID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(accountRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankAccountRequests = append(foreign.R.BankAccountRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BankID, foreign.BankID) {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankAccountRequests = append(foreign.R.BankAccountRequests, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the accountRequest to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankAccountRequests.
func (o *AccountRequest) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `AccountRequest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, accountRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.AccountRequestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BankID, related.BankID)
	if o.R == nil {
		o.R = &accountRequestR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankAccountRequests: AccountRequestSlice{o},
		}
	} else {
		related.R.BankAccountRequests = append(related.R.BankAccountRequests, o)
	}

	return nil
}

// RemoveBank relationship.
// Sets o.R.Bank to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *AccountRequest) RemoveBank(ctx context.Context, exec boil.ContextExecutor, related *Bank) error {
	var err error

	queries.SetScanner(&o.BankID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bank_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Bank = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BankAccountRequests {
		if queries.Equal(o.BankID, ri.BankID) {
			continue
		}

		ln := len(related.R.BankAccountRequests)
		if ln > 1 && i < ln-1 {
			related.R.BankAccountRequests[i] = related.R.BankAccountRequests[ln-1]
		}
		related.R.BankAccountRequests = related.R.BankAccountRequests[:ln-1]
		break
	}
	return nil
}

// AccountRequests retrieves all the records using an executor.
func AccountRequests(mods ...qm.QueryMod) accountRequestQuery {
	mods = append(mods, qm.From("`AccountRequest`"))
	return accountRequestQuery{NewQuery(mods...)}
}

// FindAccountRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountRequest(ctx context.Context, exec boil.ContextExecutor, accountRequestID int, selectCols ...string) (*AccountRequest, error) {
	accountRequestObj := &AccountRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `AccountRequest` where `account_request_id`=?", sel,
	)

	q := queries.Raw(query, accountRequestID)

	err := q.Bind(ctx, exec, accountRequestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AccountRequest")
	}

	return accountRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AccountRequest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountRequestInsertCacheMut.RLock()
	cache, cached := accountRequestInsertCache[key]
	accountRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountRequestColumns,
			accountRequestColumnsWithDefault,
			accountRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountRequestType, accountRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountRequestType, accountRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `AccountRequest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `AccountRequest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `AccountRequest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, accountRequestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AccountRequest")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AccountRequestID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AccountRequest")
	}

CacheNoHooks:
	if !cached {
		accountRequestInsertCacheMut.Lock()
		accountRequestInsertCache[key] = cache
		accountRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AccountRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountRequestUpdateCacheMut.RLock()
	cache, cached := accountRequestUpdateCache[key]
	accountRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountRequestColumns,
			accountRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AccountRequest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `AccountRequest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, accountRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountRequestType, accountRequestMapping, append(wl, accountRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AccountRequest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AccountRequest")
	}

	if !cached {
		accountRequestUpdateCacheMut.Lock()
		accountRequestUpdateCache[key] = cache
		accountRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AccountRequest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AccountRequest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `AccountRequest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountRequestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountRequest")
	}
	return rowsAff, nil
}

var mySQLAccountRequestUniqueColumns = []string{
	"account_request_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AccountRequest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountRequestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAccountRequestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountRequestUpsertCacheMut.RLock()
	cache, cached := accountRequestUpsertCache[key]
	accountRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountRequestColumns,
			accountRequestColumnsWithDefault,
			accountRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			accountRequestColumns,
			accountRequestPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert AccountRequest, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "AccountRequest", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `AccountRequest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(accountRequestType, accountRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountRequestType, accountRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for AccountRequest")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(accountRequestType, accountRequestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for AccountRequest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AccountRequest")
	}

CacheNoHooks:
	if !cached {
		accountRequestUpsertCacheMut.Lock()
		accountRequestUpsertCache[key] = cache
		accountRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AccountRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountRequestPrimaryKeyMapping)
	sql := "DELETE FROM `AccountRequest` WHERE `account_request_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AccountRequest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AccountRequest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AccountRequest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AccountRequest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountRequest slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(accountRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `AccountRequest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountRequestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AccountRequest")
	}

	if len(accountRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountRequest(ctx, exec, o.AccountRequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `AccountRequest`.* FROM `AccountRequest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountRequestSlice")
	}

	*o = slice

	return nil
}

// AccountRequestExists checks if the AccountRequest row exists.
func AccountRequestExists(ctx context.Context, exec boil.ContextExecutor, accountRequestID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `AccountRequest` where `account_request_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accountRequestID)
	}

	row := exec.QueryRowContext(ctx, sql, accountRequestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AccountRequest exists")
	}

	return exists, nil
}
