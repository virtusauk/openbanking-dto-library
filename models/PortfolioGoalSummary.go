// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PortfolioGoalSummary is an object representing the database table.
type PortfolioGoalSummary struct {
	PartyID          int               `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	GoalID           int               `boil:"goal_id" json:"goal_id" toml:"goal_id" yaml:"goal_id"`
	PortfolioID      int               `boil:"portfolio_id" json:"portfolio_id" toml:"portfolio_id" yaml:"portfolio_id"`
	ReportDate       time.Time         `boil:"report_date" json:"report_date" toml:"report_date" yaml:"report_date"`
	AmountInv        types.NullDecimal `boil:"amount_inv" json:"amount_inv,omitempty" toml:"amount_inv" yaml:"amount_inv,omitempty"`
	PercentComplete  types.NullDecimal `boil:"percent_complete" json:"percent_complete,omitempty" toml:"percent_complete" yaml:"percent_complete,omitempty"`
	CurrentValue     types.NullDecimal `boil:"current_value" json:"current_value,omitempty" toml:"current_value" yaml:"current_value,omitempty"`
	Earnings         types.NullDecimal `boil:"earnings" json:"earnings,omitempty" toml:"earnings" yaml:"earnings,omitempty"`
	EarningsAfterTax types.NullDecimal `boil:"earnings_after_tax" json:"earnings_after_tax,omitempty" toml:"earnings_after_tax" yaml:"earnings_after_tax,omitempty"`
	AlterDate        time.Time         `boil:"alter_date" json:"alter_date" toml:"alter_date" yaml:"alter_date"`
	BankID           int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate        time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate      null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID          string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID        null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy       null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate     null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *portfolioGoalSummaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portfolioGoalSummaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortfolioGoalSummaryColumns = struct {
	PartyID          string
	GoalID           string
	PortfolioID      string
	ReportDate       string
	AmountInv        string
	PercentComplete  string
	CurrentValue     string
	Earnings         string
	EarningsAfterTax string
	AlterDate        string
	BankID           string
	MakerDate        string
	CheckerDate      string
	MakerID          string
	CheckerID        string
	ModifiedBy       string
	ModifiedDate     string
}{
	PartyID:          "party_id",
	GoalID:           "goal_id",
	PortfolioID:      "portfolio_id",
	ReportDate:       "report_date",
	AmountInv:        "amount_inv",
	PercentComplete:  "percent_complete",
	CurrentValue:     "current_value",
	Earnings:         "earnings",
	EarningsAfterTax: "earnings_after_tax",
	AlterDate:        "alter_date",
	BankID:           "bank_id",
	MakerDate:        "maker_date",
	CheckerDate:      "checker_date",
	MakerID:          "maker_id",
	CheckerID:        "checker_id",
	ModifiedBy:       "modified_by",
	ModifiedDate:     "modified_date",
}

// Generated where

var PortfolioGoalSummaryWhere = struct {
	PartyID          whereHelperint
	GoalID           whereHelperint
	PortfolioID      whereHelperint
	ReportDate       whereHelpertime_Time
	AmountInv        whereHelpertypes_NullDecimal
	PercentComplete  whereHelpertypes_NullDecimal
	CurrentValue     whereHelpertypes_NullDecimal
	Earnings         whereHelpertypes_NullDecimal
	EarningsAfterTax whereHelpertypes_NullDecimal
	AlterDate        whereHelpertime_Time
	BankID           whereHelperint
	MakerDate        whereHelpertime_Time
	CheckerDate      whereHelpernull_Time
	MakerID          whereHelperstring
	CheckerID        whereHelpernull_String
	ModifiedBy       whereHelpernull_String
	ModifiedDate     whereHelpernull_Time
}{
	PartyID:          whereHelperint{field: `party_id`},
	GoalID:           whereHelperint{field: `goal_id`},
	PortfolioID:      whereHelperint{field: `portfolio_id`},
	ReportDate:       whereHelpertime_Time{field: `report_date`},
	AmountInv:        whereHelpertypes_NullDecimal{field: `amount_inv`},
	PercentComplete:  whereHelpertypes_NullDecimal{field: `percent_complete`},
	CurrentValue:     whereHelpertypes_NullDecimal{field: `current_value`},
	Earnings:         whereHelpertypes_NullDecimal{field: `earnings`},
	EarningsAfterTax: whereHelpertypes_NullDecimal{field: `earnings_after_tax`},
	AlterDate:        whereHelpertime_Time{field: `alter_date`},
	BankID:           whereHelperint{field: `bank_id`},
	MakerDate:        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:      whereHelpernull_Time{field: `checker_date`},
	MakerID:          whereHelperstring{field: `maker_id`},
	CheckerID:        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:       whereHelpernull_String{field: `modified_by`},
	ModifiedDate:     whereHelpernull_Time{field: `modified_date`},
}

// PortfolioGoalSummaryRels is where relationship names are stored.
var PortfolioGoalSummaryRels = struct {
	Goal      string
	Party     string
	Portfolio string
}{
	Goal:      "Goal",
	Party:     "Party",
	Portfolio: "Portfolio",
}

// portfolioGoalSummaryR is where relationships are stored.
type portfolioGoalSummaryR struct {
	Goal      *GoalMaster
	Party     *Party
	Portfolio *Portfolio
}

// NewStruct creates a new relationship struct
func (*portfolioGoalSummaryR) NewStruct() *portfolioGoalSummaryR {
	return &portfolioGoalSummaryR{}
}

// portfolioGoalSummaryL is where Load methods for each relationship are stored.
type portfolioGoalSummaryL struct{}

var (
	portfolioGoalSummaryColumns               = []string{"party_id", "goal_id", "portfolio_id", "report_date", "amount_inv", "percent_complete", "current_value", "earnings", "earnings_after_tax", "alter_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	portfolioGoalSummaryColumnsWithoutDefault = []string{"portfolio_id", "report_date", "amount_inv", "percent_complete", "current_value", "earnings", "earnings_after_tax", "alter_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	portfolioGoalSummaryColumnsWithDefault    = []string{"party_id", "goal_id"}
	portfolioGoalSummaryPrimaryKeyColumns     = []string{"party_id", "goal_id", "report_date"}
)

type (
	// PortfolioGoalSummarySlice is an alias for a slice of pointers to PortfolioGoalSummary.
	// This should generally be used opposed to []PortfolioGoalSummary.
	PortfolioGoalSummarySlice []*PortfolioGoalSummary
	// PortfolioGoalSummaryHook is the signature for custom PortfolioGoalSummary hook methods
	PortfolioGoalSummaryHook func(context.Context, boil.ContextExecutor, *PortfolioGoalSummary) error

	portfolioGoalSummaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portfolioGoalSummaryType                 = reflect.TypeOf(&PortfolioGoalSummary{})
	portfolioGoalSummaryMapping              = queries.MakeStructMapping(portfolioGoalSummaryType)
	portfolioGoalSummaryPrimaryKeyMapping, _ = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, portfolioGoalSummaryPrimaryKeyColumns)
	portfolioGoalSummaryInsertCacheMut       sync.RWMutex
	portfolioGoalSummaryInsertCache          = make(map[string]insertCache)
	portfolioGoalSummaryUpdateCacheMut       sync.RWMutex
	portfolioGoalSummaryUpdateCache          = make(map[string]updateCache)
	portfolioGoalSummaryUpsertCacheMut       sync.RWMutex
	portfolioGoalSummaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portfolioGoalSummaryBeforeInsertHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryBeforeUpdateHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryBeforeDeleteHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryBeforeUpsertHooks []PortfolioGoalSummaryHook

var portfolioGoalSummaryAfterInsertHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryAfterSelectHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryAfterUpdateHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryAfterDeleteHooks []PortfolioGoalSummaryHook
var portfolioGoalSummaryAfterUpsertHooks []PortfolioGoalSummaryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortfolioGoalSummary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortfolioGoalSummary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortfolioGoalSummary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortfolioGoalSummary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortfolioGoalSummary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortfolioGoalSummary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortfolioGoalSummary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortfolioGoalSummary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortfolioGoalSummary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioGoalSummaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortfolioGoalSummaryHook registers your hook function for all future operations.
func AddPortfolioGoalSummaryHook(hookPoint boil.HookPoint, portfolioGoalSummaryHook PortfolioGoalSummaryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portfolioGoalSummaryBeforeInsertHooks = append(portfolioGoalSummaryBeforeInsertHooks, portfolioGoalSummaryHook)
	case boil.BeforeUpdateHook:
		portfolioGoalSummaryBeforeUpdateHooks = append(portfolioGoalSummaryBeforeUpdateHooks, portfolioGoalSummaryHook)
	case boil.BeforeDeleteHook:
		portfolioGoalSummaryBeforeDeleteHooks = append(portfolioGoalSummaryBeforeDeleteHooks, portfolioGoalSummaryHook)
	case boil.BeforeUpsertHook:
		portfolioGoalSummaryBeforeUpsertHooks = append(portfolioGoalSummaryBeforeUpsertHooks, portfolioGoalSummaryHook)
	case boil.AfterInsertHook:
		portfolioGoalSummaryAfterInsertHooks = append(portfolioGoalSummaryAfterInsertHooks, portfolioGoalSummaryHook)
	case boil.AfterSelectHook:
		portfolioGoalSummaryAfterSelectHooks = append(portfolioGoalSummaryAfterSelectHooks, portfolioGoalSummaryHook)
	case boil.AfterUpdateHook:
		portfolioGoalSummaryAfterUpdateHooks = append(portfolioGoalSummaryAfterUpdateHooks, portfolioGoalSummaryHook)
	case boil.AfterDeleteHook:
		portfolioGoalSummaryAfterDeleteHooks = append(portfolioGoalSummaryAfterDeleteHooks, portfolioGoalSummaryHook)
	case boil.AfterUpsertHook:
		portfolioGoalSummaryAfterUpsertHooks = append(portfolioGoalSummaryAfterUpsertHooks, portfolioGoalSummaryHook)
	}
}

// One returns a single portfolioGoalSummary record from the query.
func (q portfolioGoalSummaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortfolioGoalSummary, error) {
	o := &PortfolioGoalSummary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PortfolioGoalSummary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortfolioGoalSummary records from the query.
func (q portfolioGoalSummaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortfolioGoalSummarySlice, error) {
	var o []*PortfolioGoalSummary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PortfolioGoalSummary slice")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortfolioGoalSummary records in the query.
func (q portfolioGoalSummaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PortfolioGoalSummary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portfolioGoalSummaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PortfolioGoalSummary exists")
	}

	return count > 0, nil
}

// Goal pointed to by the foreign key.
func (o *PortfolioGoalSummary) Goal(mods ...qm.QueryMod) goalMasterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("goal_id=?", o.GoalID),
	}

	queryMods = append(queryMods, mods...)

	query := GoalMasters(queryMods...)
	queries.SetFrom(query.Query, "`GoalMaster`")

	return query
}

// Party pointed to by the foreign key.
func (o *PortfolioGoalSummary) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// Portfolio pointed to by the foreign key.
func (o *PortfolioGoalSummary) Portfolio(mods ...qm.QueryMod) portfolioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("portfolio_id=?", o.PortfolioID),
	}

	queryMods = append(queryMods, mods...)

	query := Portfolios(queryMods...)
	queries.SetFrom(query.Query, "`Portfolio`")

	return query
}

// LoadGoal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioGoalSummaryL) LoadGoal(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolioGoalSummary interface{}, mods queries.Applicator) error {
	var slice []*PortfolioGoalSummary
	var object *PortfolioGoalSummary

	if singular {
		object = maybePortfolioGoalSummary.(*PortfolioGoalSummary)
	} else {
		slice = *maybePortfolioGoalSummary.(*[]*PortfolioGoalSummary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioGoalSummaryR{}
		}
		args = append(args, object.GoalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioGoalSummaryR{}
			}

			for _, a := range args {
				if a == obj.GoalID {
					continue Outer
				}
			}

			args = append(args, obj.GoalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`GoalMaster`), qm.WhereIn(`goal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoalMaster")
	}

	var resultSlice []*GoalMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoalMaster")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for GoalMaster")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for GoalMaster")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Goal = foreign
		if foreign.R == nil {
			foreign.R = &goalMasterR{}
		}
		foreign.R.GoalPortfolioGoalSummaries = append(foreign.R.GoalPortfolioGoalSummaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GoalID == foreign.GoalID {
				local.R.Goal = foreign
				if foreign.R == nil {
					foreign.R = &goalMasterR{}
				}
				foreign.R.GoalPortfolioGoalSummaries = append(foreign.R.GoalPortfolioGoalSummaries, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioGoalSummaryL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolioGoalSummary interface{}, mods queries.Applicator) error {
	var slice []*PortfolioGoalSummary
	var object *PortfolioGoalSummary

	if singular {
		object = maybePortfolioGoalSummary.(*PortfolioGoalSummary)
	} else {
		slice = *maybePortfolioGoalSummary.(*[]*PortfolioGoalSummary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioGoalSummaryR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioGoalSummaryR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyPortfolioGoalSummaries = append(foreign.R.PartyPortfolioGoalSummaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyPortfolioGoalSummaries = append(foreign.R.PartyPortfolioGoalSummaries, local)
				break
			}
		}
	}

	return nil
}

// LoadPortfolio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioGoalSummaryL) LoadPortfolio(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolioGoalSummary interface{}, mods queries.Applicator) error {
	var slice []*PortfolioGoalSummary
	var object *PortfolioGoalSummary

	if singular {
		object = maybePortfolioGoalSummary.(*PortfolioGoalSummary)
	} else {
		slice = *maybePortfolioGoalSummary.(*[]*PortfolioGoalSummary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioGoalSummaryR{}
		}
		args = append(args, object.PortfolioID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioGoalSummaryR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Portfolio`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Portfolio")
	}

	var resultSlice []*Portfolio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Portfolio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Portfolio")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Portfolio")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Portfolio = foreign
		if foreign.R == nil {
			foreign.R = &portfolioR{}
		}
		foreign.R.PortfolioPortfolioGoalSummaries = append(foreign.R.PortfolioPortfolioGoalSummaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.Portfolio = foreign
				if foreign.R == nil {
					foreign.R = &portfolioR{}
				}
				foreign.R.PortfolioPortfolioGoalSummaries = append(foreign.R.PortfolioPortfolioGoalSummaries, local)
				break
			}
		}
	}

	return nil
}

// SetGoal of the portfolioGoalSummary to the related item.
// Sets o.R.Goal to related.
// Adds o to related.R.GoalPortfolioGoalSummaries.
func (o *PortfolioGoalSummary) SetGoal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoalMaster) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"goal_id"}),
		strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
	)
	values := []interface{}{related.GoalID, o.PartyID, o.GoalID, o.ReportDate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GoalID = related.GoalID
	if o.R == nil {
		o.R = &portfolioGoalSummaryR{
			Goal: related,
		}
	} else {
		o.R.Goal = related
	}

	if related.R == nil {
		related.R = &goalMasterR{
			GoalPortfolioGoalSummaries: PortfolioGoalSummarySlice{o},
		}
	} else {
		related.R.GoalPortfolioGoalSummaries = append(related.R.GoalPortfolioGoalSummaries, o)
	}

	return nil
}

// SetParty of the portfolioGoalSummary to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyPortfolioGoalSummaries.
func (o *PortfolioGoalSummary) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.PartyID, o.GoalID, o.ReportDate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &portfolioGoalSummaryR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyPortfolioGoalSummaries: PortfolioGoalSummarySlice{o},
		}
	} else {
		related.R.PartyPortfolioGoalSummaries = append(related.R.PartyPortfolioGoalSummaries, o)
	}

	return nil
}

// SetPortfolio of the portfolioGoalSummary to the related item.
// Sets o.R.Portfolio to related.
// Adds o to related.R.PortfolioPortfolioGoalSummaries.
func (o *PortfolioGoalSummary) SetPortfolio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Portfolio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
		strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
	)
	values := []interface{}{related.PortfolioID, o.PartyID, o.GoalID, o.ReportDate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PortfolioID = related.PortfolioID
	if o.R == nil {
		o.R = &portfolioGoalSummaryR{
			Portfolio: related,
		}
	} else {
		o.R.Portfolio = related
	}

	if related.R == nil {
		related.R = &portfolioR{
			PortfolioPortfolioGoalSummaries: PortfolioGoalSummarySlice{o},
		}
	} else {
		related.R.PortfolioPortfolioGoalSummaries = append(related.R.PortfolioPortfolioGoalSummaries, o)
	}

	return nil
}

// PortfolioGoalSummaries retrieves all the records using an executor.
func PortfolioGoalSummaries(mods ...qm.QueryMod) portfolioGoalSummaryQuery {
	mods = append(mods, qm.From("`PortfolioGoalSummary`"))
	return portfolioGoalSummaryQuery{NewQuery(mods...)}
}

// FindPortfolioGoalSummary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortfolioGoalSummary(ctx context.Context, exec boil.ContextExecutor, partyID int, goalID int, reportDate time.Time, selectCols ...string) (*PortfolioGoalSummary, error) {
	portfolioGoalSummaryObj := &PortfolioGoalSummary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PortfolioGoalSummary` where `party_id`=? AND `goal_id`=? AND `report_date`=?", sel,
	)

	q := queries.Raw(query, partyID, goalID, reportDate)

	err := q.Bind(ctx, exec, portfolioGoalSummaryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PortfolioGoalSummary")
	}

	return portfolioGoalSummaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortfolioGoalSummary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PortfolioGoalSummary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioGoalSummaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portfolioGoalSummaryInsertCacheMut.RLock()
	cache, cached := portfolioGoalSummaryInsertCache[key]
	portfolioGoalSummaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portfolioGoalSummaryColumns,
			portfolioGoalSummaryColumnsWithDefault,
			portfolioGoalSummaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PortfolioGoalSummary` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PortfolioGoalSummary` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PortfolioGoalSummary` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PortfolioGoalSummary")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PartyID,
		o.GoalID,
		o.ReportDate,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PortfolioGoalSummary")
	}

CacheNoHooks:
	if !cached {
		portfolioGoalSummaryInsertCacheMut.Lock()
		portfolioGoalSummaryInsertCache[key] = cache
		portfolioGoalSummaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortfolioGoalSummary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortfolioGoalSummary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portfolioGoalSummaryUpdateCacheMut.RLock()
	cache, cached := portfolioGoalSummaryUpdateCache[key]
	portfolioGoalSummaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portfolioGoalSummaryColumns,
			portfolioGoalSummaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PortfolioGoalSummary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, append(wl, portfolioGoalSummaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PortfolioGoalSummary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PortfolioGoalSummary")
	}

	if !cached {
		portfolioGoalSummaryUpdateCacheMut.Lock()
		portfolioGoalSummaryUpdateCache[key] = cache
		portfolioGoalSummaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portfolioGoalSummaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PortfolioGoalSummary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PortfolioGoalSummary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortfolioGoalSummarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioGoalSummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioGoalSummaryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portfolioGoalSummary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portfolioGoalSummary")
	}
	return rowsAff, nil
}

var mySQLPortfolioGoalSummaryUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortfolioGoalSummary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PortfolioGoalSummary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioGoalSummaryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortfolioGoalSummaryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portfolioGoalSummaryUpsertCacheMut.RLock()
	cache, cached := portfolioGoalSummaryUpsertCache[key]
	portfolioGoalSummaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portfolioGoalSummaryColumns,
			portfolioGoalSummaryColumnsWithDefault,
			portfolioGoalSummaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portfolioGoalSummaryColumns,
			portfolioGoalSummaryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PortfolioGoalSummary, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PortfolioGoalSummary", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PortfolioGoalSummary` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PortfolioGoalSummary")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portfolioGoalSummaryType, portfolioGoalSummaryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PortfolioGoalSummary")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PortfolioGoalSummary")
	}

CacheNoHooks:
	if !cached {
		portfolioGoalSummaryUpsertCacheMut.Lock()
		portfolioGoalSummaryUpsertCache[key] = cache
		portfolioGoalSummaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortfolioGoalSummary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortfolioGoalSummary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortfolioGoalSummary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portfolioGoalSummaryPrimaryKeyMapping)
	sql := "DELETE FROM `PortfolioGoalSummary` WHERE `party_id`=? AND `goal_id`=? AND `report_date`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PortfolioGoalSummary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PortfolioGoalSummary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portfolioGoalSummaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portfolioGoalSummaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PortfolioGoalSummary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PortfolioGoalSummary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortfolioGoalSummarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortfolioGoalSummary slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(portfolioGoalSummaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioGoalSummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PortfolioGoalSummary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioGoalSummaryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolioGoalSummary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PortfolioGoalSummary")
	}

	if len(portfolioGoalSummaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortfolioGoalSummary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortfolioGoalSummary(ctx, exec, o.PartyID, o.GoalID, o.ReportDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortfolioGoalSummarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortfolioGoalSummarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioGoalSummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PortfolioGoalSummary`.* FROM `PortfolioGoalSummary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioGoalSummaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortfolioGoalSummarySlice")
	}

	*o = slice

	return nil
}

// PortfolioGoalSummaryExists checks if the PortfolioGoalSummary row exists.
func PortfolioGoalSummaryExists(ctx context.Context, exec boil.ContextExecutor, partyID int, goalID int, reportDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PortfolioGoalSummary` where `party_id`=? AND `goal_id`=? AND `report_date`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, partyID, goalID, reportDate)
	}

	row := exec.QueryRowContext(ctx, sql, partyID, goalID, reportDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PortfolioGoalSummary exists")
	}

	return exists, nil
}
