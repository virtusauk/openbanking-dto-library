// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// LoanSchedule is an object representing the database table.
type LoanSchedule struct {
	LoanID              int               `boil:"loan_id" json:"loan_id" toml:"loan_id" yaml:"loan_id"`
	SchedulePaymentDate time.Time         `boil:"schedule_payment_date" json:"schedule_payment_date" toml:"schedule_payment_date" yaml:"schedule_payment_date"`
	PaymentDue          types.NullDecimal `boil:"payment_due" json:"payment_due,omitempty" toml:"payment_due" yaml:"payment_due,omitempty"`
	PaymentStatus       null.String       `boil:"payment_status" json:"payment_status,omitempty" toml:"payment_status" yaml:"payment_status,omitempty"`
	Active              null.String       `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	LoanScheduleID      int               `boil:"loan_schedule_id" json:"loan_schedule_id" toml:"loan_schedule_id" yaml:"loan_schedule_id"`
	BankID              int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate           time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate         null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID             string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID           null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy          null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate        null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *loanScheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L loanScheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoanScheduleColumns = struct {
	LoanID              string
	SchedulePaymentDate string
	PaymentDue          string
	PaymentStatus       string
	Active              string
	LoanScheduleID      string
	BankID              string
	MakerDate           string
	CheckerDate         string
	MakerID             string
	CheckerID           string
	ModifiedBy          string
	ModifiedDate        string
}{
	LoanID:              "loan_id",
	SchedulePaymentDate: "schedule_payment_date",
	PaymentDue:          "payment_due",
	PaymentStatus:       "payment_status",
	Active:              "active",
	LoanScheduleID:      "loan_schedule_id",
	BankID:              "bank_id",
	MakerDate:           "maker_date",
	CheckerDate:         "checker_date",
	MakerID:             "maker_id",
	CheckerID:           "checker_id",
	ModifiedBy:          "modified_by",
	ModifiedDate:        "modified_date",
}

// Generated where

var LoanScheduleWhere = struct {
	LoanID              whereHelperint
	SchedulePaymentDate whereHelpertime_Time
	PaymentDue          whereHelpertypes_NullDecimal
	PaymentStatus       whereHelpernull_String
	Active              whereHelpernull_String
	LoanScheduleID      whereHelperint
	BankID              whereHelperint
	MakerDate           whereHelpertime_Time
	CheckerDate         whereHelpernull_Time
	MakerID             whereHelperstring
	CheckerID           whereHelpernull_String
	ModifiedBy          whereHelpernull_String
	ModifiedDate        whereHelpernull_Time
}{
	LoanID:              whereHelperint{field: `loan_id`},
	SchedulePaymentDate: whereHelpertime_Time{field: `schedule_payment_date`},
	PaymentDue:          whereHelpertypes_NullDecimal{field: `payment_due`},
	PaymentStatus:       whereHelpernull_String{field: `payment_status`},
	Active:              whereHelpernull_String{field: `active`},
	LoanScheduleID:      whereHelperint{field: `loan_schedule_id`},
	BankID:              whereHelperint{field: `bank_id`},
	MakerDate:           whereHelpertime_Time{field: `maker_date`},
	CheckerDate:         whereHelpernull_Time{field: `checker_date`},
	MakerID:             whereHelperstring{field: `maker_id`},
	CheckerID:           whereHelpernull_String{field: `checker_id`},
	ModifiedBy:          whereHelpernull_String{field: `modified_by`},
	ModifiedDate:        whereHelpernull_Time{field: `modified_date`},
}

// LoanScheduleRels is where relationship names are stored.
var LoanScheduleRels = struct {
	Loan string
}{
	Loan: "Loan",
}

// loanScheduleR is where relationships are stored.
type loanScheduleR struct {
	Loan *Loan
}

// NewStruct creates a new relationship struct
func (*loanScheduleR) NewStruct() *loanScheduleR {
	return &loanScheduleR{}
}

// loanScheduleL is where Load methods for each relationship are stored.
type loanScheduleL struct{}

var (
	loanScheduleColumns               = []string{"loan_id", "schedule_payment_date", "payment_due", "payment_status", "active", "loan_schedule_id", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	loanScheduleColumnsWithoutDefault = []string{"schedule_payment_date", "payment_due", "payment_status", "active", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	loanScheduleColumnsWithDefault    = []string{"loan_id", "loan_schedule_id"}
	loanSchedulePrimaryKeyColumns     = []string{"loan_schedule_id"}
)

type (
	// LoanScheduleSlice is an alias for a slice of pointers to LoanSchedule.
	// This should generally be used opposed to []LoanSchedule.
	LoanScheduleSlice []*LoanSchedule
	// LoanScheduleHook is the signature for custom LoanSchedule hook methods
	LoanScheduleHook func(context.Context, boil.ContextExecutor, *LoanSchedule) error

	loanScheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loanScheduleType                 = reflect.TypeOf(&LoanSchedule{})
	loanScheduleMapping              = queries.MakeStructMapping(loanScheduleType)
	loanSchedulePrimaryKeyMapping, _ = queries.BindMapping(loanScheduleType, loanScheduleMapping, loanSchedulePrimaryKeyColumns)
	loanScheduleInsertCacheMut       sync.RWMutex
	loanScheduleInsertCache          = make(map[string]insertCache)
	loanScheduleUpdateCacheMut       sync.RWMutex
	loanScheduleUpdateCache          = make(map[string]updateCache)
	loanScheduleUpsertCacheMut       sync.RWMutex
	loanScheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loanScheduleBeforeInsertHooks []LoanScheduleHook
var loanScheduleBeforeUpdateHooks []LoanScheduleHook
var loanScheduleBeforeDeleteHooks []LoanScheduleHook
var loanScheduleBeforeUpsertHooks []LoanScheduleHook

var loanScheduleAfterInsertHooks []LoanScheduleHook
var loanScheduleAfterSelectHooks []LoanScheduleHook
var loanScheduleAfterUpdateHooks []LoanScheduleHook
var loanScheduleAfterDeleteHooks []LoanScheduleHook
var loanScheduleAfterUpsertHooks []LoanScheduleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoanSchedule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoanSchedule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoanSchedule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoanSchedule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoanSchedule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoanSchedule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoanSchedule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoanSchedule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoanSchedule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loanScheduleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoanScheduleHook registers your hook function for all future operations.
func AddLoanScheduleHook(hookPoint boil.HookPoint, loanScheduleHook LoanScheduleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		loanScheduleBeforeInsertHooks = append(loanScheduleBeforeInsertHooks, loanScheduleHook)
	case boil.BeforeUpdateHook:
		loanScheduleBeforeUpdateHooks = append(loanScheduleBeforeUpdateHooks, loanScheduleHook)
	case boil.BeforeDeleteHook:
		loanScheduleBeforeDeleteHooks = append(loanScheduleBeforeDeleteHooks, loanScheduleHook)
	case boil.BeforeUpsertHook:
		loanScheduleBeforeUpsertHooks = append(loanScheduleBeforeUpsertHooks, loanScheduleHook)
	case boil.AfterInsertHook:
		loanScheduleAfterInsertHooks = append(loanScheduleAfterInsertHooks, loanScheduleHook)
	case boil.AfterSelectHook:
		loanScheduleAfterSelectHooks = append(loanScheduleAfterSelectHooks, loanScheduleHook)
	case boil.AfterUpdateHook:
		loanScheduleAfterUpdateHooks = append(loanScheduleAfterUpdateHooks, loanScheduleHook)
	case boil.AfterDeleteHook:
		loanScheduleAfterDeleteHooks = append(loanScheduleAfterDeleteHooks, loanScheduleHook)
	case boil.AfterUpsertHook:
		loanScheduleAfterUpsertHooks = append(loanScheduleAfterUpsertHooks, loanScheduleHook)
	}
}

// One returns a single loanSchedule record from the query.
func (q loanScheduleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoanSchedule, error) {
	o := &LoanSchedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for LoanSchedule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoanSchedule records from the query.
func (q loanScheduleQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoanScheduleSlice, error) {
	var o []*LoanSchedule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoanSchedule slice")
	}

	if len(loanScheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoanSchedule records in the query.
func (q loanScheduleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count LoanSchedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loanScheduleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if LoanSchedule exists")
	}

	return count > 0, nil
}

// Loan pointed to by the foreign key.
func (o *LoanSchedule) Loan(mods ...qm.QueryMod) loanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("loan_id=?", o.LoanID),
	}

	queryMods = append(queryMods, mods...)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	return query
}

// LoadLoan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (loanScheduleL) LoadLoan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLoanSchedule interface{}, mods queries.Applicator) error {
	var slice []*LoanSchedule
	var object *LoanSchedule

	if singular {
		object = maybeLoanSchedule.(*LoanSchedule)
	} else {
		slice = *maybeLoanSchedule.(*[]*LoanSchedule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &loanScheduleR{}
		}
		args = append(args, object.LoanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &loanScheduleR{}
			}

			for _, a := range args {
				if a == obj.LoanID {
					continue Outer
				}
			}

			args = append(args, obj.LoanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`loan_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(loanScheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Loan = foreign
		if foreign.R == nil {
			foreign.R = &loanR{}
		}
		foreign.R.LoanLoanSchedules = append(foreign.R.LoanLoanSchedules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoanID == foreign.LoanID {
				local.R.Loan = foreign
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.LoanLoanSchedules = append(foreign.R.LoanLoanSchedules, local)
				break
			}
		}
	}

	return nil
}

// SetLoan of the loanSchedule to the related item.
// Sets o.R.Loan to related.
// Adds o to related.R.LoanLoanSchedules.
func (o *LoanSchedule) SetLoan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Loan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `LoanSchedule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"loan_id"}),
		strmangle.WhereClause("`", "`", 0, loanSchedulePrimaryKeyColumns),
	)
	values := []interface{}{related.LoanID, o.LoanScheduleID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoanID = related.LoanID
	if o.R == nil {
		o.R = &loanScheduleR{
			Loan: related,
		}
	} else {
		o.R.Loan = related
	}

	if related.R == nil {
		related.R = &loanR{
			LoanLoanSchedules: LoanScheduleSlice{o},
		}
	} else {
		related.R.LoanLoanSchedules = append(related.R.LoanLoanSchedules, o)
	}

	return nil
}

// LoanSchedules retrieves all the records using an executor.
func LoanSchedules(mods ...qm.QueryMod) loanScheduleQuery {
	mods = append(mods, qm.From("`LoanSchedule`"))
	return loanScheduleQuery{NewQuery(mods...)}
}

// FindLoanSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoanSchedule(ctx context.Context, exec boil.ContextExecutor, loanScheduleID int, selectCols ...string) (*LoanSchedule, error) {
	loanScheduleObj := &LoanSchedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `LoanSchedule` where `loan_schedule_id`=?", sel,
	)

	q := queries.Raw(query, loanScheduleID)

	err := q.Bind(ctx, exec, loanScheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from LoanSchedule")
	}

	return loanScheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoanSchedule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LoanSchedule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loanScheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loanScheduleInsertCacheMut.RLock()
	cache, cached := loanScheduleInsertCache[key]
	loanScheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loanScheduleColumns,
			loanScheduleColumnsWithDefault,
			loanScheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `LoanSchedule` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `LoanSchedule` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `LoanSchedule` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, loanSchedulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into LoanSchedule")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LoanScheduleID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loanScheduleMapping["LoanScheduleID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.LoanScheduleID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LoanSchedule")
	}

CacheNoHooks:
	if !cached {
		loanScheduleInsertCacheMut.Lock()
		loanScheduleInsertCache[key] = cache
		loanScheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoanSchedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoanSchedule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loanScheduleUpdateCacheMut.RLock()
	cache, cached := loanScheduleUpdateCache[key]
	loanScheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loanScheduleColumns,
			loanSchedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update LoanSchedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `LoanSchedule` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, loanSchedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, append(wl, loanSchedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update LoanSchedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for LoanSchedule")
	}

	if !cached {
		loanScheduleUpdateCacheMut.Lock()
		loanScheduleUpdateCache[key] = cache
		loanScheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loanScheduleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for LoanSchedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for LoanSchedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoanScheduleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `LoanSchedule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanSchedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loanSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loanSchedule")
	}
	return rowsAff, nil
}

var mySQLLoanScheduleUniqueColumns = []string{
	"loan_schedule_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoanSchedule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no LoanSchedule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loanScheduleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLoanScheduleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loanScheduleUpsertCacheMut.RLock()
	cache, cached := loanScheduleUpsertCache[key]
	loanScheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loanScheduleColumns,
			loanScheduleColumnsWithDefault,
			loanScheduleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			loanScheduleColumns,
			loanSchedulePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert LoanSchedule, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "LoanSchedule", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `LoanSchedule` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for LoanSchedule")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.LoanScheduleID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loanScheduleMapping["loan_schedule_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(loanScheduleType, loanScheduleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for LoanSchedule")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for LoanSchedule")
	}

CacheNoHooks:
	if !cached {
		loanScheduleUpsertCacheMut.Lock()
		loanScheduleUpsertCache[key] = cache
		loanScheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LoanSchedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoanSchedule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoanSchedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loanSchedulePrimaryKeyMapping)
	sql := "DELETE FROM `LoanSchedule` WHERE `loan_schedule_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from LoanSchedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for LoanSchedule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loanScheduleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loanScheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from LoanSchedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LoanSchedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoanScheduleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoanSchedule slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(loanScheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `LoanSchedule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanSchedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loanSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for LoanSchedule")
	}

	if len(loanScheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoanSchedule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoanSchedule(ctx, exec, o.LoanScheduleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoanScheduleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoanScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loanSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `LoanSchedule`.* FROM `LoanSchedule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loanSchedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoanScheduleSlice")
	}

	*o = slice

	return nil
}

// LoanScheduleExists checks if the LoanSchedule row exists.
func LoanScheduleExists(ctx context.Context, exec boil.ContextExecutor, loanScheduleID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `LoanSchedule` where `loan_schedule_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, loanScheduleID)
	}

	row := exec.QueryRowContext(ctx, sql, loanScheduleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if LoanSchedule exists")
	}

	return exists, nil
}
