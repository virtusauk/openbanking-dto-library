// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Branch is an object representing the database table.
type Branch struct {
	BranchID               int         `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	BankID                 int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	ServicerSchemename     null.String `boil:"servicer_schemename" json:"servicer_schemename,omitempty" toml:"servicer_schemename" yaml:"servicer_schemename,omitempty"`
	ServicerIdentification null.String `boil:"servicer_identification" json:"servicer_identification,omitempty" toml:"servicer_identification" yaml:"servicer_identification,omitempty"`
	UnitName               string      `boil:"unit_name" json:"unit_name" toml:"unit_name" yaml:"unit_name"`
	UnitType               null.String `boil:"unit_type" json:"unit_type,omitempty" toml:"unit_type" yaml:"unit_type,omitempty"`
	UnitLocation           null.String `boil:"unit_location" json:"unit_location,omitempty" toml:"unit_location" yaml:"unit_location,omitempty"`
	ParentUnit             null.Int    `boil:"parent_unit" json:"parent_unit,omitempty" toml:"parent_unit" yaml:"parent_unit,omitempty"`
	AddressType            null.String `boil:"address_type" json:"address_type,omitempty" toml:"address_type" yaml:"address_type,omitempty"`
	Department             null.String `boil:"department" json:"department,omitempty" toml:"department" yaml:"department,omitempty"`
	Subdepartment          null.String `boil:"subdepartment" json:"subdepartment,omitempty" toml:"subdepartment" yaml:"subdepartment,omitempty"`
	StreetName             null.String `boil:"street_name" json:"street_name,omitempty" toml:"street_name" yaml:"street_name,omitempty"`
	BuildingNumber         null.String `boil:"building_number" json:"building_number,omitempty" toml:"building_number" yaml:"building_number,omitempty"`
	Townname               null.String `boil:"townname" json:"townname,omitempty" toml:"townname" yaml:"townname,omitempty"`
	Addressline1           null.String `boil:"addressline1" json:"addressline1,omitempty" toml:"addressline1" yaml:"addressline1,omitempty"`
	Addressline2           null.String `boil:"addressline2" json:"addressline2,omitempty" toml:"addressline2" yaml:"addressline2,omitempty"`
	Addressline3           null.String `boil:"addressline3" json:"addressline3,omitempty" toml:"addressline3" yaml:"addressline3,omitempty"`
	Addressline4           null.String `boil:"addressline4" json:"addressline4,omitempty" toml:"addressline4" yaml:"addressline4,omitempty"`
	Addressline5           null.String `boil:"addressline5" json:"addressline5,omitempty" toml:"addressline5" yaml:"addressline5,omitempty"`
	Addressline6           null.String `boil:"addressline6" json:"addressline6,omitempty" toml:"addressline6" yaml:"addressline6,omitempty"`
	Addressline7           null.String `boil:"addressline7" json:"addressline7,omitempty" toml:"addressline7" yaml:"addressline7,omitempty"`
	Countrysubdivision     null.String `boil:"countrysubdivision" json:"countrysubdivision,omitempty" toml:"countrysubdivision" yaml:"countrysubdivision,omitempty"`
	Country                null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Postcode               string      `boil:"postcode" json:"postcode" toml:"postcode" yaml:"postcode"`
	EmailAddress           null.String `boil:"email_address" json:"email_address,omitempty" toml:"email_address" yaml:"email_address,omitempty"`
	PhoneNumber            null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	LangCode               null.String `boil:"lang_code" json:"lang_code,omitempty" toml:"lang_code" yaml:"lang_code,omitempty"`
	IsoCode                null.String `boil:"iso_code" json:"iso_code,omitempty" toml:"iso_code" yaml:"iso_code,omitempty"`
	AppLink                null.String `boil:"app_link" json:"app_link,omitempty" toml:"app_link" yaml:"app_link,omitempty"`
	MakerDate              time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate            null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID              null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy             null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate           null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *branchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L branchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BranchColumns = struct {
	BranchID               string
	BankID                 string
	ServicerSchemename     string
	ServicerIdentification string
	UnitName               string
	UnitType               string
	UnitLocation           string
	ParentUnit             string
	AddressType            string
	Department             string
	Subdepartment          string
	StreetName             string
	BuildingNumber         string
	Townname               string
	Addressline1           string
	Addressline2           string
	Addressline3           string
	Addressline4           string
	Addressline5           string
	Addressline6           string
	Addressline7           string
	Countrysubdivision     string
	Country                string
	Postcode               string
	EmailAddress           string
	PhoneNumber            string
	LangCode               string
	IsoCode                string
	AppLink                string
	MakerDate              string
	CheckerDate            string
	MakerID                string
	CheckerID              string
	ModifiedBy             string
	ModifiedDate           string
}{
	BranchID:               "branch_id",
	BankID:                 "bank_id",
	ServicerSchemename:     "servicer_schemename",
	ServicerIdentification: "servicer_identification",
	UnitName:               "unit_name",
	UnitType:               "unit_type",
	UnitLocation:           "unit_location",
	ParentUnit:             "parent_unit",
	AddressType:            "address_type",
	Department:             "department",
	Subdepartment:          "subdepartment",
	StreetName:             "street_name",
	BuildingNumber:         "building_number",
	Townname:               "townname",
	Addressline1:           "addressline1",
	Addressline2:           "addressline2",
	Addressline3:           "addressline3",
	Addressline4:           "addressline4",
	Addressline5:           "addressline5",
	Addressline6:           "addressline6",
	Addressline7:           "addressline7",
	Countrysubdivision:     "countrysubdivision",
	Country:                "country",
	Postcode:               "postcode",
	EmailAddress:           "email_address",
	PhoneNumber:            "phone_number",
	LangCode:               "lang_code",
	IsoCode:                "iso_code",
	AppLink:                "app_link",
	MakerDate:              "maker_date",
	CheckerDate:            "checker_date",
	MakerID:                "maker_id",
	CheckerID:              "checker_id",
	ModifiedBy:             "modified_by",
	ModifiedDate:           "modified_date",
}

// Generated where

var BranchWhere = struct {
	BranchID               whereHelperint
	BankID                 whereHelperint
	ServicerSchemename     whereHelpernull_String
	ServicerIdentification whereHelpernull_String
	UnitName               whereHelperstring
	UnitType               whereHelpernull_String
	UnitLocation           whereHelpernull_String
	ParentUnit             whereHelpernull_Int
	AddressType            whereHelpernull_String
	Department             whereHelpernull_String
	Subdepartment          whereHelpernull_String
	StreetName             whereHelpernull_String
	BuildingNumber         whereHelpernull_String
	Townname               whereHelpernull_String
	Addressline1           whereHelpernull_String
	Addressline2           whereHelpernull_String
	Addressline3           whereHelpernull_String
	Addressline4           whereHelpernull_String
	Addressline5           whereHelpernull_String
	Addressline6           whereHelpernull_String
	Addressline7           whereHelpernull_String
	Countrysubdivision     whereHelpernull_String
	Country                whereHelpernull_String
	Postcode               whereHelperstring
	EmailAddress           whereHelpernull_String
	PhoneNumber            whereHelpernull_String
	LangCode               whereHelpernull_String
	IsoCode                whereHelpernull_String
	AppLink                whereHelpernull_String
	MakerDate              whereHelpertime_Time
	CheckerDate            whereHelpernull_Time
	MakerID                whereHelperstring
	CheckerID              whereHelpernull_String
	ModifiedBy             whereHelpernull_String
	ModifiedDate           whereHelpernull_Time
}{
	BranchID:               whereHelperint{field: `branch_id`},
	BankID:                 whereHelperint{field: `bank_id`},
	ServicerSchemename:     whereHelpernull_String{field: `servicer_schemename`},
	ServicerIdentification: whereHelpernull_String{field: `servicer_identification`},
	UnitName:               whereHelperstring{field: `unit_name`},
	UnitType:               whereHelpernull_String{field: `unit_type`},
	UnitLocation:           whereHelpernull_String{field: `unit_location`},
	ParentUnit:             whereHelpernull_Int{field: `parent_unit`},
	AddressType:            whereHelpernull_String{field: `address_type`},
	Department:             whereHelpernull_String{field: `department`},
	Subdepartment:          whereHelpernull_String{field: `subdepartment`},
	StreetName:             whereHelpernull_String{field: `street_name`},
	BuildingNumber:         whereHelpernull_String{field: `building_number`},
	Townname:               whereHelpernull_String{field: `townname`},
	Addressline1:           whereHelpernull_String{field: `addressline1`},
	Addressline2:           whereHelpernull_String{field: `addressline2`},
	Addressline3:           whereHelpernull_String{field: `addressline3`},
	Addressline4:           whereHelpernull_String{field: `addressline4`},
	Addressline5:           whereHelpernull_String{field: `addressline5`},
	Addressline6:           whereHelpernull_String{field: `addressline6`},
	Addressline7:           whereHelpernull_String{field: `addressline7`},
	Countrysubdivision:     whereHelpernull_String{field: `countrysubdivision`},
	Country:                whereHelpernull_String{field: `country`},
	Postcode:               whereHelperstring{field: `postcode`},
	EmailAddress:           whereHelpernull_String{field: `email_address`},
	PhoneNumber:            whereHelpernull_String{field: `phone_number`},
	LangCode:               whereHelpernull_String{field: `lang_code`},
	IsoCode:                whereHelpernull_String{field: `iso_code`},
	AppLink:                whereHelpernull_String{field: `app_link`},
	MakerDate:              whereHelpertime_Time{field: `maker_date`},
	CheckerDate:            whereHelpernull_Time{field: `checker_date`},
	MakerID:                whereHelperstring{field: `maker_id`},
	CheckerID:              whereHelpernull_String{field: `checker_id`},
	ModifiedBy:             whereHelpernull_String{field: `modified_by`},
	ModifiedDate:           whereHelpernull_Time{field: `modified_date`},
}

// BranchRels is where relationship names are stored.
var BranchRels = struct {
	Bank                          string
	BranchAccounts                string
	BranchCentres                 string
	PostedBranchKeyJournalEntries string
	BranchTFBankGuarantees        string
	BranchTFCharges               string
	BranchTFChargesTxns           string
}{
	Bank:                          "Bank",
	BranchAccounts:                "BranchAccounts",
	BranchCentres:                 "BranchCentres",
	PostedBranchKeyJournalEntries: "PostedBranchKeyJournalEntries",
	BranchTFBankGuarantees:        "BranchTFBankGuarantees",
	BranchTFCharges:               "BranchTFCharges",
	BranchTFChargesTxns:           "BranchTFChargesTxns",
}

// branchR is where relationships are stored.
type branchR struct {
	Bank                          *Bank
	BranchAccounts                AccountSlice
	BranchCentres                 CentreSlice
	PostedBranchKeyJournalEntries JournalEntrySlice
	BranchTFBankGuarantees        TFBankGuaranteeSlice
	BranchTFCharges               TFChargeSlice
	BranchTFChargesTxns           TFChargesTxnSlice
}

// NewStruct creates a new relationship struct
func (*branchR) NewStruct() *branchR {
	return &branchR{}
}

// branchL is where Load methods for each relationship are stored.
type branchL struct{}

var (
	branchColumns               = []string{"branch_id", "bank_id", "servicer_schemename", "servicer_identification", "unit_name", "unit_type", "unit_location", "parent_unit", "address_type", "department", "subdepartment", "street_name", "building_number", "townname", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "addressline6", "addressline7", "countrysubdivision", "country", "postcode", "email_address", "phone_number", "lang_code", "iso_code", "app_link", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	branchColumnsWithoutDefault = []string{"bank_id", "servicer_schemename", "servicer_identification", "unit_name", "unit_type", "unit_location", "parent_unit", "address_type", "department", "subdepartment", "street_name", "building_number", "townname", "addressline1", "addressline2", "addressline3", "addressline4", "addressline5", "addressline6", "addressline7", "countrysubdivision", "country", "postcode", "email_address", "phone_number", "lang_code", "iso_code", "app_link", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	branchColumnsWithDefault    = []string{"branch_id"}
	branchPrimaryKeyColumns     = []string{"branch_id"}
)

type (
	// BranchSlice is an alias for a slice of pointers to Branch.
	// This should generally be used opposed to []Branch.
	BranchSlice []*Branch
	// BranchHook is the signature for custom Branch hook methods
	BranchHook func(context.Context, boil.ContextExecutor, *Branch) error

	branchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	branchType                 = reflect.TypeOf(&Branch{})
	branchMapping              = queries.MakeStructMapping(branchType)
	branchPrimaryKeyMapping, _ = queries.BindMapping(branchType, branchMapping, branchPrimaryKeyColumns)
	branchInsertCacheMut       sync.RWMutex
	branchInsertCache          = make(map[string]insertCache)
	branchUpdateCacheMut       sync.RWMutex
	branchUpdateCache          = make(map[string]updateCache)
	branchUpsertCacheMut       sync.RWMutex
	branchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var branchBeforeInsertHooks []BranchHook
var branchBeforeUpdateHooks []BranchHook
var branchBeforeDeleteHooks []BranchHook
var branchBeforeUpsertHooks []BranchHook

var branchAfterInsertHooks []BranchHook
var branchAfterSelectHooks []BranchHook
var branchAfterUpdateHooks []BranchHook
var branchAfterDeleteHooks []BranchHook
var branchAfterUpsertHooks []BranchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Branch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Branch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Branch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Branch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Branch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Branch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Branch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Branch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Branch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBranchHook registers your hook function for all future operations.
func AddBranchHook(hookPoint boil.HookPoint, branchHook BranchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		branchBeforeInsertHooks = append(branchBeforeInsertHooks, branchHook)
	case boil.BeforeUpdateHook:
		branchBeforeUpdateHooks = append(branchBeforeUpdateHooks, branchHook)
	case boil.BeforeDeleteHook:
		branchBeforeDeleteHooks = append(branchBeforeDeleteHooks, branchHook)
	case boil.BeforeUpsertHook:
		branchBeforeUpsertHooks = append(branchBeforeUpsertHooks, branchHook)
	case boil.AfterInsertHook:
		branchAfterInsertHooks = append(branchAfterInsertHooks, branchHook)
	case boil.AfterSelectHook:
		branchAfterSelectHooks = append(branchAfterSelectHooks, branchHook)
	case boil.AfterUpdateHook:
		branchAfterUpdateHooks = append(branchAfterUpdateHooks, branchHook)
	case boil.AfterDeleteHook:
		branchAfterDeleteHooks = append(branchAfterDeleteHooks, branchHook)
	case boil.AfterUpsertHook:
		branchAfterUpsertHooks = append(branchAfterUpsertHooks, branchHook)
	}
}

// One returns a single branch record from the query.
func (q branchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Branch, error) {
	o := &Branch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Branches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Branch records from the query.
func (q branchQuery) All(ctx context.Context, exec boil.ContextExecutor) (BranchSlice, error) {
	var o []*Branch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Branch slice")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Branch records in the query.
func (q branchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Branches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q branchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Branches exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *Branch) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// BranchAccounts retrieves all the Account's Accounts with an executor via branch_id column.
func (o *Branch) BranchAccounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Account`.`branch_id`=?", o.BranchID),
	)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Account`.*"})
	}

	return query
}

// BranchCentres retrieves all the Centre's Centres with an executor via branch_id column.
func (o *Branch) BranchCentres(mods ...qm.QueryMod) centreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Centre`.`branch_id`=?", o.BranchID),
	)

	query := Centres(queryMods...)
	queries.SetFrom(query.Query, "`Centre`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Centre`.*"})
	}

	return query
}

// PostedBranchKeyJournalEntries retrieves all the JournalEntry's JournalEntries with an executor via posted_branch_key column.
func (o *Branch) PostedBranchKeyJournalEntries(mods ...qm.QueryMod) journalEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`JournalEntry`.`posted_branch_key`=?", o.BranchID),
	)

	query := JournalEntries(queryMods...)
	queries.SetFrom(query.Query, "`JournalEntry`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`JournalEntry`.*"})
	}

	return query
}

// BranchTFBankGuarantees retrieves all the TFBankGuarantee's TFBankGuarantees with an executor via branch_id column.
func (o *Branch) BranchTFBankGuarantees(mods ...qm.QueryMod) tFBankGuaranteeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFBankGuarantee`.`branch_id`=?", o.BranchID),
	)

	query := TFBankGuarantees(queryMods...)
	queries.SetFrom(query.Query, "`TFBankGuarantee`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFBankGuarantee`.*"})
	}

	return query
}

// BranchTFCharges retrieves all the TFCharge's TFCharges with an executor via branch_id column.
func (o *Branch) BranchTFCharges(mods ...qm.QueryMod) tFChargeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFCharges`.`branch_id`=?", o.BranchID),
	)

	query := TFCharges(queryMods...)
	queries.SetFrom(query.Query, "`TFCharges`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFCharges`.*"})
	}

	return query
}

// BranchTFChargesTxns retrieves all the TFChargesTxn's TFChargesTxns with an executor via branch_id column.
func (o *Branch) BranchTFChargesTxns(mods ...qm.QueryMod) tFChargesTxnQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFChargesTxn`.`branch_id`=?", o.BranchID),
	)

	query := TFChargesTxns(queryMods...)
	queries.SetFrom(query.Query, "`TFChargesTxn`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFChargesTxn`.*"})
	}

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (branchL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankBranches = append(foreign.R.BankBranches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankBranches = append(foreign.R.BankBranches, local)
				break
			}
		}
	}

	return nil
}

// LoadBranchAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBranchAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BranchID == foreign.BranchID {
				local.R.BranchAccounts = append(local.R.BranchAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadBranchCentres allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBranchCentres(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Centre`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Centre")
	}

	var resultSlice []*Centre
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Centre")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Centre")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Centre")
	}

	if len(centreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchCentres = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &centreR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BranchID == foreign.BranchID {
				local.R.BranchCentres = append(local.R.BranchCentres, foreign)
				if foreign.R == nil {
					foreign.R = &centreR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadPostedBranchKeyJournalEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadPostedBranchKeyJournalEntries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BranchID) {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`JournalEntry`), qm.WhereIn(`posted_branch_key in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load JournalEntry")
	}

	var resultSlice []*JournalEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice JournalEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on JournalEntry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for JournalEntry")
	}

	if len(journalEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PostedBranchKeyJournalEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &journalEntryR{}
			}
			foreign.R.PostedBranchKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BranchID, foreign.PostedBranchKey) {
				local.R.PostedBranchKeyJournalEntries = append(local.R.PostedBranchKeyJournalEntries, foreign)
				if foreign.R == nil {
					foreign.R = &journalEntryR{}
				}
				foreign.R.PostedBranchKey = local
				break
			}
		}
	}

	return nil
}

// LoadBranchTFBankGuarantees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBranchTFBankGuarantees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFBankGuarantee`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFBankGuarantee")
	}

	var resultSlice []*TFBankGuarantee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFBankGuarantee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFBankGuarantee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFBankGuarantee")
	}

	if len(tFBankGuaranteeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchTFBankGuarantees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFBankGuaranteeR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BranchID == foreign.BranchID {
				local.R.BranchTFBankGuarantees = append(local.R.BranchTFBankGuarantees, foreign)
				if foreign.R == nil {
					foreign.R = &tFBankGuaranteeR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadBranchTFCharges allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBranchTFCharges(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFCharges`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFCharges")
	}

	var resultSlice []*TFCharge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFCharges")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFCharges")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFCharges")
	}

	if len(tFChargeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchTFCharges = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFChargeR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BranchID == foreign.BranchID {
				local.R.BranchTFCharges = append(local.R.BranchTFCharges, foreign)
				if foreign.R == nil {
					foreign.R = &tFChargeR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadBranchTFChargesTxns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBranchTFChargesTxns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.BranchID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFChargesTxn`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFChargesTxn")
	}

	var resultSlice []*TFChargesTxn
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFChargesTxn")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFChargesTxn")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFChargesTxn")
	}

	if len(tFChargesTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BranchTFChargesTxns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFChargesTxnR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BranchID == foreign.BranchID {
				local.R.BranchTFChargesTxns = append(local.R.BranchTFChargesTxns, foreign)
				if foreign.R == nil {
					foreign.R = &tFChargesTxnR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// SetBank of the branch to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankBranches.
func (o *Branch) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.BranchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &branchR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankBranches: BranchSlice{o},
		}
	} else {
		related.R.BankBranches = append(related.R.BankBranches, o)
	}

	return nil
}

// AddBranchAccounts adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.BranchAccounts.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBranchAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.BranchID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Account` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.AccountID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.BranchID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BranchAccounts: related,
		}
	} else {
		o.R.BranchAccounts = append(o.R.BranchAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// AddBranchCentres adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.BranchCentres.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBranchCentres(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Centre) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.BranchID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Centre` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, centrePrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.CentreID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.BranchID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BranchCentres: related,
		}
	} else {
		o.R.BranchCentres = append(o.R.BranchCentres, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &centreR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// AddPostedBranchKeyJournalEntries adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.PostedBranchKeyJournalEntries.
// Sets related.R.PostedBranchKey appropriately.
func (o *Branch) AddPostedBranchKeyJournalEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JournalEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PostedBranchKey, o.BranchID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `JournalEntry` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"posted_branch_key"}),
				strmangle.WhereClause("`", "`", 0, journalEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.JournalEntryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PostedBranchKey, o.BranchID)
		}
	}

	if o.R == nil {
		o.R = &branchR{
			PostedBranchKeyJournalEntries: related,
		}
	} else {
		o.R.PostedBranchKeyJournalEntries = append(o.R.PostedBranchKeyJournalEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &journalEntryR{
				PostedBranchKey: o,
			}
		} else {
			rel.R.PostedBranchKey = o
		}
	}
	return nil
}

// SetPostedBranchKeyJournalEntries removes all previously related items of the
// Branch replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PostedBranchKey's PostedBranchKeyJournalEntries accordingly.
// Replaces o.R.PostedBranchKeyJournalEntries with related.
// Sets related.R.PostedBranchKey's PostedBranchKeyJournalEntries accordingly.
func (o *Branch) SetPostedBranchKeyJournalEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JournalEntry) error {
	query := "update `JournalEntry` set `posted_branch_key` = null where `posted_branch_key` = ?"
	values := []interface{}{o.BranchID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PostedBranchKeyJournalEntries {
			queries.SetScanner(&rel.PostedBranchKey, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PostedBranchKey = nil
		}

		o.R.PostedBranchKeyJournalEntries = nil
	}
	return o.AddPostedBranchKeyJournalEntries(ctx, exec, insert, related...)
}

// RemovePostedBranchKeyJournalEntries relationships from objects passed in.
// Removes related items from R.PostedBranchKeyJournalEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.PostedBranchKey.
func (o *Branch) RemovePostedBranchKeyJournalEntries(ctx context.Context, exec boil.ContextExecutor, related ...*JournalEntry) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PostedBranchKey, nil)
		if rel.R != nil {
			rel.R.PostedBranchKey = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("posted_branch_key")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PostedBranchKeyJournalEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.PostedBranchKeyJournalEntries)
			if ln > 1 && i < ln-1 {
				o.R.PostedBranchKeyJournalEntries[i] = o.R.PostedBranchKeyJournalEntries[ln-1]
			}
			o.R.PostedBranchKeyJournalEntries = o.R.PostedBranchKeyJournalEntries[:ln-1]
			break
		}
	}

	return nil
}

// AddBranchTFBankGuarantees adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.BranchTFBankGuarantees.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBranchTFBankGuarantees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFBankGuarantee) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.BranchID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFBankGuarantee` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, tFBankGuaranteePrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.TFBankGuaranteeID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.BranchID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BranchTFBankGuarantees: related,
		}
	} else {
		o.R.BranchTFBankGuarantees = append(o.R.BranchTFBankGuarantees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFBankGuaranteeR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// AddBranchTFCharges adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.BranchTFCharges.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBranchTFCharges(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFCharge) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.BranchID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFCharges` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, tFChargePrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.TFChargesID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.BranchID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BranchTFCharges: related,
		}
	} else {
		o.R.BranchTFCharges = append(o.R.BranchTFCharges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFChargeR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// AddBranchTFChargesTxns adds the given related objects to the existing relationships
// of the Branch, optionally inserting them as new records.
// Appends related to o.R.BranchTFChargesTxns.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBranchTFChargesTxns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFChargesTxn) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.BranchID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFChargesTxn` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns),
			)
			values := []interface{}{o.BranchID, rel.TFChargesID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.BranchID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BranchTFChargesTxns: related,
		}
	} else {
		o.R.BranchTFChargesTxns = append(o.R.BranchTFChargesTxns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFChargesTxnR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// Branches retrieves all the records using an executor.
func Branches(mods ...qm.QueryMod) branchQuery {
	mods = append(mods, qm.From("`Branches`"))
	return branchQuery{NewQuery(mods...)}
}

// FindBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBranch(ctx context.Context, exec boil.ContextExecutor, branchID int, selectCols ...string) (*Branch, error) {
	branchObj := &Branch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Branches` where `branch_id`=?", sel,
	)

	q := queries.Raw(query, branchID)

	err := q.Bind(ctx, exec, branchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Branches")
	}

	return branchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Branch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Branches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	branchInsertCacheMut.RLock()
	cache, cached := branchInsertCache[key]
	branchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			branchColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(branchType, branchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Branches` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Branches` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Branches` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Branches")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BranchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == branchMapping["BranchID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BranchID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Branches")
	}

CacheNoHooks:
	if !cached {
		branchInsertCacheMut.Lock()
		branchInsertCache[key] = cache
		branchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Branch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Branch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	branchUpdateCacheMut.RLock()
	cache, cached := branchUpdateCache[key]
	branchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			branchColumns,
			branchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Branches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Branches` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, append(wl, branchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Branches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Branches")
	}

	if !cached {
		branchUpdateCacheMut.Lock()
		branchUpdateCache[key] = cache
		branchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q branchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Branches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BranchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all branch")
	}
	return rowsAff, nil
}

var mySQLBranchUniqueColumns = []string{
	"branch_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Branch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Branches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBranchUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	branchUpsertCacheMut.RLock()
	cache, cached := branchUpsertCache[key]
	branchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			branchColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			branchColumns,
			branchPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Branches, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Branches", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Branches` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(branchType, branchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Branches")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BranchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == branchMapping["branch_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(branchType, branchMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Branches")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Branches")
	}

CacheNoHooks:
	if !cached {
		branchUpsertCacheMut.Lock()
		branchUpsertCache[key] = cache
		branchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Branch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Branch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Branch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), branchPrimaryKeyMapping)
	sql := "DELETE FROM `Branches` WHERE `branch_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Branches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q branchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no branchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Branches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BranchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Branch slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(branchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Branches")
	}

	if len(branchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Branch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBranch(ctx, exec, o.BranchID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BranchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Branches`.* FROM `Branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BranchSlice")
	}

	*o = slice

	return nil
}

// BranchExists checks if the Branch row exists.
func BranchExists(ctx context.Context, exec boil.ContextExecutor, branchID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Branches` where `branch_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, branchID)
	}

	row := exec.QueryRowContext(ctx, sql, branchID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Branches exists")
	}

	return exists, nil
}
