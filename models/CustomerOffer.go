// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CustomerOffer is an object representing the database table.
type CustomerOffer struct {
	CustomerOfferID  int         `boil:"customer_offer_id" json:"customer_offer_id" toml:"customer_offer_id" yaml:"customer_offer_id"`
	PartyID          int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	AccountID        null.Int    `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	BankID           null.Int    `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	Offerdescription null.String `boil:"offerdescription" json:"offerdescription,omitempty" toml:"offerdescription" yaml:"offerdescription,omitempty"`
	OfferStartDate   null.Time   `boil:"offer_start_date" json:"offer_start_date,omitempty" toml:"offer_start_date" yaml:"offer_start_date,omitempty"`
	OfferEndDate     null.Time   `boil:"offer_end_date" json:"offer_end_date,omitempty" toml:"offer_end_date" yaml:"offer_end_date,omitempty"`
	MakerDate        time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate      null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID          string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID        null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy       null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate     null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *customerOfferR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerOfferL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerOfferColumns = struct {
	CustomerOfferID  string
	PartyID          string
	AccountID        string
	BankID           string
	Offerdescription string
	OfferStartDate   string
	OfferEndDate     string
	MakerDate        string
	CheckerDate      string
	MakerID          string
	CheckerID        string
	ModifiedBy       string
	ModifiedDate     string
}{
	CustomerOfferID:  "customer_offer_id",
	PartyID:          "party_id",
	AccountID:        "account_id",
	BankID:           "bank_id",
	Offerdescription: "offerdescription",
	OfferStartDate:   "offer_start_date",
	OfferEndDate:     "offer_end_date",
	MakerDate:        "maker_date",
	CheckerDate:      "checker_date",
	MakerID:          "maker_id",
	CheckerID:        "checker_id",
	ModifiedBy:       "modified_by",
	ModifiedDate:     "modified_date",
}

// Generated where

var CustomerOfferWhere = struct {
	CustomerOfferID  whereHelperint
	PartyID          whereHelperint
	AccountID        whereHelpernull_Int
	BankID           whereHelpernull_Int
	Offerdescription whereHelpernull_String
	OfferStartDate   whereHelpernull_Time
	OfferEndDate     whereHelpernull_Time
	MakerDate        whereHelpertime_Time
	CheckerDate      whereHelpernull_Time
	MakerID          whereHelperstring
	CheckerID        whereHelpernull_String
	ModifiedBy       whereHelpernull_String
	ModifiedDate     whereHelpernull_Time
}{
	CustomerOfferID:  whereHelperint{field: `customer_offer_id`},
	PartyID:          whereHelperint{field: `party_id`},
	AccountID:        whereHelpernull_Int{field: `account_id`},
	BankID:           whereHelpernull_Int{field: `bank_id`},
	Offerdescription: whereHelpernull_String{field: `offerdescription`},
	OfferStartDate:   whereHelpernull_Time{field: `offer_start_date`},
	OfferEndDate:     whereHelpernull_Time{field: `offer_end_date`},
	MakerDate:        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:      whereHelpernull_Time{field: `checker_date`},
	MakerID:          whereHelperstring{field: `maker_id`},
	CheckerID:        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:       whereHelpernull_String{field: `modified_by`},
	ModifiedDate:     whereHelpernull_Time{field: `modified_date`},
}

// CustomerOfferRels is where relationship names are stored.
var CustomerOfferRels = struct {
	Account string
	Bank    string
	Party   string
}{
	Account: "Account",
	Bank:    "Bank",
	Party:   "Party",
}

// customerOfferR is where relationships are stored.
type customerOfferR struct {
	Account *Account
	Bank    *Bank
	Party   *Party
}

// NewStruct creates a new relationship struct
func (*customerOfferR) NewStruct() *customerOfferR {
	return &customerOfferR{}
}

// customerOfferL is where Load methods for each relationship are stored.
type customerOfferL struct{}

var (
	customerOfferColumns               = []string{"customer_offer_id", "party_id", "account_id", "bank_id", "offerdescription", "offer_start_date", "offer_end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	customerOfferColumnsWithoutDefault = []string{"customer_offer_id", "party_id", "account_id", "bank_id", "offerdescription", "offer_start_date", "offer_end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	customerOfferColumnsWithDefault    = []string{}
	customerOfferPrimaryKeyColumns     = []string{"customer_offer_id"}
)

type (
	// CustomerOfferSlice is an alias for a slice of pointers to CustomerOffer.
	// This should generally be used opposed to []CustomerOffer.
	CustomerOfferSlice []*CustomerOffer
	// CustomerOfferHook is the signature for custom CustomerOffer hook methods
	CustomerOfferHook func(context.Context, boil.ContextExecutor, *CustomerOffer) error

	customerOfferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerOfferType                 = reflect.TypeOf(&CustomerOffer{})
	customerOfferMapping              = queries.MakeStructMapping(customerOfferType)
	customerOfferPrimaryKeyMapping, _ = queries.BindMapping(customerOfferType, customerOfferMapping, customerOfferPrimaryKeyColumns)
	customerOfferInsertCacheMut       sync.RWMutex
	customerOfferInsertCache          = make(map[string]insertCache)
	customerOfferUpdateCacheMut       sync.RWMutex
	customerOfferUpdateCache          = make(map[string]updateCache)
	customerOfferUpsertCacheMut       sync.RWMutex
	customerOfferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerOfferBeforeInsertHooks []CustomerOfferHook
var customerOfferBeforeUpdateHooks []CustomerOfferHook
var customerOfferBeforeDeleteHooks []CustomerOfferHook
var customerOfferBeforeUpsertHooks []CustomerOfferHook

var customerOfferAfterInsertHooks []CustomerOfferHook
var customerOfferAfterSelectHooks []CustomerOfferHook
var customerOfferAfterUpdateHooks []CustomerOfferHook
var customerOfferAfterDeleteHooks []CustomerOfferHook
var customerOfferAfterUpsertHooks []CustomerOfferHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomerOffer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomerOffer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomerOffer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomerOffer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomerOffer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerOffer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomerOffer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomerOffer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomerOffer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerOfferAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerOfferHook registers your hook function for all future operations.
func AddCustomerOfferHook(hookPoint boil.HookPoint, customerOfferHook CustomerOfferHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		customerOfferBeforeInsertHooks = append(customerOfferBeforeInsertHooks, customerOfferHook)
	case boil.BeforeUpdateHook:
		customerOfferBeforeUpdateHooks = append(customerOfferBeforeUpdateHooks, customerOfferHook)
	case boil.BeforeDeleteHook:
		customerOfferBeforeDeleteHooks = append(customerOfferBeforeDeleteHooks, customerOfferHook)
	case boil.BeforeUpsertHook:
		customerOfferBeforeUpsertHooks = append(customerOfferBeforeUpsertHooks, customerOfferHook)
	case boil.AfterInsertHook:
		customerOfferAfterInsertHooks = append(customerOfferAfterInsertHooks, customerOfferHook)
	case boil.AfterSelectHook:
		customerOfferAfterSelectHooks = append(customerOfferAfterSelectHooks, customerOfferHook)
	case boil.AfterUpdateHook:
		customerOfferAfterUpdateHooks = append(customerOfferAfterUpdateHooks, customerOfferHook)
	case boil.AfterDeleteHook:
		customerOfferAfterDeleteHooks = append(customerOfferAfterDeleteHooks, customerOfferHook)
	case boil.AfterUpsertHook:
		customerOfferAfterUpsertHooks = append(customerOfferAfterUpsertHooks, customerOfferHook)
	}
}

// One returns a single customerOffer record from the query.
func (q customerOfferQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerOffer, error) {
	o := &CustomerOffer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CustomerOffer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerOffer records from the query.
func (q customerOfferQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerOfferSlice, error) {
	var o []*CustomerOffer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerOffer slice")
	}

	if len(customerOfferAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerOffer records in the query.
func (q customerOfferQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CustomerOffer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerOfferQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CustomerOffer exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *CustomerOffer) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Bank pointed to by the foreign key.
func (o *CustomerOffer) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Party pointed to by the foreign key.
func (o *CustomerOffer) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerOfferL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerOffer interface{}, mods queries.Applicator) error {
	var slice []*CustomerOffer
	var object *CustomerOffer

	if singular {
		object = maybeCustomerOffer.(*CustomerOffer)
	} else {
		slice = *maybeCustomerOffer.(*[]*CustomerOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerOfferR{}
		}
		if !queries.IsNil(object.AccountID) {
			args = append(args, object.AccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerOfferR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccountID) {
				args = append(args, obj.AccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(customerOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountCustomerOffers = append(foreign.R.AccountCustomerOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.AccountID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountCustomerOffers = append(foreign.R.AccountCustomerOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerOfferL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerOffer interface{}, mods queries.Applicator) error {
	var slice []*CustomerOffer
	var object *CustomerOffer

	if singular {
		object = maybeCustomerOffer.(*CustomerOffer)
	} else {
		slice = *maybeCustomerOffer.(*[]*CustomerOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerOfferR{}
		}
		if !queries.IsNil(object.BankID) {
			args = append(args, object.BankID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerOfferR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BankID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BankID) {
				args = append(args, obj.BankID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(customerOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankCustomerOffers = append(foreign.R.BankCustomerOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BankID, foreign.BankID) {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankCustomerOffers = append(foreign.R.BankCustomerOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerOfferL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerOffer interface{}, mods queries.Applicator) error {
	var slice []*CustomerOffer
	var object *CustomerOffer

	if singular {
		object = maybeCustomerOffer.(*CustomerOffer)
	} else {
		slice = *maybeCustomerOffer.(*[]*CustomerOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerOfferR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerOfferR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(customerOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyCustomerOffers = append(foreign.R.PartyCustomerOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyCustomerOffers = append(foreign.R.PartyCustomerOffers, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the customerOffer to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountCustomerOffers.
func (o *CustomerOffer) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CustomerOffer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, customerOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.CustomerOfferID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.AccountID)
	if o.R == nil {
		o.R = &customerOfferR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountCustomerOffers: CustomerOfferSlice{o},
		}
	} else {
		related.R.AccountCustomerOffers = append(related.R.AccountCustomerOffers, o)
	}

	return nil
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CustomerOffer) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Account = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AccountCustomerOffers {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.AccountCustomerOffers)
		if ln > 1 && i < ln-1 {
			related.R.AccountCustomerOffers[i] = related.R.AccountCustomerOffers[ln-1]
		}
		related.R.AccountCustomerOffers = related.R.AccountCustomerOffers[:ln-1]
		break
	}
	return nil
}

// SetBank of the customerOffer to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankCustomerOffers.
func (o *CustomerOffer) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CustomerOffer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, customerOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.CustomerOfferID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BankID, related.BankID)
	if o.R == nil {
		o.R = &customerOfferR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankCustomerOffers: CustomerOfferSlice{o},
		}
	} else {
		related.R.BankCustomerOffers = append(related.R.BankCustomerOffers, o)
	}

	return nil
}

// RemoveBank relationship.
// Sets o.R.Bank to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CustomerOffer) RemoveBank(ctx context.Context, exec boil.ContextExecutor, related *Bank) error {
	var err error

	queries.SetScanner(&o.BankID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bank_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Bank = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BankCustomerOffers {
		if queries.Equal(o.BankID, ri.BankID) {
			continue
		}

		ln := len(related.R.BankCustomerOffers)
		if ln > 1 && i < ln-1 {
			related.R.BankCustomerOffers[i] = related.R.BankCustomerOffers[ln-1]
		}
		related.R.BankCustomerOffers = related.R.BankCustomerOffers[:ln-1]
		break
	}
	return nil
}

// SetParty of the customerOffer to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyCustomerOffers.
func (o *CustomerOffer) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CustomerOffer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, customerOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.CustomerOfferID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &customerOfferR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyCustomerOffers: CustomerOfferSlice{o},
		}
	} else {
		related.R.PartyCustomerOffers = append(related.R.PartyCustomerOffers, o)
	}

	return nil
}

// CustomerOffers retrieves all the records using an executor.
func CustomerOffers(mods ...qm.QueryMod) customerOfferQuery {
	mods = append(mods, qm.From("`CustomerOffer`"))
	return customerOfferQuery{NewQuery(mods...)}
}

// FindCustomerOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerOffer(ctx context.Context, exec boil.ContextExecutor, customerOfferID int, selectCols ...string) (*CustomerOffer, error) {
	customerOfferObj := &CustomerOffer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CustomerOffer` where `customer_offer_id`=?", sel,
	)

	q := queries.Raw(query, customerOfferID)

	err := q.Bind(ctx, exec, customerOfferObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CustomerOffer")
	}

	return customerOfferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerOffer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CustomerOffer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerOfferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerOfferInsertCacheMut.RLock()
	cache, cached := customerOfferInsertCache[key]
	customerOfferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerOfferColumns,
			customerOfferColumnsWithDefault,
			customerOfferColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerOfferType, customerOfferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerOfferType, customerOfferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CustomerOffer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CustomerOffer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CustomerOffer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, customerOfferPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CustomerOffer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerOfferID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CustomerOffer")
	}

CacheNoHooks:
	if !cached {
		customerOfferInsertCacheMut.Lock()
		customerOfferInsertCache[key] = cache
		customerOfferInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CustomerOffer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerOffer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerOfferUpdateCacheMut.RLock()
	cache, cached := customerOfferUpdateCache[key]
	customerOfferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerOfferColumns,
			customerOfferPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CustomerOffer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CustomerOffer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, customerOfferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerOfferType, customerOfferMapping, append(wl, customerOfferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CustomerOffer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CustomerOffer")
	}

	if !cached {
		customerOfferUpdateCacheMut.Lock()
		customerOfferUpdateCache[key] = cache
		customerOfferUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q customerOfferQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CustomerOffer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CustomerOffer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerOfferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CustomerOffer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOfferPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customerOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customerOffer")
	}
	return rowsAff, nil
}

var mySQLCustomerOfferUniqueColumns = []string{
	"customer_offer_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerOffer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CustomerOffer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerOfferColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCustomerOfferUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerOfferUpsertCacheMut.RLock()
	cache, cached := customerOfferUpsertCache[key]
	customerOfferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerOfferColumns,
			customerOfferColumnsWithDefault,
			customerOfferColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			customerOfferColumns,
			customerOfferPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert CustomerOffer, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "CustomerOffer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CustomerOffer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(customerOfferType, customerOfferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerOfferType, customerOfferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CustomerOffer")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(customerOfferType, customerOfferMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CustomerOffer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CustomerOffer")
	}

CacheNoHooks:
	if !cached {
		customerOfferUpsertCacheMut.Lock()
		customerOfferUpsertCache[key] = cache
		customerOfferUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CustomerOffer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerOffer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerOffer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerOfferPrimaryKeyMapping)
	sql := "DELETE FROM `CustomerOffer` WHERE `customer_offer_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CustomerOffer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CustomerOffer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerOfferQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerOfferQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CustomerOffer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CustomerOffer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerOfferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerOffer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(customerOfferBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CustomerOffer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOfferPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customerOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CustomerOffer")
	}

	if len(customerOfferAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerOffer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomerOffer(ctx, exec, o.CustomerOfferID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerOfferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerOfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CustomerOffer`.* FROM `CustomerOffer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerOfferPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerOfferSlice")
	}

	*o = slice

	return nil
}

// CustomerOfferExists checks if the CustomerOffer row exists.
func CustomerOfferExists(ctx context.Context, exec boil.ContextExecutor, customerOfferID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CustomerOffer` where `customer_offer_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, customerOfferID)
	}

	row := exec.QueryRowContext(ctx, sql, customerOfferID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CustomerOffer exists")
	}

	return exists, nil
}
