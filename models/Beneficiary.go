// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Beneficiary is an object representing the database table.
type Beneficiary struct {
	BeneficiaryID                                     int         `boil:"beneficiary_id" json:"beneficiary_id" toml:"beneficiary_id" yaml:"beneficiary_id"`
	DebtorAccountID                                   int         `boil:"debtor_account_id" json:"debtor_account_id" toml:"debtor_account_id" yaml:"debtor_account_id"`
	DebtorAccountOwnerID                              int         `boil:"debtor_account_owner_id" json:"debtor_account_owner_id" toml:"debtor_account_owner_id" yaml:"debtor_account_owner_id"`
	BankID                                            int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	BeneficiaryAccountRefID                           string      `boil:"beneficiary_account_ref_id" json:"beneficiary_account_ref_id" toml:"beneficiary_account_ref_id" yaml:"beneficiary_account_ref_id"`
	BeneficiaryRefID                                  string      `boil:"beneficiary_ref_id" json:"beneficiary_ref_id" toml:"beneficiary_ref_id" yaml:"beneficiary_ref_id"`
	BeneficiaryTranReference                          string      `boil:"beneficiary_tran_reference" json:"beneficiary_tran_reference" toml:"beneficiary_tran_reference" yaml:"beneficiary_tran_reference"`
	BeneficiaryBankCode                               string      `boil:"beneficiary_bank_code" json:"beneficiary_bank_code" toml:"beneficiary_bank_code" yaml:"beneficiary_bank_code"`
	BeneficiaryBankName                               string      `boil:"beneficiary_bank_name" json:"beneficiary_bank_name" toml:"beneficiary_bank_name" yaml:"beneficiary_bank_name"`
	BeneficiaryCreditorAgentSchemename                null.String `boil:"beneficiary_creditor_agent_schemename" json:"beneficiary_creditor_agent_schemename,omitempty" toml:"beneficiary_creditor_agent_schemename" yaml:"beneficiary_creditor_agent_schemename,omitempty"`
	BeneficiaryCreditorAgentIdentification            null.String `boil:"beneficiary_creditor_agent_identification" json:"beneficiary_creditor_agent_identification,omitempty" toml:"beneficiary_creditor_agent_identification" yaml:"beneficiary_creditor_agent_identification,omitempty"`
	BeneficiaryCreditorAccountSchemename              string      `boil:"beneficiary_creditor_account_schemename" json:"beneficiary_creditor_account_schemename" toml:"beneficiary_creditor_account_schemename" yaml:"beneficiary_creditor_account_schemename"`
	BeneficiaryCreditorAccountIdentification          string      `boil:"beneficiary_creditor_account_identification" json:"beneficiary_creditor_account_identification" toml:"beneficiary_creditor_account_identification" yaml:"beneficiary_creditor_account_identification"`
	BeneficiaryCreditorAccountSecondaryIdentification string      `boil:"beneficiary_creditor_account_secondary_identification" json:"beneficiary_creditor_account_secondary_identification" toml:"beneficiary_creditor_account_secondary_identification" yaml:"beneficiary_creditor_account_secondary_identification"`
	BeneficiaryCreditorAccountName                    string      `boil:"beneficiary_creditor_account_name" json:"beneficiary_creditor_account_name" toml:"beneficiary_creditor_account_name" yaml:"beneficiary_creditor_account_name"`
	Reference                                         null.String `boil:"reference" json:"reference,omitempty" toml:"reference" yaml:"reference,omitempty"`
	BeneficiaryCreditorAgentName                      null.String `boil:"beneficiary_creditor_agent_name" json:"beneficiary_creditor_agent_name,omitempty" toml:"beneficiary_creditor_agent_name" yaml:"beneficiary_creditor_agent_name,omitempty"`
	BeneficiaryCreditorAgentAddressType               null.String `boil:"beneficiary_creditor_agent_address_type" json:"beneficiary_creditor_agent_address_type,omitempty" toml:"beneficiary_creditor_agent_address_type" yaml:"beneficiary_creditor_agent_address_type,omitempty"`
	BeneficiaryCreditorAgentDepartment                null.String `boil:"beneficiary_creditor_agent_department" json:"beneficiary_creditor_agent_department,omitempty" toml:"beneficiary_creditor_agent_department" yaml:"beneficiary_creditor_agent_department,omitempty"`
	BeneficiaryCreditorAgentSubdepartment             null.String `boil:"beneficiary_creditor_agent_subdepartment" json:"beneficiary_creditor_agent_subdepartment,omitempty" toml:"beneficiary_creditor_agent_subdepartment" yaml:"beneficiary_creditor_agent_subdepartment,omitempty"`
	BeneficiaryCreditorAgentStreetName                null.String `boil:"beneficiary_creditor_agent_street_name" json:"beneficiary_creditor_agent_street_name,omitempty" toml:"beneficiary_creditor_agent_street_name" yaml:"beneficiary_creditor_agent_street_name,omitempty"`
	BeneficiaryCreditorAgentBuildingNumber            null.String `boil:"beneficiary_creditor_agent_building_number" json:"beneficiary_creditor_agent_building_number,omitempty" toml:"beneficiary_creditor_agent_building_number" yaml:"beneficiary_creditor_agent_building_number,omitempty"`
	BeneficiaryCreditorAgentTownname                  null.String `boil:"beneficiary_creditor_agent_townname" json:"beneficiary_creditor_agent_townname,omitempty" toml:"beneficiary_creditor_agent_townname" yaml:"beneficiary_creditor_agent_townname,omitempty"`
	BeneficiaryCreditorAgentAddressline1              null.String `boil:"beneficiary_creditor_agent_addressline1" json:"beneficiary_creditor_agent_addressline1,omitempty" toml:"beneficiary_creditor_agent_addressline1" yaml:"beneficiary_creditor_agent_addressline1,omitempty"`
	BeneficiaryCreditorAgentAddressline2              null.String `boil:"beneficiary_creditor_agent_addressline2" json:"beneficiary_creditor_agent_addressline2,omitempty" toml:"beneficiary_creditor_agent_addressline2" yaml:"beneficiary_creditor_agent_addressline2,omitempty"`
	BeneficiaryCreditorAgentAddressline3              null.String `boil:"beneficiary_creditor_agent_addressline3" json:"beneficiary_creditor_agent_addressline3,omitempty" toml:"beneficiary_creditor_agent_addressline3" yaml:"beneficiary_creditor_agent_addressline3,omitempty"`
	BeneficiaryCreditorAgentAddressline4              null.String `boil:"beneficiary_creditor_agent_addressline4" json:"beneficiary_creditor_agent_addressline4,omitempty" toml:"beneficiary_creditor_agent_addressline4" yaml:"beneficiary_creditor_agent_addressline4,omitempty"`
	BeneficiaryCreditorAgentAddressline5              null.String `boil:"beneficiary_creditor_agent_addressline5" json:"beneficiary_creditor_agent_addressline5,omitempty" toml:"beneficiary_creditor_agent_addressline5" yaml:"beneficiary_creditor_agent_addressline5,omitempty"`
	BeneficiaryCreditorAgentAddressline6              null.String `boil:"beneficiary_creditor_agent_addressline6" json:"beneficiary_creditor_agent_addressline6,omitempty" toml:"beneficiary_creditor_agent_addressline6" yaml:"beneficiary_creditor_agent_addressline6,omitempty"`
	BeneficiaryCreditorAgentAddressline7              null.String `boil:"beneficiary_creditor_agent_addressline7" json:"beneficiary_creditor_agent_addressline7,omitempty" toml:"beneficiary_creditor_agent_addressline7" yaml:"beneficiary_creditor_agent_addressline7,omitempty"`
	BeneficiaryCreditorAgentPostcode                  null.String `boil:"beneficiary_creditor_agent_postcode" json:"beneficiary_creditor_agent_postcode,omitempty" toml:"beneficiary_creditor_agent_postcode" yaml:"beneficiary_creditor_agent_postcode,omitempty"`
	BeneficiaryCreditorAgentCountrysubdivision        null.String `boil:"beneficiary_creditor_agent_countrysubdivision" json:"beneficiary_creditor_agent_countrysubdivision,omitempty" toml:"beneficiary_creditor_agent_countrysubdivision" yaml:"beneficiary_creditor_agent_countrysubdivision,omitempty"`
	BeneficiaryCreditorAgentCountry                   null.String `boil:"beneficiary_creditor_agent_country" json:"beneficiary_creditor_agent_country,omitempty" toml:"beneficiary_creditor_agent_country" yaml:"beneficiary_creditor_agent_country,omitempty"`
	MakerDate                                         time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                                       null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                                           string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                                         null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                                        null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                                      null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *beneficiaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L beneficiaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BeneficiaryColumns = struct {
	BeneficiaryID                                     string
	DebtorAccountID                                   string
	DebtorAccountOwnerID                              string
	BankID                                            string
	BeneficiaryAccountRefID                           string
	BeneficiaryRefID                                  string
	BeneficiaryTranReference                          string
	BeneficiaryBankCode                               string
	BeneficiaryBankName                               string
	BeneficiaryCreditorAgentSchemename                string
	BeneficiaryCreditorAgentIdentification            string
	BeneficiaryCreditorAccountSchemename              string
	BeneficiaryCreditorAccountIdentification          string
	BeneficiaryCreditorAccountSecondaryIdentification string
	BeneficiaryCreditorAccountName                    string
	Reference                                         string
	BeneficiaryCreditorAgentName                      string
	BeneficiaryCreditorAgentAddressType               string
	BeneficiaryCreditorAgentDepartment                string
	BeneficiaryCreditorAgentSubdepartment             string
	BeneficiaryCreditorAgentStreetName                string
	BeneficiaryCreditorAgentBuildingNumber            string
	BeneficiaryCreditorAgentTownname                  string
	BeneficiaryCreditorAgentAddressline1              string
	BeneficiaryCreditorAgentAddressline2              string
	BeneficiaryCreditorAgentAddressline3              string
	BeneficiaryCreditorAgentAddressline4              string
	BeneficiaryCreditorAgentAddressline5              string
	BeneficiaryCreditorAgentAddressline6              string
	BeneficiaryCreditorAgentAddressline7              string
	BeneficiaryCreditorAgentPostcode                  string
	BeneficiaryCreditorAgentCountrysubdivision        string
	BeneficiaryCreditorAgentCountry                   string
	MakerDate                                         string
	CheckerDate                                       string
	MakerID                                           string
	CheckerID                                         string
	ModifiedBy                                        string
	ModifiedDate                                      string
}{
	BeneficiaryID:                                     "beneficiary_id",
	DebtorAccountID:                                   "debtor_account_id",
	DebtorAccountOwnerID:                              "debtor_account_owner_id",
	BankID:                                            "bank_id",
	BeneficiaryAccountRefID:                           "beneficiary_account_ref_id",
	BeneficiaryRefID:                                  "beneficiary_ref_id",
	BeneficiaryTranReference:                          "beneficiary_tran_reference",
	BeneficiaryBankCode:                               "beneficiary_bank_code",
	BeneficiaryBankName:                               "beneficiary_bank_name",
	BeneficiaryCreditorAgentSchemename:                "beneficiary_creditor_agent_schemename",
	BeneficiaryCreditorAgentIdentification:            "beneficiary_creditor_agent_identification",
	BeneficiaryCreditorAccountSchemename:              "beneficiary_creditor_account_schemename",
	BeneficiaryCreditorAccountIdentification:          "beneficiary_creditor_account_identification",
	BeneficiaryCreditorAccountSecondaryIdentification: "beneficiary_creditor_account_secondary_identification",
	BeneficiaryCreditorAccountName:                    "beneficiary_creditor_account_name",
	Reference:                                         "reference",
	BeneficiaryCreditorAgentName:                      "beneficiary_creditor_agent_name",
	BeneficiaryCreditorAgentAddressType:               "beneficiary_creditor_agent_address_type",
	BeneficiaryCreditorAgentDepartment:                "beneficiary_creditor_agent_department",
	BeneficiaryCreditorAgentSubdepartment:             "beneficiary_creditor_agent_subdepartment",
	BeneficiaryCreditorAgentStreetName:                "beneficiary_creditor_agent_street_name",
	BeneficiaryCreditorAgentBuildingNumber:            "beneficiary_creditor_agent_building_number",
	BeneficiaryCreditorAgentTownname:                  "beneficiary_creditor_agent_townname",
	BeneficiaryCreditorAgentAddressline1:              "beneficiary_creditor_agent_addressline1",
	BeneficiaryCreditorAgentAddressline2:              "beneficiary_creditor_agent_addressline2",
	BeneficiaryCreditorAgentAddressline3:              "beneficiary_creditor_agent_addressline3",
	BeneficiaryCreditorAgentAddressline4:              "beneficiary_creditor_agent_addressline4",
	BeneficiaryCreditorAgentAddressline5:              "beneficiary_creditor_agent_addressline5",
	BeneficiaryCreditorAgentAddressline6:              "beneficiary_creditor_agent_addressline6",
	BeneficiaryCreditorAgentAddressline7:              "beneficiary_creditor_agent_addressline7",
	BeneficiaryCreditorAgentPostcode:                  "beneficiary_creditor_agent_postcode",
	BeneficiaryCreditorAgentCountrysubdivision:        "beneficiary_creditor_agent_countrysubdivision",
	BeneficiaryCreditorAgentCountry:                   "beneficiary_creditor_agent_country",
	MakerDate:                                         "maker_date",
	CheckerDate:                                       "checker_date",
	MakerID:                                           "maker_id",
	CheckerID:                                         "checker_id",
	ModifiedBy:                                        "modified_by",
	ModifiedDate:                                      "modified_date",
}

// Generated where

var BeneficiaryWhere = struct {
	BeneficiaryID                                     whereHelperint
	DebtorAccountID                                   whereHelperint
	DebtorAccountOwnerID                              whereHelperint
	BankID                                            whereHelperint
	BeneficiaryAccountRefID                           whereHelperstring
	BeneficiaryRefID                                  whereHelperstring
	BeneficiaryTranReference                          whereHelperstring
	BeneficiaryBankCode                               whereHelperstring
	BeneficiaryBankName                               whereHelperstring
	BeneficiaryCreditorAgentSchemename                whereHelpernull_String
	BeneficiaryCreditorAgentIdentification            whereHelpernull_String
	BeneficiaryCreditorAccountSchemename              whereHelperstring
	BeneficiaryCreditorAccountIdentification          whereHelperstring
	BeneficiaryCreditorAccountSecondaryIdentification whereHelperstring
	BeneficiaryCreditorAccountName                    whereHelperstring
	Reference                                         whereHelpernull_String
	BeneficiaryCreditorAgentName                      whereHelpernull_String
	BeneficiaryCreditorAgentAddressType               whereHelpernull_String
	BeneficiaryCreditorAgentDepartment                whereHelpernull_String
	BeneficiaryCreditorAgentSubdepartment             whereHelpernull_String
	BeneficiaryCreditorAgentStreetName                whereHelpernull_String
	BeneficiaryCreditorAgentBuildingNumber            whereHelpernull_String
	BeneficiaryCreditorAgentTownname                  whereHelpernull_String
	BeneficiaryCreditorAgentAddressline1              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline2              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline3              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline4              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline5              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline6              whereHelpernull_String
	BeneficiaryCreditorAgentAddressline7              whereHelpernull_String
	BeneficiaryCreditorAgentPostcode                  whereHelpernull_String
	BeneficiaryCreditorAgentCountrysubdivision        whereHelpernull_String
	BeneficiaryCreditorAgentCountry                   whereHelpernull_String
	MakerDate                                         whereHelpertime_Time
	CheckerDate                                       whereHelpernull_Time
	MakerID                                           whereHelperstring
	CheckerID                                         whereHelpernull_String
	ModifiedBy                                        whereHelpernull_String
	ModifiedDate                                      whereHelpernull_Time
}{
	BeneficiaryID:                                     whereHelperint{field: `beneficiary_id`},
	DebtorAccountID:                                   whereHelperint{field: `debtor_account_id`},
	DebtorAccountOwnerID:                              whereHelperint{field: `debtor_account_owner_id`},
	BankID:                                            whereHelperint{field: `bank_id`},
	BeneficiaryAccountRefID:                           whereHelperstring{field: `beneficiary_account_ref_id`},
	BeneficiaryRefID:                                  whereHelperstring{field: `beneficiary_ref_id`},
	BeneficiaryTranReference:                          whereHelperstring{field: `beneficiary_tran_reference`},
	BeneficiaryBankCode:                               whereHelperstring{field: `beneficiary_bank_code`},
	BeneficiaryBankName:                               whereHelperstring{field: `beneficiary_bank_name`},
	BeneficiaryCreditorAgentSchemename:                whereHelpernull_String{field: `beneficiary_creditor_agent_schemename`},
	BeneficiaryCreditorAgentIdentification:            whereHelpernull_String{field: `beneficiary_creditor_agent_identification`},
	BeneficiaryCreditorAccountSchemename:              whereHelperstring{field: `beneficiary_creditor_account_schemename`},
	BeneficiaryCreditorAccountIdentification:          whereHelperstring{field: `beneficiary_creditor_account_identification`},
	BeneficiaryCreditorAccountSecondaryIdentification: whereHelperstring{field: `beneficiary_creditor_account_secondary_identification`},
	BeneficiaryCreditorAccountName:                    whereHelperstring{field: `beneficiary_creditor_account_name`},
	Reference:                                         whereHelpernull_String{field: `reference`},
	BeneficiaryCreditorAgentName:                      whereHelpernull_String{field: `beneficiary_creditor_agent_name`},
	BeneficiaryCreditorAgentAddressType:               whereHelpernull_String{field: `beneficiary_creditor_agent_address_type`},
	BeneficiaryCreditorAgentDepartment:                whereHelpernull_String{field: `beneficiary_creditor_agent_department`},
	BeneficiaryCreditorAgentSubdepartment:             whereHelpernull_String{field: `beneficiary_creditor_agent_subdepartment`},
	BeneficiaryCreditorAgentStreetName:                whereHelpernull_String{field: `beneficiary_creditor_agent_street_name`},
	BeneficiaryCreditorAgentBuildingNumber:            whereHelpernull_String{field: `beneficiary_creditor_agent_building_number`},
	BeneficiaryCreditorAgentTownname:                  whereHelpernull_String{field: `beneficiary_creditor_agent_townname`},
	BeneficiaryCreditorAgentAddressline1:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline1`},
	BeneficiaryCreditorAgentAddressline2:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline2`},
	BeneficiaryCreditorAgentAddressline3:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline3`},
	BeneficiaryCreditorAgentAddressline4:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline4`},
	BeneficiaryCreditorAgentAddressline5:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline5`},
	BeneficiaryCreditorAgentAddressline6:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline6`},
	BeneficiaryCreditorAgentAddressline7:              whereHelpernull_String{field: `beneficiary_creditor_agent_addressline7`},
	BeneficiaryCreditorAgentPostcode:                  whereHelpernull_String{field: `beneficiary_creditor_agent_postcode`},
	BeneficiaryCreditorAgentCountrysubdivision:        whereHelpernull_String{field: `beneficiary_creditor_agent_countrysubdivision`},
	BeneficiaryCreditorAgentCountry:                   whereHelpernull_String{field: `beneficiary_creditor_agent_country`},
	MakerDate:                                         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                                       whereHelpernull_Time{field: `checker_date`},
	MakerID:                                           whereHelperstring{field: `maker_id`},
	CheckerID:                                         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                                        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                                      whereHelpernull_Time{field: `modified_date`},
}

// BeneficiaryRels is where relationship names are stored.
var BeneficiaryRels = struct {
	DebtorAccountOwner string
	DebtorAccount      string
	Bank               string
}{
	DebtorAccountOwner: "DebtorAccountOwner",
	DebtorAccount:      "DebtorAccount",
	Bank:               "Bank",
}

// beneficiaryR is where relationships are stored.
type beneficiaryR struct {
	DebtorAccountOwner *AccountOwner
	DebtorAccount      *Account
	Bank               *Bank
}

// NewStruct creates a new relationship struct
func (*beneficiaryR) NewStruct() *beneficiaryR {
	return &beneficiaryR{}
}

// beneficiaryL is where Load methods for each relationship are stored.
type beneficiaryL struct{}

var (
	beneficiaryColumns               = []string{"beneficiary_id", "debtor_account_id", "debtor_account_owner_id", "bank_id", "beneficiary_account_ref_id", "beneficiary_ref_id", "beneficiary_tran_reference", "beneficiary_bank_code", "beneficiary_bank_name", "beneficiary_creditor_agent_schemename", "beneficiary_creditor_agent_identification", "beneficiary_creditor_account_schemename", "beneficiary_creditor_account_identification", "beneficiary_creditor_account_secondary_identification", "beneficiary_creditor_account_name", "reference", "beneficiary_creditor_agent_name", "beneficiary_creditor_agent_address_type", "beneficiary_creditor_agent_department", "beneficiary_creditor_agent_subdepartment", "beneficiary_creditor_agent_street_name", "beneficiary_creditor_agent_building_number", "beneficiary_creditor_agent_townname", "beneficiary_creditor_agent_addressline1", "beneficiary_creditor_agent_addressline2", "beneficiary_creditor_agent_addressline3", "beneficiary_creditor_agent_addressline4", "beneficiary_creditor_agent_addressline5", "beneficiary_creditor_agent_addressline6", "beneficiary_creditor_agent_addressline7", "beneficiary_creditor_agent_postcode", "beneficiary_creditor_agent_countrysubdivision", "beneficiary_creditor_agent_country", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	beneficiaryColumnsWithoutDefault = []string{"beneficiary_id", "debtor_account_id", "debtor_account_owner_id", "bank_id", "beneficiary_account_ref_id", "beneficiary_ref_id", "beneficiary_tran_reference", "beneficiary_bank_code", "beneficiary_bank_name", "beneficiary_creditor_agent_schemename", "beneficiary_creditor_agent_identification", "beneficiary_creditor_account_schemename", "beneficiary_creditor_account_identification", "beneficiary_creditor_account_secondary_identification", "beneficiary_creditor_account_name", "reference", "beneficiary_creditor_agent_name", "beneficiary_creditor_agent_address_type", "beneficiary_creditor_agent_department", "beneficiary_creditor_agent_subdepartment", "beneficiary_creditor_agent_street_name", "beneficiary_creditor_agent_building_number", "beneficiary_creditor_agent_townname", "beneficiary_creditor_agent_addressline1", "beneficiary_creditor_agent_addressline2", "beneficiary_creditor_agent_addressline3", "beneficiary_creditor_agent_addressline4", "beneficiary_creditor_agent_addressline5", "beneficiary_creditor_agent_addressline6", "beneficiary_creditor_agent_addressline7", "beneficiary_creditor_agent_postcode", "beneficiary_creditor_agent_countrysubdivision", "beneficiary_creditor_agent_country", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	beneficiaryColumnsWithDefault    = []string{}
	beneficiaryPrimaryKeyColumns     = []string{"beneficiary_id"}
)

type (
	// BeneficiarySlice is an alias for a slice of pointers to Beneficiary.
	// This should generally be used opposed to []Beneficiary.
	BeneficiarySlice []*Beneficiary
	// BeneficiaryHook is the signature for custom Beneficiary hook methods
	BeneficiaryHook func(context.Context, boil.ContextExecutor, *Beneficiary) error

	beneficiaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	beneficiaryType                 = reflect.TypeOf(&Beneficiary{})
	beneficiaryMapping              = queries.MakeStructMapping(beneficiaryType)
	beneficiaryPrimaryKeyMapping, _ = queries.BindMapping(beneficiaryType, beneficiaryMapping, beneficiaryPrimaryKeyColumns)
	beneficiaryInsertCacheMut       sync.RWMutex
	beneficiaryInsertCache          = make(map[string]insertCache)
	beneficiaryUpdateCacheMut       sync.RWMutex
	beneficiaryUpdateCache          = make(map[string]updateCache)
	beneficiaryUpsertCacheMut       sync.RWMutex
	beneficiaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var beneficiaryBeforeInsertHooks []BeneficiaryHook
var beneficiaryBeforeUpdateHooks []BeneficiaryHook
var beneficiaryBeforeDeleteHooks []BeneficiaryHook
var beneficiaryBeforeUpsertHooks []BeneficiaryHook

var beneficiaryAfterInsertHooks []BeneficiaryHook
var beneficiaryAfterSelectHooks []BeneficiaryHook
var beneficiaryAfterUpdateHooks []BeneficiaryHook
var beneficiaryAfterDeleteHooks []BeneficiaryHook
var beneficiaryAfterUpsertHooks []BeneficiaryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Beneficiary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Beneficiary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Beneficiary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Beneficiary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Beneficiary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Beneficiary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Beneficiary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Beneficiary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Beneficiary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beneficiaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBeneficiaryHook registers your hook function for all future operations.
func AddBeneficiaryHook(hookPoint boil.HookPoint, beneficiaryHook BeneficiaryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		beneficiaryBeforeInsertHooks = append(beneficiaryBeforeInsertHooks, beneficiaryHook)
	case boil.BeforeUpdateHook:
		beneficiaryBeforeUpdateHooks = append(beneficiaryBeforeUpdateHooks, beneficiaryHook)
	case boil.BeforeDeleteHook:
		beneficiaryBeforeDeleteHooks = append(beneficiaryBeforeDeleteHooks, beneficiaryHook)
	case boil.BeforeUpsertHook:
		beneficiaryBeforeUpsertHooks = append(beneficiaryBeforeUpsertHooks, beneficiaryHook)
	case boil.AfterInsertHook:
		beneficiaryAfterInsertHooks = append(beneficiaryAfterInsertHooks, beneficiaryHook)
	case boil.AfterSelectHook:
		beneficiaryAfterSelectHooks = append(beneficiaryAfterSelectHooks, beneficiaryHook)
	case boil.AfterUpdateHook:
		beneficiaryAfterUpdateHooks = append(beneficiaryAfterUpdateHooks, beneficiaryHook)
	case boil.AfterDeleteHook:
		beneficiaryAfterDeleteHooks = append(beneficiaryAfterDeleteHooks, beneficiaryHook)
	case boil.AfterUpsertHook:
		beneficiaryAfterUpsertHooks = append(beneficiaryAfterUpsertHooks, beneficiaryHook)
	}
}

// One returns a single beneficiary record from the query.
func (q beneficiaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Beneficiary, error) {
	o := &Beneficiary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Beneficiary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Beneficiary records from the query.
func (q beneficiaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (BeneficiarySlice, error) {
	var o []*Beneficiary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Beneficiary slice")
	}

	if len(beneficiaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Beneficiary records in the query.
func (q beneficiaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Beneficiary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q beneficiaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Beneficiary exists")
	}

	return count > 0, nil
}

// DebtorAccountOwner pointed to by the foreign key.
func (o *Beneficiary) DebtorAccountOwner(mods ...qm.QueryMod) accountOwnerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_owner_id=?", o.DebtorAccountOwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := AccountOwners(queryMods...)
	queries.SetFrom(query.Query, "`AccountOwners`")

	return query
}

// DebtorAccount pointed to by the foreign key.
func (o *Beneficiary) DebtorAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.DebtorAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Bank pointed to by the foreign key.
func (o *Beneficiary) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// LoadDebtorAccountOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beneficiaryL) LoadDebtorAccountOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeneficiary interface{}, mods queries.Applicator) error {
	var slice []*Beneficiary
	var object *Beneficiary

	if singular {
		object = maybeBeneficiary.(*Beneficiary)
	} else {
		slice = *maybeBeneficiary.(*[]*Beneficiary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beneficiaryR{}
		}
		args = append(args, object.DebtorAccountOwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beneficiaryR{}
			}

			for _, a := range args {
				if a == obj.DebtorAccountOwnerID {
					continue Outer
				}
			}

			args = append(args, obj.DebtorAccountOwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`AccountOwners`), qm.WhereIn(`account_owner_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AccountOwner")
	}

	var resultSlice []*AccountOwner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AccountOwner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AccountOwners")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AccountOwners")
	}

	if len(beneficiaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebtorAccountOwner = foreign
		if foreign.R == nil {
			foreign.R = &accountOwnerR{}
		}
		foreign.R.DebtorAccountOwnerBeneficiaries = append(foreign.R.DebtorAccountOwnerBeneficiaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebtorAccountOwnerID == foreign.AccountOwnerID {
				local.R.DebtorAccountOwner = foreign
				if foreign.R == nil {
					foreign.R = &accountOwnerR{}
				}
				foreign.R.DebtorAccountOwnerBeneficiaries = append(foreign.R.DebtorAccountOwnerBeneficiaries, local)
				break
			}
		}
	}

	return nil
}

// LoadDebtorAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beneficiaryL) LoadDebtorAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeneficiary interface{}, mods queries.Applicator) error {
	var slice []*Beneficiary
	var object *Beneficiary

	if singular {
		object = maybeBeneficiary.(*Beneficiary)
	} else {
		slice = *maybeBeneficiary.(*[]*Beneficiary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beneficiaryR{}
		}
		args = append(args, object.DebtorAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beneficiaryR{}
			}

			for _, a := range args {
				if a == obj.DebtorAccountID {
					continue Outer
				}
			}

			args = append(args, obj.DebtorAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(beneficiaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebtorAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.DebtorAccountBeneficiaries = append(foreign.R.DebtorAccountBeneficiaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebtorAccountID == foreign.AccountID {
				local.R.DebtorAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.DebtorAccountBeneficiaries = append(foreign.R.DebtorAccountBeneficiaries, local)
				break
			}
		}
	}

	return nil
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beneficiaryL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeneficiary interface{}, mods queries.Applicator) error {
	var slice []*Beneficiary
	var object *Beneficiary

	if singular {
		object = maybeBeneficiary.(*Beneficiary)
	} else {
		slice = *maybeBeneficiary.(*[]*Beneficiary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beneficiaryR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beneficiaryR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(beneficiaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankBeneficiaries = append(foreign.R.BankBeneficiaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankBeneficiaries = append(foreign.R.BankBeneficiaries, local)
				break
			}
		}
	}

	return nil
}

// SetDebtorAccountOwner of the beneficiary to the related item.
// Sets o.R.DebtorAccountOwner to related.
// Adds o to related.R.DebtorAccountOwnerBeneficiaries.
func (o *Beneficiary) SetDebtorAccountOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AccountOwner) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Beneficiary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"debtor_account_owner_id"}),
		strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountOwnerID, o.BeneficiaryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebtorAccountOwnerID = related.AccountOwnerID
	if o.R == nil {
		o.R = &beneficiaryR{
			DebtorAccountOwner: related,
		}
	} else {
		o.R.DebtorAccountOwner = related
	}

	if related.R == nil {
		related.R = &accountOwnerR{
			DebtorAccountOwnerBeneficiaries: BeneficiarySlice{o},
		}
	} else {
		related.R.DebtorAccountOwnerBeneficiaries = append(related.R.DebtorAccountOwnerBeneficiaries, o)
	}

	return nil
}

// SetDebtorAccount of the beneficiary to the related item.
// Sets o.R.DebtorAccount to related.
// Adds o to related.R.DebtorAccountBeneficiaries.
func (o *Beneficiary) SetDebtorAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Beneficiary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"debtor_account_id"}),
		strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.BeneficiaryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebtorAccountID = related.AccountID
	if o.R == nil {
		o.R = &beneficiaryR{
			DebtorAccount: related,
		}
	} else {
		o.R.DebtorAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			DebtorAccountBeneficiaries: BeneficiarySlice{o},
		}
	} else {
		related.R.DebtorAccountBeneficiaries = append(related.R.DebtorAccountBeneficiaries, o)
	}

	return nil
}

// SetBank of the beneficiary to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankBeneficiaries.
func (o *Beneficiary) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Beneficiary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.BeneficiaryID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &beneficiaryR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankBeneficiaries: BeneficiarySlice{o},
		}
	} else {
		related.R.BankBeneficiaries = append(related.R.BankBeneficiaries, o)
	}

	return nil
}

// Beneficiaries retrieves all the records using an executor.
func Beneficiaries(mods ...qm.QueryMod) beneficiaryQuery {
	mods = append(mods, qm.From("`Beneficiary`"))
	return beneficiaryQuery{NewQuery(mods...)}
}

// FindBeneficiary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBeneficiary(ctx context.Context, exec boil.ContextExecutor, beneficiaryID int, selectCols ...string) (*Beneficiary, error) {
	beneficiaryObj := &Beneficiary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Beneficiary` where `beneficiary_id`=?", sel,
	)

	q := queries.Raw(query, beneficiaryID)

	err := q.Bind(ctx, exec, beneficiaryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Beneficiary")
	}

	return beneficiaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Beneficiary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Beneficiary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beneficiaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	beneficiaryInsertCacheMut.RLock()
	cache, cached := beneficiaryInsertCache[key]
	beneficiaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			beneficiaryColumns,
			beneficiaryColumnsWithDefault,
			beneficiaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Beneficiary` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Beneficiary` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Beneficiary` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Beneficiary")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BeneficiaryID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Beneficiary")
	}

CacheNoHooks:
	if !cached {
		beneficiaryInsertCacheMut.Lock()
		beneficiaryInsertCache[key] = cache
		beneficiaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Beneficiary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Beneficiary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	beneficiaryUpdateCacheMut.RLock()
	cache, cached := beneficiaryUpdateCache[key]
	beneficiaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			beneficiaryColumns,
			beneficiaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Beneficiary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Beneficiary` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, append(wl, beneficiaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Beneficiary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Beneficiary")
	}

	if !cached {
		beneficiaryUpdateCacheMut.Lock()
		beneficiaryUpdateCache[key] = cache
		beneficiaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q beneficiaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Beneficiary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BeneficiarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Beneficiary` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beneficiaryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in beneficiary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all beneficiary")
	}
	return rowsAff, nil
}

var mySQLBeneficiaryUniqueColumns = []string{
	"beneficiary_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Beneficiary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Beneficiary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beneficiaryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBeneficiaryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	beneficiaryUpsertCacheMut.RLock()
	cache, cached := beneficiaryUpsertCache[key]
	beneficiaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			beneficiaryColumns,
			beneficiaryColumnsWithDefault,
			beneficiaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			beneficiaryColumns,
			beneficiaryPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Beneficiary, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Beneficiary", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Beneficiary` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Beneficiary")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Beneficiary")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Beneficiary")
	}

CacheNoHooks:
	if !cached {
		beneficiaryUpsertCacheMut.Lock()
		beneficiaryUpsertCache[key] = cache
		beneficiaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Beneficiary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Beneficiary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Beneficiary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), beneficiaryPrimaryKeyMapping)
	sql := "DELETE FROM `Beneficiary` WHERE `beneficiary_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Beneficiary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q beneficiaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no beneficiaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Beneficiary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BeneficiarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Beneficiary slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(beneficiaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Beneficiary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beneficiaryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from beneficiary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Beneficiary")
	}

	if len(beneficiaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Beneficiary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBeneficiary(ctx, exec, o.BeneficiaryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BeneficiarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BeneficiarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Beneficiary`.* FROM `Beneficiary` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beneficiaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BeneficiarySlice")
	}

	*o = slice

	return nil
}

// BeneficiaryExists checks if the Beneficiary row exists.
func BeneficiaryExists(ctx context.Context, exec boil.ContextExecutor, beneficiaryID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Beneficiary` where `beneficiary_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, beneficiaryID)
	}

	row := exec.QueryRowContext(ctx, sql, beneficiaryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Beneficiary exists")
	}

	return exists, nil
}
