// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// StatementBenefit is an object representing the database table.
type StatementBenefit struct {
	StatementBenefitID       int               `boil:"statement_benefit_id" json:"statement_benefit_id" toml:"statement_benefit_id" yaml:"statement_benefit_id"`
	StatementID              int               `boil:"statement_id" json:"statement_id" toml:"statement_id" yaml:"statement_id"`
	StatementBenefitType     null.String       `boil:"statement_benefit_type" json:"statement_benefit_type,omitempty" toml:"statement_benefit_type" yaml:"statement_benefit_type,omitempty"`
	StatementBenefitAmount   types.NullDecimal `boil:"statement_benefit_amount" json:"statement_benefit_amount,omitempty" toml:"statement_benefit_amount" yaml:"statement_benefit_amount,omitempty"`
	StatementBenefitCurrency null.String       `boil:"statement_benefit_currency" json:"statement_benefit_currency,omitempty" toml:"statement_benefit_currency" yaml:"statement_benefit_currency,omitempty"`
	MakerDate                time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate              null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                  string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy               string            `boil:"modified_by" json:"modified_by" toml:"modified_by" yaml:"modified_by"`
	ModifiedDate             time.Time         `boil:"modified_date" json:"modified_date" toml:"modified_date" yaml:"modified_date"`

	R *statementBenefitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statementBenefitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatementBenefitColumns = struct {
	StatementBenefitID       string
	StatementID              string
	StatementBenefitType     string
	StatementBenefitAmount   string
	StatementBenefitCurrency string
	MakerDate                string
	CheckerDate              string
	MakerID                  string
	CheckerID                string
	ModifiedBy               string
	ModifiedDate             string
}{
	StatementBenefitID:       "statement_benefit_id",
	StatementID:              "statement_id",
	StatementBenefitType:     "statement_benefit_type",
	StatementBenefitAmount:   "statement_benefit_amount",
	StatementBenefitCurrency: "statement_benefit_currency",
	MakerDate:                "maker_date",
	CheckerDate:              "checker_date",
	MakerID:                  "maker_id",
	CheckerID:                "checker_id",
	ModifiedBy:               "modified_by",
	ModifiedDate:             "modified_date",
}

// Generated where

var StatementBenefitWhere = struct {
	StatementBenefitID       whereHelperint
	StatementID              whereHelperint
	StatementBenefitType     whereHelpernull_String
	StatementBenefitAmount   whereHelpertypes_NullDecimal
	StatementBenefitCurrency whereHelpernull_String
	MakerDate                whereHelpertime_Time
	CheckerDate              whereHelpernull_Time
	MakerID                  whereHelperstring
	CheckerID                whereHelpernull_String
	ModifiedBy               whereHelperstring
	ModifiedDate             whereHelpertime_Time
}{
	StatementBenefitID:       whereHelperint{field: `statement_benefit_id`},
	StatementID:              whereHelperint{field: `statement_id`},
	StatementBenefitType:     whereHelpernull_String{field: `statement_benefit_type`},
	StatementBenefitAmount:   whereHelpertypes_NullDecimal{field: `statement_benefit_amount`},
	StatementBenefitCurrency: whereHelpernull_String{field: `statement_benefit_currency`},
	MakerDate:                whereHelpertime_Time{field: `maker_date`},
	CheckerDate:              whereHelpernull_Time{field: `checker_date`},
	MakerID:                  whereHelperstring{field: `maker_id`},
	CheckerID:                whereHelpernull_String{field: `checker_id`},
	ModifiedBy:               whereHelperstring{field: `modified_by`},
	ModifiedDate:             whereHelpertime_Time{field: `modified_date`},
}

// StatementBenefitRels is where relationship names are stored.
var StatementBenefitRels = struct {
	Statement string
}{
	Statement: "Statement",
}

// statementBenefitR is where relationships are stored.
type statementBenefitR struct {
	Statement *Statement
}

// NewStruct creates a new relationship struct
func (*statementBenefitR) NewStruct() *statementBenefitR {
	return &statementBenefitR{}
}

// statementBenefitL is where Load methods for each relationship are stored.
type statementBenefitL struct{}

var (
	statementBenefitColumns               = []string{"statement_benefit_id", "statement_id", "statement_benefit_type", "statement_benefit_amount", "statement_benefit_currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementBenefitColumnsWithoutDefault = []string{"statement_benefit_id", "statement_id", "statement_benefit_type", "statement_benefit_amount", "statement_benefit_currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementBenefitColumnsWithDefault    = []string{}
	statementBenefitPrimaryKeyColumns     = []string{"statement_benefit_id"}
)

type (
	// StatementBenefitSlice is an alias for a slice of pointers to StatementBenefit.
	// This should generally be used opposed to []StatementBenefit.
	StatementBenefitSlice []*StatementBenefit
	// StatementBenefitHook is the signature for custom StatementBenefit hook methods
	StatementBenefitHook func(context.Context, boil.ContextExecutor, *StatementBenefit) error

	statementBenefitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statementBenefitType                 = reflect.TypeOf(&StatementBenefit{})
	statementBenefitMapping              = queries.MakeStructMapping(statementBenefitType)
	statementBenefitPrimaryKeyMapping, _ = queries.BindMapping(statementBenefitType, statementBenefitMapping, statementBenefitPrimaryKeyColumns)
	statementBenefitInsertCacheMut       sync.RWMutex
	statementBenefitInsertCache          = make(map[string]insertCache)
	statementBenefitUpdateCacheMut       sync.RWMutex
	statementBenefitUpdateCache          = make(map[string]updateCache)
	statementBenefitUpsertCacheMut       sync.RWMutex
	statementBenefitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statementBenefitBeforeInsertHooks []StatementBenefitHook
var statementBenefitBeforeUpdateHooks []StatementBenefitHook
var statementBenefitBeforeDeleteHooks []StatementBenefitHook
var statementBenefitBeforeUpsertHooks []StatementBenefitHook

var statementBenefitAfterInsertHooks []StatementBenefitHook
var statementBenefitAfterSelectHooks []StatementBenefitHook
var statementBenefitAfterUpdateHooks []StatementBenefitHook
var statementBenefitAfterDeleteHooks []StatementBenefitHook
var statementBenefitAfterUpsertHooks []StatementBenefitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StatementBenefit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StatementBenefit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StatementBenefit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StatementBenefit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StatementBenefit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StatementBenefit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StatementBenefit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StatementBenefit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StatementBenefit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementBenefitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatementBenefitHook registers your hook function for all future operations.
func AddStatementBenefitHook(hookPoint boil.HookPoint, statementBenefitHook StatementBenefitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statementBenefitBeforeInsertHooks = append(statementBenefitBeforeInsertHooks, statementBenefitHook)
	case boil.BeforeUpdateHook:
		statementBenefitBeforeUpdateHooks = append(statementBenefitBeforeUpdateHooks, statementBenefitHook)
	case boil.BeforeDeleteHook:
		statementBenefitBeforeDeleteHooks = append(statementBenefitBeforeDeleteHooks, statementBenefitHook)
	case boil.BeforeUpsertHook:
		statementBenefitBeforeUpsertHooks = append(statementBenefitBeforeUpsertHooks, statementBenefitHook)
	case boil.AfterInsertHook:
		statementBenefitAfterInsertHooks = append(statementBenefitAfterInsertHooks, statementBenefitHook)
	case boil.AfterSelectHook:
		statementBenefitAfterSelectHooks = append(statementBenefitAfterSelectHooks, statementBenefitHook)
	case boil.AfterUpdateHook:
		statementBenefitAfterUpdateHooks = append(statementBenefitAfterUpdateHooks, statementBenefitHook)
	case boil.AfterDeleteHook:
		statementBenefitAfterDeleteHooks = append(statementBenefitAfterDeleteHooks, statementBenefitHook)
	case boil.AfterUpsertHook:
		statementBenefitAfterUpsertHooks = append(statementBenefitAfterUpsertHooks, statementBenefitHook)
	}
}

// One returns a single statementBenefit record from the query.
func (q statementBenefitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StatementBenefit, error) {
	o := &StatementBenefit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for StatementBenefit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StatementBenefit records from the query.
func (q statementBenefitQuery) All(ctx context.Context, exec boil.ContextExecutor) (StatementBenefitSlice, error) {
	var o []*StatementBenefit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StatementBenefit slice")
	}

	if len(statementBenefitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StatementBenefit records in the query.
func (q statementBenefitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count StatementBenefit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statementBenefitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if StatementBenefit exists")
	}

	return count > 0, nil
}

// Statement pointed to by the foreign key.
func (o *StatementBenefit) Statement(mods ...qm.QueryMod) statementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("statement_id=?", o.StatementID),
	}

	queryMods = append(queryMods, mods...)

	query := Statements(queryMods...)
	queries.SetFrom(query.Query, "`Statement`")

	return query
}

// LoadStatement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statementBenefitL) LoadStatement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStatementBenefit interface{}, mods queries.Applicator) error {
	var slice []*StatementBenefit
	var object *StatementBenefit

	if singular {
		object = maybeStatementBenefit.(*StatementBenefit)
	} else {
		slice = *maybeStatementBenefit.(*[]*StatementBenefit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statementBenefitR{}
		}
		args = append(args, object.StatementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statementBenefitR{}
			}

			for _, a := range args {
				if a == obj.StatementID {
					continue Outer
				}
			}

			args = append(args, obj.StatementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Statement`), qm.WhereIn(`statement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Statement")
	}

	var resultSlice []*Statement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Statement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Statement")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Statement")
	}

	if len(statementBenefitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Statement = foreign
		if foreign.R == nil {
			foreign.R = &statementR{}
		}
		foreign.R.StatementStatementBenefits = append(foreign.R.StatementStatementBenefits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StatementID == foreign.StatementID {
				local.R.Statement = foreign
				if foreign.R == nil {
					foreign.R = &statementR{}
				}
				foreign.R.StatementStatementBenefits = append(foreign.R.StatementStatementBenefits, local)
				break
			}
		}
	}

	return nil
}

// SetStatement of the statementBenefit to the related item.
// Sets o.R.Statement to related.
// Adds o to related.R.StatementStatementBenefits.
func (o *StatementBenefit) SetStatement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Statement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `StatementBenefit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"statement_id"}),
		strmangle.WhereClause("`", "`", 0, statementBenefitPrimaryKeyColumns),
	)
	values := []interface{}{related.StatementID, o.StatementBenefitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StatementID = related.StatementID
	if o.R == nil {
		o.R = &statementBenefitR{
			Statement: related,
		}
	} else {
		o.R.Statement = related
	}

	if related.R == nil {
		related.R = &statementR{
			StatementStatementBenefits: StatementBenefitSlice{o},
		}
	} else {
		related.R.StatementStatementBenefits = append(related.R.StatementStatementBenefits, o)
	}

	return nil
}

// StatementBenefits retrieves all the records using an executor.
func StatementBenefits(mods ...qm.QueryMod) statementBenefitQuery {
	mods = append(mods, qm.From("`StatementBenefit`"))
	return statementBenefitQuery{NewQuery(mods...)}
}

// FindStatementBenefit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatementBenefit(ctx context.Context, exec boil.ContextExecutor, statementBenefitID int, selectCols ...string) (*StatementBenefit, error) {
	statementBenefitObj := &StatementBenefit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `StatementBenefit` where `statement_benefit_id`=?", sel,
	)

	q := queries.Raw(query, statementBenefitID)

	err := q.Bind(ctx, exec, statementBenefitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from StatementBenefit")
	}

	return statementBenefitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StatementBenefit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementBenefit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementBenefitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statementBenefitInsertCacheMut.RLock()
	cache, cached := statementBenefitInsertCache[key]
	statementBenefitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statementBenefitColumns,
			statementBenefitColumnsWithDefault,
			statementBenefitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `StatementBenefit` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `StatementBenefit` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `StatementBenefit` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, statementBenefitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into StatementBenefit")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StatementBenefitID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementBenefit")
	}

CacheNoHooks:
	if !cached {
		statementBenefitInsertCacheMut.Lock()
		statementBenefitInsertCache[key] = cache
		statementBenefitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StatementBenefit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StatementBenefit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	statementBenefitUpdateCacheMut.RLock()
	cache, cached := statementBenefitUpdateCache[key]
	statementBenefitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statementBenefitColumns,
			statementBenefitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update StatementBenefit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `StatementBenefit` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, statementBenefitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, append(wl, statementBenefitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update StatementBenefit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for StatementBenefit")
	}

	if !cached {
		statementBenefitUpdateCacheMut.Lock()
		statementBenefitUpdateCache[key] = cache
		statementBenefitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statementBenefitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for StatementBenefit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for StatementBenefit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatementBenefitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementBenefitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `StatementBenefit` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementBenefitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in statementBenefit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all statementBenefit")
	}
	return rowsAff, nil
}

var mySQLStatementBenefitUniqueColumns = []string{
	"statement_benefit_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StatementBenefit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementBenefit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementBenefitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStatementBenefitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statementBenefitUpsertCacheMut.RLock()
	cache, cached := statementBenefitUpsertCache[key]
	statementBenefitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statementBenefitColumns,
			statementBenefitColumnsWithDefault,
			statementBenefitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			statementBenefitColumns,
			statementBenefitPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert StatementBenefit, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "StatementBenefit", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `StatementBenefit` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for StatementBenefit")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(statementBenefitType, statementBenefitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for StatementBenefit")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementBenefit")
	}

CacheNoHooks:
	if !cached {
		statementBenefitUpsertCacheMut.Lock()
		statementBenefitUpsertCache[key] = cache
		statementBenefitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StatementBenefit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StatementBenefit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementBenefit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statementBenefitPrimaryKeyMapping)
	sql := "DELETE FROM `StatementBenefit` WHERE `statement_benefit_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from StatementBenefit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for StatementBenefit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statementBenefitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no statementBenefitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from StatementBenefit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementBenefit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatementBenefitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementBenefit slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(statementBenefitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementBenefitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `StatementBenefit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementBenefitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from statementBenefit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementBenefit")
	}

	if len(statementBenefitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StatementBenefit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStatementBenefit(ctx, exec, o.StatementBenefitID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatementBenefitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatementBenefitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementBenefitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `StatementBenefit`.* FROM `StatementBenefit` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementBenefitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StatementBenefitSlice")
	}

	*o = slice

	return nil
}

// StatementBenefitExists checks if the StatementBenefit row exists.
func StatementBenefitExists(ctx context.Context, exec boil.ContextExecutor, statementBenefitID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `StatementBenefit` where `statement_benefit_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, statementBenefitID)
	}

	row := exec.QueryRowContext(ctx, sql, statementBenefitID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if StatementBenefit exists")
	}

	return exists, nil
}
