// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Organization is an object representing the database table.
type Organization struct {
	PartyID               int               `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BankID                null.Int          `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	OrganisationName      string            `boil:"organisation_name" json:"organisation_name" toml:"organisation_name" yaml:"organisation_name"`
	OrganizationTypeID    null.Int          `boil:"organization_type_id" json:"organization_type_id,omitempty" toml:"organization_type_id" yaml:"organization_type_id,omitempty"`
	ParentOrganisation    null.Int          `boil:"parent_organisation" json:"parent_organisation,omitempty" toml:"parent_organisation" yaml:"parent_organisation,omitempty"`
	RegistrationNumber    string            `boil:"registration_number" json:"registration_number" toml:"registration_number" yaml:"registration_number"`
	Active                null.String       `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	DateOfEstablishment   null.Time         `boil:"date_of_establishment" json:"date_of_establishment,omitempty" toml:"date_of_establishment" yaml:"date_of_establishment,omitempty"`
	OrganizationRisk      types.NullDecimal `boil:"organization_risk" json:"organization_risk,omitempty" toml:"organization_risk" yaml:"organization_risk,omitempty"`
	CreditReviewTimeframe time.Time         `boil:"credit_review_timeframe" json:"credit_review_timeframe" toml:"credit_review_timeframe" yaml:"credit_review_timeframe"`
	Servicelevel          null.String       `boil:"servicelevel" json:"servicelevel,omitempty" toml:"servicelevel" yaml:"servicelevel,omitempty"`
	OriginatingBranchID   int               `boil:"originating_branch_id" json:"originating_branch_id" toml:"originating_branch_id" yaml:"originating_branch_id"`
	PreferredBranchID     int               `boil:"preferred_branch_id" json:"preferred_branch_id" toml:"preferred_branch_id" yaml:"preferred_branch_id"`
	ResponsibleBranchID   int               `boil:"responsible_branch_id" json:"responsible_branch_id" toml:"responsible_branch_id" yaml:"responsible_branch_id"`
	ResidenceCountry      null.String       `boil:"residence_country" json:"residence_country,omitempty" toml:"residence_country" yaml:"residence_country,omitempty"`
	TaxResidenceCountry   null.String       `boil:"tax_residence_country" json:"tax_residence_country,omitempty" toml:"tax_residence_country" yaml:"tax_residence_country,omitempty"`
	TaxExempt             null.String       `boil:"tax_exempt" json:"tax_exempt,omitempty" toml:"tax_exempt" yaml:"tax_exempt,omitempty"`
	LegalForm             null.String       `boil:"legal_form" json:"legal_form,omitempty" toml:"legal_form" yaml:"legal_form,omitempty"`
	NumEmployees          int               `boil:"num_employees" json:"num_employees" toml:"num_employees" yaml:"num_employees"`
	FiscalID              null.Int          `boil:"fiscal_id" json:"fiscal_id,omitempty" toml:"fiscal_id" yaml:"fiscal_id,omitempty"`
	FinancialReportsURL   string            `boil:"financial_reports_url" json:"financial_reports_url" toml:"financial_reports_url" yaml:"financial_reports_url"`
	MakerDate             time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate           null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID               string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID             null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy            null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate          null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *organizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationColumns = struct {
	PartyID               string
	BankID                string
	OrganisationName      string
	OrganizationTypeID    string
	ParentOrganisation    string
	RegistrationNumber    string
	Active                string
	DateOfEstablishment   string
	OrganizationRisk      string
	CreditReviewTimeframe string
	Servicelevel          string
	OriginatingBranchID   string
	PreferredBranchID     string
	ResponsibleBranchID   string
	ResidenceCountry      string
	TaxResidenceCountry   string
	TaxExempt             string
	LegalForm             string
	NumEmployees          string
	FiscalID              string
	FinancialReportsURL   string
	MakerDate             string
	CheckerDate           string
	MakerID               string
	CheckerID             string
	ModifiedBy            string
	ModifiedDate          string
}{
	PartyID:               "party_id",
	BankID:                "bank_id",
	OrganisationName:      "organisation_name",
	OrganizationTypeID:    "organization_type_id",
	ParentOrganisation:    "parent_organisation",
	RegistrationNumber:    "registration_number",
	Active:                "active",
	DateOfEstablishment:   "date_of_establishment",
	OrganizationRisk:      "organization_risk",
	CreditReviewTimeframe: "credit_review_timeframe",
	Servicelevel:          "servicelevel",
	OriginatingBranchID:   "originating_branch_id",
	PreferredBranchID:     "preferred_branch_id",
	ResponsibleBranchID:   "responsible_branch_id",
	ResidenceCountry:      "residence_country",
	TaxResidenceCountry:   "tax_residence_country",
	TaxExempt:             "tax_exempt",
	LegalForm:             "legal_form",
	NumEmployees:          "num_employees",
	FiscalID:              "fiscal_id",
	FinancialReportsURL:   "financial_reports_url",
	MakerDate:             "maker_date",
	CheckerDate:           "checker_date",
	MakerID:               "maker_id",
	CheckerID:             "checker_id",
	ModifiedBy:            "modified_by",
	ModifiedDate:          "modified_date",
}

// Generated where

var OrganizationWhere = struct {
	PartyID               whereHelperint
	BankID                whereHelpernull_Int
	OrganisationName      whereHelperstring
	OrganizationTypeID    whereHelpernull_Int
	ParentOrganisation    whereHelpernull_Int
	RegistrationNumber    whereHelperstring
	Active                whereHelpernull_String
	DateOfEstablishment   whereHelpernull_Time
	OrganizationRisk      whereHelpertypes_NullDecimal
	CreditReviewTimeframe whereHelpertime_Time
	Servicelevel          whereHelpernull_String
	OriginatingBranchID   whereHelperint
	PreferredBranchID     whereHelperint
	ResponsibleBranchID   whereHelperint
	ResidenceCountry      whereHelpernull_String
	TaxResidenceCountry   whereHelpernull_String
	TaxExempt             whereHelpernull_String
	LegalForm             whereHelpernull_String
	NumEmployees          whereHelperint
	FiscalID              whereHelpernull_Int
	FinancialReportsURL   whereHelperstring
	MakerDate             whereHelpertime_Time
	CheckerDate           whereHelpernull_Time
	MakerID               whereHelperstring
	CheckerID             whereHelpernull_String
	ModifiedBy            whereHelpernull_String
	ModifiedDate          whereHelpernull_Time
}{
	PartyID:               whereHelperint{field: `party_id`},
	BankID:                whereHelpernull_Int{field: `bank_id`},
	OrganisationName:      whereHelperstring{field: `organisation_name`},
	OrganizationTypeID:    whereHelpernull_Int{field: `organization_type_id`},
	ParentOrganisation:    whereHelpernull_Int{field: `parent_organisation`},
	RegistrationNumber:    whereHelperstring{field: `registration_number`},
	Active:                whereHelpernull_String{field: `active`},
	DateOfEstablishment:   whereHelpernull_Time{field: `date_of_establishment`},
	OrganizationRisk:      whereHelpertypes_NullDecimal{field: `organization_risk`},
	CreditReviewTimeframe: whereHelpertime_Time{field: `credit_review_timeframe`},
	Servicelevel:          whereHelpernull_String{field: `servicelevel`},
	OriginatingBranchID:   whereHelperint{field: `originating_branch_id`},
	PreferredBranchID:     whereHelperint{field: `preferred_branch_id`},
	ResponsibleBranchID:   whereHelperint{field: `responsible_branch_id`},
	ResidenceCountry:      whereHelpernull_String{field: `residence_country`},
	TaxResidenceCountry:   whereHelpernull_String{field: `tax_residence_country`},
	TaxExempt:             whereHelpernull_String{field: `tax_exempt`},
	LegalForm:             whereHelpernull_String{field: `legal_form`},
	NumEmployees:          whereHelperint{field: `num_employees`},
	FiscalID:              whereHelpernull_Int{field: `fiscal_id`},
	FinancialReportsURL:   whereHelperstring{field: `financial_reports_url`},
	MakerDate:             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:           whereHelpernull_Time{field: `checker_date`},
	MakerID:               whereHelperstring{field: `maker_id`},
	CheckerID:             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:            whereHelpernull_String{field: `modified_by`},
	ModifiedDate:          whereHelpernull_Time{field: `modified_date`},
}

// OrganizationRels is where relationship names are stored.
var OrganizationRels = struct {
	Party                                 string
	Bank                                  string
	OrganizationType                      string
	OrganizationPartyOrganizationContacts string
}{
	Party:                                 "Party",
	Bank:                                  "Bank",
	OrganizationType:                      "OrganizationType",
	OrganizationPartyOrganizationContacts: "OrganizationPartyOrganizationContacts",
}

// organizationR is where relationships are stored.
type organizationR struct {
	Party                                 *Party
	Bank                                  *Bank
	OrganizationType                      *OrganizationType
	OrganizationPartyOrganizationContacts OrganizationContactSlice
}

// NewStruct creates a new relationship struct
func (*organizationR) NewStruct() *organizationR {
	return &organizationR{}
}

// organizationL is where Load methods for each relationship are stored.
type organizationL struct{}

var (
	organizationColumns               = []string{"party_id", "bank_id", "organisation_name", "organization_type_id", "parent_organisation", "registration_number", "active", "date_of_establishment", "organization_risk", "credit_review_timeframe", "servicelevel", "originating_branch_id", "preferred_branch_id", "responsible_branch_id", "residence_country", "tax_residence_country", "tax_exempt", "legal_form", "num_employees", "fiscal_id", "financial_reports_url", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationColumnsWithoutDefault = []string{"party_id", "bank_id", "organisation_name", "organization_type_id", "parent_organisation", "registration_number", "active", "date_of_establishment", "organization_risk", "credit_review_timeframe", "servicelevel", "originating_branch_id", "preferred_branch_id", "responsible_branch_id", "residence_country", "tax_residence_country", "tax_exempt", "legal_form", "num_employees", "fiscal_id", "financial_reports_url", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationColumnsWithDefault    = []string{}
	organizationPrimaryKeyColumns     = []string{"party_id"}
)

type (
	// OrganizationSlice is an alias for a slice of pointers to Organization.
	// This should generally be used opposed to []Organization.
	OrganizationSlice []*Organization
	// OrganizationHook is the signature for custom Organization hook methods
	OrganizationHook func(context.Context, boil.ContextExecutor, *Organization) error

	organizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationType                 = reflect.TypeOf(&Organization{})
	organizationMapping              = queries.MakeStructMapping(organizationType)
	organizationPrimaryKeyMapping, _ = queries.BindMapping(organizationType, organizationMapping, organizationPrimaryKeyColumns)
	organizationInsertCacheMut       sync.RWMutex
	organizationInsertCache          = make(map[string]insertCache)
	organizationUpdateCacheMut       sync.RWMutex
	organizationUpdateCache          = make(map[string]updateCache)
	organizationUpsertCacheMut       sync.RWMutex
	organizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationBeforeInsertHooks []OrganizationHook
var organizationBeforeUpdateHooks []OrganizationHook
var organizationBeforeDeleteHooks []OrganizationHook
var organizationBeforeUpsertHooks []OrganizationHook

var organizationAfterInsertHooks []OrganizationHook
var organizationAfterSelectHooks []OrganizationHook
var organizationAfterUpdateHooks []OrganizationHook
var organizationAfterDeleteHooks []OrganizationHook
var organizationAfterUpsertHooks []OrganizationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationHook registers your hook function for all future operations.
func AddOrganizationHook(hookPoint boil.HookPoint, organizationHook OrganizationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationBeforeInsertHooks = append(organizationBeforeInsertHooks, organizationHook)
	case boil.BeforeUpdateHook:
		organizationBeforeUpdateHooks = append(organizationBeforeUpdateHooks, organizationHook)
	case boil.BeforeDeleteHook:
		organizationBeforeDeleteHooks = append(organizationBeforeDeleteHooks, organizationHook)
	case boil.BeforeUpsertHook:
		organizationBeforeUpsertHooks = append(organizationBeforeUpsertHooks, organizationHook)
	case boil.AfterInsertHook:
		organizationAfterInsertHooks = append(organizationAfterInsertHooks, organizationHook)
	case boil.AfterSelectHook:
		organizationAfterSelectHooks = append(organizationAfterSelectHooks, organizationHook)
	case boil.AfterUpdateHook:
		organizationAfterUpdateHooks = append(organizationAfterUpdateHooks, organizationHook)
	case boil.AfterDeleteHook:
		organizationAfterDeleteHooks = append(organizationAfterDeleteHooks, organizationHook)
	case boil.AfterUpsertHook:
		organizationAfterUpsertHooks = append(organizationAfterUpsertHooks, organizationHook)
	}
}

// One returns a single organization record from the query.
func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error) {
	o := &Organization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Organization")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organization records from the query.
func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error) {
	var o []*Organization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Organization slice")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organization records in the query.
func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Organization rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Organization exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *Organization) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// Bank pointed to by the foreign key.
func (o *Organization) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// OrganizationType pointed to by the foreign key.
func (o *Organization) OrganizationType(mods ...qm.QueryMod) organizationTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("organization_type_id=?", o.OrganizationTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationTypes(queryMods...)
	queries.SetFrom(query.Query, "`OrganizationType`")

	return query
}

// OrganizationPartyOrganizationContacts retrieves all the OrganizationContact's OrganizationContacts with an executor via organization_party_id column.
func (o *Organization) OrganizationPartyOrganizationContacts(mods ...qm.QueryMod) organizationContactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`OrganizationContacts`.`organization_party_id`=?", o.PartyID),
	)

	query := OrganizationContacts(queryMods...)
	queries.SetFrom(query.Query, "`OrganizationContacts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`OrganizationContacts`.*"})
	}

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyOrganization = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyOrganization = local
				break
			}
		}
	}

	return nil
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		if !queries.IsNil(object.BankID) {
			args = append(args, object.BankID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BankID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BankID) {
				args = append(args, obj.BankID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankOrganizations = append(foreign.R.BankOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BankID, foreign.BankID) {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankOrganizations = append(foreign.R.BankOrganizations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganizationType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadOrganizationType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		if !queries.IsNil(object.OrganizationTypeID) {
			args = append(args, object.OrganizationTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrganizationTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrganizationTypeID) {
				args = append(args, obj.OrganizationTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`OrganizationType`), qm.WhereIn(`organization_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationType")
	}

	var resultSlice []*OrganizationType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for OrganizationType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for OrganizationType")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganizationType = foreign
		if foreign.R == nil {
			foreign.R = &organizationTypeR{}
		}
		foreign.R.OrganizationTypeOrganizations = append(foreign.R.OrganizationTypeOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationTypeID, foreign.OrganizationTypeID) {
				local.R.OrganizationType = foreign
				if foreign.R == nil {
					foreign.R = &organizationTypeR{}
				}
				foreign.R.OrganizationTypeOrganizations = append(foreign.R.OrganizationTypeOrganizations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganizationPartyOrganizationContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationPartyOrganizationContacts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.PartyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`OrganizationContacts`), qm.WhereIn(`organization_party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationContacts")
	}

	var resultSlice []*OrganizationContact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationContacts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on OrganizationContacts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for OrganizationContacts")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationPartyOrganizationContacts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationContactR{}
			}
			foreign.R.OrganizationParty = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PartyID == foreign.OrganizationPartyID {
				local.R.OrganizationPartyOrganizationContacts = append(local.R.OrganizationPartyOrganizationContacts, foreign)
				if foreign.R == nil {
					foreign.R = &organizationContactR{}
				}
				foreign.R.OrganizationParty = local
				break
			}
		}
	}

	return nil
}

// SetParty of the organization to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyOrganization.
func (o *Organization) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Organization` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &organizationR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyOrganization: o,
		}
	} else {
		related.R.PartyOrganization = o
	}

	return nil
}

// SetBank of the organization to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankOrganizations.
func (o *Organization) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Organization` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BankID, related.BankID)
	if o.R == nil {
		o.R = &organizationR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankOrganizations: OrganizationSlice{o},
		}
	} else {
		related.R.BankOrganizations = append(related.R.BankOrganizations, o)
	}

	return nil
}

// RemoveBank relationship.
// Sets o.R.Bank to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Organization) RemoveBank(ctx context.Context, exec boil.ContextExecutor, related *Bank) error {
	var err error

	queries.SetScanner(&o.BankID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bank_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Bank = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BankOrganizations {
		if queries.Equal(o.BankID, ri.BankID) {
			continue
		}

		ln := len(related.R.BankOrganizations)
		if ln > 1 && i < ln-1 {
			related.R.BankOrganizations[i] = related.R.BankOrganizations[ln-1]
		}
		related.R.BankOrganizations = related.R.BankOrganizations[:ln-1]
		break
	}
	return nil
}

// SetOrganizationType of the organization to the related item.
// Sets o.R.OrganizationType to related.
// Adds o to related.R.OrganizationTypeOrganizations.
func (o *Organization) SetOrganizationType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Organization` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_type_id"}),
		strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.OrganizationTypeID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationTypeID, related.OrganizationTypeID)
	if o.R == nil {
		o.R = &organizationR{
			OrganizationType: related,
		}
	} else {
		o.R.OrganizationType = related
	}

	if related.R == nil {
		related.R = &organizationTypeR{
			OrganizationTypeOrganizations: OrganizationSlice{o},
		}
	} else {
		related.R.OrganizationTypeOrganizations = append(related.R.OrganizationTypeOrganizations, o)
	}

	return nil
}

// RemoveOrganizationType relationship.
// Sets o.R.OrganizationType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Organization) RemoveOrganizationType(ctx context.Context, exec boil.ContextExecutor, related *OrganizationType) error {
	var err error

	queries.SetScanner(&o.OrganizationTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("organization_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.OrganizationType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrganizationTypeOrganizations {
		if queries.Equal(o.OrganizationTypeID, ri.OrganizationTypeID) {
			continue
		}

		ln := len(related.R.OrganizationTypeOrganizations)
		if ln > 1 && i < ln-1 {
			related.R.OrganizationTypeOrganizations[i] = related.R.OrganizationTypeOrganizations[ln-1]
		}
		related.R.OrganizationTypeOrganizations = related.R.OrganizationTypeOrganizations[:ln-1]
		break
	}
	return nil
}

// AddOrganizationPartyOrganizationContacts adds the given related objects to the existing relationships
// of the Organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationPartyOrganizationContacts.
// Sets related.R.OrganizationParty appropriately.
func (o *Organization) AddOrganizationPartyOrganizationContacts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationContact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationPartyID = o.PartyID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `OrganizationContacts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"organization_party_id"}),
				strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
			)
			values := []interface{}{o.PartyID, rel.OrganizationContactID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationPartyID = o.PartyID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationPartyOrganizationContacts: related,
		}
	} else {
		o.R.OrganizationPartyOrganizationContacts = append(o.R.OrganizationPartyOrganizationContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationContactR{
				OrganizationParty: o,
			}
		} else {
			rel.R.OrganizationParty = o
		}
	}
	return nil
}

// Organizations retrieves all the records using an executor.
func Organizations(mods ...qm.QueryMod) organizationQuery {
	mods = append(mods, qm.From("`Organization`"))
	return organizationQuery{NewQuery(mods...)}
}

// FindOrganization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganization(ctx context.Context, exec boil.ContextExecutor, partyID int, selectCols ...string) (*Organization, error) {
	organizationObj := &Organization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Organization` where `party_id`=?", sel,
	)

	q := queries.Raw(query, partyID)

	err := q.Bind(ctx, exec, organizationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Organization")
	}

	return organizationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Organization provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationInsertCacheMut.RLock()
	cache, cached := organizationInsertCache[key]
	organizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Organization` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Organization` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Organization` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Organization")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PartyID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Organization")
	}

CacheNoHooks:
	if !cached {
		organizationInsertCacheMut.Lock()
		organizationInsertCache[key] = cache
		organizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Organization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationUpdateCacheMut.RLock()
	cache, cached := organizationUpdateCache[key]
	organizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationColumns,
			organizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Organization, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Organization` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, append(wl, organizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Organization row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Organization")
	}

	if !cached {
		organizationUpdateCacheMut.Lock()
		organizationUpdateCache[key] = cache
		organizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Organization")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Organization` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organization")
	}
	return rowsAff, nil
}

var mySQLOrganizationUniqueColumns = []string{
	"party_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Organization provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrganizationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationUpsertCacheMut.RLock()
	cache, cached := organizationUpsertCache[key]
	organizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationColumns,
			organizationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Organization, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Organization", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Organization` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Organization")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(organizationType, organizationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Organization")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Organization")
	}

CacheNoHooks:
	if !cached {
		organizationUpsertCacheMut.Lock()
		organizationUpsertCache[key] = cache
		organizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Organization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationPrimaryKeyMapping)
	sql := "DELETE FROM `Organization` WHERE `party_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Organization")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Organization")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Organization slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Organization` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Organization")
	}

	if len(organizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganization(ctx, exec, o.PartyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Organization`.* FROM `Organization` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationSlice")
	}

	*o = slice

	return nil
}

// OrganizationExists checks if the Organization row exists.
func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, partyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Organization` where `party_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, partyID)
	}

	row := exec.QueryRowContext(ctx, sql, partyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Organization exists")
	}

	return exists, nil
}
