// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CurrentHolding is an object representing the database table.
type CurrentHolding struct {
	CurrentHoldingID     int               `boil:"current_holding_id" json:"current_holding_id" toml:"current_holding_id" yaml:"current_holding_id"`
	PortfolioID          int               `boil:"portfolio_id" json:"portfolio_id" toml:"portfolio_id" yaml:"portfolio_id"`
	FundID               int               `boil:"fund_id" json:"fund_id" toml:"fund_id" yaml:"fund_id"`
	DateOfInv            time.Time         `boil:"date_of_inv" json:"date_of_inv" toml:"date_of_inv" yaml:"date_of_inv"`
	AmountInv            types.Decimal     `boil:"amount_inv" json:"amount_inv" toml:"amount_inv" yaml:"amount_inv"`
	Units                null.Int          `boil:"units" json:"units,omitempty" toml:"units" yaml:"units,omitempty"`
	TotalAmountWithdrwan types.NullDecimal `boil:"total_amount_withdrwan" json:"total_amount_withdrwan,omitempty" toml:"total_amount_withdrwan" yaml:"total_amount_withdrwan,omitempty"`
	BankID               int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate            time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *currentHoldingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentHoldingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentHoldingColumns = struct {
	CurrentHoldingID     string
	PortfolioID          string
	FundID               string
	DateOfInv            string
	AmountInv            string
	Units                string
	TotalAmountWithdrwan string
	BankID               string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	CurrentHoldingID:     "current_holding_id",
	PortfolioID:          "portfolio_id",
	FundID:               "fund_id",
	DateOfInv:            "date_of_inv",
	AmountInv:            "amount_inv",
	Units:                "units",
	TotalAmountWithdrwan: "total_amount_withdrwan",
	BankID:               "bank_id",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var CurrentHoldingWhere = struct {
	CurrentHoldingID     whereHelperint
	PortfolioID          whereHelperint
	FundID               whereHelperint
	DateOfInv            whereHelpertime_Time
	AmountInv            whereHelpertypes_Decimal
	Units                whereHelpernull_Int
	TotalAmountWithdrwan whereHelpertypes_NullDecimal
	BankID               whereHelperint
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	CurrentHoldingID:     whereHelperint{field: `current_holding_id`},
	PortfolioID:          whereHelperint{field: `portfolio_id`},
	FundID:               whereHelperint{field: `fund_id`},
	DateOfInv:            whereHelpertime_Time{field: `date_of_inv`},
	AmountInv:            whereHelpertypes_Decimal{field: `amount_inv`},
	Units:                whereHelpernull_Int{field: `units`},
	TotalAmountWithdrwan: whereHelpertypes_NullDecimal{field: `total_amount_withdrwan`},
	BankID:               whereHelperint{field: `bank_id`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// CurrentHoldingRels is where relationship names are stored.
var CurrentHoldingRels = struct {
	Fund      string
	Portfolio string
}{
	Fund:      "Fund",
	Portfolio: "Portfolio",
}

// currentHoldingR is where relationships are stored.
type currentHoldingR struct {
	Fund      *FundDescription
	Portfolio *Portfolio
}

// NewStruct creates a new relationship struct
func (*currentHoldingR) NewStruct() *currentHoldingR {
	return &currentHoldingR{}
}

// currentHoldingL is where Load methods for each relationship are stored.
type currentHoldingL struct{}

var (
	currentHoldingColumns               = []string{"current_holding_id", "portfolio_id", "fund_id", "date_of_inv", "amount_inv", "units", "total_amount_withdrwan", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	currentHoldingColumnsWithoutDefault = []string{"fund_id", "date_of_inv", "amount_inv", "units", "total_amount_withdrwan", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	currentHoldingColumnsWithDefault    = []string{"current_holding_id", "portfolio_id"}
	currentHoldingPrimaryKeyColumns     = []string{"current_holding_id"}
)

type (
	// CurrentHoldingSlice is an alias for a slice of pointers to CurrentHolding.
	// This should generally be used opposed to []CurrentHolding.
	CurrentHoldingSlice []*CurrentHolding
	// CurrentHoldingHook is the signature for custom CurrentHolding hook methods
	CurrentHoldingHook func(context.Context, boil.ContextExecutor, *CurrentHolding) error

	currentHoldingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentHoldingType                 = reflect.TypeOf(&CurrentHolding{})
	currentHoldingMapping              = queries.MakeStructMapping(currentHoldingType)
	currentHoldingPrimaryKeyMapping, _ = queries.BindMapping(currentHoldingType, currentHoldingMapping, currentHoldingPrimaryKeyColumns)
	currentHoldingInsertCacheMut       sync.RWMutex
	currentHoldingInsertCache          = make(map[string]insertCache)
	currentHoldingUpdateCacheMut       sync.RWMutex
	currentHoldingUpdateCache          = make(map[string]updateCache)
	currentHoldingUpsertCacheMut       sync.RWMutex
	currentHoldingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currentHoldingBeforeInsertHooks []CurrentHoldingHook
var currentHoldingBeforeUpdateHooks []CurrentHoldingHook
var currentHoldingBeforeDeleteHooks []CurrentHoldingHook
var currentHoldingBeforeUpsertHooks []CurrentHoldingHook

var currentHoldingAfterInsertHooks []CurrentHoldingHook
var currentHoldingAfterSelectHooks []CurrentHoldingHook
var currentHoldingAfterUpdateHooks []CurrentHoldingHook
var currentHoldingAfterDeleteHooks []CurrentHoldingHook
var currentHoldingAfterUpsertHooks []CurrentHoldingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentHolding) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentHolding) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentHolding) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentHolding) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentHolding) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentHolding) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentHolding) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentHolding) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentHolding) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentHoldingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentHoldingHook registers your hook function for all future operations.
func AddCurrentHoldingHook(hookPoint boil.HookPoint, currentHoldingHook CurrentHoldingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currentHoldingBeforeInsertHooks = append(currentHoldingBeforeInsertHooks, currentHoldingHook)
	case boil.BeforeUpdateHook:
		currentHoldingBeforeUpdateHooks = append(currentHoldingBeforeUpdateHooks, currentHoldingHook)
	case boil.BeforeDeleteHook:
		currentHoldingBeforeDeleteHooks = append(currentHoldingBeforeDeleteHooks, currentHoldingHook)
	case boil.BeforeUpsertHook:
		currentHoldingBeforeUpsertHooks = append(currentHoldingBeforeUpsertHooks, currentHoldingHook)
	case boil.AfterInsertHook:
		currentHoldingAfterInsertHooks = append(currentHoldingAfterInsertHooks, currentHoldingHook)
	case boil.AfterSelectHook:
		currentHoldingAfterSelectHooks = append(currentHoldingAfterSelectHooks, currentHoldingHook)
	case boil.AfterUpdateHook:
		currentHoldingAfterUpdateHooks = append(currentHoldingAfterUpdateHooks, currentHoldingHook)
	case boil.AfterDeleteHook:
		currentHoldingAfterDeleteHooks = append(currentHoldingAfterDeleteHooks, currentHoldingHook)
	case boil.AfterUpsertHook:
		currentHoldingAfterUpsertHooks = append(currentHoldingAfterUpsertHooks, currentHoldingHook)
	}
}

// One returns a single currentHolding record from the query.
func (q currentHoldingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrentHolding, error) {
	o := &CurrentHolding{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CurrentHolding")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentHolding records from the query.
func (q currentHoldingQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrentHoldingSlice, error) {
	var o []*CurrentHolding

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentHolding slice")
	}

	if len(currentHoldingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentHolding records in the query.
func (q currentHoldingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CurrentHolding rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentHoldingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CurrentHolding exists")
	}

	return count > 0, nil
}

// Fund pointed to by the foreign key.
func (o *CurrentHolding) Fund(mods ...qm.QueryMod) fundDescriptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("fund_id=?", o.FundID),
	}

	queryMods = append(queryMods, mods...)

	query := FundDescriptions(queryMods...)
	queries.SetFrom(query.Query, "`FundDescription`")

	return query
}

// Portfolio pointed to by the foreign key.
func (o *CurrentHolding) Portfolio(mods ...qm.QueryMod) portfolioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("portfolio_id=?", o.PortfolioID),
	}

	queryMods = append(queryMods, mods...)

	query := Portfolios(queryMods...)
	queries.SetFrom(query.Query, "`Portfolio`")

	return query
}

// LoadFund allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentHoldingL) LoadFund(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentHolding interface{}, mods queries.Applicator) error {
	var slice []*CurrentHolding
	var object *CurrentHolding

	if singular {
		object = maybeCurrentHolding.(*CurrentHolding)
	} else {
		slice = *maybeCurrentHolding.(*[]*CurrentHolding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentHoldingR{}
		}
		args = append(args, object.FundID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentHoldingR{}
			}

			for _, a := range args {
				if a == obj.FundID {
					continue Outer
				}
			}

			args = append(args, obj.FundID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`FundDescription`), qm.WhereIn(`fund_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FundDescription")
	}

	var resultSlice []*FundDescription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FundDescription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for FundDescription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for FundDescription")
	}

	if len(currentHoldingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fund = foreign
		if foreign.R == nil {
			foreign.R = &fundDescriptionR{}
		}
		foreign.R.FundCurrentHoldings = append(foreign.R.FundCurrentHoldings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FundID == foreign.FundID {
				local.R.Fund = foreign
				if foreign.R == nil {
					foreign.R = &fundDescriptionR{}
				}
				foreign.R.FundCurrentHoldings = append(foreign.R.FundCurrentHoldings, local)
				break
			}
		}
	}

	return nil
}

// LoadPortfolio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentHoldingL) LoadPortfolio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentHolding interface{}, mods queries.Applicator) error {
	var slice []*CurrentHolding
	var object *CurrentHolding

	if singular {
		object = maybeCurrentHolding.(*CurrentHolding)
	} else {
		slice = *maybeCurrentHolding.(*[]*CurrentHolding)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currentHoldingR{}
		}
		args = append(args, object.PortfolioID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentHoldingR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Portfolio`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Portfolio")
	}

	var resultSlice []*Portfolio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Portfolio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Portfolio")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Portfolio")
	}

	if len(currentHoldingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Portfolio = foreign
		if foreign.R == nil {
			foreign.R = &portfolioR{}
		}
		foreign.R.PortfolioCurrentHoldings = append(foreign.R.PortfolioCurrentHoldings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.Portfolio = foreign
				if foreign.R == nil {
					foreign.R = &portfolioR{}
				}
				foreign.R.PortfolioCurrentHoldings = append(foreign.R.PortfolioCurrentHoldings, local)
				break
			}
		}
	}

	return nil
}

// SetFund of the currentHolding to the related item.
// Sets o.R.Fund to related.
// Adds o to related.R.FundCurrentHoldings.
func (o *CurrentHolding) SetFund(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FundDescription) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CurrentHolding` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"fund_id"}),
		strmangle.WhereClause("`", "`", 0, currentHoldingPrimaryKeyColumns),
	)
	values := []interface{}{related.FundID, o.CurrentHoldingID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FundID = related.FundID
	if o.R == nil {
		o.R = &currentHoldingR{
			Fund: related,
		}
	} else {
		o.R.Fund = related
	}

	if related.R == nil {
		related.R = &fundDescriptionR{
			FundCurrentHoldings: CurrentHoldingSlice{o},
		}
	} else {
		related.R.FundCurrentHoldings = append(related.R.FundCurrentHoldings, o)
	}

	return nil
}

// SetPortfolio of the currentHolding to the related item.
// Sets o.R.Portfolio to related.
// Adds o to related.R.PortfolioCurrentHoldings.
func (o *CurrentHolding) SetPortfolio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Portfolio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `CurrentHolding` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
		strmangle.WhereClause("`", "`", 0, currentHoldingPrimaryKeyColumns),
	)
	values := []interface{}{related.PortfolioID, o.CurrentHoldingID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PortfolioID = related.PortfolioID
	if o.R == nil {
		o.R = &currentHoldingR{
			Portfolio: related,
		}
	} else {
		o.R.Portfolio = related
	}

	if related.R == nil {
		related.R = &portfolioR{
			PortfolioCurrentHoldings: CurrentHoldingSlice{o},
		}
	} else {
		related.R.PortfolioCurrentHoldings = append(related.R.PortfolioCurrentHoldings, o)
	}

	return nil
}

// CurrentHoldings retrieves all the records using an executor.
func CurrentHoldings(mods ...qm.QueryMod) currentHoldingQuery {
	mods = append(mods, qm.From("`CurrentHolding`"))
	return currentHoldingQuery{NewQuery(mods...)}
}

// FindCurrentHolding retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentHolding(ctx context.Context, exec boil.ContextExecutor, currentHoldingID int, selectCols ...string) (*CurrentHolding, error) {
	currentHoldingObj := &CurrentHolding{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CurrentHolding` where `current_holding_id`=?", sel,
	)

	q := queries.Raw(query, currentHoldingID)

	err := q.Bind(ctx, exec, currentHoldingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CurrentHolding")
	}

	return currentHoldingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentHolding) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CurrentHolding provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentHoldingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentHoldingInsertCacheMut.RLock()
	cache, cached := currentHoldingInsertCache[key]
	currentHoldingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentHoldingColumns,
			currentHoldingColumnsWithDefault,
			currentHoldingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CurrentHolding` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CurrentHolding` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CurrentHolding` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, currentHoldingPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CurrentHolding")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CurrentHoldingID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == currentHoldingMapping["CurrentHoldingID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CurrentHoldingID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CurrentHolding")
	}

CacheNoHooks:
	if !cached {
		currentHoldingInsertCacheMut.Lock()
		currentHoldingInsertCache[key] = cache
		currentHoldingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrentHolding.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentHolding) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentHoldingUpdateCacheMut.RLock()
	cache, cached := currentHoldingUpdateCache[key]
	currentHoldingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentHoldingColumns,
			currentHoldingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CurrentHolding, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CurrentHolding` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, currentHoldingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, append(wl, currentHoldingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CurrentHolding row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CurrentHolding")
	}

	if !cached {
		currentHoldingUpdateCacheMut.Lock()
		currentHoldingUpdateCache[key] = cache
		currentHoldingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentHoldingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CurrentHolding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CurrentHolding")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentHoldingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentHoldingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CurrentHolding` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currentHoldingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentHolding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentHolding")
	}
	return rowsAff, nil
}

var mySQLCurrentHoldingUniqueColumns = []string{
	"current_holding_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentHolding) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CurrentHolding provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentHoldingColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCurrentHoldingUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentHoldingUpsertCacheMut.RLock()
	cache, cached := currentHoldingUpsertCache[key]
	currentHoldingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currentHoldingColumns,
			currentHoldingColumnsWithDefault,
			currentHoldingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currentHoldingColumns,
			currentHoldingPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert CurrentHolding, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "CurrentHolding", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CurrentHolding` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CurrentHolding")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.CurrentHoldingID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == currentHoldingMapping["current_holding_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(currentHoldingType, currentHoldingMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CurrentHolding")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CurrentHolding")
	}

CacheNoHooks:
	if !cached {
		currentHoldingUpsertCacheMut.Lock()
		currentHoldingUpsertCache[key] = cache
		currentHoldingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrentHolding record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentHolding) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentHolding provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentHoldingPrimaryKeyMapping)
	sql := "DELETE FROM `CurrentHolding` WHERE `current_holding_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CurrentHolding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CurrentHolding")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentHoldingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentHoldingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CurrentHolding")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CurrentHolding")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentHoldingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentHolding slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(currentHoldingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentHoldingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CurrentHolding` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currentHoldingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentHolding slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CurrentHolding")
	}

	if len(currentHoldingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentHolding) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrentHolding(ctx, exec, o.CurrentHoldingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentHoldingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentHoldingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentHoldingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CurrentHolding`.* FROM `CurrentHolding` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currentHoldingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentHoldingSlice")
	}

	*o = slice

	return nil
}

// CurrentHoldingExists checks if the CurrentHolding row exists.
func CurrentHoldingExists(ctx context.Context, exec boil.ContextExecutor, currentHoldingID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CurrentHolding` where `current_holding_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, currentHoldingID)
	}

	row := exec.QueryRowContext(ctx, sql, currentHoldingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CurrentHolding exists")
	}

	return exists, nil
}
