// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// OrganizationFinancialInfo is an object representing the database table.
type OrganizationFinancialInfo struct {
	OrganizationFinancialInfoID int               `boil:"organization_financial_info_id" json:"organization_financial_info_id" toml:"organization_financial_info_id" yaml:"organization_financial_info_id"`
	PartyID                     int               `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BankID                      int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	RevenueCcy                  string            `boil:"revenue_ccy" json:"revenue_ccy" toml:"revenue_ccy" yaml:"revenue_ccy"`
	Revenue                     types.Decimal     `boil:"revenue" json:"revenue" toml:"revenue" yaml:"revenue"`
	NetProfitCcy                string            `boil:"net_profit_ccy" json:"net_profit_ccy" toml:"net_profit_ccy" yaml:"net_profit_ccy"`
	NetProfit                   types.Decimal     `boil:"net_profit" json:"net_profit" toml:"net_profit" yaml:"net_profit"`
	Exporter                    string            `boil:"exporter" json:"exporter" toml:"exporter" yaml:"exporter"`
	Importer                    string            `boil:"importer" json:"importer" toml:"importer" yaml:"importer"`
	DomesticTrade               string            `boil:"domestic_trade" json:"domestic_trade" toml:"domestic_trade" yaml:"domestic_trade"`
	DomesticTurnover            types.Decimal     `boil:"domestic_turnover" json:"domestic_turnover" toml:"domestic_turnover" yaml:"domestic_turnover"`
	InternationalTurnover       types.Decimal     `boil:"international_turnover" json:"international_turnover" toml:"international_turnover" yaml:"international_turnover"`
	PrimaryBankAccount          string            `boil:"primary_bank_account" json:"primary_bank_account" toml:"primary_bank_account" yaml:"primary_bank_account"`
	CreditRating                string            `boil:"credit_rating" json:"credit_rating" toml:"credit_rating" yaml:"credit_rating"`
	FinancialStressScore        types.NullDecimal `boil:"financial_stress_score" json:"financial_stress_score,omitempty" toml:"financial_stress_score" yaml:"financial_stress_score,omitempty"`
	CommercialCreditScore       types.NullDecimal `boil:"commercial_credit_score" json:"commercial_credit_score,omitempty" toml:"commercial_credit_score" yaml:"commercial_credit_score,omitempty"`
	TurnoverInMillion           types.NullDecimal `boil:"turnover_in_million" json:"turnover_in_million,omitempty" toml:"turnover_in_million" yaml:"turnover_in_million,omitempty"`
	DebitInMillion              types.NullDecimal `boil:"debit_in_million" json:"debit_in_million,omitempty" toml:"debit_in_million" yaml:"debit_in_million,omitempty"`
	BankBusinessTurnover        types.NullDecimal `boil:"bank_business_turnover" json:"bank_business_turnover,omitempty" toml:"bank_business_turnover" yaml:"bank_business_turnover,omitempty"`
	AccountReceivable           types.NullDecimal `boil:"account_receivable" json:"account_receivable,omitempty" toml:"account_receivable" yaml:"account_receivable,omitempty"`
	AccountPayable              types.NullDecimal `boil:"account_payable" json:"account_payable,omitempty" toml:"account_payable" yaml:"account_payable,omitempty"`
	NoOfBankruptcies            null.Int          `boil:"no_of_bankruptcies" json:"no_of_bankruptcies,omitempty" toml:"no_of_bankruptcies" yaml:"no_of_bankruptcies,omitempty"`
	MakerDate                   time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                 null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                     string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                   null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                  null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *organizationFinancialInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationFinancialInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationFinancialInfoColumns = struct {
	OrganizationFinancialInfoID string
	PartyID                     string
	BankID                      string
	RevenueCcy                  string
	Revenue                     string
	NetProfitCcy                string
	NetProfit                   string
	Exporter                    string
	Importer                    string
	DomesticTrade               string
	DomesticTurnover            string
	InternationalTurnover       string
	PrimaryBankAccount          string
	CreditRating                string
	FinancialStressScore        string
	CommercialCreditScore       string
	TurnoverInMillion           string
	DebitInMillion              string
	BankBusinessTurnover        string
	AccountReceivable           string
	AccountPayable              string
	NoOfBankruptcies            string
	MakerDate                   string
	CheckerDate                 string
	MakerID                     string
	CheckerID                   string
	ModifiedBy                  string
	ModifiedDate                string
}{
	OrganizationFinancialInfoID: "organization_financial_info_id",
	PartyID:                     "party_id",
	BankID:                      "bank_id",
	RevenueCcy:                  "revenue_ccy",
	Revenue:                     "revenue",
	NetProfitCcy:                "net_profit_ccy",
	NetProfit:                   "net_profit",
	Exporter:                    "exporter",
	Importer:                    "importer",
	DomesticTrade:               "domestic_trade",
	DomesticTurnover:            "domestic_turnover",
	InternationalTurnover:       "international_turnover",
	PrimaryBankAccount:          "primary_bank_account",
	CreditRating:                "credit_rating",
	FinancialStressScore:        "financial_stress_score",
	CommercialCreditScore:       "commercial_credit_score",
	TurnoverInMillion:           "turnover_in_million",
	DebitInMillion:              "debit_in_million",
	BankBusinessTurnover:        "bank_business_turnover",
	AccountReceivable:           "account_receivable",
	AccountPayable:              "account_payable",
	NoOfBankruptcies:            "no_of_bankruptcies",
	MakerDate:                   "maker_date",
	CheckerDate:                 "checker_date",
	MakerID:                     "maker_id",
	CheckerID:                   "checker_id",
	ModifiedBy:                  "modified_by",
	ModifiedDate:                "modified_date",
}

// Generated where

var OrganizationFinancialInfoWhere = struct {
	OrganizationFinancialInfoID whereHelperint
	PartyID                     whereHelperint
	BankID                      whereHelperint
	RevenueCcy                  whereHelperstring
	Revenue                     whereHelpertypes_Decimal
	NetProfitCcy                whereHelperstring
	NetProfit                   whereHelpertypes_Decimal
	Exporter                    whereHelperstring
	Importer                    whereHelperstring
	DomesticTrade               whereHelperstring
	DomesticTurnover            whereHelpertypes_Decimal
	InternationalTurnover       whereHelpertypes_Decimal
	PrimaryBankAccount          whereHelperstring
	CreditRating                whereHelperstring
	FinancialStressScore        whereHelpertypes_NullDecimal
	CommercialCreditScore       whereHelpertypes_NullDecimal
	TurnoverInMillion           whereHelpertypes_NullDecimal
	DebitInMillion              whereHelpertypes_NullDecimal
	BankBusinessTurnover        whereHelpertypes_NullDecimal
	AccountReceivable           whereHelpertypes_NullDecimal
	AccountPayable              whereHelpertypes_NullDecimal
	NoOfBankruptcies            whereHelpernull_Int
	MakerDate                   whereHelpertime_Time
	CheckerDate                 whereHelpernull_Time
	MakerID                     whereHelperstring
	CheckerID                   whereHelpernull_String
	ModifiedBy                  whereHelpernull_String
	ModifiedDate                whereHelpernull_Time
}{
	OrganizationFinancialInfoID: whereHelperint{field: `organization_financial_info_id`},
	PartyID:                     whereHelperint{field: `party_id`},
	BankID:                      whereHelperint{field: `bank_id`},
	RevenueCcy:                  whereHelperstring{field: `revenue_ccy`},
	Revenue:                     whereHelpertypes_Decimal{field: `revenue`},
	NetProfitCcy:                whereHelperstring{field: `net_profit_ccy`},
	NetProfit:                   whereHelpertypes_Decimal{field: `net_profit`},
	Exporter:                    whereHelperstring{field: `exporter`},
	Importer:                    whereHelperstring{field: `importer`},
	DomesticTrade:               whereHelperstring{field: `domestic_trade`},
	DomesticTurnover:            whereHelpertypes_Decimal{field: `domestic_turnover`},
	InternationalTurnover:       whereHelpertypes_Decimal{field: `international_turnover`},
	PrimaryBankAccount:          whereHelperstring{field: `primary_bank_account`},
	CreditRating:                whereHelperstring{field: `credit_rating`},
	FinancialStressScore:        whereHelpertypes_NullDecimal{field: `financial_stress_score`},
	CommercialCreditScore:       whereHelpertypes_NullDecimal{field: `commercial_credit_score`},
	TurnoverInMillion:           whereHelpertypes_NullDecimal{field: `turnover_in_million`},
	DebitInMillion:              whereHelpertypes_NullDecimal{field: `debit_in_million`},
	BankBusinessTurnover:        whereHelpertypes_NullDecimal{field: `bank_business_turnover`},
	AccountReceivable:           whereHelpertypes_NullDecimal{field: `account_receivable`},
	AccountPayable:              whereHelpertypes_NullDecimal{field: `account_payable`},
	NoOfBankruptcies:            whereHelpernull_Int{field: `no_of_bankruptcies`},
	MakerDate:                   whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                 whereHelpernull_Time{field: `checker_date`},
	MakerID:                     whereHelperstring{field: `maker_id`},
	CheckerID:                   whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                  whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                whereHelpernull_Time{field: `modified_date`},
}

// OrganizationFinancialInfoRels is where relationship names are stored.
var OrganizationFinancialInfoRels = struct {
	Bank  string
	Party string
}{
	Bank:  "Bank",
	Party: "Party",
}

// organizationFinancialInfoR is where relationships are stored.
type organizationFinancialInfoR struct {
	Bank  *Bank
	Party *Party
}

// NewStruct creates a new relationship struct
func (*organizationFinancialInfoR) NewStruct() *organizationFinancialInfoR {
	return &organizationFinancialInfoR{}
}

// organizationFinancialInfoL is where Load methods for each relationship are stored.
type organizationFinancialInfoL struct{}

var (
	organizationFinancialInfoColumns               = []string{"organization_financial_info_id", "party_id", "bank_id", "revenue_ccy", "revenue", "net_profit_ccy", "net_profit", "exporter", "importer", "domestic_trade", "domestic_turnover", "international_turnover", "primary_bank_account", "credit_rating", "financial_stress_score", "commercial_credit_score", "turnover_in_million", "debit_in_million", "bank_business_turnover", "account_receivable", "account_payable", "no_of_bankruptcies", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationFinancialInfoColumnsWithoutDefault = []string{"party_id", "bank_id", "revenue_ccy", "revenue", "net_profit_ccy", "net_profit", "exporter", "importer", "domestic_trade", "domestic_turnover", "international_turnover", "primary_bank_account", "credit_rating", "financial_stress_score", "commercial_credit_score", "turnover_in_million", "debit_in_million", "bank_business_turnover", "account_receivable", "account_payable", "no_of_bankruptcies", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationFinancialInfoColumnsWithDefault    = []string{"organization_financial_info_id"}
	organizationFinancialInfoPrimaryKeyColumns     = []string{"organization_financial_info_id"}
)

type (
	// OrganizationFinancialInfoSlice is an alias for a slice of pointers to OrganizationFinancialInfo.
	// This should generally be used opposed to []OrganizationFinancialInfo.
	OrganizationFinancialInfoSlice []*OrganizationFinancialInfo
	// OrganizationFinancialInfoHook is the signature for custom OrganizationFinancialInfo hook methods
	OrganizationFinancialInfoHook func(context.Context, boil.ContextExecutor, *OrganizationFinancialInfo) error

	organizationFinancialInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationFinancialInfoType                 = reflect.TypeOf(&OrganizationFinancialInfo{})
	organizationFinancialInfoMapping              = queries.MakeStructMapping(organizationFinancialInfoType)
	organizationFinancialInfoPrimaryKeyMapping, _ = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, organizationFinancialInfoPrimaryKeyColumns)
	organizationFinancialInfoInsertCacheMut       sync.RWMutex
	organizationFinancialInfoInsertCache          = make(map[string]insertCache)
	organizationFinancialInfoUpdateCacheMut       sync.RWMutex
	organizationFinancialInfoUpdateCache          = make(map[string]updateCache)
	organizationFinancialInfoUpsertCacheMut       sync.RWMutex
	organizationFinancialInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationFinancialInfoBeforeInsertHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoBeforeUpdateHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoBeforeDeleteHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoBeforeUpsertHooks []OrganizationFinancialInfoHook

var organizationFinancialInfoAfterInsertHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoAfterSelectHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoAfterUpdateHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoAfterDeleteHooks []OrganizationFinancialInfoHook
var organizationFinancialInfoAfterUpsertHooks []OrganizationFinancialInfoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationFinancialInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationFinancialInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationFinancialInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationFinancialInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationFinancialInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationFinancialInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationFinancialInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationFinancialInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationFinancialInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationFinancialInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationFinancialInfoHook registers your hook function for all future operations.
func AddOrganizationFinancialInfoHook(hookPoint boil.HookPoint, organizationFinancialInfoHook OrganizationFinancialInfoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationFinancialInfoBeforeInsertHooks = append(organizationFinancialInfoBeforeInsertHooks, organizationFinancialInfoHook)
	case boil.BeforeUpdateHook:
		organizationFinancialInfoBeforeUpdateHooks = append(organizationFinancialInfoBeforeUpdateHooks, organizationFinancialInfoHook)
	case boil.BeforeDeleteHook:
		organizationFinancialInfoBeforeDeleteHooks = append(organizationFinancialInfoBeforeDeleteHooks, organizationFinancialInfoHook)
	case boil.BeforeUpsertHook:
		organizationFinancialInfoBeforeUpsertHooks = append(organizationFinancialInfoBeforeUpsertHooks, organizationFinancialInfoHook)
	case boil.AfterInsertHook:
		organizationFinancialInfoAfterInsertHooks = append(organizationFinancialInfoAfterInsertHooks, organizationFinancialInfoHook)
	case boil.AfterSelectHook:
		organizationFinancialInfoAfterSelectHooks = append(organizationFinancialInfoAfterSelectHooks, organizationFinancialInfoHook)
	case boil.AfterUpdateHook:
		organizationFinancialInfoAfterUpdateHooks = append(organizationFinancialInfoAfterUpdateHooks, organizationFinancialInfoHook)
	case boil.AfterDeleteHook:
		organizationFinancialInfoAfterDeleteHooks = append(organizationFinancialInfoAfterDeleteHooks, organizationFinancialInfoHook)
	case boil.AfterUpsertHook:
		organizationFinancialInfoAfterUpsertHooks = append(organizationFinancialInfoAfterUpsertHooks, organizationFinancialInfoHook)
	}
}

// One returns a single organizationFinancialInfo record from the query.
func (q organizationFinancialInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationFinancialInfo, error) {
	o := &OrganizationFinancialInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for OrganizationFinancialInfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationFinancialInfo records from the query.
func (q organizationFinancialInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationFinancialInfoSlice, error) {
	var o []*OrganizationFinancialInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationFinancialInfo slice")
	}

	if len(organizationFinancialInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationFinancialInfo records in the query.
func (q organizationFinancialInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count OrganizationFinancialInfo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationFinancialInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if OrganizationFinancialInfo exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *OrganizationFinancialInfo) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Party pointed to by the foreign key.
func (o *OrganizationFinancialInfo) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationFinancialInfoL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationFinancialInfo interface{}, mods queries.Applicator) error {
	var slice []*OrganizationFinancialInfo
	var object *OrganizationFinancialInfo

	if singular {
		object = maybeOrganizationFinancialInfo.(*OrganizationFinancialInfo)
	} else {
		slice = *maybeOrganizationFinancialInfo.(*[]*OrganizationFinancialInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationFinancialInfoR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationFinancialInfoR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(organizationFinancialInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankOrganizationFinancialInfos = append(foreign.R.BankOrganizationFinancialInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankOrganizationFinancialInfos = append(foreign.R.BankOrganizationFinancialInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationFinancialInfoL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationFinancialInfo interface{}, mods queries.Applicator) error {
	var slice []*OrganizationFinancialInfo
	var object *OrganizationFinancialInfo

	if singular {
		object = maybeOrganizationFinancialInfo.(*OrganizationFinancialInfo)
	} else {
		slice = *maybeOrganizationFinancialInfo.(*[]*OrganizationFinancialInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationFinancialInfoR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationFinancialInfoR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(organizationFinancialInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyOrganizationFinancialInfo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyOrganizationFinancialInfo = local
				break
			}
		}
	}

	return nil
}

// SetBank of the organizationFinancialInfo to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankOrganizationFinancialInfos.
func (o *OrganizationFinancialInfo) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `OrganizationFinancialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, organizationFinancialInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.OrganizationFinancialInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &organizationFinancialInfoR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankOrganizationFinancialInfos: OrganizationFinancialInfoSlice{o},
		}
	} else {
		related.R.BankOrganizationFinancialInfos = append(related.R.BankOrganizationFinancialInfos, o)
	}

	return nil
}

// SetParty of the organizationFinancialInfo to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyOrganizationFinancialInfo.
func (o *OrganizationFinancialInfo) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `OrganizationFinancialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, organizationFinancialInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.OrganizationFinancialInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &organizationFinancialInfoR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyOrganizationFinancialInfo: o,
		}
	} else {
		related.R.PartyOrganizationFinancialInfo = o
	}

	return nil
}

// OrganizationFinancialInfos retrieves all the records using an executor.
func OrganizationFinancialInfos(mods ...qm.QueryMod) organizationFinancialInfoQuery {
	mods = append(mods, qm.From("`OrganizationFinancialInfo`"))
	return organizationFinancialInfoQuery{NewQuery(mods...)}
}

// FindOrganizationFinancialInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationFinancialInfo(ctx context.Context, exec boil.ContextExecutor, organizationFinancialInfoID int, selectCols ...string) (*OrganizationFinancialInfo, error) {
	organizationFinancialInfoObj := &OrganizationFinancialInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `OrganizationFinancialInfo` where `organization_financial_info_id`=?", sel,
	)

	q := queries.Raw(query, organizationFinancialInfoID)

	err := q.Bind(ctx, exec, organizationFinancialInfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from OrganizationFinancialInfo")
	}

	return organizationFinancialInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationFinancialInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationFinancialInfo provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationFinancialInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationFinancialInfoInsertCacheMut.RLock()
	cache, cached := organizationFinancialInfoInsertCache[key]
	organizationFinancialInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationFinancialInfoColumns,
			organizationFinancialInfoColumnsWithDefault,
			organizationFinancialInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `OrganizationFinancialInfo` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `OrganizationFinancialInfo` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `OrganizationFinancialInfo` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, organizationFinancialInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into OrganizationFinancialInfo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationFinancialInfoID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationFinancialInfoMapping["OrganizationFinancialInfoID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrganizationFinancialInfoID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationFinancialInfo")
	}

CacheNoHooks:
	if !cached {
		organizationFinancialInfoInsertCacheMut.Lock()
		organizationFinancialInfoInsertCache[key] = cache
		organizationFinancialInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationFinancialInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationFinancialInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationFinancialInfoUpdateCacheMut.RLock()
	cache, cached := organizationFinancialInfoUpdateCache[key]
	organizationFinancialInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationFinancialInfoColumns,
			organizationFinancialInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update OrganizationFinancialInfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `OrganizationFinancialInfo` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, organizationFinancialInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, append(wl, organizationFinancialInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update OrganizationFinancialInfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for OrganizationFinancialInfo")
	}

	if !cached {
		organizationFinancialInfoUpdateCacheMut.Lock()
		organizationFinancialInfoUpdateCache[key] = cache
		organizationFinancialInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationFinancialInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for OrganizationFinancialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for OrganizationFinancialInfo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationFinancialInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationFinancialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `OrganizationFinancialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationFinancialInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationFinancialInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationFinancialInfo")
	}
	return rowsAff, nil
}

var mySQLOrganizationFinancialInfoUniqueColumns = []string{
	"organization_financial_info_id",
	"party_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationFinancialInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationFinancialInfo provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationFinancialInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrganizationFinancialInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationFinancialInfoUpsertCacheMut.RLock()
	cache, cached := organizationFinancialInfoUpsertCache[key]
	organizationFinancialInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationFinancialInfoColumns,
			organizationFinancialInfoColumnsWithDefault,
			organizationFinancialInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationFinancialInfoColumns,
			organizationFinancialInfoPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert OrganizationFinancialInfo, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "OrganizationFinancialInfo", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `OrganizationFinancialInfo` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for OrganizationFinancialInfo")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationFinancialInfoID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationFinancialInfoMapping["organization_financial_info_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(organizationFinancialInfoType, organizationFinancialInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for OrganizationFinancialInfo")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationFinancialInfo")
	}

CacheNoHooks:
	if !cached {
		organizationFinancialInfoUpsertCacheMut.Lock()
		organizationFinancialInfoUpsertCache[key] = cache
		organizationFinancialInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationFinancialInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationFinancialInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationFinancialInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationFinancialInfoPrimaryKeyMapping)
	sql := "DELETE FROM `OrganizationFinancialInfo` WHERE `organization_financial_info_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from OrganizationFinancialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for OrganizationFinancialInfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationFinancialInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationFinancialInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from OrganizationFinancialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationFinancialInfo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationFinancialInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationFinancialInfo slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationFinancialInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationFinancialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `OrganizationFinancialInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationFinancialInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationFinancialInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationFinancialInfo")
	}

	if len(organizationFinancialInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationFinancialInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationFinancialInfo(ctx, exec, o.OrganizationFinancialInfoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationFinancialInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationFinancialInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationFinancialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `OrganizationFinancialInfo`.* FROM `OrganizationFinancialInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationFinancialInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationFinancialInfoSlice")
	}

	*o = slice

	return nil
}

// OrganizationFinancialInfoExists checks if the OrganizationFinancialInfo row exists.
func OrganizationFinancialInfoExists(ctx context.Context, exec boil.ContextExecutor, organizationFinancialInfoID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `OrganizationFinancialInfo` where `organization_financial_info_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, organizationFinancialInfoID)
	}

	row := exec.QueryRowContext(ctx, sql, organizationFinancialInfoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if OrganizationFinancialInfo exists")
	}

	return exists, nil
}
