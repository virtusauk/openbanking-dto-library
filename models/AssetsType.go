// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AssetsType is an object representing the database table.
type AssetsType struct {
	AssetsTypeID int         `boil:"assets_type_id" json:"assets_type_id" toml:"assets_type_id" yaml:"assets_type_id"`
	AssetsType   string      `boil:"assets_type" json:"assets_type" toml:"assets_type" yaml:"assets_type"`
	Description  string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Active       null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *assetsTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetsTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetsTypeColumns = struct {
	AssetsTypeID string
	AssetsType   string
	Description  string
	Active       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	AssetsTypeID: "assets_type_id",
	AssetsType:   "assets_type",
	Description:  "description",
	Active:       "active",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var AssetsTypeWhere = struct {
	AssetsTypeID whereHelperint
	AssetsType   whereHelperstring
	Description  whereHelperstring
	Active       whereHelpernull_String
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	AssetsTypeID: whereHelperint{field: `assets_type_id`},
	AssetsType:   whereHelperstring{field: `assets_type`},
	Description:  whereHelperstring{field: `description`},
	Active:       whereHelpernull_String{field: `active`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// AssetsTypeRels is where relationship names are stored.
var AssetsTypeRels = struct {
	AssetsTypeAssets                        string
	AssetTypeCreditOrginationAssetHistories string
}{
	AssetsTypeAssets:                        "AssetsTypeAssets",
	AssetTypeCreditOrginationAssetHistories: "AssetTypeCreditOrginationAssetHistories",
}

// assetsTypeR is where relationships are stored.
type assetsTypeR struct {
	AssetsTypeAssets                        AssetSlice
	AssetTypeCreditOrginationAssetHistories CreditOrginationAssetHistorySlice
}

// NewStruct creates a new relationship struct
func (*assetsTypeR) NewStruct() *assetsTypeR {
	return &assetsTypeR{}
}

// assetsTypeL is where Load methods for each relationship are stored.
type assetsTypeL struct{}

var (
	assetsTypeColumns               = []string{"assets_type_id", "assets_type", "description", "active", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetsTypeColumnsWithoutDefault = []string{"assets_type_id", "assets_type", "description", "active", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetsTypeColumnsWithDefault    = []string{}
	assetsTypePrimaryKeyColumns     = []string{"assets_type_id"}
)

type (
	// AssetsTypeSlice is an alias for a slice of pointers to AssetsType.
	// This should generally be used opposed to []AssetsType.
	AssetsTypeSlice []*AssetsType
	// AssetsTypeHook is the signature for custom AssetsType hook methods
	AssetsTypeHook func(context.Context, boil.ContextExecutor, *AssetsType) error

	assetsTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetsTypeType                 = reflect.TypeOf(&AssetsType{})
	assetsTypeMapping              = queries.MakeStructMapping(assetsTypeType)
	assetsTypePrimaryKeyMapping, _ = queries.BindMapping(assetsTypeType, assetsTypeMapping, assetsTypePrimaryKeyColumns)
	assetsTypeInsertCacheMut       sync.RWMutex
	assetsTypeInsertCache          = make(map[string]insertCache)
	assetsTypeUpdateCacheMut       sync.RWMutex
	assetsTypeUpdateCache          = make(map[string]updateCache)
	assetsTypeUpsertCacheMut       sync.RWMutex
	assetsTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetsTypeBeforeInsertHooks []AssetsTypeHook
var assetsTypeBeforeUpdateHooks []AssetsTypeHook
var assetsTypeBeforeDeleteHooks []AssetsTypeHook
var assetsTypeBeforeUpsertHooks []AssetsTypeHook

var assetsTypeAfterInsertHooks []AssetsTypeHook
var assetsTypeAfterSelectHooks []AssetsTypeHook
var assetsTypeAfterUpdateHooks []AssetsTypeHook
var assetsTypeAfterDeleteHooks []AssetsTypeHook
var assetsTypeAfterUpsertHooks []AssetsTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetsType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetsType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetsType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetsType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetsType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetsType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetsType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetsType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetsType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetsTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetsTypeHook registers your hook function for all future operations.
func AddAssetsTypeHook(hookPoint boil.HookPoint, assetsTypeHook AssetsTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetsTypeBeforeInsertHooks = append(assetsTypeBeforeInsertHooks, assetsTypeHook)
	case boil.BeforeUpdateHook:
		assetsTypeBeforeUpdateHooks = append(assetsTypeBeforeUpdateHooks, assetsTypeHook)
	case boil.BeforeDeleteHook:
		assetsTypeBeforeDeleteHooks = append(assetsTypeBeforeDeleteHooks, assetsTypeHook)
	case boil.BeforeUpsertHook:
		assetsTypeBeforeUpsertHooks = append(assetsTypeBeforeUpsertHooks, assetsTypeHook)
	case boil.AfterInsertHook:
		assetsTypeAfterInsertHooks = append(assetsTypeAfterInsertHooks, assetsTypeHook)
	case boil.AfterSelectHook:
		assetsTypeAfterSelectHooks = append(assetsTypeAfterSelectHooks, assetsTypeHook)
	case boil.AfterUpdateHook:
		assetsTypeAfterUpdateHooks = append(assetsTypeAfterUpdateHooks, assetsTypeHook)
	case boil.AfterDeleteHook:
		assetsTypeAfterDeleteHooks = append(assetsTypeAfterDeleteHooks, assetsTypeHook)
	case boil.AfterUpsertHook:
		assetsTypeAfterUpsertHooks = append(assetsTypeAfterUpsertHooks, assetsTypeHook)
	}
}

// One returns a single assetsType record from the query.
func (q assetsTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssetsType, error) {
	o := &AssetsType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AssetsType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssetsType records from the query.
func (q assetsTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssetsTypeSlice, error) {
	var o []*AssetsType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssetsType slice")
	}

	if len(assetsTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssetsType records in the query.
func (q assetsTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AssetsType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetsTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AssetsType exists")
	}

	return count > 0, nil
}

// AssetsTypeAssets retrieves all the Asset's Assets with an executor via assets_type_id column.
func (o *AssetsType) AssetsTypeAssets(mods ...qm.QueryMod) assetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Assets`.`assets_type_id`=?", o.AssetsTypeID),
	)

	query := Assets(queryMods...)
	queries.SetFrom(query.Query, "`Assets`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Assets`.*"})
	}

	return query
}

// AssetTypeCreditOrginationAssetHistories retrieves all the CreditOrginationAssetHistory's CreditOrginationAssetHistories with an executor via asset_type_id column.
func (o *AssetsType) AssetTypeCreditOrginationAssetHistories(mods ...qm.QueryMod) creditOrginationAssetHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`CreditOrginationAssetHistory`.`asset_type_id`=?", o.AssetsTypeID),
	)

	query := CreditOrginationAssetHistories(queryMods...)
	queries.SetFrom(query.Query, "`CreditOrginationAssetHistory`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`CreditOrginationAssetHistory`.*"})
	}

	return query
}

// LoadAssetsTypeAssets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetsTypeL) LoadAssetsTypeAssets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssetsType interface{}, mods queries.Applicator) error {
	var slice []*AssetsType
	var object *AssetsType

	if singular {
		object = maybeAssetsType.(*AssetsType)
	} else {
		slice = *maybeAssetsType.(*[]*AssetsType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetsTypeR{}
		}
		args = append(args, object.AssetsTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetsTypeR{}
			}

			for _, a := range args {
				if a == obj.AssetsTypeID {
					continue Outer
				}
			}

			args = append(args, obj.AssetsTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Assets`), qm.WhereIn(`assets_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assets")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Assets")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetsTypeAssets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assetR{}
			}
			foreign.R.AssetsType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AssetsTypeID == foreign.AssetsTypeID {
				local.R.AssetsTypeAssets = append(local.R.AssetsTypeAssets, foreign)
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.AssetsType = local
				break
			}
		}
	}

	return nil
}

// LoadAssetTypeCreditOrginationAssetHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetsTypeL) LoadAssetTypeCreditOrginationAssetHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssetsType interface{}, mods queries.Applicator) error {
	var slice []*AssetsType
	var object *AssetsType

	if singular {
		object = maybeAssetsType.(*AssetsType)
	} else {
		slice = *maybeAssetsType.(*[]*AssetsType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetsTypeR{}
		}
		args = append(args, object.AssetsTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetsTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetsTypeID) {
					continue Outer
				}
			}

			args = append(args, obj.AssetsTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CreditOrginationAssetHistory`), qm.WhereIn(`asset_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditOrginationAssetHistory")
	}

	var resultSlice []*CreditOrginationAssetHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditOrginationAssetHistory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on CreditOrginationAssetHistory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CreditOrginationAssetHistory")
	}

	if len(creditOrginationAssetHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetTypeCreditOrginationAssetHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditOrginationAssetHistoryR{}
			}
			foreign.R.AssetType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AssetsTypeID, foreign.AssetTypeID) {
				local.R.AssetTypeCreditOrginationAssetHistories = append(local.R.AssetTypeCreditOrginationAssetHistories, foreign)
				if foreign.R == nil {
					foreign.R = &creditOrginationAssetHistoryR{}
				}
				foreign.R.AssetType = local
				break
			}
		}
	}

	return nil
}

// AddAssetsTypeAssets adds the given related objects to the existing relationships
// of the AssetsType, optionally inserting them as new records.
// Appends related to o.R.AssetsTypeAssets.
// Sets related.R.AssetsType appropriately.
func (o *AssetsType) AddAssetsTypeAssets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Asset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssetsTypeID = o.AssetsTypeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Assets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"assets_type_id"}),
				strmangle.WhereClause("`", "`", 0, assetPrimaryKeyColumns),
			)
			values := []interface{}{o.AssetsTypeID, rel.AssetID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssetsTypeID = o.AssetsTypeID
		}
	}

	if o.R == nil {
		o.R = &assetsTypeR{
			AssetsTypeAssets: related,
		}
	} else {
		o.R.AssetsTypeAssets = append(o.R.AssetsTypeAssets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetR{
				AssetsType: o,
			}
		} else {
			rel.R.AssetsType = o
		}
	}
	return nil
}

// AddAssetTypeCreditOrginationAssetHistories adds the given related objects to the existing relationships
// of the AssetsType, optionally inserting them as new records.
// Appends related to o.R.AssetTypeCreditOrginationAssetHistories.
// Sets related.R.AssetType appropriately.
func (o *AssetsType) AddAssetTypeCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrginationAssetHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssetTypeID, o.AssetsTypeID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `CreditOrginationAssetHistory` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"asset_type_id"}),
				strmangle.WhereClause("`", "`", 0, creditOrginationAssetHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.AssetsTypeID, rel.CreditOriginationAssetHistoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssetTypeID, o.AssetsTypeID)
		}
	}

	if o.R == nil {
		o.R = &assetsTypeR{
			AssetTypeCreditOrginationAssetHistories: related,
		}
	} else {
		o.R.AssetTypeCreditOrginationAssetHistories = append(o.R.AssetTypeCreditOrginationAssetHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditOrginationAssetHistoryR{
				AssetType: o,
			}
		} else {
			rel.R.AssetType = o
		}
	}
	return nil
}

// SetAssetTypeCreditOrginationAssetHistories removes all previously related items of the
// AssetsType replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssetType's AssetTypeCreditOrginationAssetHistories accordingly.
// Replaces o.R.AssetTypeCreditOrginationAssetHistories with related.
// Sets related.R.AssetType's AssetTypeCreditOrginationAssetHistories accordingly.
func (o *AssetsType) SetAssetTypeCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrginationAssetHistory) error {
	query := "update `CreditOrginationAssetHistory` set `asset_type_id` = null where `asset_type_id` = ?"
	values := []interface{}{o.AssetsTypeID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssetTypeCreditOrginationAssetHistories {
			queries.SetScanner(&rel.AssetTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssetType = nil
		}

		o.R.AssetTypeCreditOrginationAssetHistories = nil
	}
	return o.AddAssetTypeCreditOrginationAssetHistories(ctx, exec, insert, related...)
}

// RemoveAssetTypeCreditOrginationAssetHistories relationships from objects passed in.
// Removes related items from R.AssetTypeCreditOrginationAssetHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.AssetType.
func (o *AssetsType) RemoveAssetTypeCreditOrginationAssetHistories(ctx context.Context, exec boil.ContextExecutor, related ...*CreditOrginationAssetHistory) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssetTypeID, nil)
		if rel.R != nil {
			rel.R.AssetType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("asset_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssetTypeCreditOrginationAssetHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssetTypeCreditOrginationAssetHistories)
			if ln > 1 && i < ln-1 {
				o.R.AssetTypeCreditOrginationAssetHistories[i] = o.R.AssetTypeCreditOrginationAssetHistories[ln-1]
			}
			o.R.AssetTypeCreditOrginationAssetHistories = o.R.AssetTypeCreditOrginationAssetHistories[:ln-1]
			break
		}
	}

	return nil
}

// AssetsTypes retrieves all the records using an executor.
func AssetsTypes(mods ...qm.QueryMod) assetsTypeQuery {
	mods = append(mods, qm.From("`AssetsType`"))
	return assetsTypeQuery{NewQuery(mods...)}
}

// FindAssetsType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetsType(ctx context.Context, exec boil.ContextExecutor, assetsTypeID int, selectCols ...string) (*AssetsType, error) {
	assetsTypeObj := &AssetsType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `AssetsType` where `assets_type_id`=?", sel,
	)

	q := queries.Raw(query, assetsTypeID)

	err := q.Bind(ctx, exec, assetsTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AssetsType")
	}

	return assetsTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetsType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AssetsType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetsTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetsTypeInsertCacheMut.RLock()
	cache, cached := assetsTypeInsertCache[key]
	assetsTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetsTypeColumns,
			assetsTypeColumnsWithDefault,
			assetsTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `AssetsType` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `AssetsType` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `AssetsType` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, assetsTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AssetsType")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AssetsTypeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AssetsType")
	}

CacheNoHooks:
	if !cached {
		assetsTypeInsertCacheMut.Lock()
		assetsTypeInsertCache[key] = cache
		assetsTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssetsType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetsType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetsTypeUpdateCacheMut.RLock()
	cache, cached := assetsTypeUpdateCache[key]
	assetsTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetsTypeColumns,
			assetsTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AssetsType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `AssetsType` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, assetsTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, append(wl, assetsTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AssetsType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AssetsType")
	}

	if !cached {
		assetsTypeUpdateCacheMut.Lock()
		assetsTypeUpdateCache[key] = cache
		assetsTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetsTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AssetsType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AssetsType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetsTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetsTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `AssetsType` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetsTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assetsType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assetsType")
	}
	return rowsAff, nil
}

var mySQLAssetsTypeUniqueColumns = []string{
	"assets_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetsType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AssetsType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetsTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAssetsTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetsTypeUpsertCacheMut.RLock()
	cache, cached := assetsTypeUpsertCache[key]
	assetsTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetsTypeColumns,
			assetsTypeColumnsWithDefault,
			assetsTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetsTypeColumns,
			assetsTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert AssetsType, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "AssetsType", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `AssetsType` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for AssetsType")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(assetsTypeType, assetsTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for AssetsType")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AssetsType")
	}

CacheNoHooks:
	if !cached {
		assetsTypeUpsertCacheMut.Lock()
		assetsTypeUpsertCache[key] = cache
		assetsTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssetsType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetsType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssetsType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetsTypePrimaryKeyMapping)
	sql := "DELETE FROM `AssetsType` WHERE `assets_type_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AssetsType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AssetsType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetsTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assetsTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AssetsType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AssetsType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetsTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssetsType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(assetsTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetsTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `AssetsType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetsTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assetsType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AssetsType")
	}

	if len(assetsTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetsType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssetsType(ctx, exec, o.AssetsTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetsTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetsTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetsTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `AssetsType`.* FROM `AssetsType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetsTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssetsTypeSlice")
	}

	*o = slice

	return nil
}

// AssetsTypeExists checks if the AssetsType row exists.
func AssetsTypeExists(ctx context.Context, exec boil.ContextExecutor, assetsTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `AssetsType` where `assets_type_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, assetsTypeID)
	}

	row := exec.QueryRowContext(ctx, sql, assetsTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AssetsType exists")
	}

	return exists, nil
}
