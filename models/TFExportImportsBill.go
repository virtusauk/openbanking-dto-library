// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFExportImportsBill is an object representing the database table.
type TFExportImportsBill struct {
	TFBillID           int           `boil:"tf_bill_id" json:"tf_bill_id" toml:"tf_bill_id" yaml:"tf_bill_id"`
	BranchID           int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID            int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	Status             string        `boil:"status" json:"status" toml:"status" yaml:"status"`
	BillType           string        `boil:"bill_type" json:"bill_type" toml:"bill_type" yaml:"bill_type"`
	BillID             string        `boil:"bill_id" json:"bill_id" toml:"bill_id" yaml:"bill_id"`
	BillAmt            types.Decimal `boil:"bill_amt" json:"bill_amt" toml:"bill_amt" yaml:"bill_amt"`
	Ccy                string        `boil:"ccy" json:"ccy" toml:"ccy" yaml:"ccy"`
	BeneficiaryDetails string        `boil:"beneficiary_details" json:"beneficiary_details" toml:"beneficiary_details" yaml:"beneficiary_details"`
	BeneficiaryCountry string        `boil:"beneficiary_country" json:"beneficiary_country" toml:"beneficiary_country" yaml:"beneficiary_country"`
	DateOfShipment     time.Time     `boil:"date_of_shipment" json:"date_of_shipment" toml:"date_of_shipment" yaml:"date_of_shipment"`
	LoadingPort        string        `boil:"loading_port" json:"loading_port" toml:"loading_port" yaml:"loading_port"`
	DestinationPort    string        `boil:"destination_port" json:"destination_port" toml:"destination_port" yaml:"destination_port"`
	LCNumberIfLinked   string        `boil:"lc_number_if_linked" json:"lc_number_if_linked" toml:"lc_number_if_linked" yaml:"lc_number_if_linked"`
	MakerDate          time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate        null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID            string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID          null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy         null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate       null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFExportImportsBillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFExportImportsBillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFExportImportsBillColumns = struct {
	TFBillID           string
	BranchID           string
	PartyID            string
	Status             string
	BillType           string
	BillID             string
	BillAmt            string
	Ccy                string
	BeneficiaryDetails string
	BeneficiaryCountry string
	DateOfShipment     string
	LoadingPort        string
	DestinationPort    string
	LCNumberIfLinked   string
	MakerDate          string
	CheckerDate        string
	MakerID            string
	CheckerID          string
	ModifiedBy         string
	ModifiedDate       string
}{
	TFBillID:           "tf_bill_id",
	BranchID:           "branch_id",
	PartyID:            "party_id",
	Status:             "status",
	BillType:           "bill_type",
	BillID:             "bill_id",
	BillAmt:            "bill_amt",
	Ccy:                "ccy",
	BeneficiaryDetails: "beneficiary_details",
	BeneficiaryCountry: "beneficiary_country",
	DateOfShipment:     "date_of_shipment",
	LoadingPort:        "loading_port",
	DestinationPort:    "destination_port",
	LCNumberIfLinked:   "lc_number_if_linked",
	MakerDate:          "maker_date",
	CheckerDate:        "checker_date",
	MakerID:            "maker_id",
	CheckerID:          "checker_id",
	ModifiedBy:         "modified_by",
	ModifiedDate:       "modified_date",
}

// Generated where

var TFExportImportsBillWhere = struct {
	TFBillID           whereHelperint
	BranchID           whereHelperint
	PartyID            whereHelperint
	Status             whereHelperstring
	BillType           whereHelperstring
	BillID             whereHelperstring
	BillAmt            whereHelpertypes_Decimal
	Ccy                whereHelperstring
	BeneficiaryDetails whereHelperstring
	BeneficiaryCountry whereHelperstring
	DateOfShipment     whereHelpertime_Time
	LoadingPort        whereHelperstring
	DestinationPort    whereHelperstring
	LCNumberIfLinked   whereHelperstring
	MakerDate          whereHelpertime_Time
	CheckerDate        whereHelpernull_Time
	MakerID            whereHelperstring
	CheckerID          whereHelpernull_String
	ModifiedBy         whereHelpernull_String
	ModifiedDate       whereHelpernull_Time
}{
	TFBillID:           whereHelperint{field: `tf_bill_id`},
	BranchID:           whereHelperint{field: `branch_id`},
	PartyID:            whereHelperint{field: `party_id`},
	Status:             whereHelperstring{field: `status`},
	BillType:           whereHelperstring{field: `bill_type`},
	BillID:             whereHelperstring{field: `bill_id`},
	BillAmt:            whereHelpertypes_Decimal{field: `bill_amt`},
	Ccy:                whereHelperstring{field: `ccy`},
	BeneficiaryDetails: whereHelperstring{field: `beneficiary_details`},
	BeneficiaryCountry: whereHelperstring{field: `beneficiary_country`},
	DateOfShipment:     whereHelpertime_Time{field: `date_of_shipment`},
	LoadingPort:        whereHelperstring{field: `loading_port`},
	DestinationPort:    whereHelperstring{field: `destination_port`},
	LCNumberIfLinked:   whereHelperstring{field: `lc_number_if_linked`},
	MakerDate:          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:        whereHelpernull_Time{field: `checker_date`},
	MakerID:            whereHelperstring{field: `maker_id`},
	CheckerID:          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:       whereHelpernull_Time{field: `modified_date`},
}

// TFExportImportsBillRels is where relationship names are stored.
var TFExportImportsBillRels = struct {
	Party string
}{
	Party: "Party",
}

// tFExportImportsBillR is where relationships are stored.
type tFExportImportsBillR struct {
	Party *Party
}

// NewStruct creates a new relationship struct
func (*tFExportImportsBillR) NewStruct() *tFExportImportsBillR {
	return &tFExportImportsBillR{}
}

// tFExportImportsBillL is where Load methods for each relationship are stored.
type tFExportImportsBillL struct{}

var (
	tFExportImportsBillColumns               = []string{"tf_bill_id", "branch_id", "party_id", "status", "bill_type", "bill_id", "bill_amt", "ccy", "beneficiary_details", "beneficiary_country", "date_of_shipment", "loading_port", "destination_port", "lc_number_if_linked", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFExportImportsBillColumnsWithoutDefault = []string{"tf_bill_id", "branch_id", "party_id", "status", "bill_type", "bill_id", "bill_amt", "ccy", "beneficiary_details", "beneficiary_country", "date_of_shipment", "loading_port", "destination_port", "lc_number_if_linked", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFExportImportsBillColumnsWithDefault    = []string{}
	tFExportImportsBillPrimaryKeyColumns     = []string{"tf_bill_id"}
)

type (
	// TFExportImportsBillSlice is an alias for a slice of pointers to TFExportImportsBill.
	// This should generally be used opposed to []TFExportImportsBill.
	TFExportImportsBillSlice []*TFExportImportsBill
	// TFExportImportsBillHook is the signature for custom TFExportImportsBill hook methods
	TFExportImportsBillHook func(context.Context, boil.ContextExecutor, *TFExportImportsBill) error

	tFExportImportsBillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFExportImportsBillType                 = reflect.TypeOf(&TFExportImportsBill{})
	tFExportImportsBillMapping              = queries.MakeStructMapping(tFExportImportsBillType)
	tFExportImportsBillPrimaryKeyMapping, _ = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, tFExportImportsBillPrimaryKeyColumns)
	tFExportImportsBillInsertCacheMut       sync.RWMutex
	tFExportImportsBillInsertCache          = make(map[string]insertCache)
	tFExportImportsBillUpdateCacheMut       sync.RWMutex
	tFExportImportsBillUpdateCache          = make(map[string]updateCache)
	tFExportImportsBillUpsertCacheMut       sync.RWMutex
	tFExportImportsBillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFExportImportsBillBeforeInsertHooks []TFExportImportsBillHook
var tFExportImportsBillBeforeUpdateHooks []TFExportImportsBillHook
var tFExportImportsBillBeforeDeleteHooks []TFExportImportsBillHook
var tFExportImportsBillBeforeUpsertHooks []TFExportImportsBillHook

var tFExportImportsBillAfterInsertHooks []TFExportImportsBillHook
var tFExportImportsBillAfterSelectHooks []TFExportImportsBillHook
var tFExportImportsBillAfterUpdateHooks []TFExportImportsBillHook
var tFExportImportsBillAfterDeleteHooks []TFExportImportsBillHook
var tFExportImportsBillAfterUpsertHooks []TFExportImportsBillHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFExportImportsBill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFExportImportsBill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFExportImportsBill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFExportImportsBill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFExportImportsBill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFExportImportsBill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFExportImportsBill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFExportImportsBill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFExportImportsBill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFExportImportsBillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFExportImportsBillHook registers your hook function for all future operations.
func AddTFExportImportsBillHook(hookPoint boil.HookPoint, tFExportImportsBillHook TFExportImportsBillHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFExportImportsBillBeforeInsertHooks = append(tFExportImportsBillBeforeInsertHooks, tFExportImportsBillHook)
	case boil.BeforeUpdateHook:
		tFExportImportsBillBeforeUpdateHooks = append(tFExportImportsBillBeforeUpdateHooks, tFExportImportsBillHook)
	case boil.BeforeDeleteHook:
		tFExportImportsBillBeforeDeleteHooks = append(tFExportImportsBillBeforeDeleteHooks, tFExportImportsBillHook)
	case boil.BeforeUpsertHook:
		tFExportImportsBillBeforeUpsertHooks = append(tFExportImportsBillBeforeUpsertHooks, tFExportImportsBillHook)
	case boil.AfterInsertHook:
		tFExportImportsBillAfterInsertHooks = append(tFExportImportsBillAfterInsertHooks, tFExportImportsBillHook)
	case boil.AfterSelectHook:
		tFExportImportsBillAfterSelectHooks = append(tFExportImportsBillAfterSelectHooks, tFExportImportsBillHook)
	case boil.AfterUpdateHook:
		tFExportImportsBillAfterUpdateHooks = append(tFExportImportsBillAfterUpdateHooks, tFExportImportsBillHook)
	case boil.AfterDeleteHook:
		tFExportImportsBillAfterDeleteHooks = append(tFExportImportsBillAfterDeleteHooks, tFExportImportsBillHook)
	case boil.AfterUpsertHook:
		tFExportImportsBillAfterUpsertHooks = append(tFExportImportsBillAfterUpsertHooks, tFExportImportsBillHook)
	}
}

// One returns a single tFExportImportsBill record from the query.
func (q tFExportImportsBillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFExportImportsBill, error) {
	o := &TFExportImportsBill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFExportImportsBill")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFExportImportsBill records from the query.
func (q tFExportImportsBillQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFExportImportsBillSlice, error) {
	var o []*TFExportImportsBill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFExportImportsBill slice")
	}

	if len(tFExportImportsBillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFExportImportsBill records in the query.
func (q tFExportImportsBillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFExportImportsBill rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFExportImportsBillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFExportImportsBill exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *TFExportImportsBill) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFExportImportsBillL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFExportImportsBill interface{}, mods queries.Applicator) error {
	var slice []*TFExportImportsBill
	var object *TFExportImportsBill

	if singular {
		object = maybeTFExportImportsBill.(*TFExportImportsBill)
	} else {
		slice = *maybeTFExportImportsBill.(*[]*TFExportImportsBill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFExportImportsBillR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFExportImportsBillR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFExportImportsBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFExportImportsBills = append(foreign.R.PartyTFExportImportsBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFExportImportsBills = append(foreign.R.PartyTFExportImportsBills, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the tFExportImportsBill to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFExportImportsBills.
func (o *TFExportImportsBill) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFExportImportsBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFExportImportsBillPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFBillID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFExportImportsBillR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFExportImportsBills: TFExportImportsBillSlice{o},
		}
	} else {
		related.R.PartyTFExportImportsBills = append(related.R.PartyTFExportImportsBills, o)
	}

	return nil
}

// TFExportImportsBills retrieves all the records using an executor.
func TFExportImportsBills(mods ...qm.QueryMod) tFExportImportsBillQuery {
	mods = append(mods, qm.From("`TFExportImportsBill`"))
	return tFExportImportsBillQuery{NewQuery(mods...)}
}

// FindTFExportImportsBill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFExportImportsBill(ctx context.Context, exec boil.ContextExecutor, tFBillID int, selectCols ...string) (*TFExportImportsBill, error) {
	tFExportImportsBillObj := &TFExportImportsBill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFExportImportsBill` where `tf_bill_id`=?", sel,
	)

	q := queries.Raw(query, tFBillID)

	err := q.Bind(ctx, exec, tFExportImportsBillObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFExportImportsBill")
	}

	return tFExportImportsBillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFExportImportsBill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFExportImportsBill provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFExportImportsBillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFExportImportsBillInsertCacheMut.RLock()
	cache, cached := tFExportImportsBillInsertCache[key]
	tFExportImportsBillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFExportImportsBillColumns,
			tFExportImportsBillColumnsWithDefault,
			tFExportImportsBillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFExportImportsBill` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFExportImportsBill` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFExportImportsBill` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFExportImportsBillPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFExportImportsBill")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFBillID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFExportImportsBill")
	}

CacheNoHooks:
	if !cached {
		tFExportImportsBillInsertCacheMut.Lock()
		tFExportImportsBillInsertCache[key] = cache
		tFExportImportsBillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFExportImportsBill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFExportImportsBill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFExportImportsBillUpdateCacheMut.RLock()
	cache, cached := tFExportImportsBillUpdateCache[key]
	tFExportImportsBillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFExportImportsBillColumns,
			tFExportImportsBillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFExportImportsBill, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFExportImportsBill` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFExportImportsBillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, append(wl, tFExportImportsBillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFExportImportsBill row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFExportImportsBill")
	}

	if !cached {
		tFExportImportsBillUpdateCacheMut.Lock()
		tFExportImportsBillUpdateCache[key] = cache
		tFExportImportsBillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFExportImportsBillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFExportImportsBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFExportImportsBill")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFExportImportsBillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFExportImportsBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFExportImportsBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFExportImportsBillPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFExportImportsBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFExportImportsBill")
	}
	return rowsAff, nil
}

var mySQLTFExportImportsBillUniqueColumns = []string{
	"tf_bill_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFExportImportsBill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFExportImportsBill provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFExportImportsBillColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFExportImportsBillUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFExportImportsBillUpsertCacheMut.RLock()
	cache, cached := tFExportImportsBillUpsertCache[key]
	tFExportImportsBillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFExportImportsBillColumns,
			tFExportImportsBillColumnsWithDefault,
			tFExportImportsBillColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFExportImportsBillColumns,
			tFExportImportsBillPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFExportImportsBill, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFExportImportsBill", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFExportImportsBill` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFExportImportsBill")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFExportImportsBillType, tFExportImportsBillMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFExportImportsBill")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFExportImportsBill")
	}

CacheNoHooks:
	if !cached {
		tFExportImportsBillUpsertCacheMut.Lock()
		tFExportImportsBillUpsertCache[key] = cache
		tFExportImportsBillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFExportImportsBill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFExportImportsBill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFExportImportsBill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFExportImportsBillPrimaryKeyMapping)
	sql := "DELETE FROM `TFExportImportsBill` WHERE `tf_bill_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFExportImportsBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFExportImportsBill")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFExportImportsBillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFExportImportsBillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFExportImportsBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFExportImportsBill")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFExportImportsBillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFExportImportsBill slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFExportImportsBillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFExportImportsBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFExportImportsBill` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFExportImportsBillPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFExportImportsBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFExportImportsBill")
	}

	if len(tFExportImportsBillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFExportImportsBill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFExportImportsBill(ctx, exec, o.TFBillID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFExportImportsBillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFExportImportsBillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFExportImportsBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFExportImportsBill`.* FROM `TFExportImportsBill` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFExportImportsBillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFExportImportsBillSlice")
	}

	*o = slice

	return nil
}

// TFExportImportsBillExists checks if the TFExportImportsBill row exists.
func TFExportImportsBillExists(ctx context.Context, exec boil.ContextExecutor, tFBillID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFExportImportsBill` where `tf_bill_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFBillID)
	}

	row := exec.QueryRowContext(ctx, sql, tFBillID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFExportImportsBill exists")
	}

	return exists, nil
}
