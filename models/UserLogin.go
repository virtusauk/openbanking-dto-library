// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserLogin is an object representing the database table.
type UserLogin struct {
	ID                 int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	LoginID            string      `boil:"login_id" json:"login_id" toml:"login_id" yaml:"login_id"`
	BankID             int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	Password           null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	Role               null.String `boil:"role" json:"role,omitempty" toml:"role" yaml:"role,omitempty"`
	FirstName          null.String `boil:"first_name" json:"first_name,omitempty" toml:"first_name" yaml:"first_name,omitempty"`
	LastName           null.String `boil:"last_name" json:"last_name,omitempty" toml:"last_name" yaml:"last_name,omitempty"`
	Email              null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	AlterDate          null.Time   `boil:"alter_date" json:"alter_date,omitempty" toml:"alter_date" yaml:"alter_date,omitempty"`
	LastLogin          null.Time   `boil:"last_login" json:"last_login,omitempty" toml:"last_login" yaml:"last_login,omitempty"`
	PartyID            null.Int    `boil:"party_id" json:"party_id,omitempty" toml:"party_id" yaml:"party_id,omitempty"`
	Enabled            string      `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	BlockchainContract null.String `boil:"blockchain_contract" json:"blockchain_contract,omitempty" toml:"blockchain_contract" yaml:"blockchain_contract,omitempty"`
	UserRoleID         int         `boil:"user_role_id" json:"user_role_id" toml:"user_role_id" yaml:"user_role_id"`
	UserID             int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LangCode           null.String `boil:"lang_code" json:"lang_code,omitempty" toml:"lang_code" yaml:"lang_code,omitempty"`
	CountryCode        null.String `boil:"country_code" json:"country_code,omitempty" toml:"country_code" yaml:"country_code,omitempty"`
	Manager            null.String `boil:"manager" json:"manager,omitempty" toml:"manager" yaml:"manager,omitempty"`
	RoleID             int         `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	MakerDate          time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate        null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID            string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID          null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy         null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate       null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *userLoginR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLoginL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLoginColumns = struct {
	ID                 string
	LoginID            string
	BankID             string
	Password           string
	Role               string
	FirstName          string
	LastName           string
	Email              string
	AlterDate          string
	LastLogin          string
	PartyID            string
	Enabled            string
	BlockchainContract string
	UserRoleID         string
	UserID             string
	LangCode           string
	CountryCode        string
	Manager            string
	RoleID             string
	MakerDate          string
	CheckerDate        string
	MakerID            string
	CheckerID          string
	ModifiedBy         string
	ModifiedDate       string
}{
	ID:                 "id",
	LoginID:            "login_id",
	BankID:             "bank_id",
	Password:           "password",
	Role:               "role",
	FirstName:          "first_name",
	LastName:           "last_name",
	Email:              "email",
	AlterDate:          "alter_date",
	LastLogin:          "last_login",
	PartyID:            "party_id",
	Enabled:            "enabled",
	BlockchainContract: "blockchain_contract",
	UserRoleID:         "user_role_id",
	UserID:             "user_id",
	LangCode:           "lang_code",
	CountryCode:        "country_code",
	Manager:            "manager",
	RoleID:             "role_id",
	MakerDate:          "maker_date",
	CheckerDate:        "checker_date",
	MakerID:            "maker_id",
	CheckerID:          "checker_id",
	ModifiedBy:         "modified_by",
	ModifiedDate:       "modified_date",
}

// Generated where

var UserLoginWhere = struct {
	ID                 whereHelperint
	LoginID            whereHelperstring
	BankID             whereHelperint
	Password           whereHelpernull_String
	Role               whereHelpernull_String
	FirstName          whereHelpernull_String
	LastName           whereHelpernull_String
	Email              whereHelpernull_String
	AlterDate          whereHelpernull_Time
	LastLogin          whereHelpernull_Time
	PartyID            whereHelpernull_Int
	Enabled            whereHelperstring
	BlockchainContract whereHelpernull_String
	UserRoleID         whereHelperint
	UserID             whereHelperint
	LangCode           whereHelpernull_String
	CountryCode        whereHelpernull_String
	Manager            whereHelpernull_String
	RoleID             whereHelperint
	MakerDate          whereHelpertime_Time
	CheckerDate        whereHelpernull_Time
	MakerID            whereHelperstring
	CheckerID          whereHelpernull_String
	ModifiedBy         whereHelpernull_String
	ModifiedDate       whereHelpernull_Time
}{
	ID:                 whereHelperint{field: `id`},
	LoginID:            whereHelperstring{field: `login_id`},
	BankID:             whereHelperint{field: `bank_id`},
	Password:           whereHelpernull_String{field: `password`},
	Role:               whereHelpernull_String{field: `role`},
	FirstName:          whereHelpernull_String{field: `first_name`},
	LastName:           whereHelpernull_String{field: `last_name`},
	Email:              whereHelpernull_String{field: `email`},
	AlterDate:          whereHelpernull_Time{field: `alter_date`},
	LastLogin:          whereHelpernull_Time{field: `last_login`},
	PartyID:            whereHelpernull_Int{field: `party_id`},
	Enabled:            whereHelperstring{field: `enabled`},
	BlockchainContract: whereHelpernull_String{field: `blockchain_contract`},
	UserRoleID:         whereHelperint{field: `user_role_id`},
	UserID:             whereHelperint{field: `user_id`},
	LangCode:           whereHelpernull_String{field: `lang_code`},
	CountryCode:        whereHelpernull_String{field: `country_code`},
	Manager:            whereHelpernull_String{field: `manager`},
	RoleID:             whereHelperint{field: `role_id`},
	MakerDate:          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:        whereHelpernull_Time{field: `checker_date`},
	MakerID:            whereHelperstring{field: `maker_id`},
	CheckerID:          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:       whereHelpernull_Time{field: `modified_date`},
}

// UserLoginRels is where relationship names are stored.
var UserLoginRels = struct {
	Party string
}{
	Party: "Party",
}

// userLoginR is where relationships are stored.
type userLoginR struct {
	Party *Party
}

// NewStruct creates a new relationship struct
func (*userLoginR) NewStruct() *userLoginR {
	return &userLoginR{}
}

// userLoginL is where Load methods for each relationship are stored.
type userLoginL struct{}

var (
	userLoginColumns               = []string{"id", "login_id", "bank_id", "password", "role", "first_name", "last_name", "email", "alter_date", "last_login", "party_id", "enabled", "blockchain_contract", "user_role_id", "user_id", "lang_code", "country_code", "manager", "role_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	userLoginColumnsWithoutDefault = []string{"id", "login_id", "bank_id", "password", "role", "first_name", "last_name", "email", "alter_date", "last_login", "party_id", "enabled", "blockchain_contract", "user_role_id", "user_id", "lang_code", "country_code", "manager", "role_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	userLoginColumnsWithDefault    = []string{}
	userLoginPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserLoginSlice is an alias for a slice of pointers to UserLogin.
	// This should generally be used opposed to []UserLogin.
	UserLoginSlice []*UserLogin
	// UserLoginHook is the signature for custom UserLogin hook methods
	UserLoginHook func(context.Context, boil.ContextExecutor, *UserLogin) error

	userLoginQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLoginType                 = reflect.TypeOf(&UserLogin{})
	userLoginMapping              = queries.MakeStructMapping(userLoginType)
	userLoginPrimaryKeyMapping, _ = queries.BindMapping(userLoginType, userLoginMapping, userLoginPrimaryKeyColumns)
	userLoginInsertCacheMut       sync.RWMutex
	userLoginInsertCache          = make(map[string]insertCache)
	userLoginUpdateCacheMut       sync.RWMutex
	userLoginUpdateCache          = make(map[string]updateCache)
	userLoginUpsertCacheMut       sync.RWMutex
	userLoginUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userLoginBeforeInsertHooks []UserLoginHook
var userLoginBeforeUpdateHooks []UserLoginHook
var userLoginBeforeDeleteHooks []UserLoginHook
var userLoginBeforeUpsertHooks []UserLoginHook

var userLoginAfterInsertHooks []UserLoginHook
var userLoginAfterSelectHooks []UserLoginHook
var userLoginAfterUpdateHooks []UserLoginHook
var userLoginAfterDeleteHooks []UserLoginHook
var userLoginAfterUpsertHooks []UserLoginHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLogin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLogin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLogin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLogin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLogin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLogin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLogin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLogin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLogin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLoginHook registers your hook function for all future operations.
func AddUserLoginHook(hookPoint boil.HookPoint, userLoginHook UserLoginHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userLoginBeforeInsertHooks = append(userLoginBeforeInsertHooks, userLoginHook)
	case boil.BeforeUpdateHook:
		userLoginBeforeUpdateHooks = append(userLoginBeforeUpdateHooks, userLoginHook)
	case boil.BeforeDeleteHook:
		userLoginBeforeDeleteHooks = append(userLoginBeforeDeleteHooks, userLoginHook)
	case boil.BeforeUpsertHook:
		userLoginBeforeUpsertHooks = append(userLoginBeforeUpsertHooks, userLoginHook)
	case boil.AfterInsertHook:
		userLoginAfterInsertHooks = append(userLoginAfterInsertHooks, userLoginHook)
	case boil.AfterSelectHook:
		userLoginAfterSelectHooks = append(userLoginAfterSelectHooks, userLoginHook)
	case boil.AfterUpdateHook:
		userLoginAfterUpdateHooks = append(userLoginAfterUpdateHooks, userLoginHook)
	case boil.AfterDeleteHook:
		userLoginAfterDeleteHooks = append(userLoginAfterDeleteHooks, userLoginHook)
	case boil.AfterUpsertHook:
		userLoginAfterUpsertHooks = append(userLoginAfterUpsertHooks, userLoginHook)
	}
}

// One returns a single userLogin record from the query.
func (q userLoginQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLogin, error) {
	o := &UserLogin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for UserLogin")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserLogin records from the query.
func (q userLoginQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLoginSlice, error) {
	var o []*UserLogin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLogin slice")
	}

	if len(userLoginAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserLogin records in the query.
func (q userLoginQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count UserLogin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLoginQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if UserLogin exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *UserLogin) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLoginL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLogin interface{}, mods queries.Applicator) error {
	var slice []*UserLogin
	var object *UserLogin

	if singular {
		object = maybeUserLogin.(*UserLogin)
	} else {
		slice = *maybeUserLogin.(*[]*UserLogin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLoginR{}
		}
		if !queries.IsNil(object.PartyID) {
			args = append(args, object.PartyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLoginR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartyID) {
				args = append(args, obj.PartyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(userLoginAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyUserLogins = append(foreign.R.PartyUserLogins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartyID, foreign.PartyID) {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyUserLogins = append(foreign.R.PartyUserLogins, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the userLogin to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyUserLogins.
func (o *UserLogin) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `UserLogin` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, userLoginPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartyID, related.PartyID)
	if o.R == nil {
		o.R = &userLoginR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyUserLogins: UserLoginSlice{o},
		}
	} else {
		related.R.PartyUserLogins = append(related.R.PartyUserLogins, o)
	}

	return nil
}

// RemoveParty relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserLogin) RemoveParty(ctx context.Context, exec boil.ContextExecutor, related *Party) error {
	var err error

	queries.SetScanner(&o.PartyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("party_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Party = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartyUserLogins {
		if queries.Equal(o.PartyID, ri.PartyID) {
			continue
		}

		ln := len(related.R.PartyUserLogins)
		if ln > 1 && i < ln-1 {
			related.R.PartyUserLogins[i] = related.R.PartyUserLogins[ln-1]
		}
		related.R.PartyUserLogins = related.R.PartyUserLogins[:ln-1]
		break
	}
	return nil
}

// UserLogins retrieves all the records using an executor.
func UserLogins(mods ...qm.QueryMod) userLoginQuery {
	mods = append(mods, qm.From("`UserLogin`"))
	return userLoginQuery{NewQuery(mods...)}
}

// FindUserLogin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLogin(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserLogin, error) {
	userLoginObj := &UserLogin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `UserLogin` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userLoginObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from UserLogin")
	}

	return userLoginObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLogin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UserLogin provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLoginColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLoginInsertCacheMut.RLock()
	cache, cached := userLoginInsertCache[key]
	userLoginInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLoginColumns,
			userLoginColumnsWithDefault,
			userLoginColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLoginType, userLoginMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLoginType, userLoginMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `UserLogin` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `UserLogin` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `UserLogin` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userLoginPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into UserLogin")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for UserLogin")
	}

CacheNoHooks:
	if !cached {
		userLoginInsertCacheMut.Lock()
		userLoginInsertCache[key] = cache
		userLoginInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserLogin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLogin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userLoginUpdateCacheMut.RLock()
	cache, cached := userLoginUpdateCache[key]
	userLoginUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLoginColumns,
			userLoginPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update UserLogin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `UserLogin` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userLoginPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLoginType, userLoginMapping, append(wl, userLoginPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update UserLogin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for UserLogin")
	}

	if !cached {
		userLoginUpdateCacheMut.Lock()
		userLoginUpdateCache[key] = cache
		userLoginUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userLoginQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for UserLogin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for UserLogin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLoginSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `UserLogin` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLoginPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userLogin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userLogin")
	}
	return rowsAff, nil
}

var mySQLUserLoginUniqueColumns = []string{
	"id",
	"login_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLogin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UserLogin provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLoginColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserLoginUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLoginUpsertCacheMut.RLock()
	cache, cached := userLoginUpsertCache[key]
	userLoginUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userLoginColumns,
			userLoginColumnsWithDefault,
			userLoginColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userLoginColumns,
			userLoginPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert UserLogin, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "UserLogin", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `UserLogin` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userLoginType, userLoginMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLoginType, userLoginMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for UserLogin")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userLoginType, userLoginMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for UserLogin")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for UserLogin")
	}

CacheNoHooks:
	if !cached {
		userLoginUpsertCacheMut.Lock()
		userLoginUpsertCache[key] = cache
		userLoginUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserLogin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLogin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLogin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLoginPrimaryKeyMapping)
	sql := "DELETE FROM `UserLogin` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from UserLogin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for UserLogin")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLoginQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userLoginQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from UserLogin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UserLogin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLoginSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLogin slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userLoginBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `UserLogin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLoginPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userLogin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UserLogin")
	}

	if len(userLoginAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLogin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLogin(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLoginSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLoginSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `UserLogin`.* FROM `UserLogin` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLoginPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLoginSlice")
	}

	*o = slice

	return nil
}

// UserLoginExists checks if the UserLogin row exists.
func UserLoginExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `UserLogin` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if UserLogin exists")
	}

	return exists, nil
}
