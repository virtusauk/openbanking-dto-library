// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TFPartyTxn is an object representing the database table.
type TFPartyTxn struct {
	TFPartyID     int         `boil:"tf_party_id" json:"tf_party_id" toml:"tf_party_id" yaml:"tf_party_id"`
	TransactionID int         `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	TFLCID        int         `boil:"tf_lc_id" json:"tf_lc_id" toml:"tf_lc_id" yaml:"tf_lc_id"`
	AccountID     int         `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	ReferenceID   string      `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	BranchID      int         `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID       int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BranchCode    int         `boil:"branch_code" json:"branch_code" toml:"branch_code" yaml:"branch_code"`
	ProductCode   string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	PartyRole     string      `boil:"party_role" json:"party_role" toml:"party_role" yaml:"party_role"`
	PartyDom      string      `boil:"party_dom" json:"party_dom" toml:"party_dom" yaml:"party_dom"`
	MakerDate     time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate   null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID       string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID     null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy    null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate  null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFPartyTxnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFPartyTxnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFPartyTxnColumns = struct {
	TFPartyID     string
	TransactionID string
	TFLCID        string
	AccountID     string
	ReferenceID   string
	BranchID      string
	PartyID       string
	BranchCode    string
	ProductCode   string
	PartyRole     string
	PartyDom      string
	MakerDate     string
	CheckerDate   string
	MakerID       string
	CheckerID     string
	ModifiedBy    string
	ModifiedDate  string
}{
	TFPartyID:     "tf_party_id",
	TransactionID: "transaction_id",
	TFLCID:        "tf_lc_id",
	AccountID:     "account_id",
	ReferenceID:   "reference_id",
	BranchID:      "branch_id",
	PartyID:       "party_id",
	BranchCode:    "branch_code",
	ProductCode:   "product_code",
	PartyRole:     "party_role",
	PartyDom:      "party_dom",
	MakerDate:     "maker_date",
	CheckerDate:   "checker_date",
	MakerID:       "maker_id",
	CheckerID:     "checker_id",
	ModifiedBy:    "modified_by",
	ModifiedDate:  "modified_date",
}

// Generated where

var TFPartyTxnWhere = struct {
	TFPartyID     whereHelperint
	TransactionID whereHelperint
	TFLCID        whereHelperint
	AccountID     whereHelperint
	ReferenceID   whereHelperstring
	BranchID      whereHelperint
	PartyID       whereHelperint
	BranchCode    whereHelperint
	ProductCode   whereHelperstring
	PartyRole     whereHelperstring
	PartyDom      whereHelperstring
	MakerDate     whereHelpertime_Time
	CheckerDate   whereHelpernull_Time
	MakerID       whereHelperstring
	CheckerID     whereHelpernull_String
	ModifiedBy    whereHelpernull_String
	ModifiedDate  whereHelpernull_Time
}{
	TFPartyID:     whereHelperint{field: `tf_party_id`},
	TransactionID: whereHelperint{field: `transaction_id`},
	TFLCID:        whereHelperint{field: `tf_lc_id`},
	AccountID:     whereHelperint{field: `account_id`},
	ReferenceID:   whereHelperstring{field: `reference_id`},
	BranchID:      whereHelperint{field: `branch_id`},
	PartyID:       whereHelperint{field: `party_id`},
	BranchCode:    whereHelperint{field: `branch_code`},
	ProductCode:   whereHelperstring{field: `product_code`},
	PartyRole:     whereHelperstring{field: `party_role`},
	PartyDom:      whereHelperstring{field: `party_dom`},
	MakerDate:     whereHelpertime_Time{field: `maker_date`},
	CheckerDate:   whereHelpernull_Time{field: `checker_date`},
	MakerID:       whereHelperstring{field: `maker_id`},
	CheckerID:     whereHelpernull_String{field: `checker_id`},
	ModifiedBy:    whereHelpernull_String{field: `modified_by`},
	ModifiedDate:  whereHelpernull_Time{field: `modified_date`},
}

// TFPartyTxnRels is where relationship names are stored.
var TFPartyTxnRels = struct {
	Reference string
	Account   string
	Party     string
}{
	Reference: "Reference",
	Account:   "Account",
	Party:     "Party",
}

// tFPartyTxnR is where relationships are stored.
type tFPartyTxnR struct {
	Reference *TFLetterOfCredit
	Account   *Account
	Party     *Party
}

// NewStruct creates a new relationship struct
func (*tFPartyTxnR) NewStruct() *tFPartyTxnR {
	return &tFPartyTxnR{}
}

// tFPartyTxnL is where Load methods for each relationship are stored.
type tFPartyTxnL struct{}

var (
	tFPartyTxnColumns               = []string{"tf_party_id", "transaction_id", "tf_lc_id", "account_id", "reference_id", "branch_id", "party_id", "branch_code", "product_code", "party_role", "party_dom", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFPartyTxnColumnsWithoutDefault = []string{"tf_party_id", "transaction_id", "tf_lc_id", "account_id", "reference_id", "branch_id", "party_id", "branch_code", "product_code", "party_role", "party_dom", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFPartyTxnColumnsWithDefault    = []string{}
	tFPartyTxnPrimaryKeyColumns     = []string{"tf_party_id", "transaction_id"}
)

type (
	// TFPartyTxnSlice is an alias for a slice of pointers to TFPartyTxn.
	// This should generally be used opposed to []TFPartyTxn.
	TFPartyTxnSlice []*TFPartyTxn
	// TFPartyTxnHook is the signature for custom TFPartyTxn hook methods
	TFPartyTxnHook func(context.Context, boil.ContextExecutor, *TFPartyTxn) error

	tFPartyTxnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFPartyTxnType                 = reflect.TypeOf(&TFPartyTxn{})
	tFPartyTxnMapping              = queries.MakeStructMapping(tFPartyTxnType)
	tFPartyTxnPrimaryKeyMapping, _ = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, tFPartyTxnPrimaryKeyColumns)
	tFPartyTxnInsertCacheMut       sync.RWMutex
	tFPartyTxnInsertCache          = make(map[string]insertCache)
	tFPartyTxnUpdateCacheMut       sync.RWMutex
	tFPartyTxnUpdateCache          = make(map[string]updateCache)
	tFPartyTxnUpsertCacheMut       sync.RWMutex
	tFPartyTxnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFPartyTxnBeforeInsertHooks []TFPartyTxnHook
var tFPartyTxnBeforeUpdateHooks []TFPartyTxnHook
var tFPartyTxnBeforeDeleteHooks []TFPartyTxnHook
var tFPartyTxnBeforeUpsertHooks []TFPartyTxnHook

var tFPartyTxnAfterInsertHooks []TFPartyTxnHook
var tFPartyTxnAfterSelectHooks []TFPartyTxnHook
var tFPartyTxnAfterUpdateHooks []TFPartyTxnHook
var tFPartyTxnAfterDeleteHooks []TFPartyTxnHook
var tFPartyTxnAfterUpsertHooks []TFPartyTxnHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFPartyTxn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFPartyTxn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFPartyTxn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFPartyTxn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFPartyTxn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFPartyTxn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFPartyTxn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFPartyTxn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFPartyTxn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFPartyTxnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFPartyTxnHook registers your hook function for all future operations.
func AddTFPartyTxnHook(hookPoint boil.HookPoint, tFPartyTxnHook TFPartyTxnHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFPartyTxnBeforeInsertHooks = append(tFPartyTxnBeforeInsertHooks, tFPartyTxnHook)
	case boil.BeforeUpdateHook:
		tFPartyTxnBeforeUpdateHooks = append(tFPartyTxnBeforeUpdateHooks, tFPartyTxnHook)
	case boil.BeforeDeleteHook:
		tFPartyTxnBeforeDeleteHooks = append(tFPartyTxnBeforeDeleteHooks, tFPartyTxnHook)
	case boil.BeforeUpsertHook:
		tFPartyTxnBeforeUpsertHooks = append(tFPartyTxnBeforeUpsertHooks, tFPartyTxnHook)
	case boil.AfterInsertHook:
		tFPartyTxnAfterInsertHooks = append(tFPartyTxnAfterInsertHooks, tFPartyTxnHook)
	case boil.AfterSelectHook:
		tFPartyTxnAfterSelectHooks = append(tFPartyTxnAfterSelectHooks, tFPartyTxnHook)
	case boil.AfterUpdateHook:
		tFPartyTxnAfterUpdateHooks = append(tFPartyTxnAfterUpdateHooks, tFPartyTxnHook)
	case boil.AfterDeleteHook:
		tFPartyTxnAfterDeleteHooks = append(tFPartyTxnAfterDeleteHooks, tFPartyTxnHook)
	case boil.AfterUpsertHook:
		tFPartyTxnAfterUpsertHooks = append(tFPartyTxnAfterUpsertHooks, tFPartyTxnHook)
	}
}

// One returns a single tFPartyTxn record from the query.
func (q tFPartyTxnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFPartyTxn, error) {
	o := &TFPartyTxn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFPartyTxn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFPartyTxn records from the query.
func (q tFPartyTxnQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFPartyTxnSlice, error) {
	var o []*TFPartyTxn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFPartyTxn slice")
	}

	if len(tFPartyTxnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFPartyTxn records in the query.
func (q tFPartyTxnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFPartyTxn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFPartyTxnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFPartyTxn exists")
	}

	return count > 0, nil
}

// Reference pointed to by the foreign key.
func (o *TFPartyTxn) Reference(mods ...qm.QueryMod) tFLetterOfCreditQuery {
	queryMods := []qm.QueryMod{
		qm.Where("reference_id=?", o.ReferenceID),
	}

	queryMods = append(queryMods, mods...)

	query := TFLetterOfCredits(queryMods...)
	queries.SetFrom(query.Query, "`TFLetterOfCredit`")

	return query
}

// Account pointed to by the foreign key.
func (o *TFPartyTxn) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Party pointed to by the foreign key.
func (o *TFPartyTxn) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadReference allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFPartyTxnL) LoadReference(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFPartyTxn interface{}, mods queries.Applicator) error {
	var slice []*TFPartyTxn
	var object *TFPartyTxn

	if singular {
		object = maybeTFPartyTxn.(*TFPartyTxn)
	} else {
		slice = *maybeTFPartyTxn.(*[]*TFPartyTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFPartyTxnR{}
		}
		args = append(args, object.ReferenceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFPartyTxnR{}
			}

			for _, a := range args {
				if a == obj.ReferenceID {
					continue Outer
				}
			}

			args = append(args, obj.ReferenceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFLetterOfCredit`), qm.WhereIn(`reference_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFLetterOfCredit")
	}

	var resultSlice []*TFLetterOfCredit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFLetterOfCredit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFLetterOfCredit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFLetterOfCredit")
	}

	if len(tFPartyTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reference = foreign
		if foreign.R == nil {
			foreign.R = &tFLetterOfCreditR{}
		}
		foreign.R.ReferenceTFPartyTxns = append(foreign.R.ReferenceTFPartyTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReferenceID == foreign.ReferenceID {
				local.R.Reference = foreign
				if foreign.R == nil {
					foreign.R = &tFLetterOfCreditR{}
				}
				foreign.R.ReferenceTFPartyTxns = append(foreign.R.ReferenceTFPartyTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFPartyTxnL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFPartyTxn interface{}, mods queries.Applicator) error {
	var slice []*TFPartyTxn
	var object *TFPartyTxn

	if singular {
		object = maybeTFPartyTxn.(*TFPartyTxn)
	} else {
		slice = *maybeTFPartyTxn.(*[]*TFPartyTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFPartyTxnR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFPartyTxnR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(tFPartyTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountTFPartyTxns = append(foreign.R.AccountTFPartyTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountTFPartyTxns = append(foreign.R.AccountTFPartyTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFPartyTxnL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFPartyTxn interface{}, mods queries.Applicator) error {
	var slice []*TFPartyTxn
	var object *TFPartyTxn

	if singular {
		object = maybeTFPartyTxn.(*TFPartyTxn)
	} else {
		slice = *maybeTFPartyTxn.(*[]*TFPartyTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFPartyTxnR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFPartyTxnR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFPartyTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFPartyTxns = append(foreign.R.PartyTFPartyTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFPartyTxns = append(foreign.R.PartyTFPartyTxns, local)
				break
			}
		}
	}

	return nil
}

// SetReference of the tFPartyTxn to the related item.
// Sets o.R.Reference to related.
// Adds o to related.R.ReferenceTFPartyTxns.
func (o *TFPartyTxn) SetReference(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFLetterOfCredit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFPartyTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reference_id"}),
		strmangle.WhereClause("`", "`", 0, tFPartyTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.ReferenceID, o.TFPartyID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReferenceID = related.ReferenceID
	if o.R == nil {
		o.R = &tFPartyTxnR{
			Reference: related,
		}
	} else {
		o.R.Reference = related
	}

	if related.R == nil {
		related.R = &tFLetterOfCreditR{
			ReferenceTFPartyTxns: TFPartyTxnSlice{o},
		}
	} else {
		related.R.ReferenceTFPartyTxns = append(related.R.ReferenceTFPartyTxns, o)
	}

	return nil
}

// SetAccount of the tFPartyTxn to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountTFPartyTxns.
func (o *TFPartyTxn) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFPartyTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, tFPartyTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.TFPartyID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &tFPartyTxnR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountTFPartyTxns: TFPartyTxnSlice{o},
		}
	} else {
		related.R.AccountTFPartyTxns = append(related.R.AccountTFPartyTxns, o)
	}

	return nil
}

// SetParty of the tFPartyTxn to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFPartyTxns.
func (o *TFPartyTxn) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFPartyTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFPartyTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFPartyID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFPartyTxnR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFPartyTxns: TFPartyTxnSlice{o},
		}
	} else {
		related.R.PartyTFPartyTxns = append(related.R.PartyTFPartyTxns, o)
	}

	return nil
}

// TFPartyTxns retrieves all the records using an executor.
func TFPartyTxns(mods ...qm.QueryMod) tFPartyTxnQuery {
	mods = append(mods, qm.From("`TFPartyTxn`"))
	return tFPartyTxnQuery{NewQuery(mods...)}
}

// FindTFPartyTxn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFPartyTxn(ctx context.Context, exec boil.ContextExecutor, tFPartyID int, transactionID int, selectCols ...string) (*TFPartyTxn, error) {
	tFPartyTxnObj := &TFPartyTxn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFPartyTxn` where `tf_party_id`=? AND `transaction_id`=?", sel,
	)

	q := queries.Raw(query, tFPartyID, transactionID)

	err := q.Bind(ctx, exec, tFPartyTxnObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFPartyTxn")
	}

	return tFPartyTxnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFPartyTxn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFPartyTxn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFPartyTxnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFPartyTxnInsertCacheMut.RLock()
	cache, cached := tFPartyTxnInsertCache[key]
	tFPartyTxnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFPartyTxnColumns,
			tFPartyTxnColumnsWithDefault,
			tFPartyTxnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFPartyTxn` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFPartyTxn` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFPartyTxn` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFPartyTxnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFPartyTxn")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFPartyID,
		o.TransactionID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFPartyTxn")
	}

CacheNoHooks:
	if !cached {
		tFPartyTxnInsertCacheMut.Lock()
		tFPartyTxnInsertCache[key] = cache
		tFPartyTxnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFPartyTxn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFPartyTxn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFPartyTxnUpdateCacheMut.RLock()
	cache, cached := tFPartyTxnUpdateCache[key]
	tFPartyTxnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFPartyTxnColumns,
			tFPartyTxnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFPartyTxn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFPartyTxn` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFPartyTxnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, append(wl, tFPartyTxnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFPartyTxn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFPartyTxn")
	}

	if !cached {
		tFPartyTxnUpdateCacheMut.Lock()
		tFPartyTxnUpdateCache[key] = cache
		tFPartyTxnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFPartyTxnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFPartyTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFPartyTxn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFPartyTxnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFPartyTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFPartyTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFPartyTxnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFPartyTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFPartyTxn")
	}
	return rowsAff, nil
}

var mySQLTFPartyTxnUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFPartyTxn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFPartyTxn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFPartyTxnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFPartyTxnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFPartyTxnUpsertCacheMut.RLock()
	cache, cached := tFPartyTxnUpsertCache[key]
	tFPartyTxnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFPartyTxnColumns,
			tFPartyTxnColumnsWithDefault,
			tFPartyTxnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFPartyTxnColumns,
			tFPartyTxnPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFPartyTxn, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFPartyTxn", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFPartyTxn` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFPartyTxn")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFPartyTxnType, tFPartyTxnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFPartyTxn")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFPartyTxn")
	}

CacheNoHooks:
	if !cached {
		tFPartyTxnUpsertCacheMut.Lock()
		tFPartyTxnUpsertCache[key] = cache
		tFPartyTxnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFPartyTxn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFPartyTxn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFPartyTxn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFPartyTxnPrimaryKeyMapping)
	sql := "DELETE FROM `TFPartyTxn` WHERE `tf_party_id`=? AND `transaction_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFPartyTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFPartyTxn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFPartyTxnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFPartyTxnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFPartyTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFPartyTxn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFPartyTxnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFPartyTxn slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFPartyTxnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFPartyTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFPartyTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFPartyTxnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFPartyTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFPartyTxn")
	}

	if len(tFPartyTxnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFPartyTxn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFPartyTxn(ctx, exec, o.TFPartyID, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFPartyTxnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFPartyTxnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFPartyTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFPartyTxn`.* FROM `TFPartyTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFPartyTxnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFPartyTxnSlice")
	}

	*o = slice

	return nil
}

// TFPartyTxnExists checks if the TFPartyTxn row exists.
func TFPartyTxnExists(ctx context.Context, exec boil.ContextExecutor, tFPartyID int, transactionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFPartyTxn` where `tf_party_id`=? AND `transaction_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFPartyID, transactionID)
	}

	row := exec.QueryRowContext(ctx, sql, tFPartyID, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFPartyTxn exists")
	}

	return exists, nil
}
