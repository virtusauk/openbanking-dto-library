// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RoleResource is an object representing the database table.
type RoleResource struct {
	RoleResourceID int         `boil:"role_resource_id" json:"role_resource_id" toml:"role_resource_id" yaml:"role_resource_id"`
	RoleID         int         `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	ResourceID     int         `boil:"resource_id" json:"resource_id" toml:"resource_id" yaml:"resource_id"`
	Enabled        null.String `boil:"enabled" json:"enabled,omitempty" toml:"enabled" yaml:"enabled,omitempty"`
	BankID         int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`

	R *roleResourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleResourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleResourceColumns = struct {
	RoleResourceID string
	RoleID         string
	ResourceID     string
	Enabled        string
	BankID         string
}{
	RoleResourceID: "role_resource_id",
	RoleID:         "role_id",
	ResourceID:     "resource_id",
	Enabled:        "enabled",
	BankID:         "bank_id",
}

// Generated where

var RoleResourceWhere = struct {
	RoleResourceID whereHelperint
	RoleID         whereHelperint
	ResourceID     whereHelperint
	Enabled        whereHelpernull_String
	BankID         whereHelperint
}{
	RoleResourceID: whereHelperint{field: `role_resource_id`},
	RoleID:         whereHelperint{field: `role_id`},
	ResourceID:     whereHelperint{field: `resource_id`},
	Enabled:        whereHelpernull_String{field: `enabled`},
	BankID:         whereHelperint{field: `bank_id`},
}

// RoleResourceRels is where relationship names are stored.
var RoleResourceRels = struct {
	Resource string
	Role     string
}{
	Resource: "Resource",
	Role:     "Role",
}

// roleResourceR is where relationships are stored.
type roleResourceR struct {
	Resource *Resource
	Role     *Role
}

// NewStruct creates a new relationship struct
func (*roleResourceR) NewStruct() *roleResourceR {
	return &roleResourceR{}
}

// roleResourceL is where Load methods for each relationship are stored.
type roleResourceL struct{}

var (
	roleResourceColumns               = []string{"role_resource_id", "role_id", "resource_id", "enabled", "bank_id"}
	roleResourceColumnsWithoutDefault = []string{"role_id", "resource_id", "enabled", "bank_id"}
	roleResourceColumnsWithDefault    = []string{"role_resource_id"}
	roleResourcePrimaryKeyColumns     = []string{"role_resource_id"}
)

type (
	// RoleResourceSlice is an alias for a slice of pointers to RoleResource.
	// This should generally be used opposed to []RoleResource.
	RoleResourceSlice []*RoleResource
	// RoleResourceHook is the signature for custom RoleResource hook methods
	RoleResourceHook func(context.Context, boil.ContextExecutor, *RoleResource) error

	roleResourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleResourceType                 = reflect.TypeOf(&RoleResource{})
	roleResourceMapping              = queries.MakeStructMapping(roleResourceType)
	roleResourcePrimaryKeyMapping, _ = queries.BindMapping(roleResourceType, roleResourceMapping, roleResourcePrimaryKeyColumns)
	roleResourceInsertCacheMut       sync.RWMutex
	roleResourceInsertCache          = make(map[string]insertCache)
	roleResourceUpdateCacheMut       sync.RWMutex
	roleResourceUpdateCache          = make(map[string]updateCache)
	roleResourceUpsertCacheMut       sync.RWMutex
	roleResourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleResourceBeforeInsertHooks []RoleResourceHook
var roleResourceBeforeUpdateHooks []RoleResourceHook
var roleResourceBeforeDeleteHooks []RoleResourceHook
var roleResourceBeforeUpsertHooks []RoleResourceHook

var roleResourceAfterInsertHooks []RoleResourceHook
var roleResourceAfterSelectHooks []RoleResourceHook
var roleResourceAfterUpdateHooks []RoleResourceHook
var roleResourceAfterDeleteHooks []RoleResourceHook
var roleResourceAfterUpsertHooks []RoleResourceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleResource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleResource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleResource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleResource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleResource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleResource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleResource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleResource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleResource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleResourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleResourceHook registers your hook function for all future operations.
func AddRoleResourceHook(hookPoint boil.HookPoint, roleResourceHook RoleResourceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roleResourceBeforeInsertHooks = append(roleResourceBeforeInsertHooks, roleResourceHook)
	case boil.BeforeUpdateHook:
		roleResourceBeforeUpdateHooks = append(roleResourceBeforeUpdateHooks, roleResourceHook)
	case boil.BeforeDeleteHook:
		roleResourceBeforeDeleteHooks = append(roleResourceBeforeDeleteHooks, roleResourceHook)
	case boil.BeforeUpsertHook:
		roleResourceBeforeUpsertHooks = append(roleResourceBeforeUpsertHooks, roleResourceHook)
	case boil.AfterInsertHook:
		roleResourceAfterInsertHooks = append(roleResourceAfterInsertHooks, roleResourceHook)
	case boil.AfterSelectHook:
		roleResourceAfterSelectHooks = append(roleResourceAfterSelectHooks, roleResourceHook)
	case boil.AfterUpdateHook:
		roleResourceAfterUpdateHooks = append(roleResourceAfterUpdateHooks, roleResourceHook)
	case boil.AfterDeleteHook:
		roleResourceAfterDeleteHooks = append(roleResourceAfterDeleteHooks, roleResourceHook)
	case boil.AfterUpsertHook:
		roleResourceAfterUpsertHooks = append(roleResourceAfterUpsertHooks, roleResourceHook)
	}
}

// One returns a single roleResource record from the query.
func (q roleResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleResource, error) {
	o := &RoleResource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for RoleResources")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleResource records from the query.
func (q roleResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleResourceSlice, error) {
	var o []*RoleResource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleResource slice")
	}

	if len(roleResourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleResource records in the query.
func (q roleResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count RoleResources rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if RoleResources exists")
	}

	return count > 0, nil
}

// Resource pointed to by the foreign key.
func (o *RoleResource) Resource(mods ...qm.QueryMod) resourceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("resource_id=?", o.ResourceID),
	}

	queryMods = append(queryMods, mods...)

	query := Resources(queryMods...)
	queries.SetFrom(query.Query, "`Resources`")

	return query
}

// Role pointed to by the foreign key.
func (o *RoleResource) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("role_id=?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`Roles`")

	return query
}

// LoadResource allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleResourceL) LoadResource(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleResource interface{}, mods queries.Applicator) error {
	var slice []*RoleResource
	var object *RoleResource

	if singular {
		object = maybeRoleResource.(*RoleResource)
	} else {
		slice = *maybeRoleResource.(*[]*RoleResource)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleResourceR{}
		}
		args = append(args, object.ResourceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleResourceR{}
			}

			for _, a := range args {
				if a == obj.ResourceID {
					continue Outer
				}
			}

			args = append(args, obj.ResourceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Resources`), qm.WhereIn(`resource_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Resource")
	}

	var resultSlice []*Resource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Resource")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Resources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Resources")
	}

	if len(roleResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Resource = foreign
		if foreign.R == nil {
			foreign.R = &resourceR{}
		}
		foreign.R.ResourceRoleResources = append(foreign.R.ResourceRoleResources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResourceID == foreign.ResourceID {
				local.R.Resource = foreign
				if foreign.R == nil {
					foreign.R = &resourceR{}
				}
				foreign.R.ResourceRoleResources = append(foreign.R.ResourceRoleResources, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleResourceL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleResource interface{}, mods queries.Applicator) error {
	var slice []*RoleResource
	var object *RoleResource

	if singular {
		object = maybeRoleResource.(*RoleResource)
	} else {
		slice = *maybeRoleResource.(*[]*RoleResource)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleResourceR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleResourceR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Roles`), qm.WhereIn(`role_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Roles")
	}

	if len(roleResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleRoleResources = append(foreign.R.RoleRoleResources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.RoleID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleRoleResources = append(foreign.R.RoleRoleResources, local)
				break
			}
		}
	}

	return nil
}

// SetResource of the roleResource to the related item.
// Sets o.R.Resource to related.
// Adds o to related.R.ResourceRoleResources.
func (o *RoleResource) SetResource(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Resource) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `RoleResources` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"resource_id"}),
		strmangle.WhereClause("`", "`", 0, roleResourcePrimaryKeyColumns),
	)
	values := []interface{}{related.ResourceID, o.RoleResourceID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResourceID = related.ResourceID
	if o.R == nil {
		o.R = &roleResourceR{
			Resource: related,
		}
	} else {
		o.R.Resource = related
	}

	if related.R == nil {
		related.R = &resourceR{
			ResourceRoleResources: RoleResourceSlice{o},
		}
	} else {
		related.R.ResourceRoleResources = append(related.R.ResourceRoleResources, o)
	}

	return nil
}

// SetRole of the roleResource to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleRoleResources.
func (o *RoleResource) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `RoleResources` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role_id"}),
		strmangle.WhereClause("`", "`", 0, roleResourcePrimaryKeyColumns),
	)
	values := []interface{}{related.RoleID, o.RoleResourceID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.RoleID
	if o.R == nil {
		o.R = &roleResourceR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleRoleResources: RoleResourceSlice{o},
		}
	} else {
		related.R.RoleRoleResources = append(related.R.RoleRoleResources, o)
	}

	return nil
}

// RoleResources retrieves all the records using an executor.
func RoleResources(mods ...qm.QueryMod) roleResourceQuery {
	mods = append(mods, qm.From("`RoleResources`"))
	return roleResourceQuery{NewQuery(mods...)}
}

// FindRoleResource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleResource(ctx context.Context, exec boil.ContextExecutor, roleResourceID int, selectCols ...string) (*RoleResource, error) {
	roleResourceObj := &RoleResource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `RoleResources` where `role_resource_id`=?", sel,
	)

	q := queries.Raw(query, roleResourceID)

	err := q.Bind(ctx, exec, roleResourceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from RoleResources")
	}

	return roleResourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RoleResources provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleResourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleResourceInsertCacheMut.RLock()
	cache, cached := roleResourceInsertCache[key]
	roleResourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleResourceColumns,
			roleResourceColumnsWithDefault,
			roleResourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleResourceType, roleResourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleResourceType, roleResourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `RoleResources` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `RoleResources` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `RoleResources` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, roleResourcePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into RoleResources")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RoleResourceID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roleResourceMapping["RoleResourceID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RoleResourceID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RoleResources")
	}

CacheNoHooks:
	if !cached {
		roleResourceInsertCacheMut.Lock()
		roleResourceInsertCache[key] = cache
		roleResourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleResource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleResourceUpdateCacheMut.RLock()
	cache, cached := roleResourceUpdateCache[key]
	roleResourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleResourceColumns,
			roleResourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update RoleResources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `RoleResources` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, roleResourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleResourceType, roleResourceMapping, append(wl, roleResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update RoleResources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for RoleResources")
	}

	if !cached {
		roleResourceUpdateCacheMut.Lock()
		roleResourceUpdateCache[key] = cache
		roleResourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for RoleResources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for RoleResources")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `RoleResources` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleResourcePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleResource")
	}
	return rowsAff, nil
}

var mySQLRoleResourceUniqueColumns = []string{
	"role_resource_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RoleResources provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleResourceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRoleResourceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleResourceUpsertCacheMut.RLock()
	cache, cached := roleResourceUpsertCache[key]
	roleResourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleResourceColumns,
			roleResourceColumnsWithDefault,
			roleResourceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleResourceColumns,
			roleResourcePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert RoleResources, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "RoleResources", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `RoleResources` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(roleResourceType, roleResourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleResourceType, roleResourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for RoleResources")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RoleResourceID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roleResourceMapping["role_resource_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(roleResourceType, roleResourceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for RoleResources")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RoleResources")
	}

CacheNoHooks:
	if !cached {
		roleResourceUpsertCacheMut.Lock()
		roleResourceUpsertCache[key] = cache
		roleResourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoleResource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleResource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleResource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleResourcePrimaryKeyMapping)
	sql := "DELETE FROM `RoleResources` WHERE `role_resource_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from RoleResources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for RoleResources")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleResourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from RoleResources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RoleResources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleResource slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(roleResourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `RoleResources` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleResourcePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RoleResources")
	}

	if len(roleResourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleResource(ctx, exec, o.RoleResourceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleResourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `RoleResources`.* FROM `RoleResources` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleResourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleResourceSlice")
	}

	*o = slice

	return nil
}

// RoleResourceExists checks if the RoleResource row exists.
func RoleResourceExists(ctx context.Context, exec boil.ContextExecutor, roleResourceID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `RoleResources` where `role_resource_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, roleResourceID)
	}

	row := exec.QueryRowContext(ctx, sql, roleResourceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if RoleResources exists")
	}

	return exists, nil
}
