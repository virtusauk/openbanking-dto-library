// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RTP is an object representing the database table.
type RTP struct {
	RTPID        int         `boil:"rtp_id" json:"rtp_id" toml:"rtp_id" yaml:"rtp_id"`
	AccountID    int         `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	PartyID      int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	Status       null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *rtpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rtpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RTPColumns = struct {
	RTPID        string
	AccountID    string
	PartyID      string
	Status       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	RTPID:        "rtp_id",
	AccountID:    "account_id",
	PartyID:      "party_id",
	Status:       "status",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var RTPWhere = struct {
	RTPID        whereHelperint
	AccountID    whereHelperint
	PartyID      whereHelperint
	Status       whereHelpernull_String
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	RTPID:        whereHelperint{field: `rtp_id`},
	AccountID:    whereHelperint{field: `account_id`},
	PartyID:      whereHelperint{field: `party_id`},
	Status:       whereHelpernull_String{field: `status`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// RTPRels is where relationship names are stored.
var RTPRels = struct {
	Account      string
	Party        string
	RTPRtpTokens string
}{
	Account:      "Account",
	Party:        "Party",
	RTPRtpTokens: "RTPRtpTokens",
}

// rtpR is where relationships are stored.
type rtpR struct {
	Account      *Account
	Party        *Party
	RTPRtpTokens RtpTokenSlice
}

// NewStruct creates a new relationship struct
func (*rtpR) NewStruct() *rtpR {
	return &rtpR{}
}

// rtpL is where Load methods for each relationship are stored.
type rtpL struct{}

var (
	rtpColumns               = []string{"rtp_id", "account_id", "party_id", "status", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	rtpColumnsWithoutDefault = []string{"account_id", "party_id", "status", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	rtpColumnsWithDefault    = []string{"rtp_id"}
	rtpPrimaryKeyColumns     = []string{"rtp_id"}
)

type (
	// RTPSlice is an alias for a slice of pointers to RTP.
	// This should generally be used opposed to []RTP.
	RTPSlice []*RTP
	// RTPHook is the signature for custom RTP hook methods
	RTPHook func(context.Context, boil.ContextExecutor, *RTP) error

	rtpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rtpType                 = reflect.TypeOf(&RTP{})
	rtpMapping              = queries.MakeStructMapping(rtpType)
	rtpPrimaryKeyMapping, _ = queries.BindMapping(rtpType, rtpMapping, rtpPrimaryKeyColumns)
	rtpInsertCacheMut       sync.RWMutex
	rtpInsertCache          = make(map[string]insertCache)
	rtpUpdateCacheMut       sync.RWMutex
	rtpUpdateCache          = make(map[string]updateCache)
	rtpUpsertCacheMut       sync.RWMutex
	rtpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rtpBeforeInsertHooks []RTPHook
var rtpBeforeUpdateHooks []RTPHook
var rtpBeforeDeleteHooks []RTPHook
var rtpBeforeUpsertHooks []RTPHook

var rtpAfterInsertHooks []RTPHook
var rtpAfterSelectHooks []RTPHook
var rtpAfterUpdateHooks []RTPHook
var rtpAfterDeleteHooks []RTPHook
var rtpAfterUpsertHooks []RTPHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RTP) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RTP) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RTP) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RTP) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RTP) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RTP) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RTP) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RTP) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RTP) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rtpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRTPHook registers your hook function for all future operations.
func AddRTPHook(hookPoint boil.HookPoint, rtpHook RTPHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rtpBeforeInsertHooks = append(rtpBeforeInsertHooks, rtpHook)
	case boil.BeforeUpdateHook:
		rtpBeforeUpdateHooks = append(rtpBeforeUpdateHooks, rtpHook)
	case boil.BeforeDeleteHook:
		rtpBeforeDeleteHooks = append(rtpBeforeDeleteHooks, rtpHook)
	case boil.BeforeUpsertHook:
		rtpBeforeUpsertHooks = append(rtpBeforeUpsertHooks, rtpHook)
	case boil.AfterInsertHook:
		rtpAfterInsertHooks = append(rtpAfterInsertHooks, rtpHook)
	case boil.AfterSelectHook:
		rtpAfterSelectHooks = append(rtpAfterSelectHooks, rtpHook)
	case boil.AfterUpdateHook:
		rtpAfterUpdateHooks = append(rtpAfterUpdateHooks, rtpHook)
	case boil.AfterDeleteHook:
		rtpAfterDeleteHooks = append(rtpAfterDeleteHooks, rtpHook)
	case boil.AfterUpsertHook:
		rtpAfterUpsertHooks = append(rtpAfterUpsertHooks, rtpHook)
	}
}

// One returns a single rtp record from the query.
func (q rtpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RTP, error) {
	o := &RTP{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Rtp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RTP records from the query.
func (q rtpQuery) All(ctx context.Context, exec boil.ContextExecutor) (RTPSlice, error) {
	var o []*RTP

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RTP slice")
	}

	if len(rtpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RTP records in the query.
func (q rtpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Rtp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rtpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Rtp exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *RTP) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Party pointed to by the foreign key.
func (o *RTP) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// RTPRtpTokens retrieves all the RtpToken's RtpTokens with an executor via rtp_id column.
func (o *RTP) RTPRtpTokens(mods ...qm.QueryMod) rtpTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`RtpToken`.`rtp_id`=?", o.RTPID),
	)

	query := RtpTokens(queryMods...)
	queries.SetFrom(query.Query, "`RtpToken`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`RtpToken`.*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rtpL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRTP interface{}, mods queries.Applicator) error {
	var slice []*RTP
	var object *RTP

	if singular {
		object = maybeRTP.(*RTP)
	} else {
		slice = *maybeRTP.(*[]*RTP)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(rtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountRTPS = append(foreign.R.AccountRTPS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountRTPS = append(foreign.R.AccountRTPS, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rtpL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRTP interface{}, mods queries.Applicator) error {
	var slice []*RTP
	var object *RTP

	if singular {
		object = maybeRTP.(*RTP)
	} else {
		slice = *maybeRTP.(*[]*RTP)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(rtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyRTP = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyRTP = local
				break
			}
		}
	}

	return nil
}

// LoadRTPRtpTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rtpL) LoadRTPRtpTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRTP interface{}, mods queries.Applicator) error {
	var slice []*RTP
	var object *RTP

	if singular {
		object = maybeRTP.(*RTP)
	} else {
		slice = *maybeRTP.(*[]*RTP)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rtpR{}
		}
		args = append(args, object.RTPID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rtpR{}
			}

			for _, a := range args {
				if a == obj.RTPID {
					continue Outer
				}
			}

			args = append(args, obj.RTPID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`RtpToken`), qm.WhereIn(`rtp_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RtpToken")
	}

	var resultSlice []*RtpToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RtpToken")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on RtpToken")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RtpToken")
	}

	if len(rtpTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RTPRtpTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rtpTokenR{}
			}
			foreign.R.RTP = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.RTPID == foreign.RTPID {
				local.R.RTPRtpTokens = append(local.R.RTPRtpTokens, foreign)
				if foreign.R == nil {
					foreign.R = &rtpTokenR{}
				}
				foreign.R.RTP = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the rtp to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountRTPS.
func (o *RTP) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Rtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, rtpPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.RTPID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &rtpR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountRTPS: RTPSlice{o},
		}
	} else {
		related.R.AccountRTPS = append(related.R.AccountRTPS, o)
	}

	return nil
}

// SetParty of the rtp to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyRTP.
func (o *RTP) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Rtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, rtpPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.RTPID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &rtpR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyRTP: o,
		}
	} else {
		related.R.PartyRTP = o
	}

	return nil
}

// AddRTPRtpTokens adds the given related objects to the existing relationships
// of the Rtp, optionally inserting them as new records.
// Appends related to o.R.RTPRtpTokens.
// Sets related.R.RTP appropriately.
func (o *RTP) AddRTPRtpTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RtpToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RTPID = o.RTPID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `RtpToken` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"rtp_id"}),
				strmangle.WhereClause("`", "`", 0, rtpTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.RTPID, rel.TokenID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RTPID = o.RTPID
		}
	}

	if o.R == nil {
		o.R = &rtpR{
			RTPRtpTokens: related,
		}
	} else {
		o.R.RTPRtpTokens = append(o.R.RTPRtpTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rtpTokenR{
				RTP: o,
			}
		} else {
			rel.R.RTP = o
		}
	}
	return nil
}

// RTPS retrieves all the records using an executor.
func RTPS(mods ...qm.QueryMod) rtpQuery {
	mods = append(mods, qm.From("`Rtp`"))
	return rtpQuery{NewQuery(mods...)}
}

// FindRTP retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRTP(ctx context.Context, exec boil.ContextExecutor, rTPID int, selectCols ...string) (*RTP, error) {
	rtpObj := &RTP{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Rtp` where `rtp_id`=?", sel,
	)

	q := queries.Raw(query, rTPID)

	err := q.Bind(ctx, exec, rtpObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Rtp")
	}

	return rtpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RTP) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Rtp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rtpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rtpInsertCacheMut.RLock()
	cache, cached := rtpInsertCache[key]
	rtpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rtpColumns,
			rtpColumnsWithDefault,
			rtpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rtpType, rtpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rtpType, rtpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Rtp` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Rtp` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Rtp` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, rtpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Rtp")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RTPID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rtpMapping["RTPID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RTPID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Rtp")
	}

CacheNoHooks:
	if !cached {
		rtpInsertCacheMut.Lock()
		rtpInsertCache[key] = cache
		rtpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RTP.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RTP) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rtpUpdateCacheMut.RLock()
	cache, cached := rtpUpdateCache[key]
	rtpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rtpColumns,
			rtpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Rtp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Rtp` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, rtpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rtpType, rtpMapping, append(wl, rtpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Rtp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Rtp")
	}

	if !cached {
		rtpUpdateCacheMut.Lock()
		rtpUpdateCache[key] = cache
		rtpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rtpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Rtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Rtp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RTPSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Rtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rtp")
	}
	return rowsAff, nil
}

var mySQLRTPUniqueColumns = []string{
	"rtp_id",
	"party_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RTP) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Rtp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rtpColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRTPUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rtpUpsertCacheMut.RLock()
	cache, cached := rtpUpsertCache[key]
	rtpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rtpColumns,
			rtpColumnsWithDefault,
			rtpColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rtpColumns,
			rtpPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Rtp, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Rtp", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Rtp` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rtpType, rtpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rtpType, rtpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Rtp")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.RTPID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == rtpMapping["rtp_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rtpType, rtpMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Rtp")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Rtp")
	}

CacheNoHooks:
	if !cached {
		rtpUpsertCacheMut.Lock()
		rtpUpsertCache[key] = cache
		rtpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RTP record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RTP) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RTP provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rtpPrimaryKeyMapping)
	sql := "DELETE FROM `Rtp` WHERE `rtp_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Rtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Rtp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rtpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rtpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Rtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Rtp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RTPSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RTP slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(rtpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Rtp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Rtp")
	}

	if len(rtpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RTP) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRTP(ctx, exec, o.RTPID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RTPSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RTPSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Rtp`.* FROM `Rtp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, rtpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RTPSlice")
	}

	*o = slice

	return nil
}

// RTPExists checks if the RTP row exists.
func RTPExists(ctx context.Context, exec boil.ContextExecutor, rTPID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Rtp` where `rtp_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, rTPID)
	}

	row := exec.QueryRowContext(ctx, sql, rTPID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Rtp exists")
	}

	return exists, nil
}
