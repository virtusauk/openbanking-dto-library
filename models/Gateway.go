// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Gateway is an object representing the database table.
type Gateway struct {
	GatewayID    int         `boil:"gateway_id" json:"gateway_id" toml:"gateway_id" yaml:"gateway_id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description  string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Active       null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *gatewayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gatewayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GatewayColumns = struct {
	GatewayID    string
	Name         string
	Description  string
	Active       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	GatewayID:    "gateway_id",
	Name:         "name",
	Description:  "description",
	Active:       "active",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var GatewayWhere = struct {
	GatewayID    whereHelperint
	Name         whereHelperstring
	Description  whereHelperstring
	Active       whereHelpernull_String
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	GatewayID:    whereHelperint{field: `gateway_id`},
	Name:         whereHelperstring{field: `name`},
	Description:  whereHelperstring{field: `description`},
	Active:       whereHelpernull_String{field: `active`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// GatewayRels is where relationship names are stored.
var GatewayRels = struct {
	GatewayPaymentGateways string
}{
	GatewayPaymentGateways: "GatewayPaymentGateways",
}

// gatewayR is where relationships are stored.
type gatewayR struct {
	GatewayPaymentGateways PaymentGatewaySlice
}

// NewStruct creates a new relationship struct
func (*gatewayR) NewStruct() *gatewayR {
	return &gatewayR{}
}

// gatewayL is where Load methods for each relationship are stored.
type gatewayL struct{}

var (
	gatewayColumns               = []string{"gateway_id", "name", "description", "active", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	gatewayColumnsWithoutDefault = []string{"name", "description", "active", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	gatewayColumnsWithDefault    = []string{"gateway_id"}
	gatewayPrimaryKeyColumns     = []string{"gateway_id"}
)

type (
	// GatewaySlice is an alias for a slice of pointers to Gateway.
	// This should generally be used opposed to []Gateway.
	GatewaySlice []*Gateway
	// GatewayHook is the signature for custom Gateway hook methods
	GatewayHook func(context.Context, boil.ContextExecutor, *Gateway) error

	gatewayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gatewayType                 = reflect.TypeOf(&Gateway{})
	gatewayMapping              = queries.MakeStructMapping(gatewayType)
	gatewayPrimaryKeyMapping, _ = queries.BindMapping(gatewayType, gatewayMapping, gatewayPrimaryKeyColumns)
	gatewayInsertCacheMut       sync.RWMutex
	gatewayInsertCache          = make(map[string]insertCache)
	gatewayUpdateCacheMut       sync.RWMutex
	gatewayUpdateCache          = make(map[string]updateCache)
	gatewayUpsertCacheMut       sync.RWMutex
	gatewayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gatewayBeforeInsertHooks []GatewayHook
var gatewayBeforeUpdateHooks []GatewayHook
var gatewayBeforeDeleteHooks []GatewayHook
var gatewayBeforeUpsertHooks []GatewayHook

var gatewayAfterInsertHooks []GatewayHook
var gatewayAfterSelectHooks []GatewayHook
var gatewayAfterUpdateHooks []GatewayHook
var gatewayAfterDeleteHooks []GatewayHook
var gatewayAfterUpsertHooks []GatewayHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Gateway) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Gateway) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Gateway) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Gateway) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Gateway) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Gateway) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Gateway) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Gateway) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Gateway) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gatewayAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGatewayHook registers your hook function for all future operations.
func AddGatewayHook(hookPoint boil.HookPoint, gatewayHook GatewayHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gatewayBeforeInsertHooks = append(gatewayBeforeInsertHooks, gatewayHook)
	case boil.BeforeUpdateHook:
		gatewayBeforeUpdateHooks = append(gatewayBeforeUpdateHooks, gatewayHook)
	case boil.BeforeDeleteHook:
		gatewayBeforeDeleteHooks = append(gatewayBeforeDeleteHooks, gatewayHook)
	case boil.BeforeUpsertHook:
		gatewayBeforeUpsertHooks = append(gatewayBeforeUpsertHooks, gatewayHook)
	case boil.AfterInsertHook:
		gatewayAfterInsertHooks = append(gatewayAfterInsertHooks, gatewayHook)
	case boil.AfterSelectHook:
		gatewayAfterSelectHooks = append(gatewayAfterSelectHooks, gatewayHook)
	case boil.AfterUpdateHook:
		gatewayAfterUpdateHooks = append(gatewayAfterUpdateHooks, gatewayHook)
	case boil.AfterDeleteHook:
		gatewayAfterDeleteHooks = append(gatewayAfterDeleteHooks, gatewayHook)
	case boil.AfterUpsertHook:
		gatewayAfterUpsertHooks = append(gatewayAfterUpsertHooks, gatewayHook)
	}
}

// One returns a single gateway record from the query.
func (q gatewayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Gateway, error) {
	o := &Gateway{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Gateway")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Gateway records from the query.
func (q gatewayQuery) All(ctx context.Context, exec boil.ContextExecutor) (GatewaySlice, error) {
	var o []*Gateway

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Gateway slice")
	}

	if len(gatewayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Gateway records in the query.
func (q gatewayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Gateway rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gatewayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Gateway exists")
	}

	return count > 0, nil
}

// GatewayPaymentGateways retrieves all the PaymentGateway's PaymentGateways with an executor via gateway_id column.
func (o *Gateway) GatewayPaymentGateways(mods ...qm.QueryMod) paymentGatewayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PaymentGateway`.`gateway_id`=?", o.GatewayID),
	)

	query := PaymentGateways(queryMods...)
	queries.SetFrom(query.Query, "`PaymentGateway`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`PaymentGateway`.*"})
	}

	return query
}

// LoadGatewayPaymentGateways allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gatewayL) LoadGatewayPaymentGateways(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGateway interface{}, mods queries.Applicator) error {
	var slice []*Gateway
	var object *Gateway

	if singular {
		object = maybeGateway.(*Gateway)
	} else {
		slice = *maybeGateway.(*[]*Gateway)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gatewayR{}
		}
		args = append(args, object.GatewayID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gatewayR{}
			}

			for _, a := range args {
				if a == obj.GatewayID {
					continue Outer
				}
			}

			args = append(args, obj.GatewayID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentGateway`), qm.WhereIn(`gateway_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentGateway")
	}

	var resultSlice []*PaymentGateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentGateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PaymentGateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentGateway")
	}

	if len(paymentGatewayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GatewayPaymentGateways = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentGatewayR{}
			}
			foreign.R.Gateway = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GatewayID == foreign.GatewayID {
				local.R.GatewayPaymentGateways = append(local.R.GatewayPaymentGateways, foreign)
				if foreign.R == nil {
					foreign.R = &paymentGatewayR{}
				}
				foreign.R.Gateway = local
				break
			}
		}
	}

	return nil
}

// AddGatewayPaymentGateways adds the given related objects to the existing relationships
// of the Gateway, optionally inserting them as new records.
// Appends related to o.R.GatewayPaymentGateways.
// Sets related.R.Gateway appropriately.
func (o *Gateway) AddGatewayPaymentGateways(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PaymentGateway) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GatewayID = o.GatewayID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PaymentGateway` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"gateway_id"}),
				strmangle.WhereClause("`", "`", 0, paymentGatewayPrimaryKeyColumns),
			)
			values := []interface{}{o.GatewayID, rel.PaymentGatewayID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GatewayID = o.GatewayID
		}
	}

	if o.R == nil {
		o.R = &gatewayR{
			GatewayPaymentGateways: related,
		}
	} else {
		o.R.GatewayPaymentGateways = append(o.R.GatewayPaymentGateways, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentGatewayR{
				Gateway: o,
			}
		} else {
			rel.R.Gateway = o
		}
	}
	return nil
}

// Gateways retrieves all the records using an executor.
func Gateways(mods ...qm.QueryMod) gatewayQuery {
	mods = append(mods, qm.From("`Gateway`"))
	return gatewayQuery{NewQuery(mods...)}
}

// FindGateway retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGateway(ctx context.Context, exec boil.ContextExecutor, gatewayID int, selectCols ...string) (*Gateway, error) {
	gatewayObj := &Gateway{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Gateway` where `gateway_id`=?", sel,
	)

	q := queries.Raw(query, gatewayID)

	err := q.Bind(ctx, exec, gatewayObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Gateway")
	}

	return gatewayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Gateway) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Gateway provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gatewayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gatewayInsertCacheMut.RLock()
	cache, cached := gatewayInsertCache[key]
	gatewayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gatewayColumns,
			gatewayColumnsWithDefault,
			gatewayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gatewayType, gatewayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gatewayType, gatewayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Gateway` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Gateway` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Gateway` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gatewayPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Gateway")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GatewayID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gatewayMapping["GatewayID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GatewayID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Gateway")
	}

CacheNoHooks:
	if !cached {
		gatewayInsertCacheMut.Lock()
		gatewayInsertCache[key] = cache
		gatewayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Gateway.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Gateway) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gatewayUpdateCacheMut.RLock()
	cache, cached := gatewayUpdateCache[key]
	gatewayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gatewayColumns,
			gatewayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Gateway, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Gateway` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gatewayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gatewayType, gatewayMapping, append(wl, gatewayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Gateway row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Gateway")
	}

	if !cached {
		gatewayUpdateCacheMut.Lock()
		gatewayUpdateCache[key] = cache
		gatewayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gatewayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Gateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Gateway")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GatewaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Gateway` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gateway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gateway")
	}
	return rowsAff, nil
}

var mySQLGatewayUniqueColumns = []string{
	"gateway_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Gateway) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Gateway provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gatewayColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGatewayUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gatewayUpsertCacheMut.RLock()
	cache, cached := gatewayUpsertCache[key]
	gatewayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gatewayColumns,
			gatewayColumnsWithDefault,
			gatewayColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gatewayColumns,
			gatewayPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Gateway, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Gateway", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Gateway` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gatewayType, gatewayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gatewayType, gatewayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Gateway")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GatewayID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gatewayMapping["gateway_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gatewayType, gatewayMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Gateway")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Gateway")
	}

CacheNoHooks:
	if !cached {
		gatewayUpsertCacheMut.Lock()
		gatewayUpsertCache[key] = cache
		gatewayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Gateway record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Gateway) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Gateway provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gatewayPrimaryKeyMapping)
	sql := "DELETE FROM `Gateway` WHERE `gateway_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Gateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Gateway")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gatewayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gatewayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Gateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Gateway")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GatewaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Gateway slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(gatewayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Gateway` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gateway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Gateway")
	}

	if len(gatewayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Gateway) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGateway(ctx, exec, o.GatewayID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GatewaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GatewaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Gateway`.* FROM `Gateway` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GatewaySlice")
	}

	*o = slice

	return nil
}

// GatewayExists checks if the Gateway row exists.
func GatewayExists(ctx context.Context, exec boil.ContextExecutor, gatewayID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Gateway` where `gateway_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, gatewayID)
	}

	row := exec.QueryRowContext(ctx, sql, gatewayID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Gateway exists")
	}

	return exists, nil
}
