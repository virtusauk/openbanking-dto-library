// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TFLcLetterTxn is an object representing the database table.
type TFLcLetterTxn struct {
	TFLCLetterID  int         `boil:"tf_lc_letter_id" json:"tf_lc_letter_id" toml:"tf_lc_letter_id" yaml:"tf_lc_letter_id"`
	TransactionID int         `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ReferenceID   string      `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	ProductCode   string      `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	BranchID      int         `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID       int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	DocumentID    int         `boil:"document_id" json:"document_id" toml:"document_id" yaml:"document_id"`
	LCDocs        int         `boil:"lc_docs" json:"lc_docs" toml:"lc_docs" yaml:"lc_docs"`
	MakerDate     time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate   null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID       string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID     null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy    null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate  null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFLcLetterTxnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFLcLetterTxnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFLcLetterTxnColumns = struct {
	TFLCLetterID  string
	TransactionID string
	ReferenceID   string
	ProductCode   string
	BranchID      string
	PartyID       string
	DocumentID    string
	LCDocs        string
	MakerDate     string
	CheckerDate   string
	MakerID       string
	CheckerID     string
	ModifiedBy    string
	ModifiedDate  string
}{
	TFLCLetterID:  "tf_lc_letter_id",
	TransactionID: "transaction_id",
	ReferenceID:   "reference_id",
	ProductCode:   "product_code",
	BranchID:      "branch_id",
	PartyID:       "party_id",
	DocumentID:    "document_id",
	LCDocs:        "lc_docs",
	MakerDate:     "maker_date",
	CheckerDate:   "checker_date",
	MakerID:       "maker_id",
	CheckerID:     "checker_id",
	ModifiedBy:    "modified_by",
	ModifiedDate:  "modified_date",
}

// Generated where

var TFLcLetterTxnWhere = struct {
	TFLCLetterID  whereHelperint
	TransactionID whereHelperint
	ReferenceID   whereHelperstring
	ProductCode   whereHelperstring
	BranchID      whereHelperint
	PartyID       whereHelperint
	DocumentID    whereHelperint
	LCDocs        whereHelperint
	MakerDate     whereHelpertime_Time
	CheckerDate   whereHelpernull_Time
	MakerID       whereHelperstring
	CheckerID     whereHelpernull_String
	ModifiedBy    whereHelpernull_String
	ModifiedDate  whereHelpernull_Time
}{
	TFLCLetterID:  whereHelperint{field: `tf_lc_letter_id`},
	TransactionID: whereHelperint{field: `transaction_id`},
	ReferenceID:   whereHelperstring{field: `reference_id`},
	ProductCode:   whereHelperstring{field: `product_code`},
	BranchID:      whereHelperint{field: `branch_id`},
	PartyID:       whereHelperint{field: `party_id`},
	DocumentID:    whereHelperint{field: `document_id`},
	LCDocs:        whereHelperint{field: `lc_docs`},
	MakerDate:     whereHelpertime_Time{field: `maker_date`},
	CheckerDate:   whereHelpernull_Time{field: `checker_date`},
	MakerID:       whereHelperstring{field: `maker_id`},
	CheckerID:     whereHelpernull_String{field: `checker_id`},
	ModifiedBy:    whereHelpernull_String{field: `modified_by`},
	ModifiedDate:  whereHelpernull_Time{field: `modified_date`},
}

// TFLcLetterTxnRels is where relationship names are stored.
var TFLcLetterTxnRels = struct {
	Party      string
	Reference  string
	TFLCLetter string
}{
	Party:      "Party",
	Reference:  "Reference",
	TFLCLetter: "TFLCLetter",
}

// tFLcLetterTxnR is where relationships are stored.
type tFLcLetterTxnR struct {
	Party      *Party
	Reference  *TFLetterOfCredit
	TFLCLetter *TFLcLetter
}

// NewStruct creates a new relationship struct
func (*tFLcLetterTxnR) NewStruct() *tFLcLetterTxnR {
	return &tFLcLetterTxnR{}
}

// tFLcLetterTxnL is where Load methods for each relationship are stored.
type tFLcLetterTxnL struct{}

var (
	tFLcLetterTxnColumns               = []string{"tf_lc_letter_id", "transaction_id", "reference_id", "product_code", "branch_id", "party_id", "document_id", "lc_docs", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFLcLetterTxnColumnsWithoutDefault = []string{"tf_lc_letter_id", "transaction_id", "reference_id", "product_code", "branch_id", "party_id", "document_id", "lc_docs", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFLcLetterTxnColumnsWithDefault    = []string{}
	tFLcLetterTxnPrimaryKeyColumns     = []string{"tf_lc_letter_id", "transaction_id"}
)

type (
	// TFLcLetterTxnSlice is an alias for a slice of pointers to TFLcLetterTxn.
	// This should generally be used opposed to []TFLcLetterTxn.
	TFLcLetterTxnSlice []*TFLcLetterTxn
	// TFLcLetterTxnHook is the signature for custom TFLcLetterTxn hook methods
	TFLcLetterTxnHook func(context.Context, boil.ContextExecutor, *TFLcLetterTxn) error

	tFLcLetterTxnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFLcLetterTxnType                 = reflect.TypeOf(&TFLcLetterTxn{})
	tFLcLetterTxnMapping              = queries.MakeStructMapping(tFLcLetterTxnType)
	tFLcLetterTxnPrimaryKeyMapping, _ = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, tFLcLetterTxnPrimaryKeyColumns)
	tFLcLetterTxnInsertCacheMut       sync.RWMutex
	tFLcLetterTxnInsertCache          = make(map[string]insertCache)
	tFLcLetterTxnUpdateCacheMut       sync.RWMutex
	tFLcLetterTxnUpdateCache          = make(map[string]updateCache)
	tFLcLetterTxnUpsertCacheMut       sync.RWMutex
	tFLcLetterTxnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFLcLetterTxnBeforeInsertHooks []TFLcLetterTxnHook
var tFLcLetterTxnBeforeUpdateHooks []TFLcLetterTxnHook
var tFLcLetterTxnBeforeDeleteHooks []TFLcLetterTxnHook
var tFLcLetterTxnBeforeUpsertHooks []TFLcLetterTxnHook

var tFLcLetterTxnAfterInsertHooks []TFLcLetterTxnHook
var tFLcLetterTxnAfterSelectHooks []TFLcLetterTxnHook
var tFLcLetterTxnAfterUpdateHooks []TFLcLetterTxnHook
var tFLcLetterTxnAfterDeleteHooks []TFLcLetterTxnHook
var tFLcLetterTxnAfterUpsertHooks []TFLcLetterTxnHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFLcLetterTxn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFLcLetterTxn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFLcLetterTxn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFLcLetterTxn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFLcLetterTxn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFLcLetterTxn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFLcLetterTxn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFLcLetterTxn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFLcLetterTxn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFLcLetterTxnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFLcLetterTxnHook registers your hook function for all future operations.
func AddTFLcLetterTxnHook(hookPoint boil.HookPoint, tFLcLetterTxnHook TFLcLetterTxnHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFLcLetterTxnBeforeInsertHooks = append(tFLcLetterTxnBeforeInsertHooks, tFLcLetterTxnHook)
	case boil.BeforeUpdateHook:
		tFLcLetterTxnBeforeUpdateHooks = append(tFLcLetterTxnBeforeUpdateHooks, tFLcLetterTxnHook)
	case boil.BeforeDeleteHook:
		tFLcLetterTxnBeforeDeleteHooks = append(tFLcLetterTxnBeforeDeleteHooks, tFLcLetterTxnHook)
	case boil.BeforeUpsertHook:
		tFLcLetterTxnBeforeUpsertHooks = append(tFLcLetterTxnBeforeUpsertHooks, tFLcLetterTxnHook)
	case boil.AfterInsertHook:
		tFLcLetterTxnAfterInsertHooks = append(tFLcLetterTxnAfterInsertHooks, tFLcLetterTxnHook)
	case boil.AfterSelectHook:
		tFLcLetterTxnAfterSelectHooks = append(tFLcLetterTxnAfterSelectHooks, tFLcLetterTxnHook)
	case boil.AfterUpdateHook:
		tFLcLetterTxnAfterUpdateHooks = append(tFLcLetterTxnAfterUpdateHooks, tFLcLetterTxnHook)
	case boil.AfterDeleteHook:
		tFLcLetterTxnAfterDeleteHooks = append(tFLcLetterTxnAfterDeleteHooks, tFLcLetterTxnHook)
	case boil.AfterUpsertHook:
		tFLcLetterTxnAfterUpsertHooks = append(tFLcLetterTxnAfterUpsertHooks, tFLcLetterTxnHook)
	}
}

// One returns a single tFLcLetterTxn record from the query.
func (q tFLcLetterTxnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFLcLetterTxn, error) {
	o := &TFLcLetterTxn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFLcLetterTxn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFLcLetterTxn records from the query.
func (q tFLcLetterTxnQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFLcLetterTxnSlice, error) {
	var o []*TFLcLetterTxn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFLcLetterTxn slice")
	}

	if len(tFLcLetterTxnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFLcLetterTxn records in the query.
func (q tFLcLetterTxnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFLcLetterTxn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFLcLetterTxnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFLcLetterTxn exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *TFLcLetterTxn) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// Reference pointed to by the foreign key.
func (o *TFLcLetterTxn) Reference(mods ...qm.QueryMod) tFLetterOfCreditQuery {
	queryMods := []qm.QueryMod{
		qm.Where("reference_id=?", o.ReferenceID),
	}

	queryMods = append(queryMods, mods...)

	query := TFLetterOfCredits(queryMods...)
	queries.SetFrom(query.Query, "`TFLetterOfCredit`")

	return query
}

// TFLCLetter pointed to by the foreign key.
func (o *TFLcLetterTxn) TFLCLetter(mods ...qm.QueryMod) tFLcLetterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("tf_lc_letter_id=?", o.TFLCLetterID),
	}

	queryMods = append(queryMods, mods...)

	query := TFLcLetters(queryMods...)
	queries.SetFrom(query.Query, "`TFLcLetter`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFLcLetterTxnL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFLcLetterTxn interface{}, mods queries.Applicator) error {
	var slice []*TFLcLetterTxn
	var object *TFLcLetterTxn

	if singular {
		object = maybeTFLcLetterTxn.(*TFLcLetterTxn)
	} else {
		slice = *maybeTFLcLetterTxn.(*[]*TFLcLetterTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFLcLetterTxnR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFLcLetterTxnR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFLcLetterTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFLcLetterTxns = append(foreign.R.PartyTFLcLetterTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFLcLetterTxns = append(foreign.R.PartyTFLcLetterTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadReference allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFLcLetterTxnL) LoadReference(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFLcLetterTxn interface{}, mods queries.Applicator) error {
	var slice []*TFLcLetterTxn
	var object *TFLcLetterTxn

	if singular {
		object = maybeTFLcLetterTxn.(*TFLcLetterTxn)
	} else {
		slice = *maybeTFLcLetterTxn.(*[]*TFLcLetterTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFLcLetterTxnR{}
		}
		args = append(args, object.ReferenceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFLcLetterTxnR{}
			}

			for _, a := range args {
				if a == obj.ReferenceID {
					continue Outer
				}
			}

			args = append(args, obj.ReferenceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFLetterOfCredit`), qm.WhereIn(`reference_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFLetterOfCredit")
	}

	var resultSlice []*TFLetterOfCredit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFLetterOfCredit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFLetterOfCredit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFLetterOfCredit")
	}

	if len(tFLcLetterTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reference = foreign
		if foreign.R == nil {
			foreign.R = &tFLetterOfCreditR{}
		}
		foreign.R.ReferenceTFLcLetterTxns = append(foreign.R.ReferenceTFLcLetterTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReferenceID == foreign.ReferenceID {
				local.R.Reference = foreign
				if foreign.R == nil {
					foreign.R = &tFLetterOfCreditR{}
				}
				foreign.R.ReferenceTFLcLetterTxns = append(foreign.R.ReferenceTFLcLetterTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadTFLCLetter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFLcLetterTxnL) LoadTFLCLetter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFLcLetterTxn interface{}, mods queries.Applicator) error {
	var slice []*TFLcLetterTxn
	var object *TFLcLetterTxn

	if singular {
		object = maybeTFLcLetterTxn.(*TFLcLetterTxn)
	} else {
		slice = *maybeTFLcLetterTxn.(*[]*TFLcLetterTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFLcLetterTxnR{}
		}
		args = append(args, object.TFLCLetterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFLcLetterTxnR{}
			}

			for _, a := range args {
				if a == obj.TFLCLetterID {
					continue Outer
				}
			}

			args = append(args, obj.TFLCLetterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFLcLetter`), qm.WhereIn(`tf_lc_letter_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFLcLetter")
	}

	var resultSlice []*TFLcLetter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFLcLetter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFLcLetter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFLcLetter")
	}

	if len(tFLcLetterTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TFLCLetter = foreign
		if foreign.R == nil {
			foreign.R = &tFLcLetterR{}
		}
		foreign.R.TFLCLetterTFLcLetterTxns = append(foreign.R.TFLCLetterTFLcLetterTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TFLCLetterID == foreign.TFLCLetterID {
				local.R.TFLCLetter = foreign
				if foreign.R == nil {
					foreign.R = &tFLcLetterR{}
				}
				foreign.R.TFLCLetterTFLcLetterTxns = append(foreign.R.TFLCLetterTFLcLetterTxns, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the tFLcLetterTxn to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFLcLetterTxns.
func (o *TFLcLetterTxn) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFLcLetterTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFLcLetterTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFLCLetterID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFLcLetterTxnR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFLcLetterTxns: TFLcLetterTxnSlice{o},
		}
	} else {
		related.R.PartyTFLcLetterTxns = append(related.R.PartyTFLcLetterTxns, o)
	}

	return nil
}

// SetReference of the tFLcLetterTxn to the related item.
// Sets o.R.Reference to related.
// Adds o to related.R.ReferenceTFLcLetterTxns.
func (o *TFLcLetterTxn) SetReference(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFLetterOfCredit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFLcLetterTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reference_id"}),
		strmangle.WhereClause("`", "`", 0, tFLcLetterTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.ReferenceID, o.TFLCLetterID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReferenceID = related.ReferenceID
	if o.R == nil {
		o.R = &tFLcLetterTxnR{
			Reference: related,
		}
	} else {
		o.R.Reference = related
	}

	if related.R == nil {
		related.R = &tFLetterOfCreditR{
			ReferenceTFLcLetterTxns: TFLcLetterTxnSlice{o},
		}
	} else {
		related.R.ReferenceTFLcLetterTxns = append(related.R.ReferenceTFLcLetterTxns, o)
	}

	return nil
}

// SetTFLCLetter of the tFLcLetterTxn to the related item.
// Sets o.R.TFLCLetter to related.
// Adds o to related.R.TFLCLetterTFLcLetterTxns.
func (o *TFLcLetterTxn) SetTFLCLetter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFLcLetter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFLcLetterTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tf_lc_letter_id"}),
		strmangle.WhereClause("`", "`", 0, tFLcLetterTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.TFLCLetterID, o.TFLCLetterID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TFLCLetterID = related.TFLCLetterID
	if o.R == nil {
		o.R = &tFLcLetterTxnR{
			TFLCLetter: related,
		}
	} else {
		o.R.TFLCLetter = related
	}

	if related.R == nil {
		related.R = &tFLcLetterR{
			TFLCLetterTFLcLetterTxns: TFLcLetterTxnSlice{o},
		}
	} else {
		related.R.TFLCLetterTFLcLetterTxns = append(related.R.TFLCLetterTFLcLetterTxns, o)
	}

	return nil
}

// TFLcLetterTxns retrieves all the records using an executor.
func TFLcLetterTxns(mods ...qm.QueryMod) tFLcLetterTxnQuery {
	mods = append(mods, qm.From("`TFLcLetterTxn`"))
	return tFLcLetterTxnQuery{NewQuery(mods...)}
}

// FindTFLcLetterTxn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFLcLetterTxn(ctx context.Context, exec boil.ContextExecutor, tFLCLetterID int, transactionID int, selectCols ...string) (*TFLcLetterTxn, error) {
	tFLcLetterTxnObj := &TFLcLetterTxn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFLcLetterTxn` where `tf_lc_letter_id`=? AND `transaction_id`=?", sel,
	)

	q := queries.Raw(query, tFLCLetterID, transactionID)

	err := q.Bind(ctx, exec, tFLcLetterTxnObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFLcLetterTxn")
	}

	return tFLcLetterTxnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFLcLetterTxn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFLcLetterTxn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFLcLetterTxnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFLcLetterTxnInsertCacheMut.RLock()
	cache, cached := tFLcLetterTxnInsertCache[key]
	tFLcLetterTxnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFLcLetterTxnColumns,
			tFLcLetterTxnColumnsWithDefault,
			tFLcLetterTxnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFLcLetterTxn` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFLcLetterTxn` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFLcLetterTxn` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFLcLetterTxnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFLcLetterTxn")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFLCLetterID,
		o.TransactionID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFLcLetterTxn")
	}

CacheNoHooks:
	if !cached {
		tFLcLetterTxnInsertCacheMut.Lock()
		tFLcLetterTxnInsertCache[key] = cache
		tFLcLetterTxnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFLcLetterTxn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFLcLetterTxn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFLcLetterTxnUpdateCacheMut.RLock()
	cache, cached := tFLcLetterTxnUpdateCache[key]
	tFLcLetterTxnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFLcLetterTxnColumns,
			tFLcLetterTxnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFLcLetterTxn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFLcLetterTxn` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFLcLetterTxnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, append(wl, tFLcLetterTxnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFLcLetterTxn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFLcLetterTxn")
	}

	if !cached {
		tFLcLetterTxnUpdateCacheMut.Lock()
		tFLcLetterTxnUpdateCache[key] = cache
		tFLcLetterTxnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFLcLetterTxnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFLcLetterTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFLcLetterTxn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFLcLetterTxnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFLcLetterTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFLcLetterTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFLcLetterTxnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFLcLetterTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFLcLetterTxn")
	}
	return rowsAff, nil
}

var mySQLTFLcLetterTxnUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFLcLetterTxn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFLcLetterTxn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFLcLetterTxnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFLcLetterTxnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFLcLetterTxnUpsertCacheMut.RLock()
	cache, cached := tFLcLetterTxnUpsertCache[key]
	tFLcLetterTxnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFLcLetterTxnColumns,
			tFLcLetterTxnColumnsWithDefault,
			tFLcLetterTxnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFLcLetterTxnColumns,
			tFLcLetterTxnPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFLcLetterTxn, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFLcLetterTxn", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFLcLetterTxn` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFLcLetterTxn")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFLcLetterTxnType, tFLcLetterTxnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFLcLetterTxn")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFLcLetterTxn")
	}

CacheNoHooks:
	if !cached {
		tFLcLetterTxnUpsertCacheMut.Lock()
		tFLcLetterTxnUpsertCache[key] = cache
		tFLcLetterTxnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFLcLetterTxn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFLcLetterTxn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFLcLetterTxn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFLcLetterTxnPrimaryKeyMapping)
	sql := "DELETE FROM `TFLcLetterTxn` WHERE `tf_lc_letter_id`=? AND `transaction_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFLcLetterTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFLcLetterTxn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFLcLetterTxnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFLcLetterTxnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFLcLetterTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFLcLetterTxn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFLcLetterTxnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFLcLetterTxn slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFLcLetterTxnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFLcLetterTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFLcLetterTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFLcLetterTxnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFLcLetterTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFLcLetterTxn")
	}

	if len(tFLcLetterTxnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFLcLetterTxn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFLcLetterTxn(ctx, exec, o.TFLCLetterID, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFLcLetterTxnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFLcLetterTxnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFLcLetterTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFLcLetterTxn`.* FROM `TFLcLetterTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFLcLetterTxnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFLcLetterTxnSlice")
	}

	*o = slice

	return nil
}

// TFLcLetterTxnExists checks if the TFLcLetterTxn row exists.
func TFLcLetterTxnExists(ctx context.Context, exec boil.ContextExecutor, tFLCLetterID int, transactionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFLcLetterTxn` where `tf_lc_letter_id`=? AND `transaction_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFLCLetterID, transactionID)
	}

	row := exec.QueryRowContext(ctx, sql, tFLCLetterID, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFLcLetterTxn exists")
	}

	return exists, nil
}
