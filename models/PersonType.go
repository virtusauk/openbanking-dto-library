// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PersonType is an object representing the database table.
type PersonType struct {
	PersonTypeID int         `boil:"person_type_id" json:"person_type_id" toml:"person_type_id" yaml:"person_type_id"`
	TypeName     string      `boil:"type_name" json:"type_name" toml:"type_name" yaml:"type_name"`
	Description  string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *personTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonTypeColumns = struct {
	PersonTypeID string
	TypeName     string
	Description  string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	PersonTypeID: "person_type_id",
	TypeName:     "type_name",
	Description:  "description",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var PersonTypeWhere = struct {
	PersonTypeID whereHelperint
	TypeName     whereHelperstring
	Description  whereHelperstring
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	PersonTypeID: whereHelperint{field: `person_type_id`},
	TypeName:     whereHelperstring{field: `type_name`},
	Description:  whereHelperstring{field: `description`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// PersonTypeRels is where relationship names are stored.
var PersonTypeRels = struct {
	PersonTypePersons string
}{
	PersonTypePersons: "PersonTypePersons",
}

// personTypeR is where relationships are stored.
type personTypeR struct {
	PersonTypePersons PersonSlice
}

// NewStruct creates a new relationship struct
func (*personTypeR) NewStruct() *personTypeR {
	return &personTypeR{}
}

// personTypeL is where Load methods for each relationship are stored.
type personTypeL struct{}

var (
	personTypeColumns               = []string{"person_type_id", "type_name", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	personTypeColumnsWithoutDefault = []string{"type_name", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	personTypeColumnsWithDefault    = []string{"person_type_id"}
	personTypePrimaryKeyColumns     = []string{"person_type_id"}
)

type (
	// PersonTypeSlice is an alias for a slice of pointers to PersonType.
	// This should generally be used opposed to []PersonType.
	PersonTypeSlice []*PersonType
	// PersonTypeHook is the signature for custom PersonType hook methods
	PersonTypeHook func(context.Context, boil.ContextExecutor, *PersonType) error

	personTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personTypeType                 = reflect.TypeOf(&PersonType{})
	personTypeMapping              = queries.MakeStructMapping(personTypeType)
	personTypePrimaryKeyMapping, _ = queries.BindMapping(personTypeType, personTypeMapping, personTypePrimaryKeyColumns)
	personTypeInsertCacheMut       sync.RWMutex
	personTypeInsertCache          = make(map[string]insertCache)
	personTypeUpdateCacheMut       sync.RWMutex
	personTypeUpdateCache          = make(map[string]updateCache)
	personTypeUpsertCacheMut       sync.RWMutex
	personTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personTypeBeforeInsertHooks []PersonTypeHook
var personTypeBeforeUpdateHooks []PersonTypeHook
var personTypeBeforeDeleteHooks []PersonTypeHook
var personTypeBeforeUpsertHooks []PersonTypeHook

var personTypeAfterInsertHooks []PersonTypeHook
var personTypeAfterSelectHooks []PersonTypeHook
var personTypeAfterUpdateHooks []PersonTypeHook
var personTypeAfterDeleteHooks []PersonTypeHook
var personTypeAfterUpsertHooks []PersonTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PersonType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PersonType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PersonType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PersonType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PersonType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PersonType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PersonType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PersonType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PersonType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonTypeHook registers your hook function for all future operations.
func AddPersonTypeHook(hookPoint boil.HookPoint, personTypeHook PersonTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		personTypeBeforeInsertHooks = append(personTypeBeforeInsertHooks, personTypeHook)
	case boil.BeforeUpdateHook:
		personTypeBeforeUpdateHooks = append(personTypeBeforeUpdateHooks, personTypeHook)
	case boil.BeforeDeleteHook:
		personTypeBeforeDeleteHooks = append(personTypeBeforeDeleteHooks, personTypeHook)
	case boil.BeforeUpsertHook:
		personTypeBeforeUpsertHooks = append(personTypeBeforeUpsertHooks, personTypeHook)
	case boil.AfterInsertHook:
		personTypeAfterInsertHooks = append(personTypeAfterInsertHooks, personTypeHook)
	case boil.AfterSelectHook:
		personTypeAfterSelectHooks = append(personTypeAfterSelectHooks, personTypeHook)
	case boil.AfterUpdateHook:
		personTypeAfterUpdateHooks = append(personTypeAfterUpdateHooks, personTypeHook)
	case boil.AfterDeleteHook:
		personTypeAfterDeleteHooks = append(personTypeAfterDeleteHooks, personTypeHook)
	case boil.AfterUpsertHook:
		personTypeAfterUpsertHooks = append(personTypeAfterUpsertHooks, personTypeHook)
	}
}

// One returns a single personType record from the query.
func (q personTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PersonType, error) {
	o := &PersonType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PersonType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PersonType records from the query.
func (q personTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonTypeSlice, error) {
	var o []*PersonType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PersonType slice")
	}

	if len(personTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PersonType records in the query.
func (q personTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PersonType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PersonType exists")
	}

	return count > 0, nil
}

// PersonTypePersons retrieves all the Person's Persons with an executor via person_type_id column.
func (o *PersonType) PersonTypePersons(mods ...qm.QueryMod) personQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Person`.`person_type_id`=?", o.PersonTypeID),
	)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "`Person`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Person`.*"})
	}

	return query
}

// LoadPersonTypePersons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personTypeL) LoadPersonTypePersons(ctx context.Context, e boil.ContextExecutor, singular bool, maybePersonType interface{}, mods queries.Applicator) error {
	var slice []*PersonType
	var object *PersonType

	if singular {
		object = maybePersonType.(*PersonType)
	} else {
		slice = *maybePersonType.(*[]*PersonType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personTypeR{}
		}
		args = append(args, object.PersonTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personTypeR{}
			}

			for _, a := range args {
				if a == obj.PersonTypeID {
					continue Outer
				}
			}

			args = append(args, obj.PersonTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Person`), qm.WhereIn(`person_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Person")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PersonTypePersons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personR{}
			}
			foreign.R.PersonType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PersonTypeID == foreign.PersonTypeID {
				local.R.PersonTypePersons = append(local.R.PersonTypePersons, foreign)
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.PersonType = local
				break
			}
		}
	}

	return nil
}

// AddPersonTypePersons adds the given related objects to the existing relationships
// of the PersonType, optionally inserting them as new records.
// Appends related to o.R.PersonTypePersons.
// Sets related.R.PersonType appropriately.
func (o *PersonType) AddPersonTypePersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PersonTypeID = o.PersonTypeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Person` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"person_type_id"}),
				strmangle.WhereClause("`", "`", 0, personPrimaryKeyColumns),
			)
			values := []interface{}{o.PersonTypeID, rel.PartyID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PersonTypeID = o.PersonTypeID
		}
	}

	if o.R == nil {
		o.R = &personTypeR{
			PersonTypePersons: related,
		}
	} else {
		o.R.PersonTypePersons = append(o.R.PersonTypePersons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personR{
				PersonType: o,
			}
		} else {
			rel.R.PersonType = o
		}
	}
	return nil
}

// PersonTypes retrieves all the records using an executor.
func PersonTypes(mods ...qm.QueryMod) personTypeQuery {
	mods = append(mods, qm.From("`PersonType`"))
	return personTypeQuery{NewQuery(mods...)}
}

// FindPersonType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPersonType(ctx context.Context, exec boil.ContextExecutor, personTypeID int, selectCols ...string) (*PersonType, error) {
	personTypeObj := &PersonType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PersonType` where `person_type_id`=?", sel,
	)

	q := queries.Raw(query, personTypeID)

	err := q.Bind(ctx, exec, personTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PersonType")
	}

	return personTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PersonType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PersonType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personTypeInsertCacheMut.RLock()
	cache, cached := personTypeInsertCache[key]
	personTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personTypeColumns,
			personTypeColumnsWithDefault,
			personTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personTypeType, personTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personTypeType, personTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PersonType` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PersonType` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PersonType` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, personTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PersonType")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PersonTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == personTypeMapping["PersonTypeID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PersonTypeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PersonType")
	}

CacheNoHooks:
	if !cached {
		personTypeInsertCacheMut.Lock()
		personTypeInsertCache[key] = cache
		personTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PersonType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PersonType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personTypeUpdateCacheMut.RLock()
	cache, cached := personTypeUpdateCache[key]
	personTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personTypeColumns,
			personTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PersonType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PersonType` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, personTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personTypeType, personTypeMapping, append(wl, personTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PersonType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PersonType")
	}

	if !cached {
		personTypeUpdateCacheMut.Lock()
		personTypeUpdateCache[key] = cache
		personTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PersonType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PersonType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PersonType` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in personType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all personType")
	}
	return rowsAff, nil
}

var mySQLPersonTypeUniqueColumns = []string{
	"person_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PersonType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PersonType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPersonTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	personTypeUpsertCacheMut.RLock()
	cache, cached := personTypeUpsertCache[key]
	personTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			personTypeColumns,
			personTypeColumnsWithDefault,
			personTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			personTypeColumns,
			personTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PersonType, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PersonType", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PersonType` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(personTypeType, personTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(personTypeType, personTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PersonType")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PersonTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == personTypeMapping["person_type_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(personTypeType, personTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PersonType")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PersonType")
	}

CacheNoHooks:
	if !cached {
		personTypeUpsertCacheMut.Lock()
		personTypeUpsertCache[key] = cache
		personTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PersonType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PersonType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PersonType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personTypePrimaryKeyMapping)
	sql := "DELETE FROM `PersonType` WHERE `person_type_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PersonType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PersonType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PersonType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PersonType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PersonType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(personTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PersonType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from personType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PersonType")
	}

	if len(personTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PersonType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPersonType(ctx, exec, o.PersonTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PersonType`.* FROM `PersonType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonTypeSlice")
	}

	*o = slice

	return nil
}

// PersonTypeExists checks if the PersonType row exists.
func PersonTypeExists(ctx context.Context, exec boil.ContextExecutor, personTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PersonType` where `person_type_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, personTypeID)
	}

	row := exec.QueryRowContext(ctx, sql, personTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PersonType exists")
	}

	return exists, nil
}
