// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RegisteredBiller is an object representing the database table.
type RegisteredBiller struct {
	BillerID       int         `boil:"biller_id" json:"biller_id" toml:"biller_id" yaml:"biller_id"`
	PayeeAddress   null.String `boil:"payee_address" json:"payee_address,omitempty" toml:"payee_address" yaml:"payee_address,omitempty"`
	PayeeName      string      `boil:"payee_name" json:"payee_name" toml:"payee_name" yaml:"payee_name"`
	PayeeID        int         `boil:"payee_id" json:"payee_id" toml:"payee_id" yaml:"payee_id"`
	PayeeAccountID int         `boil:"payee_account_id" json:"payee_account_id" toml:"payee_account_id" yaml:"payee_account_id"`
	MakerDate      time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate    null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID        string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID      null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy     null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate   null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *registeredBillerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L registeredBillerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegisteredBillerColumns = struct {
	BillerID       string
	PayeeAddress   string
	PayeeName      string
	PayeeID        string
	PayeeAccountID string
	MakerDate      string
	CheckerDate    string
	MakerID        string
	CheckerID      string
	ModifiedBy     string
	ModifiedDate   string
}{
	BillerID:       "biller_id",
	PayeeAddress:   "payee_address",
	PayeeName:      "payee_name",
	PayeeID:        "payee_id",
	PayeeAccountID: "payee_account_id",
	MakerDate:      "maker_date",
	CheckerDate:    "checker_date",
	MakerID:        "maker_id",
	CheckerID:      "checker_id",
	ModifiedBy:     "modified_by",
	ModifiedDate:   "modified_date",
}

// Generated where

var RegisteredBillerWhere = struct {
	BillerID       whereHelperint
	PayeeAddress   whereHelpernull_String
	PayeeName      whereHelperstring
	PayeeID        whereHelperint
	PayeeAccountID whereHelperint
	MakerDate      whereHelpertime_Time
	CheckerDate    whereHelpernull_Time
	MakerID        whereHelperstring
	CheckerID      whereHelpernull_String
	ModifiedBy     whereHelpernull_String
	ModifiedDate   whereHelpernull_Time
}{
	BillerID:       whereHelperint{field: `biller_id`},
	PayeeAddress:   whereHelpernull_String{field: `payee_address`},
	PayeeName:      whereHelperstring{field: `payee_name`},
	PayeeID:        whereHelperint{field: `payee_id`},
	PayeeAccountID: whereHelperint{field: `payee_account_id`},
	MakerDate:      whereHelpertime_Time{field: `maker_date`},
	CheckerDate:    whereHelpernull_Time{field: `checker_date`},
	MakerID:        whereHelperstring{field: `maker_id`},
	CheckerID:      whereHelpernull_String{field: `checker_id`},
	ModifiedBy:     whereHelpernull_String{field: `modified_by`},
	ModifiedDate:   whereHelpernull_Time{field: `modified_date`},
}

// RegisteredBillerRels is where relationship names are stored.
var RegisteredBillerRels = struct {
	PayeeAccount string
	Payee        string
}{
	PayeeAccount: "PayeeAccount",
	Payee:        "Payee",
}

// registeredBillerR is where relationships are stored.
type registeredBillerR struct {
	PayeeAccount *Account
	Payee        *Party
}

// NewStruct creates a new relationship struct
func (*registeredBillerR) NewStruct() *registeredBillerR {
	return &registeredBillerR{}
}

// registeredBillerL is where Load methods for each relationship are stored.
type registeredBillerL struct{}

var (
	registeredBillerColumns               = []string{"biller_id", "payee_address", "payee_name", "payee_id", "payee_account_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	registeredBillerColumnsWithoutDefault = []string{"payee_address", "payee_name", "payee_id", "payee_account_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	registeredBillerColumnsWithDefault    = []string{"biller_id"}
	registeredBillerPrimaryKeyColumns     = []string{"biller_id"}
)

type (
	// RegisteredBillerSlice is an alias for a slice of pointers to RegisteredBiller.
	// This should generally be used opposed to []RegisteredBiller.
	RegisteredBillerSlice []*RegisteredBiller
	// RegisteredBillerHook is the signature for custom RegisteredBiller hook methods
	RegisteredBillerHook func(context.Context, boil.ContextExecutor, *RegisteredBiller) error

	registeredBillerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	registeredBillerType                 = reflect.TypeOf(&RegisteredBiller{})
	registeredBillerMapping              = queries.MakeStructMapping(registeredBillerType)
	registeredBillerPrimaryKeyMapping, _ = queries.BindMapping(registeredBillerType, registeredBillerMapping, registeredBillerPrimaryKeyColumns)
	registeredBillerInsertCacheMut       sync.RWMutex
	registeredBillerInsertCache          = make(map[string]insertCache)
	registeredBillerUpdateCacheMut       sync.RWMutex
	registeredBillerUpdateCache          = make(map[string]updateCache)
	registeredBillerUpsertCacheMut       sync.RWMutex
	registeredBillerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var registeredBillerBeforeInsertHooks []RegisteredBillerHook
var registeredBillerBeforeUpdateHooks []RegisteredBillerHook
var registeredBillerBeforeDeleteHooks []RegisteredBillerHook
var registeredBillerBeforeUpsertHooks []RegisteredBillerHook

var registeredBillerAfterInsertHooks []RegisteredBillerHook
var registeredBillerAfterSelectHooks []RegisteredBillerHook
var registeredBillerAfterUpdateHooks []RegisteredBillerHook
var registeredBillerAfterDeleteHooks []RegisteredBillerHook
var registeredBillerAfterUpsertHooks []RegisteredBillerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RegisteredBiller) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RegisteredBiller) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RegisteredBiller) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RegisteredBiller) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RegisteredBiller) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RegisteredBiller) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RegisteredBiller) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RegisteredBiller) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RegisteredBiller) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredBillerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegisteredBillerHook registers your hook function for all future operations.
func AddRegisteredBillerHook(hookPoint boil.HookPoint, registeredBillerHook RegisteredBillerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		registeredBillerBeforeInsertHooks = append(registeredBillerBeforeInsertHooks, registeredBillerHook)
	case boil.BeforeUpdateHook:
		registeredBillerBeforeUpdateHooks = append(registeredBillerBeforeUpdateHooks, registeredBillerHook)
	case boil.BeforeDeleteHook:
		registeredBillerBeforeDeleteHooks = append(registeredBillerBeforeDeleteHooks, registeredBillerHook)
	case boil.BeforeUpsertHook:
		registeredBillerBeforeUpsertHooks = append(registeredBillerBeforeUpsertHooks, registeredBillerHook)
	case boil.AfterInsertHook:
		registeredBillerAfterInsertHooks = append(registeredBillerAfterInsertHooks, registeredBillerHook)
	case boil.AfterSelectHook:
		registeredBillerAfterSelectHooks = append(registeredBillerAfterSelectHooks, registeredBillerHook)
	case boil.AfterUpdateHook:
		registeredBillerAfterUpdateHooks = append(registeredBillerAfterUpdateHooks, registeredBillerHook)
	case boil.AfterDeleteHook:
		registeredBillerAfterDeleteHooks = append(registeredBillerAfterDeleteHooks, registeredBillerHook)
	case boil.AfterUpsertHook:
		registeredBillerAfterUpsertHooks = append(registeredBillerAfterUpsertHooks, registeredBillerHook)
	}
}

// One returns a single registeredBiller record from the query.
func (q registeredBillerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RegisteredBiller, error) {
	o := &RegisteredBiller{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for RegisteredBiller")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RegisteredBiller records from the query.
func (q registeredBillerQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegisteredBillerSlice, error) {
	var o []*RegisteredBiller

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RegisteredBiller slice")
	}

	if len(registeredBillerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RegisteredBiller records in the query.
func (q registeredBillerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count RegisteredBiller rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q registeredBillerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if RegisteredBiller exists")
	}

	return count > 0, nil
}

// PayeeAccount pointed to by the foreign key.
func (o *RegisteredBiller) PayeeAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.PayeeAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Payee pointed to by the foreign key.
func (o *RegisteredBiller) Payee(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PayeeID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadPayeeAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (registeredBillerL) LoadPayeeAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegisteredBiller interface{}, mods queries.Applicator) error {
	var slice []*RegisteredBiller
	var object *RegisteredBiller

	if singular {
		object = maybeRegisteredBiller.(*RegisteredBiller)
	} else {
		slice = *maybeRegisteredBiller.(*[]*RegisteredBiller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registeredBillerR{}
		}
		args = append(args, object.PayeeAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registeredBillerR{}
			}

			for _, a := range args {
				if a == obj.PayeeAccountID {
					continue Outer
				}
			}

			args = append(args, obj.PayeeAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(registeredBillerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PayeeAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.PayeeAccountRegisteredBillers = append(foreign.R.PayeeAccountRegisteredBillers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayeeAccountID == foreign.AccountID {
				local.R.PayeeAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.PayeeAccountRegisteredBillers = append(foreign.R.PayeeAccountRegisteredBillers, local)
				break
			}
		}
	}

	return nil
}

// LoadPayee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (registeredBillerL) LoadPayee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegisteredBiller interface{}, mods queries.Applicator) error {
	var slice []*RegisteredBiller
	var object *RegisteredBiller

	if singular {
		object = maybeRegisteredBiller.(*RegisteredBiller)
	} else {
		slice = *maybeRegisteredBiller.(*[]*RegisteredBiller)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registeredBillerR{}
		}
		args = append(args, object.PayeeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registeredBillerR{}
			}

			for _, a := range args {
				if a == obj.PayeeID {
					continue Outer
				}
			}

			args = append(args, obj.PayeeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(registeredBillerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payee = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PayeeRegisteredBillers = append(foreign.R.PayeeRegisteredBillers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PayeeID == foreign.PartyID {
				local.R.Payee = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PayeeRegisteredBillers = append(foreign.R.PayeeRegisteredBillers, local)
				break
			}
		}
	}

	return nil
}

// SetPayeeAccount of the registeredBiller to the related item.
// Sets o.R.PayeeAccount to related.
// Adds o to related.R.PayeeAccountRegisteredBillers.
func (o *RegisteredBiller) SetPayeeAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `RegisteredBiller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payee_account_id"}),
		strmangle.WhereClause("`", "`", 0, registeredBillerPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.BillerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayeeAccountID = related.AccountID
	if o.R == nil {
		o.R = &registeredBillerR{
			PayeeAccount: related,
		}
	} else {
		o.R.PayeeAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			PayeeAccountRegisteredBillers: RegisteredBillerSlice{o},
		}
	} else {
		related.R.PayeeAccountRegisteredBillers = append(related.R.PayeeAccountRegisteredBillers, o)
	}

	return nil
}

// SetPayee of the registeredBiller to the related item.
// Sets o.R.Payee to related.
// Adds o to related.R.PayeeRegisteredBillers.
func (o *RegisteredBiller) SetPayee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `RegisteredBiller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payee_id"}),
		strmangle.WhereClause("`", "`", 0, registeredBillerPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.BillerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PayeeID = related.PartyID
	if o.R == nil {
		o.R = &registeredBillerR{
			Payee: related,
		}
	} else {
		o.R.Payee = related
	}

	if related.R == nil {
		related.R = &partyR{
			PayeeRegisteredBillers: RegisteredBillerSlice{o},
		}
	} else {
		related.R.PayeeRegisteredBillers = append(related.R.PayeeRegisteredBillers, o)
	}

	return nil
}

// RegisteredBillers retrieves all the records using an executor.
func RegisteredBillers(mods ...qm.QueryMod) registeredBillerQuery {
	mods = append(mods, qm.From("`RegisteredBiller`"))
	return registeredBillerQuery{NewQuery(mods...)}
}

// FindRegisteredBiller retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegisteredBiller(ctx context.Context, exec boil.ContextExecutor, billerID int, selectCols ...string) (*RegisteredBiller, error) {
	registeredBillerObj := &RegisteredBiller{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `RegisteredBiller` where `biller_id`=?", sel,
	)

	q := queries.Raw(query, billerID)

	err := q.Bind(ctx, exec, registeredBillerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from RegisteredBiller")
	}

	return registeredBillerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RegisteredBiller) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RegisteredBiller provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registeredBillerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	registeredBillerInsertCacheMut.RLock()
	cache, cached := registeredBillerInsertCache[key]
	registeredBillerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			registeredBillerColumns,
			registeredBillerColumnsWithDefault,
			registeredBillerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `RegisteredBiller` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `RegisteredBiller` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `RegisteredBiller` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, registeredBillerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into RegisteredBiller")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BillerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == registeredBillerMapping["BillerID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RegisteredBiller")
	}

CacheNoHooks:
	if !cached {
		registeredBillerInsertCacheMut.Lock()
		registeredBillerInsertCache[key] = cache
		registeredBillerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RegisteredBiller.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RegisteredBiller) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	registeredBillerUpdateCacheMut.RLock()
	cache, cached := registeredBillerUpdateCache[key]
	registeredBillerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			registeredBillerColumns,
			registeredBillerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update RegisteredBiller, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `RegisteredBiller` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, registeredBillerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, append(wl, registeredBillerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update RegisteredBiller row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for RegisteredBiller")
	}

	if !cached {
		registeredBillerUpdateCacheMut.Lock()
		registeredBillerUpdateCache[key] = cache
		registeredBillerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q registeredBillerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for RegisteredBiller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for RegisteredBiller")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegisteredBillerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredBillerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `RegisteredBiller` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registeredBillerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in registeredBiller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all registeredBiller")
	}
	return rowsAff, nil
}

var mySQLRegisteredBillerUniqueColumns = []string{
	"biller_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RegisteredBiller) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no RegisteredBiller provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registeredBillerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRegisteredBillerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	registeredBillerUpsertCacheMut.RLock()
	cache, cached := registeredBillerUpsertCache[key]
	registeredBillerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			registeredBillerColumns,
			registeredBillerColumnsWithDefault,
			registeredBillerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			registeredBillerColumns,
			registeredBillerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert RegisteredBiller, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "RegisteredBiller", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `RegisteredBiller` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for RegisteredBiller")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.BillerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == registeredBillerMapping["biller_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(registeredBillerType, registeredBillerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for RegisteredBiller")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for RegisteredBiller")
	}

CacheNoHooks:
	if !cached {
		registeredBillerUpsertCacheMut.Lock()
		registeredBillerUpsertCache[key] = cache
		registeredBillerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RegisteredBiller record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RegisteredBiller) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegisteredBiller provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), registeredBillerPrimaryKeyMapping)
	sql := "DELETE FROM `RegisteredBiller` WHERE `biller_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from RegisteredBiller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for RegisteredBiller")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q registeredBillerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no registeredBillerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from RegisteredBiller")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RegisteredBiller")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegisteredBillerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RegisteredBiller slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(registeredBillerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredBillerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `RegisteredBiller` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registeredBillerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from registeredBiller slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for RegisteredBiller")
	}

	if len(registeredBillerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RegisteredBiller) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegisteredBiller(ctx, exec, o.BillerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegisteredBillerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegisteredBillerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredBillerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `RegisteredBiller`.* FROM `RegisteredBiller` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, registeredBillerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegisteredBillerSlice")
	}

	*o = slice

	return nil
}

// RegisteredBillerExists checks if the RegisteredBiller row exists.
func RegisteredBillerExists(ctx context.Context, exec boil.ContextExecutor, billerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `RegisteredBiller` where `biller_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, billerID)
	}

	row := exec.QueryRowContext(ctx, sql, billerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if RegisteredBiller exists")
	}

	return exists, nil
}
