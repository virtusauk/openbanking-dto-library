// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// JournalEntryLine is an object representing the database table.
type JournalEntryLine struct {
	JournalEntryLineID int           `boil:"journal_entry_line_id" json:"journal_entry_line_id" toml:"journal_entry_line_id" yaml:"journal_entry_line_id"`
	JournalEntryID     int           `boil:"journal_entry_id" json:"journal_entry_id" toml:"journal_entry_id" yaml:"journal_entry_id"`
	EntryDate          time.Time     `boil:"entry_date" json:"entry_date" toml:"entry_date" yaml:"entry_date"`
	CreatedDate        null.Time     `boil:"created_date" json:"created_date,omitempty" toml:"created_date" yaml:"created_date,omitempty"`
	TransactionID      int           `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AccountID          int           `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	ProductType        string        `boil:"product_type" json:"product_type" toml:"product_type" yaml:"product_type"`
	Amount             types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	GLAccountCode      null.String   `boil:"gl_account_code" json:"gl_account_code,omitempty" toml:"gl_account_code" yaml:"gl_account_code,omitempty"`
	PaymentID          int           `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	Created            null.Time     `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Modified           null.Time     `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`
	Createdby          null.String   `boil:"createdby" json:"createdby,omitempty" toml:"createdby" yaml:"createdby,omitempty"`
	Modifiedby         null.String   `boil:"modifiedby" json:"modifiedby,omitempty" toml:"modifiedby" yaml:"modifiedby,omitempty"`
	TRNCcy             null.String   `boil:"trn_ccy" json:"trn_ccy,omitempty" toml:"trn_ccy" yaml:"trn_ccy,omitempty"`
	BankID             int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate          time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate        null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID            string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID          null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy         null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate       null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *journalEntryLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L journalEntryLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JournalEntryLineColumns = struct {
	JournalEntryLineID string
	JournalEntryID     string
	EntryDate          string
	CreatedDate        string
	TransactionID      string
	AccountID          string
	ProductType        string
	Amount             string
	GLAccountCode      string
	PaymentID          string
	Created            string
	Modified           string
	Createdby          string
	Modifiedby         string
	TRNCcy             string
	BankID             string
	MakerDate          string
	CheckerDate        string
	MakerID            string
	CheckerID          string
	ModifiedBy         string
	ModifiedDate       string
}{
	JournalEntryLineID: "journal_entry_line_id",
	JournalEntryID:     "journal_entry_id",
	EntryDate:          "entry_date",
	CreatedDate:        "created_date",
	TransactionID:      "transaction_id",
	AccountID:          "account_id",
	ProductType:        "product_type",
	Amount:             "amount",
	GLAccountCode:      "gl_account_code",
	PaymentID:          "payment_id",
	Created:            "created",
	Modified:           "modified",
	Createdby:          "createdby",
	Modifiedby:         "modifiedby",
	TRNCcy:             "trn_ccy",
	BankID:             "bank_id",
	MakerDate:          "maker_date",
	CheckerDate:        "checker_date",
	MakerID:            "maker_id",
	CheckerID:          "checker_id",
	ModifiedBy:         "modified_by",
	ModifiedDate:       "modified_date",
}

// Generated where

var JournalEntryLineWhere = struct {
	JournalEntryLineID whereHelperint
	JournalEntryID     whereHelperint
	EntryDate          whereHelpertime_Time
	CreatedDate        whereHelpernull_Time
	TransactionID      whereHelperint
	AccountID          whereHelperint
	ProductType        whereHelperstring
	Amount             whereHelpertypes_Decimal
	GLAccountCode      whereHelpernull_String
	PaymentID          whereHelperint
	Created            whereHelpernull_Time
	Modified           whereHelpernull_Time
	Createdby          whereHelpernull_String
	Modifiedby         whereHelpernull_String
	TRNCcy             whereHelpernull_String
	BankID             whereHelperint
	MakerDate          whereHelpertime_Time
	CheckerDate        whereHelpernull_Time
	MakerID            whereHelperstring
	CheckerID          whereHelpernull_String
	ModifiedBy         whereHelpernull_String
	ModifiedDate       whereHelpernull_Time
}{
	JournalEntryLineID: whereHelperint{field: `journal_entry_line_id`},
	JournalEntryID:     whereHelperint{field: `journal_entry_id`},
	EntryDate:          whereHelpertime_Time{field: `entry_date`},
	CreatedDate:        whereHelpernull_Time{field: `created_date`},
	TransactionID:      whereHelperint{field: `transaction_id`},
	AccountID:          whereHelperint{field: `account_id`},
	ProductType:        whereHelperstring{field: `product_type`},
	Amount:             whereHelpertypes_Decimal{field: `amount`},
	GLAccountCode:      whereHelpernull_String{field: `gl_account_code`},
	PaymentID:          whereHelperint{field: `payment_id`},
	Created:            whereHelpernull_Time{field: `created`},
	Modified:           whereHelpernull_Time{field: `modified`},
	Createdby:          whereHelpernull_String{field: `createdby`},
	Modifiedby:         whereHelpernull_String{field: `modifiedby`},
	TRNCcy:             whereHelpernull_String{field: `trn_ccy`},
	BankID:             whereHelperint{field: `bank_id`},
	MakerDate:          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:        whereHelpernull_Time{field: `checker_date`},
	MakerID:            whereHelperstring{field: `maker_id`},
	CheckerID:          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:       whereHelpernull_Time{field: `modified_date`},
}

// JournalEntryLineRels is where relationship names are stored.
var JournalEntryLineRels = struct {
	Account       string
	GLAccountCode string
	JournalEntry  string
	Transaction   string
}{
	Account:       "Account",
	GLAccountCode: "GLAccountCode",
	JournalEntry:  "JournalEntry",
	Transaction:   "Transaction",
}

// journalEntryLineR is where relationships are stored.
type journalEntryLineR struct {
	Account       *Account
	GLAccountCode *GLAccount
	JournalEntry  *JournalEntry
	Transaction   *Transaction
}

// NewStruct creates a new relationship struct
func (*journalEntryLineR) NewStruct() *journalEntryLineR {
	return &journalEntryLineR{}
}

// journalEntryLineL is where Load methods for each relationship are stored.
type journalEntryLineL struct{}

var (
	journalEntryLineColumns               = []string{"journal_entry_line_id", "journal_entry_id", "entry_date", "created_date", "transaction_id", "account_id", "product_type", "amount", "gl_account_code", "payment_id", "created", "modified", "createdby", "modifiedby", "trn_ccy", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	journalEntryLineColumnsWithoutDefault = []string{"journal_entry_id", "entry_date", "created_date", "transaction_id", "account_id", "product_type", "amount", "gl_account_code", "payment_id", "created", "modified", "createdby", "modifiedby", "trn_ccy", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	journalEntryLineColumnsWithDefault    = []string{"journal_entry_line_id"}
	journalEntryLinePrimaryKeyColumns     = []string{"journal_entry_line_id"}
)

type (
	// JournalEntryLineSlice is an alias for a slice of pointers to JournalEntryLine.
	// This should generally be used opposed to []JournalEntryLine.
	JournalEntryLineSlice []*JournalEntryLine
	// JournalEntryLineHook is the signature for custom JournalEntryLine hook methods
	JournalEntryLineHook func(context.Context, boil.ContextExecutor, *JournalEntryLine) error

	journalEntryLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	journalEntryLineType                 = reflect.TypeOf(&JournalEntryLine{})
	journalEntryLineMapping              = queries.MakeStructMapping(journalEntryLineType)
	journalEntryLinePrimaryKeyMapping, _ = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, journalEntryLinePrimaryKeyColumns)
	journalEntryLineInsertCacheMut       sync.RWMutex
	journalEntryLineInsertCache          = make(map[string]insertCache)
	journalEntryLineUpdateCacheMut       sync.RWMutex
	journalEntryLineUpdateCache          = make(map[string]updateCache)
	journalEntryLineUpsertCacheMut       sync.RWMutex
	journalEntryLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var journalEntryLineBeforeInsertHooks []JournalEntryLineHook
var journalEntryLineBeforeUpdateHooks []JournalEntryLineHook
var journalEntryLineBeforeDeleteHooks []JournalEntryLineHook
var journalEntryLineBeforeUpsertHooks []JournalEntryLineHook

var journalEntryLineAfterInsertHooks []JournalEntryLineHook
var journalEntryLineAfterSelectHooks []JournalEntryLineHook
var journalEntryLineAfterUpdateHooks []JournalEntryLineHook
var journalEntryLineAfterDeleteHooks []JournalEntryLineHook
var journalEntryLineAfterUpsertHooks []JournalEntryLineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *JournalEntryLine) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *JournalEntryLine) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *JournalEntryLine) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *JournalEntryLine) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *JournalEntryLine) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *JournalEntryLine) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *JournalEntryLine) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *JournalEntryLine) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *JournalEntryLine) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range journalEntryLineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJournalEntryLineHook registers your hook function for all future operations.
func AddJournalEntryLineHook(hookPoint boil.HookPoint, journalEntryLineHook JournalEntryLineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		journalEntryLineBeforeInsertHooks = append(journalEntryLineBeforeInsertHooks, journalEntryLineHook)
	case boil.BeforeUpdateHook:
		journalEntryLineBeforeUpdateHooks = append(journalEntryLineBeforeUpdateHooks, journalEntryLineHook)
	case boil.BeforeDeleteHook:
		journalEntryLineBeforeDeleteHooks = append(journalEntryLineBeforeDeleteHooks, journalEntryLineHook)
	case boil.BeforeUpsertHook:
		journalEntryLineBeforeUpsertHooks = append(journalEntryLineBeforeUpsertHooks, journalEntryLineHook)
	case boil.AfterInsertHook:
		journalEntryLineAfterInsertHooks = append(journalEntryLineAfterInsertHooks, journalEntryLineHook)
	case boil.AfterSelectHook:
		journalEntryLineAfterSelectHooks = append(journalEntryLineAfterSelectHooks, journalEntryLineHook)
	case boil.AfterUpdateHook:
		journalEntryLineAfterUpdateHooks = append(journalEntryLineAfterUpdateHooks, journalEntryLineHook)
	case boil.AfterDeleteHook:
		journalEntryLineAfterDeleteHooks = append(journalEntryLineAfterDeleteHooks, journalEntryLineHook)
	case boil.AfterUpsertHook:
		journalEntryLineAfterUpsertHooks = append(journalEntryLineAfterUpsertHooks, journalEntryLineHook)
	}
}

// One returns a single journalEntryLine record from the query.
func (q journalEntryLineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JournalEntryLine, error) {
	o := &JournalEntryLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for JournalEntryLine")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all JournalEntryLine records from the query.
func (q journalEntryLineQuery) All(ctx context.Context, exec boil.ContextExecutor) (JournalEntryLineSlice, error) {
	var o []*JournalEntryLine

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JournalEntryLine slice")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all JournalEntryLine records in the query.
func (q journalEntryLineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count JournalEntryLine rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q journalEntryLineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if JournalEntryLine exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *JournalEntryLine) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// GLAccountCode pointed to by the foreign key.
func (o *JournalEntryLine) GLAccountCode(mods ...qm.QueryMod) gLAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("gl_code=?", o.GLAccountCode),
	}

	queryMods = append(queryMods, mods...)

	query := GLAccounts(queryMods...)
	queries.SetFrom(query.Query, "`GLAccount`")

	return query
}

// JournalEntry pointed to by the foreign key.
func (o *JournalEntryLine) JournalEntry(mods ...qm.QueryMod) journalEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("journal_entry_id=?", o.JournalEntryID),
	}

	queryMods = append(queryMods, mods...)

	query := JournalEntries(queryMods...)
	queries.SetFrom(query.Query, "`JournalEntry`")

	return query
}

// Transaction pointed to by the foreign key.
func (o *JournalEntryLine) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("transaction_id=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "`Transaction`")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryLineL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntryLine interface{}, mods queries.Applicator) error {
	var slice []*JournalEntryLine
	var object *JournalEntryLine

	if singular {
		object = maybeJournalEntryLine.(*JournalEntryLine)
	} else {
		slice = *maybeJournalEntryLine.(*[]*JournalEntryLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryLineR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryLineR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountJournalEntryLines = append(foreign.R.AccountJournalEntryLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountJournalEntryLines = append(foreign.R.AccountJournalEntryLines, local)
				break
			}
		}
	}

	return nil
}

// LoadGLAccountCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryLineL) LoadGLAccountCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntryLine interface{}, mods queries.Applicator) error {
	var slice []*JournalEntryLine
	var object *JournalEntryLine

	if singular {
		object = maybeJournalEntryLine.(*JournalEntryLine)
	} else {
		slice = *maybeJournalEntryLine.(*[]*JournalEntryLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryLineR{}
		}
		if !queries.IsNil(object.GLAccountCode) {
			args = append(args, object.GLAccountCode)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GLAccountCode) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GLAccountCode) {
				args = append(args, obj.GLAccountCode)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`GLAccount`), qm.WhereIn(`gl_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GLAccount")
	}

	var resultSlice []*GLAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GLAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for GLAccount")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for GLAccount")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GLAccountCode = foreign
		if foreign.R == nil {
			foreign.R = &gLAccountR{}
		}
		foreign.R.GLAccountCodeJournalEntryLines = append(foreign.R.GLAccountCodeJournalEntryLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GLAccountCode, foreign.GLCode) {
				local.R.GLAccountCode = foreign
				if foreign.R == nil {
					foreign.R = &gLAccountR{}
				}
				foreign.R.GLAccountCodeJournalEntryLines = append(foreign.R.GLAccountCodeJournalEntryLines, local)
				break
			}
		}
	}

	return nil
}

// LoadJournalEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryLineL) LoadJournalEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntryLine interface{}, mods queries.Applicator) error {
	var slice []*JournalEntryLine
	var object *JournalEntryLine

	if singular {
		object = maybeJournalEntryLine.(*JournalEntryLine)
	} else {
		slice = *maybeJournalEntryLine.(*[]*JournalEntryLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryLineR{}
		}
		args = append(args, object.JournalEntryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryLineR{}
			}

			for _, a := range args {
				if a == obj.JournalEntryID {
					continue Outer
				}
			}

			args = append(args, obj.JournalEntryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`JournalEntry`), qm.WhereIn(`journal_entry_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load JournalEntry")
	}

	var resultSlice []*JournalEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice JournalEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for JournalEntry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for JournalEntry")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.JournalEntry = foreign
		if foreign.R == nil {
			foreign.R = &journalEntryR{}
		}
		foreign.R.JournalEntryJournalEntryLines = append(foreign.R.JournalEntryJournalEntryLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JournalEntryID == foreign.JournalEntryID {
				local.R.JournalEntry = foreign
				if foreign.R == nil {
					foreign.R = &journalEntryR{}
				}
				foreign.R.JournalEntryJournalEntryLines = append(foreign.R.JournalEntryJournalEntryLines, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (journalEntryLineL) LoadTransaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJournalEntryLine interface{}, mods queries.Applicator) error {
	var slice []*JournalEntryLine
	var object *JournalEntryLine

	if singular {
		object = maybeJournalEntryLine.(*JournalEntryLine)
	} else {
		slice = *maybeJournalEntryLine.(*[]*JournalEntryLine)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &journalEntryLineR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &journalEntryLineR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Transaction`), qm.WhereIn(`transaction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Transaction")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionJournalEntryLines = append(foreign.R.TransactionJournalEntryLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.TransactionID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionJournalEntryLines = append(foreign.R.TransactionJournalEntryLines, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the journalEntryLine to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountJournalEntryLines.
func (o *JournalEntryLine) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntryLine` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.JournalEntryLineID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &journalEntryLineR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountJournalEntryLines: JournalEntryLineSlice{o},
		}
	} else {
		related.R.AccountJournalEntryLines = append(related.R.AccountJournalEntryLines, o)
	}

	return nil
}

// SetGLAccountCode of the journalEntryLine to the related item.
// Sets o.R.GLAccountCode to related.
// Adds o to related.R.GLAccountCodeJournalEntryLines.
func (o *JournalEntryLine) SetGLAccountCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GLAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntryLine` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gl_account_code"}),
		strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
	)
	values := []interface{}{related.GLCode, o.JournalEntryLineID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GLAccountCode, related.GLCode)
	if o.R == nil {
		o.R = &journalEntryLineR{
			GLAccountCode: related,
		}
	} else {
		o.R.GLAccountCode = related
	}

	if related.R == nil {
		related.R = &gLAccountR{
			GLAccountCodeJournalEntryLines: JournalEntryLineSlice{o},
		}
	} else {
		related.R.GLAccountCodeJournalEntryLines = append(related.R.GLAccountCodeJournalEntryLines, o)
	}

	return nil
}

// RemoveGLAccountCode relationship.
// Sets o.R.GLAccountCode to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *JournalEntryLine) RemoveGLAccountCode(ctx context.Context, exec boil.ContextExecutor, related *GLAccount) error {
	var err error

	queries.SetScanner(&o.GLAccountCode, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("gl_account_code")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.GLAccountCode = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GLAccountCodeJournalEntryLines {
		if queries.Equal(o.GLAccountCode, ri.GLAccountCode) {
			continue
		}

		ln := len(related.R.GLAccountCodeJournalEntryLines)
		if ln > 1 && i < ln-1 {
			related.R.GLAccountCodeJournalEntryLines[i] = related.R.GLAccountCodeJournalEntryLines[ln-1]
		}
		related.R.GLAccountCodeJournalEntryLines = related.R.GLAccountCodeJournalEntryLines[:ln-1]
		break
	}
	return nil
}

// SetJournalEntry of the journalEntryLine to the related item.
// Sets o.R.JournalEntry to related.
// Adds o to related.R.JournalEntryJournalEntryLines.
func (o *JournalEntryLine) SetJournalEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *JournalEntry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntryLine` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"journal_entry_id"}),
		strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
	)
	values := []interface{}{related.JournalEntryID, o.JournalEntryLineID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JournalEntryID = related.JournalEntryID
	if o.R == nil {
		o.R = &journalEntryLineR{
			JournalEntry: related,
		}
	} else {
		o.R.JournalEntry = related
	}

	if related.R == nil {
		related.R = &journalEntryR{
			JournalEntryJournalEntryLines: JournalEntryLineSlice{o},
		}
	} else {
		related.R.JournalEntryJournalEntryLines = append(related.R.JournalEntryJournalEntryLines, o)
	}

	return nil
}

// SetTransaction of the journalEntryLine to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionJournalEntryLines.
func (o *JournalEntryLine) SetTransaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `JournalEntryLine` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
	)
	values := []interface{}{related.TransactionID, o.JournalEntryLineID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.TransactionID
	if o.R == nil {
		o.R = &journalEntryLineR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionJournalEntryLines: JournalEntryLineSlice{o},
		}
	} else {
		related.R.TransactionJournalEntryLines = append(related.R.TransactionJournalEntryLines, o)
	}

	return nil
}

// JournalEntryLines retrieves all the records using an executor.
func JournalEntryLines(mods ...qm.QueryMod) journalEntryLineQuery {
	mods = append(mods, qm.From("`JournalEntryLine`"))
	return journalEntryLineQuery{NewQuery(mods...)}
}

// FindJournalEntryLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJournalEntryLine(ctx context.Context, exec boil.ContextExecutor, journalEntryLineID int, selectCols ...string) (*JournalEntryLine, error) {
	journalEntryLineObj := &JournalEntryLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `JournalEntryLine` where `journal_entry_line_id`=?", sel,
	)

	q := queries.Raw(query, journalEntryLineID)

	err := q.Bind(ctx, exec, journalEntryLineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from JournalEntryLine")
	}

	return journalEntryLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JournalEntryLine) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JournalEntryLine provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(journalEntryLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	journalEntryLineInsertCacheMut.RLock()
	cache, cached := journalEntryLineInsertCache[key]
	journalEntryLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			journalEntryLineColumns,
			journalEntryLineColumnsWithDefault,
			journalEntryLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `JournalEntryLine` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `JournalEntryLine` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `JournalEntryLine` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into JournalEntryLine")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JournalEntryLineID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == journalEntryLineMapping["JournalEntryLineID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.JournalEntryLineID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JournalEntryLine")
	}

CacheNoHooks:
	if !cached {
		journalEntryLineInsertCacheMut.Lock()
		journalEntryLineInsertCache[key] = cache
		journalEntryLineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the JournalEntryLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JournalEntryLine) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	journalEntryLineUpdateCacheMut.RLock()
	cache, cached := journalEntryLineUpdateCache[key]
	journalEntryLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			journalEntryLineColumns,
			journalEntryLinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update JournalEntryLine, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `JournalEntryLine` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, append(wl, journalEntryLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update JournalEntryLine row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for JournalEntryLine")
	}

	if !cached {
		journalEntryLineUpdateCacheMut.Lock()
		journalEntryLineUpdateCache[key] = cache
		journalEntryLineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q journalEntryLineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for JournalEntryLine")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for JournalEntryLine")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JournalEntryLineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `JournalEntryLine` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryLinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in journalEntryLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all journalEntryLine")
	}
	return rowsAff, nil
}

var mySQLJournalEntryLineUniqueColumns = []string{
	"journal_entry_line_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JournalEntryLine) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JournalEntryLine provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(journalEntryLineColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJournalEntryLineUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	journalEntryLineUpsertCacheMut.RLock()
	cache, cached := journalEntryLineUpsertCache[key]
	journalEntryLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			journalEntryLineColumns,
			journalEntryLineColumnsWithDefault,
			journalEntryLineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			journalEntryLineColumns,
			journalEntryLinePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert JournalEntryLine, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "JournalEntryLine", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `JournalEntryLine` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for JournalEntryLine")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.JournalEntryLineID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == journalEntryLineMapping["journal_entry_line_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(journalEntryLineType, journalEntryLineMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for JournalEntryLine")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for JournalEntryLine")
	}

CacheNoHooks:
	if !cached {
		journalEntryLineUpsertCacheMut.Lock()
		journalEntryLineUpsertCache[key] = cache
		journalEntryLineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single JournalEntryLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JournalEntryLine) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JournalEntryLine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), journalEntryLinePrimaryKeyMapping)
	sql := "DELETE FROM `JournalEntryLine` WHERE `journal_entry_line_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from JournalEntryLine")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for JournalEntryLine")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q journalEntryLineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no journalEntryLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from JournalEntryLine")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JournalEntryLine")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JournalEntryLineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JournalEntryLine slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(journalEntryLineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `JournalEntryLine` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryLinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from journalEntryLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JournalEntryLine")
	}

	if len(journalEntryLineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JournalEntryLine) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJournalEntryLine(ctx, exec, o.JournalEntryLineID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JournalEntryLineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JournalEntryLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), journalEntryLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `JournalEntryLine`.* FROM `JournalEntryLine` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, journalEntryLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JournalEntryLineSlice")
	}

	*o = slice

	return nil
}

// JournalEntryLineExists checks if the JournalEntryLine row exists.
func JournalEntryLineExists(ctx context.Context, exec boil.ContextExecutor, journalEntryLineID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `JournalEntryLine` where `journal_entry_line_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, journalEntryLineID)
	}

	row := exec.QueryRowContext(ctx, sql, journalEntryLineID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if JournalEntryLine exists")
	}

	return exists, nil
}
