// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DirectDebit is an object representing the database table.
type DirectDebit struct {
	DirectDebitID                          int               `boil:"direct_debit_id" json:"direct_debit_id" toml:"direct_debit_id" yaml:"direct_debit_id"`
	BankID                                 int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	DebtorAccountID                        int               `boil:"debtor_account_id" json:"debtor_account_id" toml:"debtor_account_id" yaml:"debtor_account_id"`
	ServicerSchemeName                     null.String       `boil:"servicer_scheme_name" json:"servicer_scheme_name,omitempty" toml:"servicer_scheme_name" yaml:"servicer_scheme_name,omitempty"`
	ServicerIdentification                 null.String       `boil:"servicer_identification" json:"servicer_identification,omitempty" toml:"servicer_identification" yaml:"servicer_identification,omitempty"`
	CreditorAccountSchemeName              string            `boil:"creditor_account_scheme_name" json:"creditor_account_scheme_name" toml:"creditor_account_scheme_name" yaml:"creditor_account_scheme_name"`
	CreditorAccountIdentification          string            `boil:"creditor_account_identification" json:"creditor_account_identification" toml:"creditor_account_identification" yaml:"creditor_account_identification"`
	CreditorAccountName                    string            `boil:"creditor_account_name" json:"creditor_account_name" toml:"creditor_account_name" yaml:"creditor_account_name"`
	CreditorAccountSecondaryIdentification string            `boil:"creditor_account_secondary_identification" json:"creditor_account_secondary_identification" toml:"creditor_account_secondary_identification" yaml:"creditor_account_secondary_identification"`
	DirectDebitReferenceNumber             string            `boil:"direct_debit_reference_number" json:"direct_debit_reference_number" toml:"direct_debit_reference_number" yaml:"direct_debit_reference_number"`
	MandateIdentification                  null.String       `boil:"mandate_identification" json:"mandate_identification,omitempty" toml:"mandate_identification" yaml:"mandate_identification,omitempty"`
	DirectdebitStatusCode                  string            `boil:"directdebit_status_code" json:"directdebit_status_code" toml:"directdebit_status_code" yaml:"directdebit_status_code"`
	NameServiceUser                        string            `boil:"name_service_user" json:"name_service_user" toml:"name_service_user" yaml:"name_service_user"`
	PreviousPaymentDatetime                null.Time         `boil:"previous_payment_datetime" json:"previous_payment_datetime,omitempty" toml:"previous_payment_datetime" yaml:"previous_payment_datetime,omitempty"`
	PreviousPaymentAmount                  types.NullDecimal `boil:"previous_payment_amount" json:"previous_payment_amount,omitempty" toml:"previous_payment_amount" yaml:"previous_payment_amount,omitempty"`
	Currency                               null.String       `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	MakerDate                              time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                            null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                                int               `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                              null.Int          `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                             null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                           null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *directDebitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L directDebitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DirectDebitColumns = struct {
	DirectDebitID                          string
	BankID                                 string
	DebtorAccountID                        string
	ServicerSchemeName                     string
	ServicerIdentification                 string
	CreditorAccountSchemeName              string
	CreditorAccountIdentification          string
	CreditorAccountName                    string
	CreditorAccountSecondaryIdentification string
	DirectDebitReferenceNumber             string
	MandateIdentification                  string
	DirectdebitStatusCode                  string
	NameServiceUser                        string
	PreviousPaymentDatetime                string
	PreviousPaymentAmount                  string
	Currency                               string
	MakerDate                              string
	CheckerDate                            string
	MakerID                                string
	CheckerID                              string
	ModifiedBy                             string
	ModifiedDate                           string
}{
	DirectDebitID:                          "direct_debit_id",
	BankID:                                 "bank_id",
	DebtorAccountID:                        "debtor_account_id",
	ServicerSchemeName:                     "servicer_scheme_name",
	ServicerIdentification:                 "servicer_identification",
	CreditorAccountSchemeName:              "creditor_account_scheme_name",
	CreditorAccountIdentification:          "creditor_account_identification",
	CreditorAccountName:                    "creditor_account_name",
	CreditorAccountSecondaryIdentification: "creditor_account_secondary_identification",
	DirectDebitReferenceNumber:             "direct_debit_reference_number",
	MandateIdentification:                  "mandate_identification",
	DirectdebitStatusCode:                  "directdebit_status_code",
	NameServiceUser:                        "name_service_user",
	PreviousPaymentDatetime:                "previous_payment_datetime",
	PreviousPaymentAmount:                  "previous_payment_amount",
	Currency:                               "currency",
	MakerDate:                              "maker_date",
	CheckerDate:                            "checker_date",
	MakerID:                                "maker_id",
	CheckerID:                              "checker_id",
	ModifiedBy:                             "modified_by",
	ModifiedDate:                           "modified_date",
}

// Generated where

var DirectDebitWhere = struct {
	DirectDebitID                          whereHelperint
	BankID                                 whereHelperint
	DebtorAccountID                        whereHelperint
	ServicerSchemeName                     whereHelpernull_String
	ServicerIdentification                 whereHelpernull_String
	CreditorAccountSchemeName              whereHelperstring
	CreditorAccountIdentification          whereHelperstring
	CreditorAccountName                    whereHelperstring
	CreditorAccountSecondaryIdentification whereHelperstring
	DirectDebitReferenceNumber             whereHelperstring
	MandateIdentification                  whereHelpernull_String
	DirectdebitStatusCode                  whereHelperstring
	NameServiceUser                        whereHelperstring
	PreviousPaymentDatetime                whereHelpernull_Time
	PreviousPaymentAmount                  whereHelpertypes_NullDecimal
	Currency                               whereHelpernull_String
	MakerDate                              whereHelpertime_Time
	CheckerDate                            whereHelpernull_Time
	MakerID                                whereHelperint
	CheckerID                              whereHelpernull_Int
	ModifiedBy                             whereHelpernull_String
	ModifiedDate                           whereHelpernull_Time
}{
	DirectDebitID:                          whereHelperint{field: `direct_debit_id`},
	BankID:                                 whereHelperint{field: `bank_id`},
	DebtorAccountID:                        whereHelperint{field: `debtor_account_id`},
	ServicerSchemeName:                     whereHelpernull_String{field: `servicer_scheme_name`},
	ServicerIdentification:                 whereHelpernull_String{field: `servicer_identification`},
	CreditorAccountSchemeName:              whereHelperstring{field: `creditor_account_scheme_name`},
	CreditorAccountIdentification:          whereHelperstring{field: `creditor_account_identification`},
	CreditorAccountName:                    whereHelperstring{field: `creditor_account_name`},
	CreditorAccountSecondaryIdentification: whereHelperstring{field: `creditor_account_secondary_identification`},
	DirectDebitReferenceNumber:             whereHelperstring{field: `direct_debit_reference_number`},
	MandateIdentification:                  whereHelpernull_String{field: `mandate_identification`},
	DirectdebitStatusCode:                  whereHelperstring{field: `directdebit_status_code`},
	NameServiceUser:                        whereHelperstring{field: `name_service_user`},
	PreviousPaymentDatetime:                whereHelpernull_Time{field: `previous_payment_datetime`},
	PreviousPaymentAmount:                  whereHelpertypes_NullDecimal{field: `previous_payment_amount`},
	Currency:                               whereHelpernull_String{field: `currency`},
	MakerDate:                              whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                            whereHelpernull_Time{field: `checker_date`},
	MakerID:                                whereHelperint{field: `maker_id`},
	CheckerID:                              whereHelpernull_Int{field: `checker_id`},
	ModifiedBy:                             whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                           whereHelpernull_Time{field: `modified_date`},
}

// DirectDebitRels is where relationship names are stored.
var DirectDebitRels = struct {
	DebtorAccount string
	Bank          string
}{
	DebtorAccount: "DebtorAccount",
	Bank:          "Bank",
}

// directDebitR is where relationships are stored.
type directDebitR struct {
	DebtorAccount *Account
	Bank          *Bank
}

// NewStruct creates a new relationship struct
func (*directDebitR) NewStruct() *directDebitR {
	return &directDebitR{}
}

// directDebitL is where Load methods for each relationship are stored.
type directDebitL struct{}

var (
	directDebitColumns               = []string{"direct_debit_id", "bank_id", "debtor_account_id", "servicer_scheme_name", "servicer_identification", "creditor_account_scheme_name", "creditor_account_identification", "creditor_account_name", "creditor_account_secondary_identification", "direct_debit_reference_number", "mandate_identification", "directdebit_status_code", "name_service_user", "previous_payment_datetime", "previous_payment_amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	directDebitColumnsWithoutDefault = []string{"direct_debit_id", "bank_id", "debtor_account_id", "servicer_scheme_name", "servicer_identification", "creditor_account_scheme_name", "creditor_account_identification", "creditor_account_name", "creditor_account_secondary_identification", "direct_debit_reference_number", "mandate_identification", "directdebit_status_code", "name_service_user", "previous_payment_datetime", "previous_payment_amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	directDebitColumnsWithDefault    = []string{}
	directDebitPrimaryKeyColumns     = []string{"direct_debit_id"}
)

type (
	// DirectDebitSlice is an alias for a slice of pointers to DirectDebit.
	// This should generally be used opposed to []DirectDebit.
	DirectDebitSlice []*DirectDebit
	// DirectDebitHook is the signature for custom DirectDebit hook methods
	DirectDebitHook func(context.Context, boil.ContextExecutor, *DirectDebit) error

	directDebitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	directDebitType                 = reflect.TypeOf(&DirectDebit{})
	directDebitMapping              = queries.MakeStructMapping(directDebitType)
	directDebitPrimaryKeyMapping, _ = queries.BindMapping(directDebitType, directDebitMapping, directDebitPrimaryKeyColumns)
	directDebitInsertCacheMut       sync.RWMutex
	directDebitInsertCache          = make(map[string]insertCache)
	directDebitUpdateCacheMut       sync.RWMutex
	directDebitUpdateCache          = make(map[string]updateCache)
	directDebitUpsertCacheMut       sync.RWMutex
	directDebitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var directDebitBeforeInsertHooks []DirectDebitHook
var directDebitBeforeUpdateHooks []DirectDebitHook
var directDebitBeforeDeleteHooks []DirectDebitHook
var directDebitBeforeUpsertHooks []DirectDebitHook

var directDebitAfterInsertHooks []DirectDebitHook
var directDebitAfterSelectHooks []DirectDebitHook
var directDebitAfterUpdateHooks []DirectDebitHook
var directDebitAfterDeleteHooks []DirectDebitHook
var directDebitAfterUpsertHooks []DirectDebitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DirectDebit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DirectDebit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DirectDebit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DirectDebit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DirectDebit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DirectDebit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DirectDebit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DirectDebit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DirectDebit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range directDebitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDirectDebitHook registers your hook function for all future operations.
func AddDirectDebitHook(hookPoint boil.HookPoint, directDebitHook DirectDebitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		directDebitBeforeInsertHooks = append(directDebitBeforeInsertHooks, directDebitHook)
	case boil.BeforeUpdateHook:
		directDebitBeforeUpdateHooks = append(directDebitBeforeUpdateHooks, directDebitHook)
	case boil.BeforeDeleteHook:
		directDebitBeforeDeleteHooks = append(directDebitBeforeDeleteHooks, directDebitHook)
	case boil.BeforeUpsertHook:
		directDebitBeforeUpsertHooks = append(directDebitBeforeUpsertHooks, directDebitHook)
	case boil.AfterInsertHook:
		directDebitAfterInsertHooks = append(directDebitAfterInsertHooks, directDebitHook)
	case boil.AfterSelectHook:
		directDebitAfterSelectHooks = append(directDebitAfterSelectHooks, directDebitHook)
	case boil.AfterUpdateHook:
		directDebitAfterUpdateHooks = append(directDebitAfterUpdateHooks, directDebitHook)
	case boil.AfterDeleteHook:
		directDebitAfterDeleteHooks = append(directDebitAfterDeleteHooks, directDebitHook)
	case boil.AfterUpsertHook:
		directDebitAfterUpsertHooks = append(directDebitAfterUpsertHooks, directDebitHook)
	}
}

// One returns a single directDebit record from the query.
func (q directDebitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DirectDebit, error) {
	o := &DirectDebit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DirectDebits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DirectDebit records from the query.
func (q directDebitQuery) All(ctx context.Context, exec boil.ContextExecutor) (DirectDebitSlice, error) {
	var o []*DirectDebit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DirectDebit slice")
	}

	if len(directDebitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DirectDebit records in the query.
func (q directDebitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DirectDebits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q directDebitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DirectDebits exists")
	}

	return count > 0, nil
}

// DebtorAccount pointed to by the foreign key.
func (o *DirectDebit) DebtorAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.DebtorAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Bank pointed to by the foreign key.
func (o *DirectDebit) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// LoadDebtorAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (directDebitL) LoadDebtorAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirectDebit interface{}, mods queries.Applicator) error {
	var slice []*DirectDebit
	var object *DirectDebit

	if singular {
		object = maybeDirectDebit.(*DirectDebit)
	} else {
		slice = *maybeDirectDebit.(*[]*DirectDebit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directDebitR{}
		}
		args = append(args, object.DebtorAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directDebitR{}
			}

			for _, a := range args {
				if a == obj.DebtorAccountID {
					continue Outer
				}
			}

			args = append(args, obj.DebtorAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(directDebitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebtorAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.DebtorAccountDirectDebits = append(foreign.R.DebtorAccountDirectDebits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebtorAccountID == foreign.AccountID {
				local.R.DebtorAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.DebtorAccountDirectDebits = append(foreign.R.DebtorAccountDirectDebits, local)
				break
			}
		}
	}

	return nil
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (directDebitL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDirectDebit interface{}, mods queries.Applicator) error {
	var slice []*DirectDebit
	var object *DirectDebit

	if singular {
		object = maybeDirectDebit.(*DirectDebit)
	} else {
		slice = *maybeDirectDebit.(*[]*DirectDebit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &directDebitR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &directDebitR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(directDebitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankDirectDebits = append(foreign.R.BankDirectDebits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankDirectDebits = append(foreign.R.BankDirectDebits, local)
				break
			}
		}
	}

	return nil
}

// SetDebtorAccount of the directDebit to the related item.
// Sets o.R.DebtorAccount to related.
// Adds o to related.R.DebtorAccountDirectDebits.
func (o *DirectDebit) SetDebtorAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `DirectDebits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"debtor_account_id"}),
		strmangle.WhereClause("`", "`", 0, directDebitPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.DirectDebitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebtorAccountID = related.AccountID
	if o.R == nil {
		o.R = &directDebitR{
			DebtorAccount: related,
		}
	} else {
		o.R.DebtorAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			DebtorAccountDirectDebits: DirectDebitSlice{o},
		}
	} else {
		related.R.DebtorAccountDirectDebits = append(related.R.DebtorAccountDirectDebits, o)
	}

	return nil
}

// SetBank of the directDebit to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankDirectDebits.
func (o *DirectDebit) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `DirectDebits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, directDebitPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.DirectDebitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &directDebitR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankDirectDebits: DirectDebitSlice{o},
		}
	} else {
		related.R.BankDirectDebits = append(related.R.BankDirectDebits, o)
	}

	return nil
}

// DirectDebits retrieves all the records using an executor.
func DirectDebits(mods ...qm.QueryMod) directDebitQuery {
	mods = append(mods, qm.From("`DirectDebits`"))
	return directDebitQuery{NewQuery(mods...)}
}

// FindDirectDebit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDirectDebit(ctx context.Context, exec boil.ContextExecutor, directDebitID int, selectCols ...string) (*DirectDebit, error) {
	directDebitObj := &DirectDebit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `DirectDebits` where `direct_debit_id`=?", sel,
	)

	q := queries.Raw(query, directDebitID)

	err := q.Bind(ctx, exec, directDebitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DirectDebits")
	}

	return directDebitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DirectDebit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DirectDebits provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(directDebitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	directDebitInsertCacheMut.RLock()
	cache, cached := directDebitInsertCache[key]
	directDebitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			directDebitColumns,
			directDebitColumnsWithDefault,
			directDebitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(directDebitType, directDebitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(directDebitType, directDebitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `DirectDebits` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `DirectDebits` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `DirectDebits` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, directDebitPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DirectDebits")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DirectDebitID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for DirectDebits")
	}

CacheNoHooks:
	if !cached {
		directDebitInsertCacheMut.Lock()
		directDebitInsertCache[key] = cache
		directDebitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DirectDebit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DirectDebit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	directDebitUpdateCacheMut.RLock()
	cache, cached := directDebitUpdateCache[key]
	directDebitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			directDebitColumns,
			directDebitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DirectDebits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `DirectDebits` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, directDebitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(directDebitType, directDebitMapping, append(wl, directDebitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DirectDebits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DirectDebits")
	}

	if !cached {
		directDebitUpdateCacheMut.Lock()
		directDebitUpdateCache[key] = cache
		directDebitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q directDebitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DirectDebits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DirectDebits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DirectDebitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directDebitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `DirectDebits` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, directDebitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in directDebit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all directDebit")
	}
	return rowsAff, nil
}

var mySQLDirectDebitUniqueColumns = []string{
	"direct_debit_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DirectDebit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DirectDebits provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(directDebitColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDirectDebitUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	directDebitUpsertCacheMut.RLock()
	cache, cached := directDebitUpsertCache[key]
	directDebitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			directDebitColumns,
			directDebitColumnsWithDefault,
			directDebitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			directDebitColumns,
			directDebitPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert DirectDebits, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "DirectDebits", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `DirectDebits` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(directDebitType, directDebitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(directDebitType, directDebitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for DirectDebits")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(directDebitType, directDebitMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for DirectDebits")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for DirectDebits")
	}

CacheNoHooks:
	if !cached {
		directDebitUpsertCacheMut.Lock()
		directDebitUpsertCache[key] = cache
		directDebitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DirectDebit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DirectDebit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DirectDebit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), directDebitPrimaryKeyMapping)
	sql := "DELETE FROM `DirectDebits` WHERE `direct_debit_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DirectDebits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DirectDebits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q directDebitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no directDebitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DirectDebits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DirectDebits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DirectDebitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DirectDebit slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(directDebitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directDebitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `DirectDebits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, directDebitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from directDebit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DirectDebits")
	}

	if len(directDebitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DirectDebit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDirectDebit(ctx, exec, o.DirectDebitID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DirectDebitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DirectDebitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), directDebitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `DirectDebits`.* FROM `DirectDebits` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, directDebitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DirectDebitSlice")
	}

	*o = slice

	return nil
}

// DirectDebitExists checks if the DirectDebit row exists.
func DirectDebitExists(ctx context.Context, exec boil.ContextExecutor, directDebitID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `DirectDebits` where `direct_debit_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, directDebitID)
	}

	row := exec.QueryRowContext(ctx, sql, directDebitID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DirectDebits exists")
	}

	return exists, nil
}
