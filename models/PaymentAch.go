// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentAch is an object representing the database table.
type PaymentAch struct {
	PaymentAchID         int               `boil:"payment_ach_id" json:"payment_ach_id" toml:"payment_ach_id" yaml:"payment_ach_id"`
	RoutingNumber        string            `boil:"routing_number" json:"routing_number" toml:"routing_number" yaml:"routing_number"`
	FromAccountID        int               `boil:"from_account_id" json:"from_account_id" toml:"from_account_id" yaml:"from_account_id"`
	PaymentID            null.Int          `boil:"payment_id" json:"payment_id,omitempty" toml:"payment_id" yaml:"payment_id,omitempty"`
	ToAccountID          int               `boil:"to_account_id" json:"to_account_id" toml:"to_account_id" yaml:"to_account_id"`
	PaymentAchStatus     null.String       `boil:"payment_ach_status" json:"payment_ach_status,omitempty" toml:"payment_ach_status" yaml:"payment_ach_status,omitempty"`
	PaymentAchAmount     types.NullDecimal `boil:"payment_ach_amount" json:"payment_ach_amount,omitempty" toml:"payment_ach_amount" yaml:"payment_ach_amount,omitempty"`
	ChargeAchAmount      types.NullDecimal `boil:"charge_ach_amount" json:"charge_ach_amount,omitempty" toml:"charge_ach_amount" yaml:"charge_ach_amount,omitempty"`
	FinalAchCreditAmount types.NullDecimal `boil:"final_ach_credit_amount" json:"final_ach_credit_amount,omitempty" toml:"final_ach_credit_amount" yaml:"final_ach_credit_amount,omitempty"`
	PaymentAchDate       null.Time         `boil:"payment_ach_date" json:"payment_ach_date,omitempty" toml:"payment_ach_date" yaml:"payment_ach_date,omitempty"`
	MakerDate            time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentAchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentAchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentAchColumns = struct {
	PaymentAchID         string
	RoutingNumber        string
	FromAccountID        string
	PaymentID            string
	ToAccountID          string
	PaymentAchStatus     string
	PaymentAchAmount     string
	ChargeAchAmount      string
	FinalAchCreditAmount string
	PaymentAchDate       string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	PaymentAchID:         "payment_ach_id",
	RoutingNumber:        "routing_number",
	FromAccountID:        "from_account_id",
	PaymentID:            "payment_id",
	ToAccountID:          "to_account_id",
	PaymentAchStatus:     "payment_ach_status",
	PaymentAchAmount:     "payment_ach_amount",
	ChargeAchAmount:      "charge_ach_amount",
	FinalAchCreditAmount: "final_ach_credit_amount",
	PaymentAchDate:       "payment_ach_date",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var PaymentAchWhere = struct {
	PaymentAchID         whereHelperint
	RoutingNumber        whereHelperstring
	FromAccountID        whereHelperint
	PaymentID            whereHelpernull_Int
	ToAccountID          whereHelperint
	PaymentAchStatus     whereHelpernull_String
	PaymentAchAmount     whereHelpertypes_NullDecimal
	ChargeAchAmount      whereHelpertypes_NullDecimal
	FinalAchCreditAmount whereHelpertypes_NullDecimal
	PaymentAchDate       whereHelpernull_Time
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	PaymentAchID:         whereHelperint{field: `payment_ach_id`},
	RoutingNumber:        whereHelperstring{field: `routing_number`},
	FromAccountID:        whereHelperint{field: `from_account_id`},
	PaymentID:            whereHelpernull_Int{field: `payment_id`},
	ToAccountID:          whereHelperint{field: `to_account_id`},
	PaymentAchStatus:     whereHelpernull_String{field: `payment_ach_status`},
	PaymentAchAmount:     whereHelpertypes_NullDecimal{field: `payment_ach_amount`},
	ChargeAchAmount:      whereHelpertypes_NullDecimal{field: `charge_ach_amount`},
	FinalAchCreditAmount: whereHelpertypes_NullDecimal{field: `final_ach_credit_amount`},
	PaymentAchDate:       whereHelpernull_Time{field: `payment_ach_date`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// PaymentAchRels is where relationship names are stored.
var PaymentAchRels = struct {
	Payment     string
	FromAccount string
	ToAccount   string
}{
	Payment:     "Payment",
	FromAccount: "FromAccount",
	ToAccount:   "ToAccount",
}

// paymentAchR is where relationships are stored.
type paymentAchR struct {
	Payment     *PaymentInitiation
	FromAccount *Account
	ToAccount   *Account
}

// NewStruct creates a new relationship struct
func (*paymentAchR) NewStruct() *paymentAchR {
	return &paymentAchR{}
}

// paymentAchL is where Load methods for each relationship are stored.
type paymentAchL struct{}

var (
	paymentAchColumns               = []string{"payment_ach_id", "routing_number", "from_account_id", "payment_id", "to_account_id", "payment_ach_status", "payment_ach_amount", "charge_ach_amount", "final_ach_credit_amount", "payment_ach_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentAchColumnsWithoutDefault = []string{"routing_number", "from_account_id", "payment_id", "to_account_id", "payment_ach_status", "payment_ach_amount", "charge_ach_amount", "final_ach_credit_amount", "payment_ach_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentAchColumnsWithDefault    = []string{"payment_ach_id"}
	paymentAchPrimaryKeyColumns     = []string{"payment_ach_id"}
)

type (
	// PaymentAchSlice is an alias for a slice of pointers to PaymentAch.
	// This should generally be used opposed to []PaymentAch.
	PaymentAchSlice []*PaymentAch
	// PaymentAchHook is the signature for custom PaymentAch hook methods
	PaymentAchHook func(context.Context, boil.ContextExecutor, *PaymentAch) error

	paymentAchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentAchType                 = reflect.TypeOf(&PaymentAch{})
	paymentAchMapping              = queries.MakeStructMapping(paymentAchType)
	paymentAchPrimaryKeyMapping, _ = queries.BindMapping(paymentAchType, paymentAchMapping, paymentAchPrimaryKeyColumns)
	paymentAchInsertCacheMut       sync.RWMutex
	paymentAchInsertCache          = make(map[string]insertCache)
	paymentAchUpdateCacheMut       sync.RWMutex
	paymentAchUpdateCache          = make(map[string]updateCache)
	paymentAchUpsertCacheMut       sync.RWMutex
	paymentAchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentAchBeforeInsertHooks []PaymentAchHook
var paymentAchBeforeUpdateHooks []PaymentAchHook
var paymentAchBeforeDeleteHooks []PaymentAchHook
var paymentAchBeforeUpsertHooks []PaymentAchHook

var paymentAchAfterInsertHooks []PaymentAchHook
var paymentAchAfterSelectHooks []PaymentAchHook
var paymentAchAfterUpdateHooks []PaymentAchHook
var paymentAchAfterDeleteHooks []PaymentAchHook
var paymentAchAfterUpsertHooks []PaymentAchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentAch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentAch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentAch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentAch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentAch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentAch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentAch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentAch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentAch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentAchHook registers your hook function for all future operations.
func AddPaymentAchHook(hookPoint boil.HookPoint, paymentAchHook PaymentAchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentAchBeforeInsertHooks = append(paymentAchBeforeInsertHooks, paymentAchHook)
	case boil.BeforeUpdateHook:
		paymentAchBeforeUpdateHooks = append(paymentAchBeforeUpdateHooks, paymentAchHook)
	case boil.BeforeDeleteHook:
		paymentAchBeforeDeleteHooks = append(paymentAchBeforeDeleteHooks, paymentAchHook)
	case boil.BeforeUpsertHook:
		paymentAchBeforeUpsertHooks = append(paymentAchBeforeUpsertHooks, paymentAchHook)
	case boil.AfterInsertHook:
		paymentAchAfterInsertHooks = append(paymentAchAfterInsertHooks, paymentAchHook)
	case boil.AfterSelectHook:
		paymentAchAfterSelectHooks = append(paymentAchAfterSelectHooks, paymentAchHook)
	case boil.AfterUpdateHook:
		paymentAchAfterUpdateHooks = append(paymentAchAfterUpdateHooks, paymentAchHook)
	case boil.AfterDeleteHook:
		paymentAchAfterDeleteHooks = append(paymentAchAfterDeleteHooks, paymentAchHook)
	case boil.AfterUpsertHook:
		paymentAchAfterUpsertHooks = append(paymentAchAfterUpsertHooks, paymentAchHook)
	}
}

// One returns a single paymentAch record from the query.
func (q paymentAchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentAch, error) {
	o := &PaymentAch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentAch")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentAch records from the query.
func (q paymentAchQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentAchSlice, error) {
	var o []*PaymentAch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentAch slice")
	}

	if len(paymentAchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentAch records in the query.
func (q paymentAchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentAch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentAchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentAch exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentAch) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// FromAccount pointed to by the foreign key.
func (o *PaymentAch) FromAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.FromAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// ToAccount pointed to by the foreign key.
func (o *PaymentAch) ToAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.ToAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentAchL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentAch interface{}, mods queries.Applicator) error {
	var slice []*PaymentAch
	var object *PaymentAch

	if singular {
		object = maybePaymentAch.(*PaymentAch)
	} else {
		slice = *maybePaymentAch.(*[]*PaymentAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentAchR{}
		}
		if !queries.IsNil(object.PaymentID) {
			args = append(args, object.PaymentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentAchR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentID) {
				args = append(args, obj.PaymentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentAches = append(foreign.R.PaymentPaymentAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentID, foreign.PaymentID) {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentAches = append(foreign.R.PaymentPaymentAches, local)
				break
			}
		}
	}

	return nil
}

// LoadFromAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentAchL) LoadFromAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentAch interface{}, mods queries.Applicator) error {
	var slice []*PaymentAch
	var object *PaymentAch

	if singular {
		object = maybePaymentAch.(*PaymentAch)
	} else {
		slice = *maybePaymentAch.(*[]*PaymentAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentAchR{}
		}
		args = append(args, object.FromAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentAchR{}
			}

			for _, a := range args {
				if a == obj.FromAccountID {
					continue Outer
				}
			}

			args = append(args, obj.FromAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FromAccountPaymentAches = append(foreign.R.FromAccountPaymentAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromAccountID == foreign.AccountID {
				local.R.FromAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FromAccountPaymentAches = append(foreign.R.FromAccountPaymentAches, local)
				break
			}
		}
	}

	return nil
}

// LoadToAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentAchL) LoadToAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentAch interface{}, mods queries.Applicator) error {
	var slice []*PaymentAch
	var object *PaymentAch

	if singular {
		object = maybePaymentAch.(*PaymentAch)
	} else {
		slice = *maybePaymentAch.(*[]*PaymentAch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentAchR{}
		}
		args = append(args, object.ToAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentAchR{}
			}

			for _, a := range args {
				if a == obj.ToAccountID {
					continue Outer
				}
			}

			args = append(args, obj.ToAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ToAccountPaymentAches = append(foreign.R.ToAccountPaymentAches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToAccountID == foreign.AccountID {
				local.R.ToAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ToAccountPaymentAches = append(foreign.R.ToAccountPaymentAches, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentAch to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentAches.
func (o *PaymentAch) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentAchPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentID, related.PaymentID)
	if o.R == nil {
		o.R = &paymentAchR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentAches: PaymentAchSlice{o},
		}
	} else {
		related.R.PaymentPaymentAches = append(related.R.PaymentPaymentAches, o)
	}

	return nil
}

// RemovePayment relationship.
// Sets o.R.Payment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PaymentAch) RemovePayment(ctx context.Context, exec boil.ContextExecutor, related *PaymentInitiation) error {
	var err error

	queries.SetScanner(&o.PaymentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("payment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Payment = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PaymentPaymentAches {
		if queries.Equal(o.PaymentID, ri.PaymentID) {
			continue
		}

		ln := len(related.R.PaymentPaymentAches)
		if ln > 1 && i < ln-1 {
			related.R.PaymentPaymentAches[i] = related.R.PaymentPaymentAches[ln-1]
		}
		related.R.PaymentPaymentAches = related.R.PaymentPaymentAches[:ln-1]
		break
	}
	return nil
}

// SetFromAccount of the paymentAch to the related item.
// Sets o.R.FromAccount to related.
// Adds o to related.R.FromAccountPaymentAches.
func (o *PaymentAch) SetFromAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_account_id"}),
		strmangle.WhereClause("`", "`", 0, paymentAchPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromAccountID = related.AccountID
	if o.R == nil {
		o.R = &paymentAchR{
			FromAccount: related,
		}
	} else {
		o.R.FromAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			FromAccountPaymentAches: PaymentAchSlice{o},
		}
	} else {
		related.R.FromAccountPaymentAches = append(related.R.FromAccountPaymentAches, o)
	}

	return nil
}

// SetToAccount of the paymentAch to the related item.
// Sets o.R.ToAccount to related.
// Adds o to related.R.ToAccountPaymentAches.
func (o *PaymentAch) SetToAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"to_account_id"}),
		strmangle.WhereClause("`", "`", 0, paymentAchPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentAchID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToAccountID = related.AccountID
	if o.R == nil {
		o.R = &paymentAchR{
			ToAccount: related,
		}
	} else {
		o.R.ToAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			ToAccountPaymentAches: PaymentAchSlice{o},
		}
	} else {
		related.R.ToAccountPaymentAches = append(related.R.ToAccountPaymentAches, o)
	}

	return nil
}

// PaymentAches retrieves all the records using an executor.
func PaymentAches(mods ...qm.QueryMod) paymentAchQuery {
	mods = append(mods, qm.From("`PaymentAch`"))
	return paymentAchQuery{NewQuery(mods...)}
}

// FindPaymentAch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentAch(ctx context.Context, exec boil.ContextExecutor, paymentAchID int, selectCols ...string) (*PaymentAch, error) {
	paymentAchObj := &PaymentAch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentAch` where `payment_ach_id`=?", sel,
	)

	q := queries.Raw(query, paymentAchID)

	err := q.Bind(ctx, exec, paymentAchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentAch")
	}

	return paymentAchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentAch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentAch provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentAchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentAchInsertCacheMut.RLock()
	cache, cached := paymentAchInsertCache[key]
	paymentAchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentAchColumns,
			paymentAchColumnsWithDefault,
			paymentAchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentAchType, paymentAchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentAchType, paymentAchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentAch` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentAch` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentAch` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentAchPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentAch")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentAchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentAchMapping["PaymentAchID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentAchID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentAch")
	}

CacheNoHooks:
	if !cached {
		paymentAchInsertCacheMut.Lock()
		paymentAchInsertCache[key] = cache
		paymentAchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentAch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentAch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentAchUpdateCacheMut.RLock()
	cache, cached := paymentAchUpdateCache[key]
	paymentAchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentAchColumns,
			paymentAchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentAch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentAch` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentAchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentAchType, paymentAchMapping, append(wl, paymentAchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentAch row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentAch")
	}

	if !cached {
		paymentAchUpdateCacheMut.Lock()
		paymentAchUpdateCache[key] = cache
		paymentAchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentAchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentAch")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentAchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentAch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentAchPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentAch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentAch")
	}
	return rowsAff, nil
}

var mySQLPaymentAchUniqueColumns = []string{
	"payment_ach_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentAch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentAch provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentAchColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentAchUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentAchUpsertCacheMut.RLock()
	cache, cached := paymentAchUpsertCache[key]
	paymentAchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentAchColumns,
			paymentAchColumnsWithDefault,
			paymentAchColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentAchColumns,
			paymentAchPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentAch, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentAch", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentAch` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentAchType, paymentAchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentAchType, paymentAchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentAch")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentAchID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentAchMapping["payment_ach_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentAchType, paymentAchMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentAch")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentAch")
	}

CacheNoHooks:
	if !cached {
		paymentAchUpsertCacheMut.Lock()
		paymentAchUpsertCache[key] = cache
		paymentAchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentAch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentAch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentAch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentAchPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentAch` WHERE `payment_ach_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentAch")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentAchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentAchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentAch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentAch")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentAchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentAch slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentAchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentAch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentAchPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentAch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentAch")
	}

	if len(paymentAchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentAch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentAch(ctx, exec, o.PaymentAchID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentAchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentAchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentAchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentAch`.* FROM `PaymentAch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentAchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentAchSlice")
	}

	*o = slice

	return nil
}

// PaymentAchExists checks if the PaymentAch row exists.
func PaymentAchExists(ctx context.Context, exec boil.ContextExecutor, paymentAchID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentAch` where `payment_ach_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentAchID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentAchID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentAch exists")
	}

	return exists, nil
}
