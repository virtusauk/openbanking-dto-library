// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Product is an object representing the database table.
type Product struct {
	ProductID                          int               `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ProductName                        string            `boil:"product_name" json:"product_name" toml:"product_name" yaml:"product_name"`
	CreationDate                       time.Time         `boil:"creation_date" json:"creation_date" toml:"creation_date" yaml:"creation_date"`
	BankID                             int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	Description                        null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	LastModifiedDate                   null.Time         `boil:"last_modified_date" json:"last_modified_date,omitempty" toml:"last_modified_date" yaml:"last_modified_date,omitempty"`
	SecondaryProductID                 string            `boil:"secondary_product_id" json:"secondary_product_id" toml:"secondary_product_id" yaml:"secondary_product_id"`
	MarketingStateId                   null.String       `boil:"marketingStateId" json:"marketingStateId,omitempty" toml:"marketingStateId" yaml:"marketingStateId,omitempty"`
	ProductType                        string            `boil:"product_type" json:"product_type" toml:"product_type" yaml:"product_type"`
	ProductSubType                     string            `boil:"product_sub_type" json:"product_sub_type" toml:"product_sub_type" yaml:"product_sub_type"`
	ProductGroup                       string            `boil:"product_group" json:"product_group" toml:"product_group" yaml:"product_group"`
	InterestCalculationBalance         string            `boil:"interest_calculation_balance" json:"interest_calculation_balance" toml:"interest_calculation_balance" yaml:"interest_calculation_balance"`
	Activated                          null.String       `boil:"activated" json:"activated,omitempty" toml:"activated" yaml:"activated,omitempty"`
	InterestPaymentPoint               null.String       `boil:"interest_payment_point" json:"interest_payment_point,omitempty" toml:"interest_payment_point" yaml:"interest_payment_point,omitempty"`
	CollectInterestWhenLocked          null.String       `boil:"collect_interest_when_locked" json:"collect_interest_when_locked,omitempty" toml:"collect_interest_when_locked" yaml:"collect_interest_when_locked,omitempty"`
	RecommendedDepositAmount           types.NullDecimal `boil:"recommended_deposit_amount" json:"recommended_deposit_amount,omitempty" toml:"recommended_deposit_amount" yaml:"recommended_deposit_amount,omitempty"`
	MaxWidthdrawlAmount                types.NullDecimal `boil:"max_widthdrawl_amount" json:"max_widthdrawl_amount,omitempty" toml:"max_widthdrawl_amount" yaml:"max_widthdrawl_amount,omitempty"`
	MinOpeningBalance                  types.NullDecimal `boil:"min_opening_balance" json:"min_opening_balance,omitempty" toml:"min_opening_balance" yaml:"min_opening_balance,omitempty"`
	MaxOpeningBalance                  types.NullDecimal `boil:"max_opening_balance" json:"max_opening_balance,omitempty" toml:"max_opening_balance" yaml:"max_opening_balance,omitempty"`
	DefaultOpeningBalance              types.NullDecimal `boil:"default_opening_balance" json:"default_opening_balance,omitempty" toml:"default_opening_balance" yaml:"default_opening_balance,omitempty"`
	MinMaturityPeriod                  null.Int          `boil:"min_maturity_period" json:"min_maturity_period,omitempty" toml:"min_maturity_period" yaml:"min_maturity_period,omitempty"`
	MaxMaturityPeriod                  null.Int          `boil:"max_maturity_period" json:"max_maturity_period,omitempty" toml:"max_maturity_period" yaml:"max_maturity_period,omitempty"`
	DefaultMaturityPeriod              null.Int          `boil:"default_maturity_period" json:"default_maturity_period,omitempty" toml:"default_maturity_period" yaml:"default_maturity_period,omitempty"`
	MaxOverdraftLimit                  types.NullDecimal `boil:"max_overdraft_limit" json:"max_overdraft_limit,omitempty" toml:"max_overdraft_limit" yaml:"max_overdraft_limit,omitempty"`
	AllowOverdraft                     null.String       `boil:"allow_overdraft" json:"allow_overdraft,omitempty" toml:"allow_overdraft" yaml:"allow_overdraft,omitempty"`
	MaturityPeriodUnit                 null.String       `boil:"maturity_period_unit" json:"maturity_period_unit,omitempty" toml:"maturity_period_unit" yaml:"maturity_period_unit,omitempty"`
	SavingsFees                        null.String       `boil:"savings_fees" json:"savings_fees,omitempty" toml:"savings_fees" yaml:"savings_fees,omitempty"`
	AllowArbitraryFees                 null.String       `boil:"allow_arbitrary_fees" json:"allow_arbitrary_fees,omitempty" toml:"allow_arbitrary_fees" yaml:"allow_arbitrary_fees,omitempty"`
	IDGeneratorType                    null.String       `boil:"id_generator_type" json:"id_generator_type,omitempty" toml:"id_generator_type" yaml:"id_generator_type,omitempty"`
	IDPattern                          null.String       `boil:"id_pattern" json:"id_pattern,omitempty" toml:"id_pattern" yaml:"id_pattern,omitempty"`
	AccountingMethod                   null.String       `boil:"accounting_method" json:"accounting_method,omitempty" toml:"accounting_method" yaml:"accounting_method,omitempty"`
	SavingsProductRules                null.String       `boil:"savings_product_rules" json:"savings_product_rules,omitempty" toml:"savings_product_rules" yaml:"savings_product_rules,omitempty"`
	DormancyPeriodDays                 null.Int          `boil:"dormancy_period_days" json:"dormancy_period_days,omitempty" toml:"dormancy_period_days" yaml:"dormancy_period_days,omitempty"`
	OverdraftDaysInyear                null.String       `boil:"overdraft_days_inyear" json:"overdraft_days_inyear,omitempty" toml:"overdraft_days_inyear" yaml:"overdraft_days_inyear,omitempty"`
	WithholdingTaxenabled              null.String       `boil:"withholding_taxenabled" json:"withholding_taxenabled,omitempty" toml:"withholding_taxenabled" yaml:"withholding_taxenabled,omitempty"`
	LineOfCreditRequirement            null.String       `boil:"line_of_credit_requirement" json:"line_of_credit_requirement,omitempty" toml:"line_of_credit_requirement" yaml:"line_of_credit_requirement,omitempty"`
	ForGroups                          null.String       `boil:"for_groups" json:"for_groups,omitempty" toml:"for_groups" yaml:"for_groups,omitempty"`
	RefTemplates                       null.Int          `boil:"ref_templates" json:"ref_templates,omitempty" toml:"ref_templates" yaml:"ref_templates,omitempty"`
	ForIndividuals                     null.String       `boil:"for_individuals" json:"for_individuals,omitempty" toml:"for_individuals" yaml:"for_individuals,omitempty"`
	InterestPaidIntoAccount            null.String       `boil:"interest_paid_into_account" json:"interest_paid_into_account,omitempty" toml:"interest_paid_into_account" yaml:"interest_paid_into_account,omitempty"`
	RefInterestAccruedAccountingMethod null.Int          `boil:"ref_interest_accrued_accounting_method" json:"ref_interest_accrued_accounting_method,omitempty" toml:"ref_interest_accrued_accounting_method" yaml:"ref_interest_accrued_accounting_method,omitempty"`
	InterestDaysInyear                 null.Int          `boil:"interest_days_inyear" json:"interest_days_inyear,omitempty" toml:"interest_days_inyear" yaml:"interest_days_inyear,omitempty"`
	ProductIdentifier                  null.String       `boil:"product_identifier" json:"product_identifier,omitempty" toml:"product_identifier" yaml:"product_identifier,omitempty"`
	Segment                            null.String       `boil:"segment" json:"segment,omitempty" toml:"segment" yaml:"segment,omitempty"`
	FeeFreeLengthPeriod                null.Int          `boil:"fee_free_length_period" json:"fee_free_length_period,omitempty" toml:"fee_free_length_period" yaml:"fee_free_length_period,omitempty"`
	Notes                              null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	MakerDate                          time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                        null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                            string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                          null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                         null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                       null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`
	OtherProductTypeName               null.String       `boil:"other_product_type_name" json:"other_product_type_name,omitempty" toml:"other_product_type_name" yaml:"other_product_type_name,omitempty"`
	OtherProductTypeDescription        null.String       `boil:"other_product_type_description" json:"other_product_type_description,omitempty" toml:"other_product_type_description" yaml:"other_product_type_description,omitempty"`
	AccountID                          null.Int          `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ProductID                          string
	ProductName                        string
	CreationDate                       string
	BankID                             string
	Description                        string
	LastModifiedDate                   string
	SecondaryProductID                 string
	MarketingStateId                   string
	ProductType                        string
	ProductSubType                     string
	ProductGroup                       string
	InterestCalculationBalance         string
	Activated                          string
	InterestPaymentPoint               string
	CollectInterestWhenLocked          string
	RecommendedDepositAmount           string
	MaxWidthdrawlAmount                string
	MinOpeningBalance                  string
	MaxOpeningBalance                  string
	DefaultOpeningBalance              string
	MinMaturityPeriod                  string
	MaxMaturityPeriod                  string
	DefaultMaturityPeriod              string
	MaxOverdraftLimit                  string
	AllowOverdraft                     string
	MaturityPeriodUnit                 string
	SavingsFees                        string
	AllowArbitraryFees                 string
	IDGeneratorType                    string
	IDPattern                          string
	AccountingMethod                   string
	SavingsProductRules                string
	DormancyPeriodDays                 string
	OverdraftDaysInyear                string
	WithholdingTaxenabled              string
	LineOfCreditRequirement            string
	ForGroups                          string
	RefTemplates                       string
	ForIndividuals                     string
	InterestPaidIntoAccount            string
	RefInterestAccruedAccountingMethod string
	InterestDaysInyear                 string
	ProductIdentifier                  string
	Segment                            string
	FeeFreeLengthPeriod                string
	Notes                              string
	MakerDate                          string
	CheckerDate                        string
	MakerID                            string
	CheckerID                          string
	ModifiedBy                         string
	ModifiedDate                       string
	OtherProductTypeName               string
	OtherProductTypeDescription        string
	AccountID                          string
}{
	ProductID:                          "product_id",
	ProductName:                        "product_name",
	CreationDate:                       "creation_date",
	BankID:                             "bank_id",
	Description:                        "description",
	LastModifiedDate:                   "last_modified_date",
	SecondaryProductID:                 "secondary_product_id",
	MarketingStateId:                   "marketingStateId",
	ProductType:                        "product_type",
	ProductSubType:                     "product_sub_type",
	ProductGroup:                       "product_group",
	InterestCalculationBalance:         "interest_calculation_balance",
	Activated:                          "activated",
	InterestPaymentPoint:               "interest_payment_point",
	CollectInterestWhenLocked:          "collect_interest_when_locked",
	RecommendedDepositAmount:           "recommended_deposit_amount",
	MaxWidthdrawlAmount:                "max_widthdrawl_amount",
	MinOpeningBalance:                  "min_opening_balance",
	MaxOpeningBalance:                  "max_opening_balance",
	DefaultOpeningBalance:              "default_opening_balance",
	MinMaturityPeriod:                  "min_maturity_period",
	MaxMaturityPeriod:                  "max_maturity_period",
	DefaultMaturityPeriod:              "default_maturity_period",
	MaxOverdraftLimit:                  "max_overdraft_limit",
	AllowOverdraft:                     "allow_overdraft",
	MaturityPeriodUnit:                 "maturity_period_unit",
	SavingsFees:                        "savings_fees",
	AllowArbitraryFees:                 "allow_arbitrary_fees",
	IDGeneratorType:                    "id_generator_type",
	IDPattern:                          "id_pattern",
	AccountingMethod:                   "accounting_method",
	SavingsProductRules:                "savings_product_rules",
	DormancyPeriodDays:                 "dormancy_period_days",
	OverdraftDaysInyear:                "overdraft_days_inyear",
	WithholdingTaxenabled:              "withholding_taxenabled",
	LineOfCreditRequirement:            "line_of_credit_requirement",
	ForGroups:                          "for_groups",
	RefTemplates:                       "ref_templates",
	ForIndividuals:                     "for_individuals",
	InterestPaidIntoAccount:            "interest_paid_into_account",
	RefInterestAccruedAccountingMethod: "ref_interest_accrued_accounting_method",
	InterestDaysInyear:                 "interest_days_inyear",
	ProductIdentifier:                  "product_identifier",
	Segment:                            "segment",
	FeeFreeLengthPeriod:                "fee_free_length_period",
	Notes:                              "notes",
	MakerDate:                          "maker_date",
	CheckerDate:                        "checker_date",
	MakerID:                            "maker_id",
	CheckerID:                          "checker_id",
	ModifiedBy:                         "modified_by",
	ModifiedDate:                       "modified_date",
	OtherProductTypeName:               "other_product_type_name",
	OtherProductTypeDescription:        "other_product_type_description",
	AccountID:                          "account_id",
}

// Generated where

var ProductWhere = struct {
	ProductID                          whereHelperint
	ProductName                        whereHelperstring
	CreationDate                       whereHelpertime_Time
	BankID                             whereHelperint
	Description                        whereHelpernull_String
	LastModifiedDate                   whereHelpernull_Time
	SecondaryProductID                 whereHelperstring
	MarketingStateId                   whereHelpernull_String
	ProductType                        whereHelperstring
	ProductSubType                     whereHelperstring
	ProductGroup                       whereHelperstring
	InterestCalculationBalance         whereHelperstring
	Activated                          whereHelpernull_String
	InterestPaymentPoint               whereHelpernull_String
	CollectInterestWhenLocked          whereHelpernull_String
	RecommendedDepositAmount           whereHelpertypes_NullDecimal
	MaxWidthdrawlAmount                whereHelpertypes_NullDecimal
	MinOpeningBalance                  whereHelpertypes_NullDecimal
	MaxOpeningBalance                  whereHelpertypes_NullDecimal
	DefaultOpeningBalance              whereHelpertypes_NullDecimal
	MinMaturityPeriod                  whereHelpernull_Int
	MaxMaturityPeriod                  whereHelpernull_Int
	DefaultMaturityPeriod              whereHelpernull_Int
	MaxOverdraftLimit                  whereHelpertypes_NullDecimal
	AllowOverdraft                     whereHelpernull_String
	MaturityPeriodUnit                 whereHelpernull_String
	SavingsFees                        whereHelpernull_String
	AllowArbitraryFees                 whereHelpernull_String
	IDGeneratorType                    whereHelpernull_String
	IDPattern                          whereHelpernull_String
	AccountingMethod                   whereHelpernull_String
	SavingsProductRules                whereHelpernull_String
	DormancyPeriodDays                 whereHelpernull_Int
	OverdraftDaysInyear                whereHelpernull_String
	WithholdingTaxenabled              whereHelpernull_String
	LineOfCreditRequirement            whereHelpernull_String
	ForGroups                          whereHelpernull_String
	RefTemplates                       whereHelpernull_Int
	ForIndividuals                     whereHelpernull_String
	InterestPaidIntoAccount            whereHelpernull_String
	RefInterestAccruedAccountingMethod whereHelpernull_Int
	InterestDaysInyear                 whereHelpernull_Int
	ProductIdentifier                  whereHelpernull_String
	Segment                            whereHelpernull_String
	FeeFreeLengthPeriod                whereHelpernull_Int
	Notes                              whereHelpernull_String
	MakerDate                          whereHelpertime_Time
	CheckerDate                        whereHelpernull_Time
	MakerID                            whereHelperstring
	CheckerID                          whereHelpernull_String
	ModifiedBy                         whereHelpernull_String
	ModifiedDate                       whereHelpernull_Time
	OtherProductTypeName               whereHelpernull_String
	OtherProductTypeDescription        whereHelpernull_String
	AccountID                          whereHelpernull_Int
}{
	ProductID:                          whereHelperint{field: `product_id`},
	ProductName:                        whereHelperstring{field: `product_name`},
	CreationDate:                       whereHelpertime_Time{field: `creation_date`},
	BankID:                             whereHelperint{field: `bank_id`},
	Description:                        whereHelpernull_String{field: `description`},
	LastModifiedDate:                   whereHelpernull_Time{field: `last_modified_date`},
	SecondaryProductID:                 whereHelperstring{field: `secondary_product_id`},
	MarketingStateId:                   whereHelpernull_String{field: `marketingStateId`},
	ProductType:                        whereHelperstring{field: `product_type`},
	ProductSubType:                     whereHelperstring{field: `product_sub_type`},
	ProductGroup:                       whereHelperstring{field: `product_group`},
	InterestCalculationBalance:         whereHelperstring{field: `interest_calculation_balance`},
	Activated:                          whereHelpernull_String{field: `activated`},
	InterestPaymentPoint:               whereHelpernull_String{field: `interest_payment_point`},
	CollectInterestWhenLocked:          whereHelpernull_String{field: `collect_interest_when_locked`},
	RecommendedDepositAmount:           whereHelpertypes_NullDecimal{field: `recommended_deposit_amount`},
	MaxWidthdrawlAmount:                whereHelpertypes_NullDecimal{field: `max_widthdrawl_amount`},
	MinOpeningBalance:                  whereHelpertypes_NullDecimal{field: `min_opening_balance`},
	MaxOpeningBalance:                  whereHelpertypes_NullDecimal{field: `max_opening_balance`},
	DefaultOpeningBalance:              whereHelpertypes_NullDecimal{field: `default_opening_balance`},
	MinMaturityPeriod:                  whereHelpernull_Int{field: `min_maturity_period`},
	MaxMaturityPeriod:                  whereHelpernull_Int{field: `max_maturity_period`},
	DefaultMaturityPeriod:              whereHelpernull_Int{field: `default_maturity_period`},
	MaxOverdraftLimit:                  whereHelpertypes_NullDecimal{field: `max_overdraft_limit`},
	AllowOverdraft:                     whereHelpernull_String{field: `allow_overdraft`},
	MaturityPeriodUnit:                 whereHelpernull_String{field: `maturity_period_unit`},
	SavingsFees:                        whereHelpernull_String{field: `savings_fees`},
	AllowArbitraryFees:                 whereHelpernull_String{field: `allow_arbitrary_fees`},
	IDGeneratorType:                    whereHelpernull_String{field: `id_generator_type`},
	IDPattern:                          whereHelpernull_String{field: `id_pattern`},
	AccountingMethod:                   whereHelpernull_String{field: `accounting_method`},
	SavingsProductRules:                whereHelpernull_String{field: `savings_product_rules`},
	DormancyPeriodDays:                 whereHelpernull_Int{field: `dormancy_period_days`},
	OverdraftDaysInyear:                whereHelpernull_String{field: `overdraft_days_inyear`},
	WithholdingTaxenabled:              whereHelpernull_String{field: `withholding_taxenabled`},
	LineOfCreditRequirement:            whereHelpernull_String{field: `line_of_credit_requirement`},
	ForGroups:                          whereHelpernull_String{field: `for_groups`},
	RefTemplates:                       whereHelpernull_Int{field: `ref_templates`},
	ForIndividuals:                     whereHelpernull_String{field: `for_individuals`},
	InterestPaidIntoAccount:            whereHelpernull_String{field: `interest_paid_into_account`},
	RefInterestAccruedAccountingMethod: whereHelpernull_Int{field: `ref_interest_accrued_accounting_method`},
	InterestDaysInyear:                 whereHelpernull_Int{field: `interest_days_inyear`},
	ProductIdentifier:                  whereHelpernull_String{field: `product_identifier`},
	Segment:                            whereHelpernull_String{field: `segment`},
	FeeFreeLengthPeriod:                whereHelpernull_Int{field: `fee_free_length_period`},
	Notes:                              whereHelpernull_String{field: `notes`},
	MakerDate:                          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                        whereHelpernull_Time{field: `checker_date`},
	MakerID:                            whereHelperstring{field: `maker_id`},
	CheckerID:                          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                       whereHelpernull_Time{field: `modified_date`},
	OtherProductTypeName:               whereHelpernull_String{field: `other_product_type_name`},
	OtherProductTypeDescription:        whereHelpernull_String{field: `other_product_type_description`},
	AccountID:                          whereHelpernull_Int{field: `account_id`},
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	Bank                    string
	ProductAccounts         string
	ProductInterestProducts string
}{
	Bank:                    "Bank",
	ProductAccounts:         "ProductAccounts",
	ProductInterestProducts: "ProductInterestProducts",
}

// productR is where relationships are stored.
type productR struct {
	Bank                    *Bank
	ProductAccounts         AccountSlice
	ProductInterestProducts InterestProductSlice
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productColumns               = []string{"product_id", "product_name", "creation_date", "bank_id", "description", "last_modified_date", "secondary_product_id", "marketingStateId", "product_type", "product_sub_type", "product_group", "interest_calculation_balance", "activated", "interest_payment_point", "collect_interest_when_locked", "recommended_deposit_amount", "max_widthdrawl_amount", "min_opening_balance", "max_opening_balance", "default_opening_balance", "min_maturity_period", "max_maturity_period", "default_maturity_period", "max_overdraft_limit", "allow_overdraft", "maturity_period_unit", "savings_fees", "allow_arbitrary_fees", "id_generator_type", "id_pattern", "accounting_method", "savings_product_rules", "dormancy_period_days", "overdraft_days_inyear", "withholding_taxenabled", "line_of_credit_requirement", "for_groups", "ref_templates", "for_individuals", "interest_paid_into_account", "ref_interest_accrued_accounting_method", "interest_days_inyear", "product_identifier", "segment", "fee_free_length_period", "notes", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date", "other_product_type_name", "other_product_type_description", "account_id"}
	productColumnsWithoutDefault = []string{"product_name", "creation_date", "bank_id", "description", "last_modified_date", "secondary_product_id", "marketingStateId", "product_type", "product_sub_type", "product_group", "interest_calculation_balance", "activated", "interest_payment_point", "collect_interest_when_locked", "recommended_deposit_amount", "max_widthdrawl_amount", "min_opening_balance", "max_opening_balance", "default_opening_balance", "min_maturity_period", "max_maturity_period", "default_maturity_period", "max_overdraft_limit", "allow_overdraft", "maturity_period_unit", "savings_fees", "allow_arbitrary_fees", "id_generator_type", "id_pattern", "accounting_method", "savings_product_rules", "dormancy_period_days", "overdraft_days_inyear", "withholding_taxenabled", "line_of_credit_requirement", "for_groups", "ref_templates", "for_individuals", "interest_paid_into_account", "ref_interest_accrued_accounting_method", "interest_days_inyear", "product_identifier", "segment", "fee_free_length_period", "notes", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date", "other_product_type_name", "other_product_type_description", "account_id"}
	productColumnsWithDefault    = []string{"product_id"}
	productPrimaryKeyColumns     = []string{"product_id"}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should generally be used opposed to []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(context.Context, boil.ContextExecutor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productBeforeInsertHooks []ProductHook
var productBeforeUpdateHooks []ProductHook
var productBeforeDeleteHooks []ProductHook
var productBeforeUpsertHooks []ProductHook

var productAfterInsertHooks []ProductHook
var productAfterSelectHooks []ProductHook
var productAfterUpdateHooks []ProductHook
var productAfterDeleteHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// One returns a single product record from the query.
func (q productQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Product")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Product rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Product exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *Product) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// ProductAccounts retrieves all the Account's Accounts with an executor via product_id column.
func (o *Product) ProductAccounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Account`.`product_id`=?", o.ProductID),
	)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Account`.*"})
	}

	return query
}

// ProductInterestProducts retrieves all the InterestProduct's InterestProducts with an executor via product_id column.
func (o *Product) ProductInterestProducts(mods ...qm.QueryMod) interestProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`InterestProduct`.`product_id`=?", o.ProductID),
	)

	query := InterestProducts(queryMods...)
	queries.SetFrom(query.Query, "`InterestProduct`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`InterestProduct`.*"})
	}

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankProducts = append(foreign.R.BankProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankProducts = append(foreign.R.BankProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProductAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ProductID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductID == foreign.ProductID {
				local.R.ProductAccounts = append(local.R.ProductAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadProductInterestProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductInterestProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		object = maybeProduct.(*Product)
	} else {
		slice = *maybeProduct.(*[]*Product)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ProductID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`InterestProduct`), qm.WhereIn(`product_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InterestProduct")
	}

	var resultSlice []*InterestProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InterestProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on InterestProduct")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for InterestProduct")
	}

	if len(interestProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductInterestProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &interestProductR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductID, foreign.ProductID) {
				local.R.ProductInterestProducts = append(local.R.ProductInterestProducts, foreign)
				if foreign.R == nil {
					foreign.R = &interestProductR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// SetBank of the product to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankProducts.
func (o *Product) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Product` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.ProductID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &productR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankProducts: ProductSlice{o},
		}
	} else {
		related.R.BankProducts = append(related.R.BankProducts, o)
	}

	return nil
}

// AddProductAccounts adds the given related objects to the existing relationships
// of the Product, optionally inserting them as new records.
// Appends related to o.R.ProductAccounts.
// Sets related.R.Product appropriately.
func (o *Product) AddProductAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ProductID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Account` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.AccountID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ProductID
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductAccounts: related,
		}
	} else {
		o.R.ProductAccounts = append(o.R.ProductAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddProductInterestProducts adds the given related objects to the existing relationships
// of the Product, optionally inserting them as new records.
// Appends related to o.R.ProductInterestProducts.
// Sets related.R.Product appropriately.
func (o *Product) AddProductInterestProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InterestProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductID, o.ProductID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `InterestProduct` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"product_id"}),
				strmangle.WhereClause("`", "`", 0, interestProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductID, rel.InterestProductID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductID, o.ProductID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductInterestProducts: related,
		}
	} else {
		o.R.ProductInterestProducts = append(o.R.ProductInterestProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &interestProductR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// SetProductInterestProducts removes all previously related items of the
// Product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Product's ProductInterestProducts accordingly.
// Replaces o.R.ProductInterestProducts with related.
// Sets related.R.Product's ProductInterestProducts accordingly.
func (o *Product) SetProductInterestProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InterestProduct) error {
	query := "update `InterestProduct` set `product_id` = null where `product_id` = ?"
	values := []interface{}{o.ProductID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductInterestProducts {
			queries.SetScanner(&rel.ProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Product = nil
		}

		o.R.ProductInterestProducts = nil
	}
	return o.AddProductInterestProducts(ctx, exec, insert, related...)
}

// RemoveProductInterestProducts relationships from objects passed in.
// Removes related items from R.ProductInterestProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.Product.
func (o *Product) RemoveProductInterestProducts(ctx context.Context, exec boil.ContextExecutor, related ...*InterestProduct) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductID, nil)
		if rel.R != nil {
			rel.R.Product = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductInterestProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductInterestProducts)
			if ln > 1 && i < ln-1 {
				o.R.ProductInterestProducts[i] = o.R.ProductInterestProducts[ln-1]
			}
			o.R.ProductInterestProducts = o.R.ProductInterestProducts[:ln-1]
			break
		}
	}

	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("`Product`"))
	return productQuery{NewQuery(mods...)}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec boil.ContextExecutor, productID int, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Product` where `product_id`=?", sel,
	)

	q := queries.Raw(query, productID)

	err := q.Bind(ctx, exec, productObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Product")
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Product provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Product` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Product` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Product` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Product")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ProductID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["ProductID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Product")
	}

CacheNoHooks:
	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Product, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Product` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Product row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Product")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Product")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Product` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

var mySQLProductUniqueColumns = []string{
	"product_id",
	"marketingStateId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Product provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			productColumns,
			productPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Product, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Product", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Product` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Product")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ProductID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == productMapping["product_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(productType, productMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Product")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Product")
	}

CacheNoHooks:
	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM `Product` WHERE `product_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Product")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Product")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Product")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Product")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduct(ctx, exec, o.ProductID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Product`.* FROM `Product` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(ctx context.Context, exec boil.ContextExecutor, productID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Product` where `product_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, productID)
	}

	row := exec.QueryRowContext(ctx, sql, productID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Product exists")
	}

	return exists, nil
}
