// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Collateral is an object representing the database table.
type Collateral struct {
	PartyID               int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	CollateralDescription null.String `boil:"collateral_description" json:"collateral_description,omitempty" toml:"collateral_description" yaml:"collateral_description,omitempty"`
	CategoryID            null.String `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	CollateralCurrency    null.String `boil:"collateral_currency" json:"collateral_currency,omitempty" toml:"collateral_currency" yaml:"collateral_currency,omitempty"`
	CollateralValue       null.Int    `boil:"collateral_value" json:"collateral_value,omitempty" toml:"collateral_value" yaml:"collateral_value,omitempty"`
	LendableMargin        null.Int    `boil:"lendable_margin" json:"lendable_margin,omitempty" toml:"lendable_margin" yaml:"lendable_margin,omitempty"`
	StartDate             null.Time   `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate               null.Time   `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	Status                null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	BankID                int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate             time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate           null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID               string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID             null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy            null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate          null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *collateralR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collateralL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollateralColumns = struct {
	PartyID               string
	CollateralDescription string
	CategoryID            string
	CollateralCurrency    string
	CollateralValue       string
	LendableMargin        string
	StartDate             string
	EndDate               string
	Status                string
	BankID                string
	MakerDate             string
	CheckerDate           string
	MakerID               string
	CheckerID             string
	ModifiedBy            string
	ModifiedDate          string
}{
	PartyID:               "party_id",
	CollateralDescription: "collateral_description",
	CategoryID:            "category_id",
	CollateralCurrency:    "collateral_currency",
	CollateralValue:       "collateral_value",
	LendableMargin:        "lendable_margin",
	StartDate:             "start_date",
	EndDate:               "end_date",
	Status:                "status",
	BankID:                "bank_id",
	MakerDate:             "maker_date",
	CheckerDate:           "checker_date",
	MakerID:               "maker_id",
	CheckerID:             "checker_id",
	ModifiedBy:            "modified_by",
	ModifiedDate:          "modified_date",
}

// Generated where

var CollateralWhere = struct {
	PartyID               whereHelperint
	CollateralDescription whereHelpernull_String
	CategoryID            whereHelpernull_String
	CollateralCurrency    whereHelpernull_String
	CollateralValue       whereHelpernull_Int
	LendableMargin        whereHelpernull_Int
	StartDate             whereHelpernull_Time
	EndDate               whereHelpernull_Time
	Status                whereHelpernull_String
	BankID                whereHelperint
	MakerDate             whereHelpertime_Time
	CheckerDate           whereHelpernull_Time
	MakerID               whereHelperstring
	CheckerID             whereHelpernull_String
	ModifiedBy            whereHelpernull_String
	ModifiedDate          whereHelpernull_Time
}{
	PartyID:               whereHelperint{field: `party_id`},
	CollateralDescription: whereHelpernull_String{field: `collateral_description`},
	CategoryID:            whereHelpernull_String{field: `category_id`},
	CollateralCurrency:    whereHelpernull_String{field: `collateral_currency`},
	CollateralValue:       whereHelpernull_Int{field: `collateral_value`},
	LendableMargin:        whereHelpernull_Int{field: `lendable_margin`},
	StartDate:             whereHelpernull_Time{field: `start_date`},
	EndDate:               whereHelpernull_Time{field: `end_date`},
	Status:                whereHelpernull_String{field: `status`},
	BankID:                whereHelperint{field: `bank_id`},
	MakerDate:             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:           whereHelpernull_Time{field: `checker_date`},
	MakerID:               whereHelperstring{field: `maker_id`},
	CheckerID:             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:            whereHelpernull_String{field: `modified_by`},
	ModifiedDate:          whereHelpernull_Time{field: `modified_date`},
}

// CollateralRels is where relationship names are stored.
var CollateralRels = struct {
	Party string
}{
	Party: "Party",
}

// collateralR is where relationships are stored.
type collateralR struct {
	Party *Party
}

// NewStruct creates a new relationship struct
func (*collateralR) NewStruct() *collateralR {
	return &collateralR{}
}

// collateralL is where Load methods for each relationship are stored.
type collateralL struct{}

var (
	collateralColumns               = []string{"party_id", "collateral_description", "category_id", "collateral_currency", "collateral_value", "lendable_margin", "start_date", "end_date", "status", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	collateralColumnsWithoutDefault = []string{"party_id", "collateral_description", "category_id", "collateral_currency", "collateral_value", "lendable_margin", "start_date", "end_date", "status", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	collateralColumnsWithDefault    = []string{}
	collateralPrimaryKeyColumns     = []string{"party_id"}
)

type (
	// CollateralSlice is an alias for a slice of pointers to Collateral.
	// This should generally be used opposed to []Collateral.
	CollateralSlice []*Collateral
	// CollateralHook is the signature for custom Collateral hook methods
	CollateralHook func(context.Context, boil.ContextExecutor, *Collateral) error

	collateralQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collateralType                 = reflect.TypeOf(&Collateral{})
	collateralMapping              = queries.MakeStructMapping(collateralType)
	collateralPrimaryKeyMapping, _ = queries.BindMapping(collateralType, collateralMapping, collateralPrimaryKeyColumns)
	collateralInsertCacheMut       sync.RWMutex
	collateralInsertCache          = make(map[string]insertCache)
	collateralUpdateCacheMut       sync.RWMutex
	collateralUpdateCache          = make(map[string]updateCache)
	collateralUpsertCacheMut       sync.RWMutex
	collateralUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var collateralBeforeInsertHooks []CollateralHook
var collateralBeforeUpdateHooks []CollateralHook
var collateralBeforeDeleteHooks []CollateralHook
var collateralBeforeUpsertHooks []CollateralHook

var collateralAfterInsertHooks []CollateralHook
var collateralAfterSelectHooks []CollateralHook
var collateralAfterUpdateHooks []CollateralHook
var collateralAfterDeleteHooks []CollateralHook
var collateralAfterUpsertHooks []CollateralHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Collateral) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Collateral) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Collateral) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Collateral) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Collateral) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Collateral) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Collateral) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Collateral) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Collateral) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collateralAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCollateralHook registers your hook function for all future operations.
func AddCollateralHook(hookPoint boil.HookPoint, collateralHook CollateralHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		collateralBeforeInsertHooks = append(collateralBeforeInsertHooks, collateralHook)
	case boil.BeforeUpdateHook:
		collateralBeforeUpdateHooks = append(collateralBeforeUpdateHooks, collateralHook)
	case boil.BeforeDeleteHook:
		collateralBeforeDeleteHooks = append(collateralBeforeDeleteHooks, collateralHook)
	case boil.BeforeUpsertHook:
		collateralBeforeUpsertHooks = append(collateralBeforeUpsertHooks, collateralHook)
	case boil.AfterInsertHook:
		collateralAfterInsertHooks = append(collateralAfterInsertHooks, collateralHook)
	case boil.AfterSelectHook:
		collateralAfterSelectHooks = append(collateralAfterSelectHooks, collateralHook)
	case boil.AfterUpdateHook:
		collateralAfterUpdateHooks = append(collateralAfterUpdateHooks, collateralHook)
	case boil.AfterDeleteHook:
		collateralAfterDeleteHooks = append(collateralAfterDeleteHooks, collateralHook)
	case boil.AfterUpsertHook:
		collateralAfterUpsertHooks = append(collateralAfterUpsertHooks, collateralHook)
	}
}

// One returns a single collateral record from the query.
func (q collateralQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Collateral, error) {
	o := &Collateral{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Collateral")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Collateral records from the query.
func (q collateralQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollateralSlice, error) {
	var o []*Collateral

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Collateral slice")
	}

	if len(collateralAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Collateral records in the query.
func (q collateralQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Collateral rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collateralQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Collateral exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *Collateral) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collateralL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollateral interface{}, mods queries.Applicator) error {
	var slice []*Collateral
	var object *Collateral

	if singular {
		object = maybeCollateral.(*Collateral)
	} else {
		slice = *maybeCollateral.(*[]*Collateral)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collateralR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collateralR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(collateralAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyCollateral = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyCollateral = local
				break
			}
		}
	}

	return nil
}

// SetParty of the collateral to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyCollateral.
func (o *Collateral) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Collateral` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, collateralPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.PartyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &collateralR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyCollateral: o,
		}
	} else {
		related.R.PartyCollateral = o
	}

	return nil
}

// Collaterals retrieves all the records using an executor.
func Collaterals(mods ...qm.QueryMod) collateralQuery {
	mods = append(mods, qm.From("`Collateral`"))
	return collateralQuery{NewQuery(mods...)}
}

// FindCollateral retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollateral(ctx context.Context, exec boil.ContextExecutor, partyID int, selectCols ...string) (*Collateral, error) {
	collateralObj := &Collateral{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Collateral` where `party_id`=?", sel,
	)

	q := queries.Raw(query, partyID)

	err := q.Bind(ctx, exec, collateralObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Collateral")
	}

	return collateralObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Collateral) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Collateral provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collateralColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collateralInsertCacheMut.RLock()
	cache, cached := collateralInsertCache[key]
	collateralInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collateralColumns,
			collateralColumnsWithDefault,
			collateralColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collateralType, collateralMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collateralType, collateralMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Collateral` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Collateral` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Collateral` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, collateralPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Collateral")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PartyID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Collateral")
	}

CacheNoHooks:
	if !cached {
		collateralInsertCacheMut.Lock()
		collateralInsertCache[key] = cache
		collateralInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Collateral.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Collateral) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	collateralUpdateCacheMut.RLock()
	cache, cached := collateralUpdateCache[key]
	collateralUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collateralColumns,
			collateralPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Collateral, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Collateral` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, collateralPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collateralType, collateralMapping, append(wl, collateralPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Collateral row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Collateral")
	}

	if !cached {
		collateralUpdateCacheMut.Lock()
		collateralUpdateCache[key] = cache
		collateralUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q collateralQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Collateral")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Collateral")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollateralSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collateralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Collateral` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collateralPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in collateral slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all collateral")
	}
	return rowsAff, nil
}

var mySQLCollateralUniqueColumns = []string{
	"party_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Collateral) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Collateral provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collateralColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCollateralUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collateralUpsertCacheMut.RLock()
	cache, cached := collateralUpsertCache[key]
	collateralUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			collateralColumns,
			collateralColumnsWithDefault,
			collateralColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			collateralColumns,
			collateralPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Collateral, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Collateral", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Collateral` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(collateralType, collateralMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collateralType, collateralMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Collateral")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(collateralType, collateralMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Collateral")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Collateral")
	}

CacheNoHooks:
	if !cached {
		collateralUpsertCacheMut.Lock()
		collateralUpsertCache[key] = cache
		collateralUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Collateral record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Collateral) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Collateral provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collateralPrimaryKeyMapping)
	sql := "DELETE FROM `Collateral` WHERE `party_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Collateral")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Collateral")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collateralQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no collateralQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Collateral")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Collateral")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollateralSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Collateral slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(collateralBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collateralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Collateral` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collateralPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collateral slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Collateral")
	}

	if len(collateralAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Collateral) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollateral(ctx, exec, o.PartyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollateralSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollateralSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collateralPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Collateral`.* FROM `Collateral` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, collateralPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CollateralSlice")
	}

	*o = slice

	return nil
}

// CollateralExists checks if the Collateral row exists.
func CollateralExists(ctx context.Context, exec boil.ContextExecutor, partyID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Collateral` where `party_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, partyID)
	}

	row := exec.QueryRowContext(ctx, sql, partyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Collateral exists")
	}

	return exists, nil
}
