// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentGateway is an object representing the database table.
type PaymentGateway struct {
	PaymentGatewayID int           `boil:"payment_gateway_id" json:"payment_gateway_id" toml:"payment_gateway_id" yaml:"payment_gateway_id"`
	PaymentID        int           `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	GatewayID        int           `boil:"gateway_id" json:"gateway_id" toml:"gateway_id" yaml:"gateway_id"`
	PaymentDate      time.Time     `boil:"payment_date" json:"payment_date" toml:"payment_date" yaml:"payment_date"`
	Amount           types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	FromPartyID      null.Int      `boil:"from_party_id" json:"from_party_id,omitempty" toml:"from_party_id" yaml:"from_party_id,omitempty"`
	ToPartyID        null.Int      `boil:"to_party_id" json:"to_party_id,omitempty" toml:"to_party_id" yaml:"to_party_id,omitempty"`
	MessageID        null.Int      `boil:"message_id" json:"message_id,omitempty" toml:"message_id" yaml:"message_id,omitempty"`
	MakerDate        time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate      null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID          string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID        null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy       null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate     null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentGatewayR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentGatewayL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentGatewayColumns = struct {
	PaymentGatewayID string
	PaymentID        string
	GatewayID        string
	PaymentDate      string
	Amount           string
	FromPartyID      string
	ToPartyID        string
	MessageID        string
	MakerDate        string
	CheckerDate      string
	MakerID          string
	CheckerID        string
	ModifiedBy       string
	ModifiedDate     string
}{
	PaymentGatewayID: "payment_gateway_id",
	PaymentID:        "payment_id",
	GatewayID:        "gateway_id",
	PaymentDate:      "payment_date",
	Amount:           "amount",
	FromPartyID:      "from_party_id",
	ToPartyID:        "to_party_id",
	MessageID:        "message_id",
	MakerDate:        "maker_date",
	CheckerDate:      "checker_date",
	MakerID:          "maker_id",
	CheckerID:        "checker_id",
	ModifiedBy:       "modified_by",
	ModifiedDate:     "modified_date",
}

// Generated where

var PaymentGatewayWhere = struct {
	PaymentGatewayID whereHelperint
	PaymentID        whereHelperint
	GatewayID        whereHelperint
	PaymentDate      whereHelpertime_Time
	Amount           whereHelpertypes_Decimal
	FromPartyID      whereHelpernull_Int
	ToPartyID        whereHelpernull_Int
	MessageID        whereHelpernull_Int
	MakerDate        whereHelpertime_Time
	CheckerDate      whereHelpernull_Time
	MakerID          whereHelperstring
	CheckerID        whereHelpernull_String
	ModifiedBy       whereHelpernull_String
	ModifiedDate     whereHelpernull_Time
}{
	PaymentGatewayID: whereHelperint{field: `payment_gateway_id`},
	PaymentID:        whereHelperint{field: `payment_id`},
	GatewayID:        whereHelperint{field: `gateway_id`},
	PaymentDate:      whereHelpertime_Time{field: `payment_date`},
	Amount:           whereHelpertypes_Decimal{field: `amount`},
	FromPartyID:      whereHelpernull_Int{field: `from_party_id`},
	ToPartyID:        whereHelpernull_Int{field: `to_party_id`},
	MessageID:        whereHelpernull_Int{field: `message_id`},
	MakerDate:        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:      whereHelpernull_Time{field: `checker_date`},
	MakerID:          whereHelperstring{field: `maker_id`},
	CheckerID:        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:       whereHelpernull_String{field: `modified_by`},
	ModifiedDate:     whereHelpernull_Time{field: `modified_date`},
}

// PaymentGatewayRels is where relationship names are stored.
var PaymentGatewayRels = struct {
	Gateway string
	Payment string
}{
	Gateway: "Gateway",
	Payment: "Payment",
}

// paymentGatewayR is where relationships are stored.
type paymentGatewayR struct {
	Gateway *Gateway
	Payment *Payment
}

// NewStruct creates a new relationship struct
func (*paymentGatewayR) NewStruct() *paymentGatewayR {
	return &paymentGatewayR{}
}

// paymentGatewayL is where Load methods for each relationship are stored.
type paymentGatewayL struct{}

var (
	paymentGatewayColumns               = []string{"payment_gateway_id", "payment_id", "gateway_id", "payment_date", "amount", "from_party_id", "to_party_id", "message_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentGatewayColumnsWithoutDefault = []string{"payment_id", "gateway_id", "payment_date", "amount", "from_party_id", "to_party_id", "message_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentGatewayColumnsWithDefault    = []string{"payment_gateway_id"}
	paymentGatewayPrimaryKeyColumns     = []string{"payment_gateway_id"}
)

type (
	// PaymentGatewaySlice is an alias for a slice of pointers to PaymentGateway.
	// This should generally be used opposed to []PaymentGateway.
	PaymentGatewaySlice []*PaymentGateway
	// PaymentGatewayHook is the signature for custom PaymentGateway hook methods
	PaymentGatewayHook func(context.Context, boil.ContextExecutor, *PaymentGateway) error

	paymentGatewayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentGatewayType                 = reflect.TypeOf(&PaymentGateway{})
	paymentGatewayMapping              = queries.MakeStructMapping(paymentGatewayType)
	paymentGatewayPrimaryKeyMapping, _ = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, paymentGatewayPrimaryKeyColumns)
	paymentGatewayInsertCacheMut       sync.RWMutex
	paymentGatewayInsertCache          = make(map[string]insertCache)
	paymentGatewayUpdateCacheMut       sync.RWMutex
	paymentGatewayUpdateCache          = make(map[string]updateCache)
	paymentGatewayUpsertCacheMut       sync.RWMutex
	paymentGatewayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentGatewayBeforeInsertHooks []PaymentGatewayHook
var paymentGatewayBeforeUpdateHooks []PaymentGatewayHook
var paymentGatewayBeforeDeleteHooks []PaymentGatewayHook
var paymentGatewayBeforeUpsertHooks []PaymentGatewayHook

var paymentGatewayAfterInsertHooks []PaymentGatewayHook
var paymentGatewayAfterSelectHooks []PaymentGatewayHook
var paymentGatewayAfterUpdateHooks []PaymentGatewayHook
var paymentGatewayAfterDeleteHooks []PaymentGatewayHook
var paymentGatewayAfterUpsertHooks []PaymentGatewayHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentGateway) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentGateway) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentGateway) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentGateway) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentGateway) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentGateway) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentGateway) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentGateway) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentGateway) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentGatewayAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentGatewayHook registers your hook function for all future operations.
func AddPaymentGatewayHook(hookPoint boil.HookPoint, paymentGatewayHook PaymentGatewayHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentGatewayBeforeInsertHooks = append(paymentGatewayBeforeInsertHooks, paymentGatewayHook)
	case boil.BeforeUpdateHook:
		paymentGatewayBeforeUpdateHooks = append(paymentGatewayBeforeUpdateHooks, paymentGatewayHook)
	case boil.BeforeDeleteHook:
		paymentGatewayBeforeDeleteHooks = append(paymentGatewayBeforeDeleteHooks, paymentGatewayHook)
	case boil.BeforeUpsertHook:
		paymentGatewayBeforeUpsertHooks = append(paymentGatewayBeforeUpsertHooks, paymentGatewayHook)
	case boil.AfterInsertHook:
		paymentGatewayAfterInsertHooks = append(paymentGatewayAfterInsertHooks, paymentGatewayHook)
	case boil.AfterSelectHook:
		paymentGatewayAfterSelectHooks = append(paymentGatewayAfterSelectHooks, paymentGatewayHook)
	case boil.AfterUpdateHook:
		paymentGatewayAfterUpdateHooks = append(paymentGatewayAfterUpdateHooks, paymentGatewayHook)
	case boil.AfterDeleteHook:
		paymentGatewayAfterDeleteHooks = append(paymentGatewayAfterDeleteHooks, paymentGatewayHook)
	case boil.AfterUpsertHook:
		paymentGatewayAfterUpsertHooks = append(paymentGatewayAfterUpsertHooks, paymentGatewayHook)
	}
}

// One returns a single paymentGateway record from the query.
func (q paymentGatewayQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentGateway, error) {
	o := &PaymentGateway{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentGateway")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentGateway records from the query.
func (q paymentGatewayQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentGatewaySlice, error) {
	var o []*PaymentGateway

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentGateway slice")
	}

	if len(paymentGatewayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentGateway records in the query.
func (q paymentGatewayQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentGateway rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentGatewayQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentGateway exists")
	}

	return count > 0, nil
}

// Gateway pointed to by the foreign key.
func (o *PaymentGateway) Gateway(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("gateway_id=?", o.GatewayID),
	}

	queryMods = append(queryMods, mods...)

	query := Gateways(queryMods...)
	queries.SetFrom(query.Query, "`Gateway`")

	return query
}

// Payment pointed to by the foreign key.
func (o *PaymentGateway) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "`Payment`")

	return query
}

// LoadGateway allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentGatewayL) LoadGateway(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentGateway interface{}, mods queries.Applicator) error {
	var slice []*PaymentGateway
	var object *PaymentGateway

	if singular {
		object = maybePaymentGateway.(*PaymentGateway)
	} else {
		slice = *maybePaymentGateway.(*[]*PaymentGateway)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentGatewayR{}
		}
		args = append(args, object.GatewayID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentGatewayR{}
			}

			for _, a := range args {
				if a == obj.GatewayID {
					continue Outer
				}
			}

			args = append(args, obj.GatewayID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Gateway`), qm.WhereIn(`gateway_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Gateway")
	}

	if len(paymentGatewayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Gateway = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GatewayPaymentGateways = append(foreign.R.GatewayPaymentGateways, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GatewayID == foreign.GatewayID {
				local.R.Gateway = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GatewayPaymentGateways = append(foreign.R.GatewayPaymentGateways, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentGatewayL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentGateway interface{}, mods queries.Applicator) error {
	var slice []*PaymentGateway
	var object *PaymentGateway

	if singular {
		object = maybePaymentGateway.(*PaymentGateway)
	} else {
		slice = *maybePaymentGateway.(*[]*PaymentGateway)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentGatewayR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentGatewayR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Payment`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Payment")
	}

	if len(paymentGatewayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.PaymentPaymentGateways = append(foreign.R.PaymentPaymentGateways, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.PaymentPaymentGateways = append(foreign.R.PaymentPaymentGateways, local)
				break
			}
		}
	}

	return nil
}

// SetGateway of the paymentGateway to the related item.
// Sets o.R.Gateway to related.
// Adds o to related.R.GatewayPaymentGateways.
func (o *PaymentGateway) SetGateway(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentGateway` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gateway_id"}),
		strmangle.WhereClause("`", "`", 0, paymentGatewayPrimaryKeyColumns),
	)
	values := []interface{}{related.GatewayID, o.PaymentGatewayID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GatewayID = related.GatewayID
	if o.R == nil {
		o.R = &paymentGatewayR{
			Gateway: related,
		}
	} else {
		o.R.Gateway = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GatewayPaymentGateways: PaymentGatewaySlice{o},
		}
	} else {
		related.R.GatewayPaymentGateways = append(related.R.GatewayPaymentGateways, o)
	}

	return nil
}

// SetPayment of the paymentGateway to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentGateways.
func (o *PaymentGateway) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentGateway` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentGatewayPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentGatewayID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &paymentGatewayR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			PaymentPaymentGateways: PaymentGatewaySlice{o},
		}
	} else {
		related.R.PaymentPaymentGateways = append(related.R.PaymentPaymentGateways, o)
	}

	return nil
}

// PaymentGateways retrieves all the records using an executor.
func PaymentGateways(mods ...qm.QueryMod) paymentGatewayQuery {
	mods = append(mods, qm.From("`PaymentGateway`"))
	return paymentGatewayQuery{NewQuery(mods...)}
}

// FindPaymentGateway retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentGateway(ctx context.Context, exec boil.ContextExecutor, paymentGatewayID int, selectCols ...string) (*PaymentGateway, error) {
	paymentGatewayObj := &PaymentGateway{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentGateway` where `payment_gateway_id`=?", sel,
	)

	q := queries.Raw(query, paymentGatewayID)

	err := q.Bind(ctx, exec, paymentGatewayObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentGateway")
	}

	return paymentGatewayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentGateway) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentGateway provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentGatewayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentGatewayInsertCacheMut.RLock()
	cache, cached := paymentGatewayInsertCache[key]
	paymentGatewayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentGatewayColumns,
			paymentGatewayColumnsWithDefault,
			paymentGatewayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentGateway` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentGateway` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentGateway` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentGatewayPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentGateway")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentGatewayID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentGatewayMapping["PaymentGatewayID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentGatewayID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentGateway")
	}

CacheNoHooks:
	if !cached {
		paymentGatewayInsertCacheMut.Lock()
		paymentGatewayInsertCache[key] = cache
		paymentGatewayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentGateway.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentGateway) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentGatewayUpdateCacheMut.RLock()
	cache, cached := paymentGatewayUpdateCache[key]
	paymentGatewayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentGatewayColumns,
			paymentGatewayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentGateway, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentGateway` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentGatewayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, append(wl, paymentGatewayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentGateway row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentGateway")
	}

	if !cached {
		paymentGatewayUpdateCacheMut.Lock()
		paymentGatewayUpdateCache[key] = cache
		paymentGatewayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentGatewayQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentGateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentGateway")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentGatewaySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentGatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentGateway` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentGatewayPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentGateway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentGateway")
	}
	return rowsAff, nil
}

var mySQLPaymentGatewayUniqueColumns = []string{
	"payment_gateway_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentGateway) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentGateway provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentGatewayColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentGatewayUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentGatewayUpsertCacheMut.RLock()
	cache, cached := paymentGatewayUpsertCache[key]
	paymentGatewayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentGatewayColumns,
			paymentGatewayColumnsWithDefault,
			paymentGatewayColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentGatewayColumns,
			paymentGatewayPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentGateway, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentGateway", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentGateway` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentGateway")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentGatewayID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentGatewayMapping["payment_gateway_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentGatewayType, paymentGatewayMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentGateway")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentGateway")
	}

CacheNoHooks:
	if !cached {
		paymentGatewayUpsertCacheMut.Lock()
		paymentGatewayUpsertCache[key] = cache
		paymentGatewayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentGateway record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentGateway) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentGateway provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentGatewayPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentGateway` WHERE `payment_gateway_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentGateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentGateway")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentGatewayQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentGatewayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentGateway")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentGateway")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentGatewaySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentGateway slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentGatewayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentGatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentGateway` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentGatewayPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentGateway slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentGateway")
	}

	if len(paymentGatewayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentGateway) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentGateway(ctx, exec, o.PaymentGatewayID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentGatewaySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentGatewaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentGatewayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentGateway`.* FROM `PaymentGateway` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentGatewayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentGatewaySlice")
	}

	*o = slice

	return nil
}

// PaymentGatewayExists checks if the PaymentGateway row exists.
func PaymentGatewayExists(ctx context.Context, exec boil.ContextExecutor, paymentGatewayID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentGateway` where `payment_gateway_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentGatewayID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentGatewayID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentGateway exists")
	}

	return exists, nil
}
