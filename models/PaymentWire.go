// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentWire is an object representing the database table.
type PaymentWire struct {
	PaymentWireID         int               `boil:"payment_wire_id" json:"payment_wire_id" toml:"payment_wire_id" yaml:"payment_wire_id"`
	RoutingNumber         null.String       `boil:"routing_number" json:"routing_number,omitempty" toml:"routing_number" yaml:"routing_number,omitempty"`
	FromAccountID         int               `boil:"from_account_id" json:"from_account_id" toml:"from_account_id" yaml:"from_account_id"`
	PaymentID             null.Int          `boil:"payment_id" json:"payment_id,omitempty" toml:"payment_id" yaml:"payment_id,omitempty"`
	ToAccountID           int               `boil:"to_account_id" json:"to_account_id" toml:"to_account_id" yaml:"to_account_id"`
	PaymentWireStatus     null.String       `boil:"payment_wire_status" json:"payment_wire_status,omitempty" toml:"payment_wire_status" yaml:"payment_wire_status,omitempty"`
	PaymentWireAmount     types.NullDecimal `boil:"payment_wire_amount" json:"payment_wire_amount,omitempty" toml:"payment_wire_amount" yaml:"payment_wire_amount,omitempty"`
	ChargeWireAmount      types.NullDecimal `boil:"charge_wire_amount" json:"charge_wire_amount,omitempty" toml:"charge_wire_amount" yaml:"charge_wire_amount,omitempty"`
	FinalWireCreditAmount types.NullDecimal `boil:"final_wire_credit_amount" json:"final_wire_credit_amount,omitempty" toml:"final_wire_credit_amount" yaml:"final_wire_credit_amount,omitempty"`
	PaymentWireDate       null.Time         `boil:"payment_wire_date" json:"payment_wire_date,omitempty" toml:"payment_wire_date" yaml:"payment_wire_date,omitempty"`
	MakerDate             time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate           null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID               string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID             null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy            null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate          null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentWireR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentWireL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentWireColumns = struct {
	PaymentWireID         string
	RoutingNumber         string
	FromAccountID         string
	PaymentID             string
	ToAccountID           string
	PaymentWireStatus     string
	PaymentWireAmount     string
	ChargeWireAmount      string
	FinalWireCreditAmount string
	PaymentWireDate       string
	MakerDate             string
	CheckerDate           string
	MakerID               string
	CheckerID             string
	ModifiedBy            string
	ModifiedDate          string
}{
	PaymentWireID:         "payment_wire_id",
	RoutingNumber:         "routing_number",
	FromAccountID:         "from_account_id",
	PaymentID:             "payment_id",
	ToAccountID:           "to_account_id",
	PaymentWireStatus:     "payment_wire_status",
	PaymentWireAmount:     "payment_wire_amount",
	ChargeWireAmount:      "charge_wire_amount",
	FinalWireCreditAmount: "final_wire_credit_amount",
	PaymentWireDate:       "payment_wire_date",
	MakerDate:             "maker_date",
	CheckerDate:           "checker_date",
	MakerID:               "maker_id",
	CheckerID:             "checker_id",
	ModifiedBy:            "modified_by",
	ModifiedDate:          "modified_date",
}

// Generated where

var PaymentWireWhere = struct {
	PaymentWireID         whereHelperint
	RoutingNumber         whereHelpernull_String
	FromAccountID         whereHelperint
	PaymentID             whereHelpernull_Int
	ToAccountID           whereHelperint
	PaymentWireStatus     whereHelpernull_String
	PaymentWireAmount     whereHelpertypes_NullDecimal
	ChargeWireAmount      whereHelpertypes_NullDecimal
	FinalWireCreditAmount whereHelpertypes_NullDecimal
	PaymentWireDate       whereHelpernull_Time
	MakerDate             whereHelpertime_Time
	CheckerDate           whereHelpernull_Time
	MakerID               whereHelperstring
	CheckerID             whereHelpernull_String
	ModifiedBy            whereHelpernull_String
	ModifiedDate          whereHelpernull_Time
}{
	PaymentWireID:         whereHelperint{field: `payment_wire_id`},
	RoutingNumber:         whereHelpernull_String{field: `routing_number`},
	FromAccountID:         whereHelperint{field: `from_account_id`},
	PaymentID:             whereHelpernull_Int{field: `payment_id`},
	ToAccountID:           whereHelperint{field: `to_account_id`},
	PaymentWireStatus:     whereHelpernull_String{field: `payment_wire_status`},
	PaymentWireAmount:     whereHelpertypes_NullDecimal{field: `payment_wire_amount`},
	ChargeWireAmount:      whereHelpertypes_NullDecimal{field: `charge_wire_amount`},
	FinalWireCreditAmount: whereHelpertypes_NullDecimal{field: `final_wire_credit_amount`},
	PaymentWireDate:       whereHelpernull_Time{field: `payment_wire_date`},
	MakerDate:             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:           whereHelpernull_Time{field: `checker_date`},
	MakerID:               whereHelperstring{field: `maker_id`},
	CheckerID:             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:            whereHelpernull_String{field: `modified_by`},
	ModifiedDate:          whereHelpernull_Time{field: `modified_date`},
}

// PaymentWireRels is where relationship names are stored.
var PaymentWireRels = struct {
	FromAccount string
	Payment     string
	ToAccount   string
}{
	FromAccount: "FromAccount",
	Payment:     "Payment",
	ToAccount:   "ToAccount",
}

// paymentWireR is where relationships are stored.
type paymentWireR struct {
	FromAccount *Account
	Payment     *Payment
	ToAccount   *Account
}

// NewStruct creates a new relationship struct
func (*paymentWireR) NewStruct() *paymentWireR {
	return &paymentWireR{}
}

// paymentWireL is where Load methods for each relationship are stored.
type paymentWireL struct{}

var (
	paymentWireColumns               = []string{"payment_wire_id", "routing_number", "from_account_id", "payment_id", "to_account_id", "payment_wire_status", "payment_wire_amount", "charge_wire_amount", "final_wire_credit_amount", "payment_wire_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentWireColumnsWithoutDefault = []string{"routing_number", "from_account_id", "payment_id", "to_account_id", "payment_wire_status", "payment_wire_amount", "charge_wire_amount", "final_wire_credit_amount", "payment_wire_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentWireColumnsWithDefault    = []string{"payment_wire_id"}
	paymentWirePrimaryKeyColumns     = []string{"payment_wire_id"}
)

type (
	// PaymentWireSlice is an alias for a slice of pointers to PaymentWire.
	// This should generally be used opposed to []PaymentWire.
	PaymentWireSlice []*PaymentWire
	// PaymentWireHook is the signature for custom PaymentWire hook methods
	PaymentWireHook func(context.Context, boil.ContextExecutor, *PaymentWire) error

	paymentWireQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentWireType                 = reflect.TypeOf(&PaymentWire{})
	paymentWireMapping              = queries.MakeStructMapping(paymentWireType)
	paymentWirePrimaryKeyMapping, _ = queries.BindMapping(paymentWireType, paymentWireMapping, paymentWirePrimaryKeyColumns)
	paymentWireInsertCacheMut       sync.RWMutex
	paymentWireInsertCache          = make(map[string]insertCache)
	paymentWireUpdateCacheMut       sync.RWMutex
	paymentWireUpdateCache          = make(map[string]updateCache)
	paymentWireUpsertCacheMut       sync.RWMutex
	paymentWireUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentWireBeforeInsertHooks []PaymentWireHook
var paymentWireBeforeUpdateHooks []PaymentWireHook
var paymentWireBeforeDeleteHooks []PaymentWireHook
var paymentWireBeforeUpsertHooks []PaymentWireHook

var paymentWireAfterInsertHooks []PaymentWireHook
var paymentWireAfterSelectHooks []PaymentWireHook
var paymentWireAfterUpdateHooks []PaymentWireHook
var paymentWireAfterDeleteHooks []PaymentWireHook
var paymentWireAfterUpsertHooks []PaymentWireHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentWire) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentWire) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentWire) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentWire) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentWire) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentWire) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentWire) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentWire) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentWire) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentWireAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentWireHook registers your hook function for all future operations.
func AddPaymentWireHook(hookPoint boil.HookPoint, paymentWireHook PaymentWireHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentWireBeforeInsertHooks = append(paymentWireBeforeInsertHooks, paymentWireHook)
	case boil.BeforeUpdateHook:
		paymentWireBeforeUpdateHooks = append(paymentWireBeforeUpdateHooks, paymentWireHook)
	case boil.BeforeDeleteHook:
		paymentWireBeforeDeleteHooks = append(paymentWireBeforeDeleteHooks, paymentWireHook)
	case boil.BeforeUpsertHook:
		paymentWireBeforeUpsertHooks = append(paymentWireBeforeUpsertHooks, paymentWireHook)
	case boil.AfterInsertHook:
		paymentWireAfterInsertHooks = append(paymentWireAfterInsertHooks, paymentWireHook)
	case boil.AfterSelectHook:
		paymentWireAfterSelectHooks = append(paymentWireAfterSelectHooks, paymentWireHook)
	case boil.AfterUpdateHook:
		paymentWireAfterUpdateHooks = append(paymentWireAfterUpdateHooks, paymentWireHook)
	case boil.AfterDeleteHook:
		paymentWireAfterDeleteHooks = append(paymentWireAfterDeleteHooks, paymentWireHook)
	case boil.AfterUpsertHook:
		paymentWireAfterUpsertHooks = append(paymentWireAfterUpsertHooks, paymentWireHook)
	}
}

// One returns a single paymentWire record from the query.
func (q paymentWireQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentWire, error) {
	o := &PaymentWire{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentWire")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentWire records from the query.
func (q paymentWireQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentWireSlice, error) {
	var o []*PaymentWire

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentWire slice")
	}

	if len(paymentWireAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentWire records in the query.
func (q paymentWireQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentWire rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentWireQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentWire exists")
	}

	return count > 0, nil
}

// FromAccount pointed to by the foreign key.
func (o *PaymentWire) FromAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.FromAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Payment pointed to by the foreign key.
func (o *PaymentWire) Payment(mods ...qm.QueryMod) paymentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "`Payment`")

	return query
}

// ToAccount pointed to by the foreign key.
func (o *PaymentWire) ToAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.ToAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// LoadFromAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentWireL) LoadFromAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentWire interface{}, mods queries.Applicator) error {
	var slice []*PaymentWire
	var object *PaymentWire

	if singular {
		object = maybePaymentWire.(*PaymentWire)
	} else {
		slice = *maybePaymentWire.(*[]*PaymentWire)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentWireR{}
		}
		args = append(args, object.FromAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentWireR{}
			}

			for _, a := range args {
				if a == obj.FromAccountID {
					continue Outer
				}
			}

			args = append(args, obj.FromAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentWireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FromAccountPaymentWires = append(foreign.R.FromAccountPaymentWires, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromAccountID == foreign.AccountID {
				local.R.FromAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FromAccountPaymentWires = append(foreign.R.FromAccountPaymentWires, local)
				break
			}
		}
	}

	return nil
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentWireL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentWire interface{}, mods queries.Applicator) error {
	var slice []*PaymentWire
	var object *PaymentWire

	if singular {
		object = maybePaymentWire.(*PaymentWire)
	} else {
		slice = *maybePaymentWire.(*[]*PaymentWire)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentWireR{}
		}
		if !queries.IsNil(object.PaymentID) {
			args = append(args, object.PaymentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentWireR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentID) {
				args = append(args, obj.PaymentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Payment`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Payment")
	}

	if len(paymentWireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentR{}
		}
		foreign.R.PaymentPaymentWires = append(foreign.R.PaymentPaymentWires, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentID, foreign.PaymentID) {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.PaymentPaymentWires = append(foreign.R.PaymentPaymentWires, local)
				break
			}
		}
	}

	return nil
}

// LoadToAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentWireL) LoadToAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentWire interface{}, mods queries.Applicator) error {
	var slice []*PaymentWire
	var object *PaymentWire

	if singular {
		object = maybePaymentWire.(*PaymentWire)
	} else {
		slice = *maybePaymentWire.(*[]*PaymentWire)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentWireR{}
		}
		args = append(args, object.ToAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentWireR{}
			}

			for _, a := range args {
				if a == obj.ToAccountID {
					continue Outer
				}
			}

			args = append(args, obj.ToAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentWireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ToAccountPaymentWires = append(foreign.R.ToAccountPaymentWires, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToAccountID == foreign.AccountID {
				local.R.ToAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ToAccountPaymentWires = append(foreign.R.ToAccountPaymentWires, local)
				break
			}
		}
	}

	return nil
}

// SetFromAccount of the paymentWire to the related item.
// Sets o.R.FromAccount to related.
// Adds o to related.R.FromAccountPaymentWires.
func (o *PaymentWire) SetFromAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentWire` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_account_id"}),
		strmangle.WhereClause("`", "`", 0, paymentWirePrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentWireID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromAccountID = related.AccountID
	if o.R == nil {
		o.R = &paymentWireR{
			FromAccount: related,
		}
	} else {
		o.R.FromAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			FromAccountPaymentWires: PaymentWireSlice{o},
		}
	} else {
		related.R.FromAccountPaymentWires = append(related.R.FromAccountPaymentWires, o)
	}

	return nil
}

// SetPayment of the paymentWire to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentWires.
func (o *PaymentWire) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Payment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentWire` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentWirePrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentWireID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentID, related.PaymentID)
	if o.R == nil {
		o.R = &paymentWireR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentR{
			PaymentPaymentWires: PaymentWireSlice{o},
		}
	} else {
		related.R.PaymentPaymentWires = append(related.R.PaymentPaymentWires, o)
	}

	return nil
}

// RemovePayment relationship.
// Sets o.R.Payment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PaymentWire) RemovePayment(ctx context.Context, exec boil.ContextExecutor, related *Payment) error {
	var err error

	queries.SetScanner(&o.PaymentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("payment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Payment = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PaymentPaymentWires {
		if queries.Equal(o.PaymentID, ri.PaymentID) {
			continue
		}

		ln := len(related.R.PaymentPaymentWires)
		if ln > 1 && i < ln-1 {
			related.R.PaymentPaymentWires[i] = related.R.PaymentPaymentWires[ln-1]
		}
		related.R.PaymentPaymentWires = related.R.PaymentPaymentWires[:ln-1]
		break
	}
	return nil
}

// SetToAccount of the paymentWire to the related item.
// Sets o.R.ToAccount to related.
// Adds o to related.R.ToAccountPaymentWires.
func (o *PaymentWire) SetToAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentWire` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"to_account_id"}),
		strmangle.WhereClause("`", "`", 0, paymentWirePrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentWireID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToAccountID = related.AccountID
	if o.R == nil {
		o.R = &paymentWireR{
			ToAccount: related,
		}
	} else {
		o.R.ToAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			ToAccountPaymentWires: PaymentWireSlice{o},
		}
	} else {
		related.R.ToAccountPaymentWires = append(related.R.ToAccountPaymentWires, o)
	}

	return nil
}

// PaymentWires retrieves all the records using an executor.
func PaymentWires(mods ...qm.QueryMod) paymentWireQuery {
	mods = append(mods, qm.From("`PaymentWire`"))
	return paymentWireQuery{NewQuery(mods...)}
}

// FindPaymentWire retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentWire(ctx context.Context, exec boil.ContextExecutor, paymentWireID int, selectCols ...string) (*PaymentWire, error) {
	paymentWireObj := &PaymentWire{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentWire` where `payment_wire_id`=?", sel,
	)

	q := queries.Raw(query, paymentWireID)

	err := q.Bind(ctx, exec, paymentWireObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentWire")
	}

	return paymentWireObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentWire) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentWire provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentWireColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentWireInsertCacheMut.RLock()
	cache, cached := paymentWireInsertCache[key]
	paymentWireInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentWireColumns,
			paymentWireColumnsWithDefault,
			paymentWireColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentWireType, paymentWireMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentWireType, paymentWireMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentWire` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentWire` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentWire` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentWirePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentWire")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentWireID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentWireMapping["PaymentWireID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentWireID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentWire")
	}

CacheNoHooks:
	if !cached {
		paymentWireInsertCacheMut.Lock()
		paymentWireInsertCache[key] = cache
		paymentWireInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentWire.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentWire) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentWireUpdateCacheMut.RLock()
	cache, cached := paymentWireUpdateCache[key]
	paymentWireUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentWireColumns,
			paymentWirePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentWire, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentWire` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentWirePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentWireType, paymentWireMapping, append(wl, paymentWirePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentWire row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentWire")
	}

	if !cached {
		paymentWireUpdateCacheMut.Lock()
		paymentWireUpdateCache[key] = cache
		paymentWireUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentWireQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentWire")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentWire")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentWireSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentWirePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentWire` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentWirePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentWire slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentWire")
	}
	return rowsAff, nil
}

var mySQLPaymentWireUniqueColumns = []string{
	"payment_wire_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentWire) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentWire provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentWireColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentWireUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentWireUpsertCacheMut.RLock()
	cache, cached := paymentWireUpsertCache[key]
	paymentWireUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentWireColumns,
			paymentWireColumnsWithDefault,
			paymentWireColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentWireColumns,
			paymentWirePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentWire, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentWire", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentWire` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentWireType, paymentWireMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentWireType, paymentWireMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentWire")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentWireID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentWireMapping["payment_wire_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentWireType, paymentWireMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentWire")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentWire")
	}

CacheNoHooks:
	if !cached {
		paymentWireUpsertCacheMut.Lock()
		paymentWireUpsertCache[key] = cache
		paymentWireUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentWire record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentWire) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentWire provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentWirePrimaryKeyMapping)
	sql := "DELETE FROM `PaymentWire` WHERE `payment_wire_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentWire")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentWire")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentWireQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentWireQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentWire")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentWire")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentWireSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentWire slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentWireBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentWirePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentWire` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentWirePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentWire slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentWire")
	}

	if len(paymentWireAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentWire) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentWire(ctx, exec, o.PaymentWireID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentWireSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentWireSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentWirePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentWire`.* FROM `PaymentWire` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentWirePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentWireSlice")
	}

	*o = slice

	return nil
}

// PaymentWireExists checks if the PaymentWire row exists.
func PaymentWireExists(ctx context.Context, exec boil.ContextExecutor, paymentWireID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentWire` where `payment_wire_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentWireID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentWireID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentWire exists")
	}

	return exists, nil
}
