// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Asset is an object representing the database table.
type Asset struct {
	AssetID           int               `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	AssetsTypeID      int               `boil:"assets_type_id" json:"assets_type_id" toml:"assets_type_id" yaml:"assets_type_id"`
	AssetsRefNumber   string            `boil:"assets_ref_number" json:"assets_ref_number" toml:"assets_ref_number" yaml:"assets_ref_number"`
	AssetDescription  string            `boil:"asset_description" json:"asset_description" toml:"asset_description" yaml:"asset_description"`
	AssetMake         string            `boil:"asset_make" json:"asset_make" toml:"asset_make" yaml:"asset_make"`
	AssetPrice        types.Decimal     `boil:"asset_price" json:"asset_price" toml:"asset_price" yaml:"asset_price"`
	Model             null.String       `boil:"model" json:"model,omitempty" toml:"model" yaml:"model,omitempty"`
	Weight            types.NullDecimal `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	AsssetIt          string            `boil:"assset_it" json:"assset_it" toml:"assset_it" yaml:"assset_it"`
	CurrentNPV        types.Decimal     `boil:"current_npv" json:"current_npv" toml:"current_npv" yaml:"current_npv"`
	Active            null.String       `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	Isiotenabled      null.String       `boil:"isiotenabled" json:"isiotenabled,omitempty" toml:"isiotenabled" yaml:"isiotenabled,omitempty"`
	ActivationDate    null.Time         `boil:"activation_date" json:"activation_date,omitempty" toml:"activation_date" yaml:"activation_date,omitempty"`
	CurrencyID        string            `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	AlterDate         null.Time         `boil:"alter_date" json:"alter_date,omitempty" toml:"alter_date" yaml:"alter_date,omitempty"`
	AssetContractID   null.String       `boil:"asset_contract_id" json:"asset_contract_id,omitempty" toml:"asset_contract_id" yaml:"asset_contract_id,omitempty"`
	AssetName         string            `boil:"asset_name" json:"asset_name" toml:"asset_name" yaml:"asset_name"`
	InterestCommision types.Decimal     `boil:"interest_commision" json:"interest_commision" toml:"interest_commision" yaml:"interest_commision"`
	BankID            null.Int          `boil:"bank_id" json:"bank_id,omitempty" toml:"bank_id" yaml:"bank_id,omitempty"`
	MakerDate         time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate       null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID           string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID         null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy        null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate      null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *assetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetColumns = struct {
	AssetID           string
	AssetsTypeID      string
	AssetsRefNumber   string
	AssetDescription  string
	AssetMake         string
	AssetPrice        string
	Model             string
	Weight            string
	AsssetIt          string
	CurrentNPV        string
	Active            string
	Isiotenabled      string
	ActivationDate    string
	CurrencyID        string
	AlterDate         string
	AssetContractID   string
	AssetName         string
	InterestCommision string
	BankID            string
	MakerDate         string
	CheckerDate       string
	MakerID           string
	CheckerID         string
	ModifiedBy        string
	ModifiedDate      string
}{
	AssetID:           "asset_id",
	AssetsTypeID:      "assets_type_id",
	AssetsRefNumber:   "assets_ref_number",
	AssetDescription:  "asset_description",
	AssetMake:         "asset_make",
	AssetPrice:        "asset_price",
	Model:             "model",
	Weight:            "weight",
	AsssetIt:          "assset_it",
	CurrentNPV:        "current_npv",
	Active:            "active",
	Isiotenabled:      "isiotenabled",
	ActivationDate:    "activation_date",
	CurrencyID:        "currency_id",
	AlterDate:         "alter_date",
	AssetContractID:   "asset_contract_id",
	AssetName:         "asset_name",
	InterestCommision: "interest_commision",
	BankID:            "bank_id",
	MakerDate:         "maker_date",
	CheckerDate:       "checker_date",
	MakerID:           "maker_id",
	CheckerID:         "checker_id",
	ModifiedBy:        "modified_by",
	ModifiedDate:      "modified_date",
}

// Generated where

var AssetWhere = struct {
	AssetID           whereHelperint
	AssetsTypeID      whereHelperint
	AssetsRefNumber   whereHelperstring
	AssetDescription  whereHelperstring
	AssetMake         whereHelperstring
	AssetPrice        whereHelpertypes_Decimal
	Model             whereHelpernull_String
	Weight            whereHelpertypes_NullDecimal
	AsssetIt          whereHelperstring
	CurrentNPV        whereHelpertypes_Decimal
	Active            whereHelpernull_String
	Isiotenabled      whereHelpernull_String
	ActivationDate    whereHelpernull_Time
	CurrencyID        whereHelperstring
	AlterDate         whereHelpernull_Time
	AssetContractID   whereHelpernull_String
	AssetName         whereHelperstring
	InterestCommision whereHelpertypes_Decimal
	BankID            whereHelpernull_Int
	MakerDate         whereHelpertime_Time
	CheckerDate       whereHelpernull_Time
	MakerID           whereHelperstring
	CheckerID         whereHelpernull_String
	ModifiedBy        whereHelpernull_String
	ModifiedDate      whereHelpernull_Time
}{
	AssetID:           whereHelperint{field: `asset_id`},
	AssetsTypeID:      whereHelperint{field: `assets_type_id`},
	AssetsRefNumber:   whereHelperstring{field: `assets_ref_number`},
	AssetDescription:  whereHelperstring{field: `asset_description`},
	AssetMake:         whereHelperstring{field: `asset_make`},
	AssetPrice:        whereHelpertypes_Decimal{field: `asset_price`},
	Model:             whereHelpernull_String{field: `model`},
	Weight:            whereHelpertypes_NullDecimal{field: `weight`},
	AsssetIt:          whereHelperstring{field: `assset_it`},
	CurrentNPV:        whereHelpertypes_Decimal{field: `current_npv`},
	Active:            whereHelpernull_String{field: `active`},
	Isiotenabled:      whereHelpernull_String{field: `isiotenabled`},
	ActivationDate:    whereHelpernull_Time{field: `activation_date`},
	CurrencyID:        whereHelperstring{field: `currency_id`},
	AlterDate:         whereHelpernull_Time{field: `alter_date`},
	AssetContractID:   whereHelpernull_String{field: `asset_contract_id`},
	AssetName:         whereHelperstring{field: `asset_name`},
	InterestCommision: whereHelpertypes_Decimal{field: `interest_commision`},
	BankID:            whereHelpernull_Int{field: `bank_id`},
	MakerDate:         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:       whereHelpernull_Time{field: `checker_date`},
	MakerID:           whereHelperstring{field: `maker_id`},
	CheckerID:         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:      whereHelpernull_Time{field: `modified_date`},
}

// AssetRels is where relationship names are stored.
var AssetRels = struct {
	AssetsType              string
	AssetAssetConditions    string
	AssetCreditOriginations string
	AssetDevices            string
	AssetIDRefLoans         string
}{
	AssetsType:              "AssetsType",
	AssetAssetConditions:    "AssetAssetConditions",
	AssetCreditOriginations: "AssetCreditOriginations",
	AssetDevices:            "AssetDevices",
	AssetIDRefLoans:         "AssetIDRefLoans",
}

// assetR is where relationships are stored.
type assetR struct {
	AssetsType              *AssetsType
	AssetAssetConditions    AssetConditionSlice
	AssetCreditOriginations CreditOriginationSlice
	AssetDevices            DeviceSlice
	AssetIDRefLoans         LoanSlice
}

// NewStruct creates a new relationship struct
func (*assetR) NewStruct() *assetR {
	return &assetR{}
}

// assetL is where Load methods for each relationship are stored.
type assetL struct{}

var (
	assetColumns               = []string{"asset_id", "assets_type_id", "assets_ref_number", "asset_description", "asset_make", "asset_price", "model", "weight", "assset_it", "current_npv", "active", "isiotenabled", "activation_date", "currency_id", "alter_date", "asset_contract_id", "asset_name", "interest_commision", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetColumnsWithoutDefault = []string{"asset_id", "assets_type_id", "assets_ref_number", "asset_description", "asset_make", "asset_price", "model", "weight", "assset_it", "current_npv", "active", "isiotenabled", "activation_date", "currency_id", "alter_date", "asset_contract_id", "asset_name", "interest_commision", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	assetColumnsWithDefault    = []string{}
	assetPrimaryKeyColumns     = []string{"asset_id"}
)

type (
	// AssetSlice is an alias for a slice of pointers to Asset.
	// This should generally be used opposed to []Asset.
	AssetSlice []*Asset
	// AssetHook is the signature for custom Asset hook methods
	AssetHook func(context.Context, boil.ContextExecutor, *Asset) error

	assetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetType                 = reflect.TypeOf(&Asset{})
	assetMapping              = queries.MakeStructMapping(assetType)
	assetPrimaryKeyMapping, _ = queries.BindMapping(assetType, assetMapping, assetPrimaryKeyColumns)
	assetInsertCacheMut       sync.RWMutex
	assetInsertCache          = make(map[string]insertCache)
	assetUpdateCacheMut       sync.RWMutex
	assetUpdateCache          = make(map[string]updateCache)
	assetUpsertCacheMut       sync.RWMutex
	assetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetBeforeInsertHooks []AssetHook
var assetBeforeUpdateHooks []AssetHook
var assetBeforeDeleteHooks []AssetHook
var assetBeforeUpsertHooks []AssetHook

var assetAfterInsertHooks []AssetHook
var assetAfterSelectHooks []AssetHook
var assetAfterUpdateHooks []AssetHook
var assetAfterDeleteHooks []AssetHook
var assetAfterUpsertHooks []AssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Asset) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Asset) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Asset) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Asset) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Asset) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Asset) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Asset) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Asset) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Asset) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetHook registers your hook function for all future operations.
func AddAssetHook(hookPoint boil.HookPoint, assetHook AssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetBeforeInsertHooks = append(assetBeforeInsertHooks, assetHook)
	case boil.BeforeUpdateHook:
		assetBeforeUpdateHooks = append(assetBeforeUpdateHooks, assetHook)
	case boil.BeforeDeleteHook:
		assetBeforeDeleteHooks = append(assetBeforeDeleteHooks, assetHook)
	case boil.BeforeUpsertHook:
		assetBeforeUpsertHooks = append(assetBeforeUpsertHooks, assetHook)
	case boil.AfterInsertHook:
		assetAfterInsertHooks = append(assetAfterInsertHooks, assetHook)
	case boil.AfterSelectHook:
		assetAfterSelectHooks = append(assetAfterSelectHooks, assetHook)
	case boil.AfterUpdateHook:
		assetAfterUpdateHooks = append(assetAfterUpdateHooks, assetHook)
	case boil.AfterDeleteHook:
		assetAfterDeleteHooks = append(assetAfterDeleteHooks, assetHook)
	case boil.AfterUpsertHook:
		assetAfterUpsertHooks = append(assetAfterUpsertHooks, assetHook)
	}
}

// One returns a single asset record from the query.
func (q assetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Asset, error) {
	o := &Asset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Assets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Asset records from the query.
func (q assetQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssetSlice, error) {
	var o []*Asset

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Asset slice")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Asset records in the query.
func (q assetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Assets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Assets exists")
	}

	return count > 0, nil
}

// AssetsType pointed to by the foreign key.
func (o *Asset) AssetsType(mods ...qm.QueryMod) assetsTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("assets_type_id=?", o.AssetsTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := AssetsTypes(queryMods...)
	queries.SetFrom(query.Query, "`AssetsType`")

	return query
}

// AssetAssetConditions retrieves all the AssetCondition's AssetConditions with an executor via asset_id column.
func (o *Asset) AssetAssetConditions(mods ...qm.QueryMod) assetConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`AssetCondition`.`asset_id`=?", o.AssetID),
	)

	query := AssetConditions(queryMods...)
	queries.SetFrom(query.Query, "`AssetCondition`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`AssetCondition`.*"})
	}

	return query
}

// AssetCreditOriginations retrieves all the CreditOrigination's CreditOriginations with an executor via asset_id column.
func (o *Asset) AssetCreditOriginations(mods ...qm.QueryMod) creditOriginationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`CreditOrigination`.`asset_id`=?", o.AssetID),
	)

	query := CreditOriginations(queryMods...)
	queries.SetFrom(query.Query, "`CreditOrigination`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`CreditOrigination`.*"})
	}

	return query
}

// AssetDevices retrieves all the Device's Devices with an executor via asset_id column.
func (o *Asset) AssetDevices(mods ...qm.QueryMod) deviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Devices`.`asset_id`=?", o.AssetID),
	)

	query := Devices(queryMods...)
	queries.SetFrom(query.Query, "`Devices`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Devices`.*"})
	}

	return query
}

// AssetIDRefLoans retrieves all the Loan's Loans with an executor via asset_id_ref column.
func (o *Asset) AssetIDRefLoans(mods ...qm.QueryMod) loanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Loan`.`asset_id_ref`=?", o.AssetID),
	)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Loan`.*"})
	}

	return query
}

// LoadAssetsType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetL) LoadAssetsType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsset interface{}, mods queries.Applicator) error {
	var slice []*Asset
	var object *Asset

	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*[]*Asset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args = append(args, object.AssetsTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}

			for _, a := range args {
				if a == obj.AssetsTypeID {
					continue Outer
				}
			}

			args = append(args, obj.AssetsTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`AssetsType`), qm.WhereIn(`assets_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssetsType")
	}

	var resultSlice []*AssetsType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssetsType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AssetsType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AssetsType")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssetsType = foreign
		if foreign.R == nil {
			foreign.R = &assetsTypeR{}
		}
		foreign.R.AssetsTypeAssets = append(foreign.R.AssetsTypeAssets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssetsTypeID == foreign.AssetsTypeID {
				local.R.AssetsType = foreign
				if foreign.R == nil {
					foreign.R = &assetsTypeR{}
				}
				foreign.R.AssetsTypeAssets = append(foreign.R.AssetsTypeAssets, local)
				break
			}
		}
	}

	return nil
}

// LoadAssetAssetConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetL) LoadAssetAssetConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsset interface{}, mods queries.Applicator) error {
	var slice []*Asset
	var object *Asset

	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*[]*Asset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args = append(args, object.AssetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}

			for _, a := range args {
				if a == obj.AssetID {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`AssetCondition`), qm.WhereIn(`asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssetCondition")
	}

	var resultSlice []*AssetCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssetCondition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AssetCondition")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AssetCondition")
	}

	if len(assetConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetAssetConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assetConditionR{}
			}
			foreign.R.Asset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AssetID == foreign.AssetID {
				local.R.AssetAssetConditions = append(local.R.AssetAssetConditions, foreign)
				if foreign.R == nil {
					foreign.R = &assetConditionR{}
				}
				foreign.R.Asset = local
				break
			}
		}
	}

	return nil
}

// LoadAssetCreditOriginations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetL) LoadAssetCreditOriginations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsset interface{}, mods queries.Applicator) error {
	var slice []*Asset
	var object *Asset

	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*[]*Asset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args = append(args, object.AssetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetID) {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CreditOrigination`), qm.WhereIn(`asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CreditOrigination")
	}

	var resultSlice []*CreditOrigination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CreditOrigination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on CreditOrigination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CreditOrigination")
	}

	if len(creditOriginationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetCreditOriginations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &creditOriginationR{}
			}
			foreign.R.Asset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AssetID, foreign.AssetID) {
				local.R.AssetCreditOriginations = append(local.R.AssetCreditOriginations, foreign)
				if foreign.R == nil {
					foreign.R = &creditOriginationR{}
				}
				foreign.R.Asset = local
				break
			}
		}
	}

	return nil
}

// LoadAssetDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetL) LoadAssetDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsset interface{}, mods queries.Applicator) error {
	var slice []*Asset
	var object *Asset

	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*[]*Asset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args = append(args, object.AssetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetID) {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Devices`), qm.WhereIn(`asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Devices")
	}

	var resultSlice []*Device
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Devices")
	}

	if len(deviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deviceR{}
			}
			foreign.R.Asset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AssetID, foreign.AssetID) {
				local.R.AssetDevices = append(local.R.AssetDevices, foreign)
				if foreign.R == nil {
					foreign.R = &deviceR{}
				}
				foreign.R.Asset = local
				break
			}
		}
	}

	return nil
}

// LoadAssetIDRefLoans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assetL) LoadAssetIDRefLoans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAsset interface{}, mods queries.Applicator) error {
	var slice []*Asset
	var object *Asset

	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*[]*Asset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args = append(args, object.AssetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssetID) {
					continue Outer
				}
			}

			args = append(args, obj.AssetID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`asset_id_ref in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(loanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetIDRefLoans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &loanR{}
			}
			foreign.R.AssetIDRef = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AssetID, foreign.AssetIDRef) {
				local.R.AssetIDRefLoans = append(local.R.AssetIDRefLoans, foreign)
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.AssetIDRef = local
				break
			}
		}
	}

	return nil
}

// SetAssetsType of the asset to the related item.
// Sets o.R.AssetsType to related.
// Adds o to related.R.AssetsTypeAssets.
func (o *Asset) SetAssetsType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssetsType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Assets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"assets_type_id"}),
		strmangle.WhereClause("`", "`", 0, assetPrimaryKeyColumns),
	)
	values := []interface{}{related.AssetsTypeID, o.AssetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssetsTypeID = related.AssetsTypeID
	if o.R == nil {
		o.R = &assetR{
			AssetsType: related,
		}
	} else {
		o.R.AssetsType = related
	}

	if related.R == nil {
		related.R = &assetsTypeR{
			AssetsTypeAssets: AssetSlice{o},
		}
	} else {
		related.R.AssetsTypeAssets = append(related.R.AssetsTypeAssets, o)
	}

	return nil
}

// AddAssetAssetConditions adds the given related objects to the existing relationships
// of the Asset, optionally inserting them as new records.
// Appends related to o.R.AssetAssetConditions.
// Sets related.R.Asset appropriately.
func (o *Asset) AddAssetAssetConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssetCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssetID = o.AssetID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `AssetCondition` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"asset_id"}),
				strmangle.WhereClause("`", "`", 0, assetConditionPrimaryKeyColumns),
			)
			values := []interface{}{o.AssetID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssetID = o.AssetID
		}
	}

	if o.R == nil {
		o.R = &assetR{
			AssetAssetConditions: related,
		}
	} else {
		o.R.AssetAssetConditions = append(o.R.AssetAssetConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetConditionR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// AddAssetCreditOriginations adds the given related objects to the existing relationships
// of the Asset, optionally inserting them as new records.
// Appends related to o.R.AssetCreditOriginations.
// Sets related.R.Asset appropriately.
func (o *Asset) AddAssetCreditOriginations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrigination) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssetID, o.AssetID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `CreditOrigination` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"asset_id"}),
				strmangle.WhereClause("`", "`", 0, creditOriginationPrimaryKeyColumns),
			)
			values := []interface{}{o.AssetID, rel.CreditOriginationID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssetID, o.AssetID)
		}
	}

	if o.R == nil {
		o.R = &assetR{
			AssetCreditOriginations: related,
		}
	} else {
		o.R.AssetCreditOriginations = append(o.R.AssetCreditOriginations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &creditOriginationR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// SetAssetCreditOriginations removes all previously related items of the
// Asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's AssetCreditOriginations accordingly.
// Replaces o.R.AssetCreditOriginations with related.
// Sets related.R.Asset's AssetCreditOriginations accordingly.
func (o *Asset) SetAssetCreditOriginations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CreditOrigination) error {
	query := "update `CreditOrigination` set `asset_id` = null where `asset_id` = ?"
	values := []interface{}{o.AssetID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssetCreditOriginations {
			queries.SetScanner(&rel.AssetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Asset = nil
		}

		o.R.AssetCreditOriginations = nil
	}
	return o.AddAssetCreditOriginations(ctx, exec, insert, related...)
}

// RemoveAssetCreditOriginations relationships from objects passed in.
// Removes related items from R.AssetCreditOriginations (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
func (o *Asset) RemoveAssetCreditOriginations(ctx context.Context, exec boil.ContextExecutor, related ...*CreditOrigination) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssetID, nil)
		if rel.R != nil {
			rel.R.Asset = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("asset_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssetCreditOriginations {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssetCreditOriginations)
			if ln > 1 && i < ln-1 {
				o.R.AssetCreditOriginations[i] = o.R.AssetCreditOriginations[ln-1]
			}
			o.R.AssetCreditOriginations = o.R.AssetCreditOriginations[:ln-1]
			break
		}
	}

	return nil
}

// AddAssetDevices adds the given related objects to the existing relationships
// of the Asset, optionally inserting them as new records.
// Appends related to o.R.AssetDevices.
// Sets related.R.Asset appropriately.
func (o *Asset) AddAssetDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Device) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssetID, o.AssetID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Devices` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"asset_id"}),
				strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
			)
			values := []interface{}{o.AssetID, rel.DevicesID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssetID, o.AssetID)
		}
	}

	if o.R == nil {
		o.R = &assetR{
			AssetDevices: related,
		}
	} else {
		o.R.AssetDevices = append(o.R.AssetDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deviceR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// SetAssetDevices removes all previously related items of the
// Asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's AssetDevices accordingly.
// Replaces o.R.AssetDevices with related.
// Sets related.R.Asset's AssetDevices accordingly.
func (o *Asset) SetAssetDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Device) error {
	query := "update `Devices` set `asset_id` = null where `asset_id` = ?"
	values := []interface{}{o.AssetID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssetDevices {
			queries.SetScanner(&rel.AssetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Asset = nil
		}

		o.R.AssetDevices = nil
	}
	return o.AddAssetDevices(ctx, exec, insert, related...)
}

// RemoveAssetDevices relationships from objects passed in.
// Removes related items from R.AssetDevices (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
func (o *Asset) RemoveAssetDevices(ctx context.Context, exec boil.ContextExecutor, related ...*Device) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssetID, nil)
		if rel.R != nil {
			rel.R.Asset = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("asset_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssetDevices {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssetDevices)
			if ln > 1 && i < ln-1 {
				o.R.AssetDevices[i] = o.R.AssetDevices[ln-1]
			}
			o.R.AssetDevices = o.R.AssetDevices[:ln-1]
			break
		}
	}

	return nil
}

// AddAssetIDRefLoans adds the given related objects to the existing relationships
// of the Asset, optionally inserting them as new records.
// Appends related to o.R.AssetIDRefLoans.
// Sets related.R.AssetIDRef appropriately.
func (o *Asset) AddAssetIDRefLoans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Loan) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssetIDRef, o.AssetID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Loan` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"asset_id_ref"}),
				strmangle.WhereClause("`", "`", 0, loanPrimaryKeyColumns),
			)
			values := []interface{}{o.AssetID, rel.LoanID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssetIDRef, o.AssetID)
		}
	}

	if o.R == nil {
		o.R = &assetR{
			AssetIDRefLoans: related,
		}
	} else {
		o.R.AssetIDRefLoans = append(o.R.AssetIDRefLoans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &loanR{
				AssetIDRef: o,
			}
		} else {
			rel.R.AssetIDRef = o
		}
	}
	return nil
}

// SetAssetIDRefLoans removes all previously related items of the
// Asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssetIDRef's AssetIDRefLoans accordingly.
// Replaces o.R.AssetIDRefLoans with related.
// Sets related.R.AssetIDRef's AssetIDRefLoans accordingly.
func (o *Asset) SetAssetIDRefLoans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Loan) error {
	query := "update `Loan` set `asset_id_ref` = null where `asset_id_ref` = ?"
	values := []interface{}{o.AssetID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssetIDRefLoans {
			queries.SetScanner(&rel.AssetIDRef, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssetIDRef = nil
		}

		o.R.AssetIDRefLoans = nil
	}
	return o.AddAssetIDRefLoans(ctx, exec, insert, related...)
}

// RemoveAssetIDRefLoans relationships from objects passed in.
// Removes related items from R.AssetIDRefLoans (uses pointer comparison, removal does not keep order)
// Sets related.R.AssetIDRef.
func (o *Asset) RemoveAssetIDRefLoans(ctx context.Context, exec boil.ContextExecutor, related ...*Loan) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssetIDRef, nil)
		if rel.R != nil {
			rel.R.AssetIDRef = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("asset_id_ref")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssetIDRefLoans {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssetIDRefLoans)
			if ln > 1 && i < ln-1 {
				o.R.AssetIDRefLoans[i] = o.R.AssetIDRefLoans[ln-1]
			}
			o.R.AssetIDRefLoans = o.R.AssetIDRefLoans[:ln-1]
			break
		}
	}

	return nil
}

// Assets retrieves all the records using an executor.
func Assets(mods ...qm.QueryMod) assetQuery {
	mods = append(mods, qm.From("`Assets`"))
	return assetQuery{NewQuery(mods...)}
}

// FindAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsset(ctx context.Context, exec boil.ContextExecutor, assetID int, selectCols ...string) (*Asset, error) {
	assetObj := &Asset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Assets` where `asset_id`=?", sel,
	)

	q := queries.Raw(query, assetID)

	err := q.Bind(ctx, exec, assetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Assets")
	}

	return assetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Asset) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Assets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetInsertCacheMut.RLock()
	cache, cached := assetInsertCache[key]
	assetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetColumns,
			assetColumnsWithDefault,
			assetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetType, assetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Assets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Assets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Assets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, assetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Assets")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AssetID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Assets")
	}

CacheNoHooks:
	if !cached {
		assetInsertCacheMut.Lock()
		assetInsertCache[key] = cache
		assetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Asset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Asset) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetUpdateCacheMut.RLock()
	cache, cached := assetUpdateCache[key]
	assetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetColumns,
			assetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Assets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Assets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, assetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, append(wl, assetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Assets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Assets")
	}

	if !cached {
		assetUpdateCacheMut.Lock()
		assetUpdateCache[key] = cache
		assetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Assets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Assets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in asset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all asset")
	}
	return rowsAff, nil
}

var mySQLAssetUniqueColumns = []string{
	"asset_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Asset) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Assets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAssetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetUpsertCacheMut.RLock()
	cache, cached := assetUpsertCache[key]
	assetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetColumns,
			assetColumnsWithDefault,
			assetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetColumns,
			assetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Assets, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Assets", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Assets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetType, assetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Assets")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(assetType, assetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Assets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Assets")
	}

CacheNoHooks:
	if !cached {
		assetUpsertCacheMut.Lock()
		assetUpsertCache[key] = cache
		assetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Asset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Asset) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Asset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetPrimaryKeyMapping)
	sql := "DELETE FROM `Assets` WHERE `asset_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Assets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Assets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Asset slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(assetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Assets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Assets")
	}

	if len(assetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Asset) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAsset(ctx, exec, o.AssetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Assets`.* FROM `Assets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssetSlice")
	}

	*o = slice

	return nil
}

// AssetExists checks if the Asset row exists.
func AssetExists(ctx context.Context, exec boil.ContextExecutor, assetID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Assets` where `asset_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, assetID)
	}

	row := exec.QueryRowContext(ctx, sql, assetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Assets exists")
	}

	return exists, nil
}
