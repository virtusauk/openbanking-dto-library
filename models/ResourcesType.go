// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ResourcesType is an object representing the database table.
type ResourcesType struct {
	ResourceTypeID int    `boil:"Resource_type_id" json:"Resource_type_id" toml:"Resource_type_id" yaml:"Resource_type_id"`
	Description    string `boil:"description" json:"description" toml:"description" yaml:"description"`
	Enabled        string `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`

	R *resourcesTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L resourcesTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ResourcesTypeColumns = struct {
	ResourceTypeID string
	Description    string
	Enabled        string
}{
	ResourceTypeID: "Resource_type_id",
	Description:    "description",
	Enabled:        "enabled",
}

// Generated where

var ResourcesTypeWhere = struct {
	ResourceTypeID whereHelperint
	Description    whereHelperstring
	Enabled        whereHelperstring
}{
	ResourceTypeID: whereHelperint{field: `Resource_type_id`},
	Description:    whereHelperstring{field: `description`},
	Enabled:        whereHelperstring{field: `enabled`},
}

// ResourcesTypeRels is where relationship names are stored.
var ResourcesTypeRels = struct {
	ResourceTypeResources string
}{
	ResourceTypeResources: "ResourceTypeResources",
}

// resourcesTypeR is where relationships are stored.
type resourcesTypeR struct {
	ResourceTypeResources ResourceSlice
}

// NewStruct creates a new relationship struct
func (*resourcesTypeR) NewStruct() *resourcesTypeR {
	return &resourcesTypeR{}
}

// resourcesTypeL is where Load methods for each relationship are stored.
type resourcesTypeL struct{}

var (
	resourcesTypeColumns               = []string{"Resource_type_id", "description", "enabled"}
	resourcesTypeColumnsWithoutDefault = []string{"Resource_type_id", "description", "enabled"}
	resourcesTypeColumnsWithDefault    = []string{}
	resourcesTypePrimaryKeyColumns     = []string{"Resource_type_id"}
)

type (
	// ResourcesTypeSlice is an alias for a slice of pointers to ResourcesType.
	// This should generally be used opposed to []ResourcesType.
	ResourcesTypeSlice []*ResourcesType
	// ResourcesTypeHook is the signature for custom ResourcesType hook methods
	ResourcesTypeHook func(context.Context, boil.ContextExecutor, *ResourcesType) error

	resourcesTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	resourcesTypeType                 = reflect.TypeOf(&ResourcesType{})
	resourcesTypeMapping              = queries.MakeStructMapping(resourcesTypeType)
	resourcesTypePrimaryKeyMapping, _ = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, resourcesTypePrimaryKeyColumns)
	resourcesTypeInsertCacheMut       sync.RWMutex
	resourcesTypeInsertCache          = make(map[string]insertCache)
	resourcesTypeUpdateCacheMut       sync.RWMutex
	resourcesTypeUpdateCache          = make(map[string]updateCache)
	resourcesTypeUpsertCacheMut       sync.RWMutex
	resourcesTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var resourcesTypeBeforeInsertHooks []ResourcesTypeHook
var resourcesTypeBeforeUpdateHooks []ResourcesTypeHook
var resourcesTypeBeforeDeleteHooks []ResourcesTypeHook
var resourcesTypeBeforeUpsertHooks []ResourcesTypeHook

var resourcesTypeAfterInsertHooks []ResourcesTypeHook
var resourcesTypeAfterSelectHooks []ResourcesTypeHook
var resourcesTypeAfterUpdateHooks []ResourcesTypeHook
var resourcesTypeAfterDeleteHooks []ResourcesTypeHook
var resourcesTypeAfterUpsertHooks []ResourcesTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ResourcesType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ResourcesType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ResourcesType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ResourcesType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ResourcesType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ResourcesType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ResourcesType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ResourcesType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ResourcesType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resourcesTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResourcesTypeHook registers your hook function for all future operations.
func AddResourcesTypeHook(hookPoint boil.HookPoint, resourcesTypeHook ResourcesTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		resourcesTypeBeforeInsertHooks = append(resourcesTypeBeforeInsertHooks, resourcesTypeHook)
	case boil.BeforeUpdateHook:
		resourcesTypeBeforeUpdateHooks = append(resourcesTypeBeforeUpdateHooks, resourcesTypeHook)
	case boil.BeforeDeleteHook:
		resourcesTypeBeforeDeleteHooks = append(resourcesTypeBeforeDeleteHooks, resourcesTypeHook)
	case boil.BeforeUpsertHook:
		resourcesTypeBeforeUpsertHooks = append(resourcesTypeBeforeUpsertHooks, resourcesTypeHook)
	case boil.AfterInsertHook:
		resourcesTypeAfterInsertHooks = append(resourcesTypeAfterInsertHooks, resourcesTypeHook)
	case boil.AfterSelectHook:
		resourcesTypeAfterSelectHooks = append(resourcesTypeAfterSelectHooks, resourcesTypeHook)
	case boil.AfterUpdateHook:
		resourcesTypeAfterUpdateHooks = append(resourcesTypeAfterUpdateHooks, resourcesTypeHook)
	case boil.AfterDeleteHook:
		resourcesTypeAfterDeleteHooks = append(resourcesTypeAfterDeleteHooks, resourcesTypeHook)
	case boil.AfterUpsertHook:
		resourcesTypeAfterUpsertHooks = append(resourcesTypeAfterUpsertHooks, resourcesTypeHook)
	}
}

// One returns a single resourcesType record from the query.
func (q resourcesTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ResourcesType, error) {
	o := &ResourcesType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ResourcesType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ResourcesType records from the query.
func (q resourcesTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (ResourcesTypeSlice, error) {
	var o []*ResourcesType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ResourcesType slice")
	}

	if len(resourcesTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ResourcesType records in the query.
func (q resourcesTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ResourcesType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q resourcesTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ResourcesType exists")
	}

	return count > 0, nil
}

// ResourceTypeResources retrieves all the Resource's Resources with an executor via resource_type_id column.
func (o *ResourcesType) ResourceTypeResources(mods ...qm.QueryMod) resourceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Resources`.`resource_type_id`=?", o.ResourceTypeID),
	)

	query := Resources(queryMods...)
	queries.SetFrom(query.Query, "`Resources`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Resources`.*"})
	}

	return query
}

// LoadResourceTypeResources allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (resourcesTypeL) LoadResourceTypeResources(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResourcesType interface{}, mods queries.Applicator) error {
	var slice []*ResourcesType
	var object *ResourcesType

	if singular {
		object = maybeResourcesType.(*ResourcesType)
	} else {
		slice = *maybeResourcesType.(*[]*ResourcesType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &resourcesTypeR{}
		}
		args = append(args, object.ResourceTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resourcesTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ResourceTypeID) {
					continue Outer
				}
			}

			args = append(args, obj.ResourceTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Resources`), qm.WhereIn(`resource_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Resources")
	}

	var resultSlice []*Resource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Resources")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Resources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Resources")
	}

	if len(resourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResourceTypeResources = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &resourceR{}
			}
			foreign.R.ResourceType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ResourceTypeID, foreign.ResourceTypeID) {
				local.R.ResourceTypeResources = append(local.R.ResourceTypeResources, foreign)
				if foreign.R == nil {
					foreign.R = &resourceR{}
				}
				foreign.R.ResourceType = local
				break
			}
		}
	}

	return nil
}

// AddResourceTypeResources adds the given related objects to the existing relationships
// of the ResourcesType, optionally inserting them as new records.
// Appends related to o.R.ResourceTypeResources.
// Sets related.R.ResourceType appropriately.
func (o *ResourcesType) AddResourceTypeResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Resource) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ResourceTypeID, o.ResourceTypeID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Resources` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"resource_type_id"}),
				strmangle.WhereClause("`", "`", 0, resourcePrimaryKeyColumns),
			)
			values := []interface{}{o.ResourceTypeID, rel.ResourceID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ResourceTypeID, o.ResourceTypeID)
		}
	}

	if o.R == nil {
		o.R = &resourcesTypeR{
			ResourceTypeResources: related,
		}
	} else {
		o.R.ResourceTypeResources = append(o.R.ResourceTypeResources, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &resourceR{
				ResourceType: o,
			}
		} else {
			rel.R.ResourceType = o
		}
	}
	return nil
}

// SetResourceTypeResources removes all previously related items of the
// ResourcesType replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ResourceType's ResourceTypeResources accordingly.
// Replaces o.R.ResourceTypeResources with related.
// Sets related.R.ResourceType's ResourceTypeResources accordingly.
func (o *ResourcesType) SetResourceTypeResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Resource) error {
	query := "update `Resources` set `resource_type_id` = null where `resource_type_id` = ?"
	values := []interface{}{o.ResourceTypeID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ResourceTypeResources {
			queries.SetScanner(&rel.ResourceTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ResourceType = nil
		}

		o.R.ResourceTypeResources = nil
	}
	return o.AddResourceTypeResources(ctx, exec, insert, related...)
}

// RemoveResourceTypeResources relationships from objects passed in.
// Removes related items from R.ResourceTypeResources (uses pointer comparison, removal does not keep order)
// Sets related.R.ResourceType.
func (o *ResourcesType) RemoveResourceTypeResources(ctx context.Context, exec boil.ContextExecutor, related ...*Resource) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ResourceTypeID, nil)
		if rel.R != nil {
			rel.R.ResourceType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("resource_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ResourceTypeResources {
			if rel != ri {
				continue
			}

			ln := len(o.R.ResourceTypeResources)
			if ln > 1 && i < ln-1 {
				o.R.ResourceTypeResources[i] = o.R.ResourceTypeResources[ln-1]
			}
			o.R.ResourceTypeResources = o.R.ResourceTypeResources[:ln-1]
			break
		}
	}

	return nil
}

// ResourcesTypes retrieves all the records using an executor.
func ResourcesTypes(mods ...qm.QueryMod) resourcesTypeQuery {
	mods = append(mods, qm.From("`ResourcesType`"))
	return resourcesTypeQuery{NewQuery(mods...)}
}

// FindResourcesType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResourcesType(ctx context.Context, exec boil.ContextExecutor, resourceTypeID int, selectCols ...string) (*ResourcesType, error) {
	resourcesTypeObj := &ResourcesType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ResourcesType` where `Resource_type_id`=?", sel,
	)

	q := queries.Raw(query, resourceTypeID)

	err := q.Bind(ctx, exec, resourcesTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ResourcesType")
	}

	return resourcesTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ResourcesType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ResourcesType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resourcesTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	resourcesTypeInsertCacheMut.RLock()
	cache, cached := resourcesTypeInsertCache[key]
	resourcesTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			resourcesTypeColumns,
			resourcesTypeColumnsWithDefault,
			resourcesTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ResourcesType` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ResourcesType` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ResourcesType` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, resourcesTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ResourcesType")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ResourceTypeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ResourcesType")
	}

CacheNoHooks:
	if !cached {
		resourcesTypeInsertCacheMut.Lock()
		resourcesTypeInsertCache[key] = cache
		resourcesTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ResourcesType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ResourcesType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	resourcesTypeUpdateCacheMut.RLock()
	cache, cached := resourcesTypeUpdateCache[key]
	resourcesTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			resourcesTypeColumns,
			resourcesTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ResourcesType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ResourcesType` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, resourcesTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, append(wl, resourcesTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ResourcesType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ResourcesType")
	}

	if !cached {
		resourcesTypeUpdateCacheMut.Lock()
		resourcesTypeUpdateCache[key] = cache
		resourcesTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q resourcesTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ResourcesType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ResourcesType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResourcesTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resourcesTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ResourcesType` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resourcesTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in resourcesType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all resourcesType")
	}
	return rowsAff, nil
}

var mySQLResourcesTypeUniqueColumns = []string{
	"Resource_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ResourcesType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ResourcesType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resourcesTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLResourcesTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	resourcesTypeUpsertCacheMut.RLock()
	cache, cached := resourcesTypeUpsertCache[key]
	resourcesTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			resourcesTypeColumns,
			resourcesTypeColumnsWithDefault,
			resourcesTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			resourcesTypeColumns,
			resourcesTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ResourcesType, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ResourcesType", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ResourcesType` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ResourcesType")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(resourcesTypeType, resourcesTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ResourcesType")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ResourcesType")
	}

CacheNoHooks:
	if !cached {
		resourcesTypeUpsertCacheMut.Lock()
		resourcesTypeUpsertCache[key] = cache
		resourcesTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ResourcesType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ResourcesType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ResourcesType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), resourcesTypePrimaryKeyMapping)
	sql := "DELETE FROM `ResourcesType` WHERE `Resource_type_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ResourcesType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ResourcesType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q resourcesTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no resourcesTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ResourcesType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ResourcesType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResourcesTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ResourcesType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(resourcesTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resourcesTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ResourcesType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resourcesTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from resourcesType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ResourcesType")
	}

	if len(resourcesTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ResourcesType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindResourcesType(ctx, exec, o.ResourceTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResourcesTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ResourcesTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resourcesTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ResourcesType`.* FROM `ResourcesType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, resourcesTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResourcesTypeSlice")
	}

	*o = slice

	return nil
}

// ResourcesTypeExists checks if the ResourcesType row exists.
func ResourcesTypeExists(ctx context.Context, exec boil.ContextExecutor, resourceTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ResourcesType` where `Resource_type_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, resourceTypeID)
	}

	row := exec.QueryRowContext(ctx, sql, resourceTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ResourcesType exists")
	}

	return exists, nil
}
