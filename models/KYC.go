// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// KYC is an object representing the database table.
type KYC struct {
	KycNumber                          int               `boil:"kyc_number" json:"kyc_number" toml:"kyc_number" yaml:"kyc_number"`
	KycType                            string            `boil:"kyc_type" json:"kyc_type" toml:"kyc_type" yaml:"kyc_type"`
	KycProcessStatus                   string            `boil:"kyc_process_status" json:"kyc_process_status" toml:"kyc_process_status" yaml:"kyc_process_status"`
	BankID                             int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	SSN                                null.String       `boil:"ssn" json:"ssn,omitempty" toml:"ssn" yaml:"ssn,omitempty"`
	Sex                                string            `boil:"sex" json:"sex" toml:"sex" yaml:"sex"`
	Forenames                          string            `boil:"forenames" json:"forenames" toml:"forenames" yaml:"forenames"`
	Middlename                         null.String       `boil:"middlename" json:"middlename,omitempty" toml:"middlename" yaml:"middlename,omitempty"`
	Lastname                           string            `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Title                              string            `boil:"title" json:"title" toml:"title" yaml:"title"`
	Dob                                time.Time         `boil:"dob" json:"dob" toml:"dob" yaml:"dob"`
	MaritalStatus                      string            `boil:"marital_status" json:"marital_status" toml:"marital_status" yaml:"marital_status"`
	SpouseName                         null.String       `boil:"spouse_name" json:"spouse_name,omitempty" toml:"spouse_name" yaml:"spouse_name,omitempty"`
	Nationality                        string            `boil:"nationality" json:"nationality" toml:"nationality" yaml:"nationality"`
	ResidenceCountry                   string            `boil:"residence_country" json:"residence_country" toml:"residence_country" yaml:"residence_country"`
	TaxResidenceCountry                null.String       `boil:"tax_residence_country" json:"tax_residence_country,omitempty" toml:"tax_residence_country" yaml:"tax_residence_country,omitempty"`
	TaxRefNoResidenceCountry           null.String       `boil:"tax_ref_no_residence_country" json:"tax_ref_no_residence_country,omitempty" toml:"tax_ref_no_residence_country" yaml:"tax_ref_no_residence_country,omitempty"`
	BirthPlace                         string            `boil:"birth_place" json:"birth_place" toml:"birth_place" yaml:"birth_place"`
	CountryCodeOfBirth                 string            `boil:"country_code_of_birth" json:"country_code_of_birth" toml:"country_code_of_birth" yaml:"country_code_of_birth"`
	MotherMaidenName                   string            `boil:"mother_maiden_name" json:"mother_maiden_name" toml:"mother_maiden_name" yaml:"mother_maiden_name"`
	EducationLevel                     string            `boil:"education_level" json:"education_level" toml:"education_level" yaml:"education_level"`
	HeadOfHouseHoldInd                 string            `boil:"head_of_house_hold_ind" json:"head_of_house_hold_ind" toml:"head_of_house_hold_ind" yaml:"head_of_house_hold_ind"`
	EmploymentStatus                   string            `boil:"employment_status" json:"employment_status" toml:"employment_status" yaml:"employment_status"`
	CurrentEmploymentStartDate         null.Time         `boil:"current_employment_start_date" json:"current_employment_start_date,omitempty" toml:"current_employment_start_date" yaml:"current_employment_start_date,omitempty"`
	JobTitle                           null.String       `boil:"job_title" json:"job_title,omitempty" toml:"job_title" yaml:"job_title,omitempty"`
	Job                                null.String       `boil:"job" json:"job,omitempty" toml:"job" yaml:"job,omitempty"`
	HomeOwnership                      null.String       `boil:"home_ownership" json:"home_ownership,omitempty" toml:"home_ownership" yaml:"home_ownership,omitempty"`
	AnnualIncome                       types.NullDecimal `boil:"annual_income" json:"annual_income,omitempty" toml:"annual_income" yaml:"annual_income,omitempty"`
	NetWorth                           types.NullDecimal `boil:"net_worth" json:"net_worth,omitempty" toml:"net_worth" yaml:"net_worth,omitempty"`
	TaxExempt                          null.String       `boil:"tax_exempt" json:"tax_exempt,omitempty" toml:"tax_exempt" yaml:"tax_exempt,omitempty"`
	ProofOfIdentityType                string            `boil:"proof_of_identity_type" json:"proof_of_identity_type" toml:"proof_of_identity_type" yaml:"proof_of_identity_type"`
	ProofOfIdentityIssuer              string            `boil:"proof_of_identity_issuer" json:"proof_of_identity_issuer" toml:"proof_of_identity_issuer" yaml:"proof_of_identity_issuer"`
	ProofOfIdentityNumber              string            `boil:"proof_of_identity_number" json:"proof_of_identity_number" toml:"proof_of_identity_number" yaml:"proof_of_identity_number"`
	ProofOfIdentityExpiryDate          time.Time         `boil:"proof_of_identity_expiry_date" json:"proof_of_identity_expiry_date" toml:"proof_of_identity_expiry_date" yaml:"proof_of_identity_expiry_date"`
	ProofOfIdentityVerified            string            `boil:"proof_of_identity_verified" json:"proof_of_identity_verified" toml:"proof_of_identity_verified" yaml:"proof_of_identity_verified"`
	ProofOfIdentityDocumentID          int               `boil:"proof_of_identity_document_id" json:"proof_of_identity_document_id" toml:"proof_of_identity_document_id" yaml:"proof_of_identity_document_id"`
	ProofOfAddressType                 string            `boil:"proof_of_address_type" json:"proof_of_address_type" toml:"proof_of_address_type" yaml:"proof_of_address_type"`
	ProofOfAddressVerified             string            `boil:"proof_of_address_verified" json:"proof_of_address_verified" toml:"proof_of_address_verified" yaml:"proof_of_address_verified"`
	ProofOfAddressDocumentID           int               `boil:"proof_of_address_document_id" json:"proof_of_address_document_id" toml:"proof_of_address_document_id" yaml:"proof_of_address_document_id"`
	ProofOfAddressAddressline1         string            `boil:"proof_of_address_addressline1" json:"proof_of_address_addressline1" toml:"proof_of_address_addressline1" yaml:"proof_of_address_addressline1"`
	ProofOfAddressAddressline2         string            `boil:"proof_of_address_addressline2" json:"proof_of_address_addressline2" toml:"proof_of_address_addressline2" yaml:"proof_of_address_addressline2"`
	ProofOfAddressAddressline3         null.String       `boil:"proof_of_address_addressline3" json:"proof_of_address_addressline3,omitempty" toml:"proof_of_address_addressline3" yaml:"proof_of_address_addressline3,omitempty"`
	ProofOfAddressAddressline4         null.String       `boil:"proof_of_address_addressline4" json:"proof_of_address_addressline4,omitempty" toml:"proof_of_address_addressline4" yaml:"proof_of_address_addressline4,omitempty"`
	ProofOfAddressAddressline5         null.String       `boil:"proof_of_address_addressline5" json:"proof_of_address_addressline5,omitempty" toml:"proof_of_address_addressline5" yaml:"proof_of_address_addressline5,omitempty"`
	ProofOfAddressAddressline6         null.String       `boil:"proof_of_address_addressline6" json:"proof_of_address_addressline6,omitempty" toml:"proof_of_address_addressline6" yaml:"proof_of_address_addressline6,omitempty"`
	ProofOfAddressPostcode             string            `boil:"proof_of_address_postcode" json:"proof_of_address_postcode" toml:"proof_of_address_postcode" yaml:"proof_of_address_postcode"`
	ProofOfAddressCountryCode          null.String       `boil:"proof_of_address_country_code" json:"proof_of_address_country_code,omitempty" toml:"proof_of_address_country_code" yaml:"proof_of_address_country_code,omitempty"`
	ProofOfAddressCity                 null.String       `boil:"proof_of_address_city" json:"proof_of_address_city,omitempty" toml:"proof_of_address_city" yaml:"proof_of_address_city,omitempty"`
	ProofOfAddressRegion               null.String       `boil:"proof_of_address_region" json:"proof_of_address_region,omitempty" toml:"proof_of_address_region" yaml:"proof_of_address_region,omitempty"`
	CorrespondenceSameAsProofOfAddress string            `boil:"correspondence_same_as_proof_of_address" json:"correspondence_same_as_proof_of_address" toml:"correspondence_same_as_proof_of_address" yaml:"correspondence_same_as_proof_of_address"`
	CorrespondenceAddressline1         null.String       `boil:"correspondence_addressline1" json:"correspondence_addressline1,omitempty" toml:"correspondence_addressline1" yaml:"correspondence_addressline1,omitempty"`
	CorrespondenceAddressline2         null.String       `boil:"correspondence_addressline2" json:"correspondence_addressline2,omitempty" toml:"correspondence_addressline2" yaml:"correspondence_addressline2,omitempty"`
	CorrespondenceAddressline3         null.String       `boil:"correspondence_addressline3" json:"correspondence_addressline3,omitempty" toml:"correspondence_addressline3" yaml:"correspondence_addressline3,omitempty"`
	CorrespondenceAddressline4         null.String       `boil:"correspondence_addressline4" json:"correspondence_addressline4,omitempty" toml:"correspondence_addressline4" yaml:"correspondence_addressline4,omitempty"`
	CorrespondenceAddressline5         null.String       `boil:"correspondence_addressline5" json:"correspondence_addressline5,omitempty" toml:"correspondence_addressline5" yaml:"correspondence_addressline5,omitempty"`
	CorrespondenceAddressline6         null.String       `boil:"correspondence_addressline6" json:"correspondence_addressline6,omitempty" toml:"correspondence_addressline6" yaml:"correspondence_addressline6,omitempty"`
	CorrespondencePostcode             null.String       `boil:"correspondence_postcode" json:"correspondence_postcode,omitempty" toml:"correspondence_postcode" yaml:"correspondence_postcode,omitempty"`
	CorrespondenceCountryCode          null.String       `boil:"correspondence_country_code" json:"correspondence_country_code,omitempty" toml:"correspondence_country_code" yaml:"correspondence_country_code,omitempty"`
	CorrespondenceCity                 null.String       `boil:"correspondence_city" json:"correspondence_city,omitempty" toml:"correspondence_city" yaml:"correspondence_city,omitempty"`
	CorrespondenceRegion               null.String       `boil:"correspondence_region" json:"correspondence_region,omitempty" toml:"correspondence_region" yaml:"correspondence_region,omitempty"`
	ContactTel                         null.String       `boil:"contact_tel" json:"contact_tel,omitempty" toml:"contact_tel" yaml:"contact_tel,omitempty"`
	ContactMobile                      null.String       `boil:"contact_mobile" json:"contact_mobile,omitempty" toml:"contact_mobile" yaml:"contact_mobile,omitempty"`
	ContactOfficeTel                   null.String       `boil:"contact_office_tel" json:"contact_office_tel,omitempty" toml:"contact_office_tel" yaml:"contact_office_tel,omitempty"`
	ContactFax                         null.String       `boil:"contact_fax" json:"contact_fax,omitempty" toml:"contact_fax" yaml:"contact_fax,omitempty"`
	ContactEmail                       null.String       `boil:"contact_email" json:"contact_email,omitempty" toml:"contact_email" yaml:"contact_email,omitempty"`
	RatingDate                         null.Time         `boil:"rating_date" json:"rating_date,omitempty" toml:"rating_date" yaml:"rating_date,omitempty"`
	CustomerRating                     null.String       `boil:"customer_rating" json:"customer_rating,omitempty" toml:"customer_rating" yaml:"customer_rating,omitempty"`
	CustomerRiskScore                  types.NullDecimal `boil:"customer_risk_score" json:"customer_risk_score,omitempty" toml:"customer_risk_score" yaml:"customer_risk_score,omitempty"`
	CustomerRiskScoreStatus            string            `boil:"customer_risk_score_status" json:"customer_risk_score_status" toml:"customer_risk_score_status" yaml:"customer_risk_score_status"`
	MakerDate                          time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                        null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                            string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                          null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                         null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                       null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *kYCR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kYCL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KYCColumns = struct {
	KycNumber                          string
	KycType                            string
	KycProcessStatus                   string
	BankID                             string
	SSN                                string
	Sex                                string
	Forenames                          string
	Middlename                         string
	Lastname                           string
	Title                              string
	Dob                                string
	MaritalStatus                      string
	SpouseName                         string
	Nationality                        string
	ResidenceCountry                   string
	TaxResidenceCountry                string
	TaxRefNoResidenceCountry           string
	BirthPlace                         string
	CountryCodeOfBirth                 string
	MotherMaidenName                   string
	EducationLevel                     string
	HeadOfHouseHoldInd                 string
	EmploymentStatus                   string
	CurrentEmploymentStartDate         string
	JobTitle                           string
	Job                                string
	HomeOwnership                      string
	AnnualIncome                       string
	NetWorth                           string
	TaxExempt                          string
	ProofOfIdentityType                string
	ProofOfIdentityIssuer              string
	ProofOfIdentityNumber              string
	ProofOfIdentityExpiryDate          string
	ProofOfIdentityVerified            string
	ProofOfIdentityDocumentID          string
	ProofOfAddressType                 string
	ProofOfAddressVerified             string
	ProofOfAddressDocumentID           string
	ProofOfAddressAddressline1         string
	ProofOfAddressAddressline2         string
	ProofOfAddressAddressline3         string
	ProofOfAddressAddressline4         string
	ProofOfAddressAddressline5         string
	ProofOfAddressAddressline6         string
	ProofOfAddressPostcode             string
	ProofOfAddressCountryCode          string
	ProofOfAddressCity                 string
	ProofOfAddressRegion               string
	CorrespondenceSameAsProofOfAddress string
	CorrespondenceAddressline1         string
	CorrespondenceAddressline2         string
	CorrespondenceAddressline3         string
	CorrespondenceAddressline4         string
	CorrespondenceAddressline5         string
	CorrespondenceAddressline6         string
	CorrespondencePostcode             string
	CorrespondenceCountryCode          string
	CorrespondenceCity                 string
	CorrespondenceRegion               string
	ContactTel                         string
	ContactMobile                      string
	ContactOfficeTel                   string
	ContactFax                         string
	ContactEmail                       string
	RatingDate                         string
	CustomerRating                     string
	CustomerRiskScore                  string
	CustomerRiskScoreStatus            string
	MakerDate                          string
	CheckerDate                        string
	MakerID                            string
	CheckerID                          string
	ModifiedBy                         string
	ModifiedDate                       string
}{
	KycNumber:                          "kyc_number",
	KycType:                            "kyc_type",
	KycProcessStatus:                   "kyc_process_status",
	BankID:                             "bank_id",
	SSN:                                "ssn",
	Sex:                                "sex",
	Forenames:                          "forenames",
	Middlename:                         "middlename",
	Lastname:                           "lastname",
	Title:                              "title",
	Dob:                                "dob",
	MaritalStatus:                      "marital_status",
	SpouseName:                         "spouse_name",
	Nationality:                        "nationality",
	ResidenceCountry:                   "residence_country",
	TaxResidenceCountry:                "tax_residence_country",
	TaxRefNoResidenceCountry:           "tax_ref_no_residence_country",
	BirthPlace:                         "birth_place",
	CountryCodeOfBirth:                 "country_code_of_birth",
	MotherMaidenName:                   "mother_maiden_name",
	EducationLevel:                     "education_level",
	HeadOfHouseHoldInd:                 "head_of_house_hold_ind",
	EmploymentStatus:                   "employment_status",
	CurrentEmploymentStartDate:         "current_employment_start_date",
	JobTitle:                           "job_title",
	Job:                                "job",
	HomeOwnership:                      "home_ownership",
	AnnualIncome:                       "annual_income",
	NetWorth:                           "net_worth",
	TaxExempt:                          "tax_exempt",
	ProofOfIdentityType:                "proof_of_identity_type",
	ProofOfIdentityIssuer:              "proof_of_identity_issuer",
	ProofOfIdentityNumber:              "proof_of_identity_number",
	ProofOfIdentityExpiryDate:          "proof_of_identity_expiry_date",
	ProofOfIdentityVerified:            "proof_of_identity_verified",
	ProofOfIdentityDocumentID:          "proof_of_identity_document_id",
	ProofOfAddressType:                 "proof_of_address_type",
	ProofOfAddressVerified:             "proof_of_address_verified",
	ProofOfAddressDocumentID:           "proof_of_address_document_id",
	ProofOfAddressAddressline1:         "proof_of_address_addressline1",
	ProofOfAddressAddressline2:         "proof_of_address_addressline2",
	ProofOfAddressAddressline3:         "proof_of_address_addressline3",
	ProofOfAddressAddressline4:         "proof_of_address_addressline4",
	ProofOfAddressAddressline5:         "proof_of_address_addressline5",
	ProofOfAddressAddressline6:         "proof_of_address_addressline6",
	ProofOfAddressPostcode:             "proof_of_address_postcode",
	ProofOfAddressCountryCode:          "proof_of_address_country_code",
	ProofOfAddressCity:                 "proof_of_address_city",
	ProofOfAddressRegion:               "proof_of_address_region",
	CorrespondenceSameAsProofOfAddress: "correspondence_same_as_proof_of_address",
	CorrespondenceAddressline1:         "correspondence_addressline1",
	CorrespondenceAddressline2:         "correspondence_addressline2",
	CorrespondenceAddressline3:         "correspondence_addressline3",
	CorrespondenceAddressline4:         "correspondence_addressline4",
	CorrespondenceAddressline5:         "correspondence_addressline5",
	CorrespondenceAddressline6:         "correspondence_addressline6",
	CorrespondencePostcode:             "correspondence_postcode",
	CorrespondenceCountryCode:          "correspondence_country_code",
	CorrespondenceCity:                 "correspondence_city",
	CorrespondenceRegion:               "correspondence_region",
	ContactTel:                         "contact_tel",
	ContactMobile:                      "contact_mobile",
	ContactOfficeTel:                   "contact_office_tel",
	ContactFax:                         "contact_fax",
	ContactEmail:                       "contact_email",
	RatingDate:                         "rating_date",
	CustomerRating:                     "customer_rating",
	CustomerRiskScore:                  "customer_risk_score",
	CustomerRiskScoreStatus:            "customer_risk_score_status",
	MakerDate:                          "maker_date",
	CheckerDate:                        "checker_date",
	MakerID:                            "maker_id",
	CheckerID:                          "checker_id",
	ModifiedBy:                         "modified_by",
	ModifiedDate:                       "modified_date",
}

// Generated where

var KYCWhere = struct {
	KycNumber                          whereHelperint
	KycType                            whereHelperstring
	KycProcessStatus                   whereHelperstring
	BankID                             whereHelperint
	SSN                                whereHelpernull_String
	Sex                                whereHelperstring
	Forenames                          whereHelperstring
	Middlename                         whereHelpernull_String
	Lastname                           whereHelperstring
	Title                              whereHelperstring
	Dob                                whereHelpertime_Time
	MaritalStatus                      whereHelperstring
	SpouseName                         whereHelpernull_String
	Nationality                        whereHelperstring
	ResidenceCountry                   whereHelperstring
	TaxResidenceCountry                whereHelpernull_String
	TaxRefNoResidenceCountry           whereHelpernull_String
	BirthPlace                         whereHelperstring
	CountryCodeOfBirth                 whereHelperstring
	MotherMaidenName                   whereHelperstring
	EducationLevel                     whereHelperstring
	HeadOfHouseHoldInd                 whereHelperstring
	EmploymentStatus                   whereHelperstring
	CurrentEmploymentStartDate         whereHelpernull_Time
	JobTitle                           whereHelpernull_String
	Job                                whereHelpernull_String
	HomeOwnership                      whereHelpernull_String
	AnnualIncome                       whereHelpertypes_NullDecimal
	NetWorth                           whereHelpertypes_NullDecimal
	TaxExempt                          whereHelpernull_String
	ProofOfIdentityType                whereHelperstring
	ProofOfIdentityIssuer              whereHelperstring
	ProofOfIdentityNumber              whereHelperstring
	ProofOfIdentityExpiryDate          whereHelpertime_Time
	ProofOfIdentityVerified            whereHelperstring
	ProofOfIdentityDocumentID          whereHelperint
	ProofOfAddressType                 whereHelperstring
	ProofOfAddressVerified             whereHelperstring
	ProofOfAddressDocumentID           whereHelperint
	ProofOfAddressAddressline1         whereHelperstring
	ProofOfAddressAddressline2         whereHelperstring
	ProofOfAddressAddressline3         whereHelpernull_String
	ProofOfAddressAddressline4         whereHelpernull_String
	ProofOfAddressAddressline5         whereHelpernull_String
	ProofOfAddressAddressline6         whereHelpernull_String
	ProofOfAddressPostcode             whereHelperstring
	ProofOfAddressCountryCode          whereHelpernull_String
	ProofOfAddressCity                 whereHelpernull_String
	ProofOfAddressRegion               whereHelpernull_String
	CorrespondenceSameAsProofOfAddress whereHelperstring
	CorrespondenceAddressline1         whereHelpernull_String
	CorrespondenceAddressline2         whereHelpernull_String
	CorrespondenceAddressline3         whereHelpernull_String
	CorrespondenceAddressline4         whereHelpernull_String
	CorrespondenceAddressline5         whereHelpernull_String
	CorrespondenceAddressline6         whereHelpernull_String
	CorrespondencePostcode             whereHelpernull_String
	CorrespondenceCountryCode          whereHelpernull_String
	CorrespondenceCity                 whereHelpernull_String
	CorrespondenceRegion               whereHelpernull_String
	ContactTel                         whereHelpernull_String
	ContactMobile                      whereHelpernull_String
	ContactOfficeTel                   whereHelpernull_String
	ContactFax                         whereHelpernull_String
	ContactEmail                       whereHelpernull_String
	RatingDate                         whereHelpernull_Time
	CustomerRating                     whereHelpernull_String
	CustomerRiskScore                  whereHelpertypes_NullDecimal
	CustomerRiskScoreStatus            whereHelperstring
	MakerDate                          whereHelpertime_Time
	CheckerDate                        whereHelpernull_Time
	MakerID                            whereHelperstring
	CheckerID                          whereHelpernull_String
	ModifiedBy                         whereHelpernull_String
	ModifiedDate                       whereHelpernull_Time
}{
	KycNumber:                          whereHelperint{field: `kyc_number`},
	KycType:                            whereHelperstring{field: `kyc_type`},
	KycProcessStatus:                   whereHelperstring{field: `kyc_process_status`},
	BankID:                             whereHelperint{field: `bank_id`},
	SSN:                                whereHelpernull_String{field: `ssn`},
	Sex:                                whereHelperstring{field: `sex`},
	Forenames:                          whereHelperstring{field: `forenames`},
	Middlename:                         whereHelpernull_String{field: `middlename`},
	Lastname:                           whereHelperstring{field: `lastname`},
	Title:                              whereHelperstring{field: `title`},
	Dob:                                whereHelpertime_Time{field: `dob`},
	MaritalStatus:                      whereHelperstring{field: `marital_status`},
	SpouseName:                         whereHelpernull_String{field: `spouse_name`},
	Nationality:                        whereHelperstring{field: `nationality`},
	ResidenceCountry:                   whereHelperstring{field: `residence_country`},
	TaxResidenceCountry:                whereHelpernull_String{field: `tax_residence_country`},
	TaxRefNoResidenceCountry:           whereHelpernull_String{field: `tax_ref_no_residence_country`},
	BirthPlace:                         whereHelperstring{field: `birth_place`},
	CountryCodeOfBirth:                 whereHelperstring{field: `country_code_of_birth`},
	MotherMaidenName:                   whereHelperstring{field: `mother_maiden_name`},
	EducationLevel:                     whereHelperstring{field: `education_level`},
	HeadOfHouseHoldInd:                 whereHelperstring{field: `head_of_house_hold_ind`},
	EmploymentStatus:                   whereHelperstring{field: `employment_status`},
	CurrentEmploymentStartDate:         whereHelpernull_Time{field: `current_employment_start_date`},
	JobTitle:                           whereHelpernull_String{field: `job_title`},
	Job:                                whereHelpernull_String{field: `job`},
	HomeOwnership:                      whereHelpernull_String{field: `home_ownership`},
	AnnualIncome:                       whereHelpertypes_NullDecimal{field: `annual_income`},
	NetWorth:                           whereHelpertypes_NullDecimal{field: `net_worth`},
	TaxExempt:                          whereHelpernull_String{field: `tax_exempt`},
	ProofOfIdentityType:                whereHelperstring{field: `proof_of_identity_type`},
	ProofOfIdentityIssuer:              whereHelperstring{field: `proof_of_identity_issuer`},
	ProofOfIdentityNumber:              whereHelperstring{field: `proof_of_identity_number`},
	ProofOfIdentityExpiryDate:          whereHelpertime_Time{field: `proof_of_identity_expiry_date`},
	ProofOfIdentityVerified:            whereHelperstring{field: `proof_of_identity_verified`},
	ProofOfIdentityDocumentID:          whereHelperint{field: `proof_of_identity_document_id`},
	ProofOfAddressType:                 whereHelperstring{field: `proof_of_address_type`},
	ProofOfAddressVerified:             whereHelperstring{field: `proof_of_address_verified`},
	ProofOfAddressDocumentID:           whereHelperint{field: `proof_of_address_document_id`},
	ProofOfAddressAddressline1:         whereHelperstring{field: `proof_of_address_addressline1`},
	ProofOfAddressAddressline2:         whereHelperstring{field: `proof_of_address_addressline2`},
	ProofOfAddressAddressline3:         whereHelpernull_String{field: `proof_of_address_addressline3`},
	ProofOfAddressAddressline4:         whereHelpernull_String{field: `proof_of_address_addressline4`},
	ProofOfAddressAddressline5:         whereHelpernull_String{field: `proof_of_address_addressline5`},
	ProofOfAddressAddressline6:         whereHelpernull_String{field: `proof_of_address_addressline6`},
	ProofOfAddressPostcode:             whereHelperstring{field: `proof_of_address_postcode`},
	ProofOfAddressCountryCode:          whereHelpernull_String{field: `proof_of_address_country_code`},
	ProofOfAddressCity:                 whereHelpernull_String{field: `proof_of_address_city`},
	ProofOfAddressRegion:               whereHelpernull_String{field: `proof_of_address_region`},
	CorrespondenceSameAsProofOfAddress: whereHelperstring{field: `correspondence_same_as_proof_of_address`},
	CorrespondenceAddressline1:         whereHelpernull_String{field: `correspondence_addressline1`},
	CorrespondenceAddressline2:         whereHelpernull_String{field: `correspondence_addressline2`},
	CorrespondenceAddressline3:         whereHelpernull_String{field: `correspondence_addressline3`},
	CorrespondenceAddressline4:         whereHelpernull_String{field: `correspondence_addressline4`},
	CorrespondenceAddressline5:         whereHelpernull_String{field: `correspondence_addressline5`},
	CorrespondenceAddressline6:         whereHelpernull_String{field: `correspondence_addressline6`},
	CorrespondencePostcode:             whereHelpernull_String{field: `correspondence_postcode`},
	CorrespondenceCountryCode:          whereHelpernull_String{field: `correspondence_country_code`},
	CorrespondenceCity:                 whereHelpernull_String{field: `correspondence_city`},
	CorrespondenceRegion:               whereHelpernull_String{field: `correspondence_region`},
	ContactTel:                         whereHelpernull_String{field: `contact_tel`},
	ContactMobile:                      whereHelpernull_String{field: `contact_mobile`},
	ContactOfficeTel:                   whereHelpernull_String{field: `contact_office_tel`},
	ContactFax:                         whereHelpernull_String{field: `contact_fax`},
	ContactEmail:                       whereHelpernull_String{field: `contact_email`},
	RatingDate:                         whereHelpernull_Time{field: `rating_date`},
	CustomerRating:                     whereHelpernull_String{field: `customer_rating`},
	CustomerRiskScore:                  whereHelpertypes_NullDecimal{field: `customer_risk_score`},
	CustomerRiskScoreStatus:            whereHelperstring{field: `customer_risk_score_status`},
	MakerDate:                          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                        whereHelpernull_Time{field: `checker_date`},
	MakerID:                            whereHelperstring{field: `maker_id`},
	CheckerID:                          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                       whereHelpernull_Time{field: `modified_date`},
}

// KYCRels is where relationship names are stored.
var KYCRels = struct {
	Bank                    string
	ProofOfAddressDocument  string
	ProofOfIdentityDocument string
}{
	Bank:                    "Bank",
	ProofOfAddressDocument:  "ProofOfAddressDocument",
	ProofOfIdentityDocument: "ProofOfIdentityDocument",
}

// kYCR is where relationships are stored.
type kYCR struct {
	Bank                    *Bank
	ProofOfAddressDocument  *Document
	ProofOfIdentityDocument *Document
}

// NewStruct creates a new relationship struct
func (*kYCR) NewStruct() *kYCR {
	return &kYCR{}
}

// kYCL is where Load methods for each relationship are stored.
type kYCL struct{}

var (
	kYCColumns               = []string{"kyc_number", "kyc_type", "kyc_process_status", "bank_id", "ssn", "sex", "forenames", "middlename", "lastname", "title", "dob", "marital_status", "spouse_name", "nationality", "residence_country", "tax_residence_country", "tax_ref_no_residence_country", "birth_place", "country_code_of_birth", "mother_maiden_name", "education_level", "head_of_house_hold_ind", "employment_status", "current_employment_start_date", "job_title", "job", "home_ownership", "annual_income", "net_worth", "tax_exempt", "proof_of_identity_type", "proof_of_identity_issuer", "proof_of_identity_number", "proof_of_identity_expiry_date", "proof_of_identity_verified", "proof_of_identity_document_id", "proof_of_address_type", "proof_of_address_verified", "proof_of_address_document_id", "proof_of_address_addressline1", "proof_of_address_addressline2", "proof_of_address_addressline3", "proof_of_address_addressline4", "proof_of_address_addressline5", "proof_of_address_addressline6", "proof_of_address_postcode", "proof_of_address_country_code", "proof_of_address_city", "proof_of_address_region", "correspondence_same_as_proof_of_address", "correspondence_addressline1", "correspondence_addressline2", "correspondence_addressline3", "correspondence_addressline4", "correspondence_addressline5", "correspondence_addressline6", "correspondence_postcode", "correspondence_country_code", "correspondence_city", "correspondence_region", "contact_tel", "contact_mobile", "contact_office_tel", "contact_fax", "contact_email", "rating_date", "customer_rating", "customer_risk_score", "customer_risk_score_status", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	kYCColumnsWithoutDefault = []string{"kyc_number", "kyc_type", "kyc_process_status", "bank_id", "ssn", "sex", "forenames", "middlename", "lastname", "title", "dob", "marital_status", "spouse_name", "nationality", "residence_country", "tax_residence_country", "tax_ref_no_residence_country", "birth_place", "country_code_of_birth", "mother_maiden_name", "education_level", "head_of_house_hold_ind", "employment_status", "current_employment_start_date", "job_title", "job", "home_ownership", "annual_income", "net_worth", "tax_exempt", "proof_of_identity_type", "proof_of_identity_issuer", "proof_of_identity_number", "proof_of_identity_expiry_date", "proof_of_identity_verified", "proof_of_identity_document_id", "proof_of_address_type", "proof_of_address_verified", "proof_of_address_document_id", "proof_of_address_addressline1", "proof_of_address_addressline2", "proof_of_address_addressline3", "proof_of_address_addressline4", "proof_of_address_addressline5", "proof_of_address_addressline6", "proof_of_address_postcode", "proof_of_address_country_code", "proof_of_address_city", "proof_of_address_region", "correspondence_same_as_proof_of_address", "correspondence_addressline1", "correspondence_addressline2", "correspondence_addressline3", "correspondence_addressline4", "correspondence_addressline5", "correspondence_addressline6", "correspondence_postcode", "correspondence_country_code", "correspondence_city", "correspondence_region", "contact_tel", "contact_mobile", "contact_office_tel", "contact_fax", "contact_email", "rating_date", "customer_rating", "customer_risk_score", "customer_risk_score_status", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	kYCColumnsWithDefault    = []string{}
	kYCPrimaryKeyColumns     = []string{"kyc_number"}
)

type (
	// KYCSlice is an alias for a slice of pointers to KYC.
	// This should generally be used opposed to []KYC.
	KYCSlice []*KYC
	// KYCHook is the signature for custom KYC hook methods
	KYCHook func(context.Context, boil.ContextExecutor, *KYC) error

	kYCQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kYCType                 = reflect.TypeOf(&KYC{})
	kYCMapping              = queries.MakeStructMapping(kYCType)
	kYCPrimaryKeyMapping, _ = queries.BindMapping(kYCType, kYCMapping, kYCPrimaryKeyColumns)
	kYCInsertCacheMut       sync.RWMutex
	kYCInsertCache          = make(map[string]insertCache)
	kYCUpdateCacheMut       sync.RWMutex
	kYCUpdateCache          = make(map[string]updateCache)
	kYCUpsertCacheMut       sync.RWMutex
	kYCUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var kYCBeforeInsertHooks []KYCHook
var kYCBeforeUpdateHooks []KYCHook
var kYCBeforeDeleteHooks []KYCHook
var kYCBeforeUpsertHooks []KYCHook

var kYCAfterInsertHooks []KYCHook
var kYCAfterSelectHooks []KYCHook
var kYCAfterUpdateHooks []KYCHook
var kYCAfterDeleteHooks []KYCHook
var kYCAfterUpsertHooks []KYCHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KYC) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KYC) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KYC) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KYC) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KYC) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KYC) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KYC) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KYC) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KYC) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kYCAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKYCHook registers your hook function for all future operations.
func AddKYCHook(hookPoint boil.HookPoint, kYCHook KYCHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		kYCBeforeInsertHooks = append(kYCBeforeInsertHooks, kYCHook)
	case boil.BeforeUpdateHook:
		kYCBeforeUpdateHooks = append(kYCBeforeUpdateHooks, kYCHook)
	case boil.BeforeDeleteHook:
		kYCBeforeDeleteHooks = append(kYCBeforeDeleteHooks, kYCHook)
	case boil.BeforeUpsertHook:
		kYCBeforeUpsertHooks = append(kYCBeforeUpsertHooks, kYCHook)
	case boil.AfterInsertHook:
		kYCAfterInsertHooks = append(kYCAfterInsertHooks, kYCHook)
	case boil.AfterSelectHook:
		kYCAfterSelectHooks = append(kYCAfterSelectHooks, kYCHook)
	case boil.AfterUpdateHook:
		kYCAfterUpdateHooks = append(kYCAfterUpdateHooks, kYCHook)
	case boil.AfterDeleteHook:
		kYCAfterDeleteHooks = append(kYCAfterDeleteHooks, kYCHook)
	case boil.AfterUpsertHook:
		kYCAfterUpsertHooks = append(kYCAfterUpsertHooks, kYCHook)
	}
}

// One returns a single kYC record from the query.
func (q kYCQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KYC, error) {
	o := &KYC{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for KYC")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KYC records from the query.
func (q kYCQuery) All(ctx context.Context, exec boil.ContextExecutor) (KYCSlice, error) {
	var o []*KYC

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KYC slice")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KYC records in the query.
func (q kYCQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count KYC rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kYCQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if KYC exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *KYC) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// ProofOfAddressDocument pointed to by the foreign key.
func (o *KYC) ProofOfAddressDocument(mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("document_id=?", o.ProofOfAddressDocumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Documents(queryMods...)
	queries.SetFrom(query.Query, "`Document`")

	return query
}

// ProofOfIdentityDocument pointed to by the foreign key.
func (o *KYC) ProofOfIdentityDocument(mods ...qm.QueryMod) documentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("document_id=?", o.ProofOfIdentityDocumentID),
	}

	queryMods = append(queryMods, mods...)

	query := Documents(queryMods...)
	queries.SetFrom(query.Query, "`Document`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (kYCL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKYC interface{}, mods queries.Applicator) error {
	var slice []*KYC
	var object *KYC

	if singular {
		object = maybeKYC.(*KYC)
	} else {
		slice = *maybeKYC.(*[]*KYC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &kYCR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &kYCR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankKYCS = append(foreign.R.BankKYCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankKYCS = append(foreign.R.BankKYCS, local)
				break
			}
		}
	}

	return nil
}

// LoadProofOfAddressDocument allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (kYCL) LoadProofOfAddressDocument(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKYC interface{}, mods queries.Applicator) error {
	var slice []*KYC
	var object *KYC

	if singular {
		object = maybeKYC.(*KYC)
	} else {
		slice = *maybeKYC.(*[]*KYC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &kYCR{}
		}
		args = append(args, object.ProofOfAddressDocumentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &kYCR{}
			}

			for _, a := range args {
				if a == obj.ProofOfAddressDocumentID {
					continue Outer
				}
			}

			args = append(args, obj.ProofOfAddressDocumentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Document`), qm.WhereIn(`document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Document")
	}

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Document")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Document")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Document")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProofOfAddressDocument = foreign
		if foreign.R == nil {
			foreign.R = &documentR{}
		}
		foreign.R.ProofOfAddressDocumentKYCS = append(foreign.R.ProofOfAddressDocumentKYCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProofOfAddressDocumentID == foreign.DocumentID {
				local.R.ProofOfAddressDocument = foreign
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.ProofOfAddressDocumentKYCS = append(foreign.R.ProofOfAddressDocumentKYCS, local)
				break
			}
		}
	}

	return nil
}

// LoadProofOfIdentityDocument allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (kYCL) LoadProofOfIdentityDocument(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKYC interface{}, mods queries.Applicator) error {
	var slice []*KYC
	var object *KYC

	if singular {
		object = maybeKYC.(*KYC)
	} else {
		slice = *maybeKYC.(*[]*KYC)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &kYCR{}
		}
		args = append(args, object.ProofOfIdentityDocumentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &kYCR{}
			}

			for _, a := range args {
				if a == obj.ProofOfIdentityDocumentID {
					continue Outer
				}
			}

			args = append(args, obj.ProofOfIdentityDocumentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Document`), qm.WhereIn(`document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Document")
	}

	var resultSlice []*Document
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Document")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Document")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Document")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProofOfIdentityDocument = foreign
		if foreign.R == nil {
			foreign.R = &documentR{}
		}
		foreign.R.ProofOfIdentityDocumentKYCS = append(foreign.R.ProofOfIdentityDocumentKYCS, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProofOfIdentityDocumentID == foreign.DocumentID {
				local.R.ProofOfIdentityDocument = foreign
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.ProofOfIdentityDocumentKYCS = append(foreign.R.ProofOfIdentityDocumentKYCS, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the kYC to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankKYCS.
func (o *KYC) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `KYC` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.KycNumber}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &kYCR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankKYCS: KYCSlice{o},
		}
	} else {
		related.R.BankKYCS = append(related.R.BankKYCS, o)
	}

	return nil
}

// SetProofOfAddressDocument of the kYC to the related item.
// Sets o.R.ProofOfAddressDocument to related.
// Adds o to related.R.ProofOfAddressDocumentKYCS.
func (o *KYC) SetProofOfAddressDocument(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Document) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `KYC` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"proof_of_address_document_id"}),
		strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
	)
	values := []interface{}{related.DocumentID, o.KycNumber}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProofOfAddressDocumentID = related.DocumentID
	if o.R == nil {
		o.R = &kYCR{
			ProofOfAddressDocument: related,
		}
	} else {
		o.R.ProofOfAddressDocument = related
	}

	if related.R == nil {
		related.R = &documentR{
			ProofOfAddressDocumentKYCS: KYCSlice{o},
		}
	} else {
		related.R.ProofOfAddressDocumentKYCS = append(related.R.ProofOfAddressDocumentKYCS, o)
	}

	return nil
}

// SetProofOfIdentityDocument of the kYC to the related item.
// Sets o.R.ProofOfIdentityDocument to related.
// Adds o to related.R.ProofOfIdentityDocumentKYCS.
func (o *KYC) SetProofOfIdentityDocument(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Document) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `KYC` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"proof_of_identity_document_id"}),
		strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
	)
	values := []interface{}{related.DocumentID, o.KycNumber}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProofOfIdentityDocumentID = related.DocumentID
	if o.R == nil {
		o.R = &kYCR{
			ProofOfIdentityDocument: related,
		}
	} else {
		o.R.ProofOfIdentityDocument = related
	}

	if related.R == nil {
		related.R = &documentR{
			ProofOfIdentityDocumentKYCS: KYCSlice{o},
		}
	} else {
		related.R.ProofOfIdentityDocumentKYCS = append(related.R.ProofOfIdentityDocumentKYCS, o)
	}

	return nil
}

// KYCS retrieves all the records using an executor.
func KYCS(mods ...qm.QueryMod) kYCQuery {
	mods = append(mods, qm.From("`KYC`"))
	return kYCQuery{NewQuery(mods...)}
}

// FindKYC retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKYC(ctx context.Context, exec boil.ContextExecutor, kycNumber int, selectCols ...string) (*KYC, error) {
	kYCObj := &KYC{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `KYC` where `kyc_number`=?", sel,
	)

	q := queries.Raw(query, kycNumber)

	err := q.Bind(ctx, exec, kYCObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from KYC")
	}

	return kYCObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KYC) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no KYC provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kYCColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kYCInsertCacheMut.RLock()
	cache, cached := kYCInsertCache[key]
	kYCInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kYCColumns,
			kYCColumnsWithDefault,
			kYCColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kYCType, kYCMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kYCType, kYCMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `KYC` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `KYC` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `KYC` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into KYC")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.KycNumber,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for KYC")
	}

CacheNoHooks:
	if !cached {
		kYCInsertCacheMut.Lock()
		kYCInsertCache[key] = cache
		kYCInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KYC.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KYC) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	kYCUpdateCacheMut.RLock()
	cache, cached := kYCUpdateCache[key]
	kYCUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kYCColumns,
			kYCPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update KYC, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `KYC` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kYCType, kYCMapping, append(wl, kYCPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update KYC row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for KYC")
	}

	if !cached {
		kYCUpdateCacheMut.Lock()
		kYCUpdateCache[key] = cache
		kYCUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q kYCQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for KYC")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for KYC")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KYCSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kYCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `KYC` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kYCPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in kYC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all kYC")
	}
	return rowsAff, nil
}

var mySQLKYCUniqueColumns = []string{
	"kyc_number",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KYC) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no KYC provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kYCColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKYCUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kYCUpsertCacheMut.RLock()
	cache, cached := kYCUpsertCache[key]
	kYCUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			kYCColumns,
			kYCColumnsWithDefault,
			kYCColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			kYCColumns,
			kYCPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert KYC, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "KYC", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `KYC` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(kYCType, kYCMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kYCType, kYCMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for KYC")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(kYCType, kYCMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for KYC")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for KYC")
	}

CacheNoHooks:
	if !cached {
		kYCUpsertCacheMut.Lock()
		kYCUpsertCache[key] = cache
		kYCUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KYC record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KYC) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KYC provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kYCPrimaryKeyMapping)
	sql := "DELETE FROM `KYC` WHERE `kyc_number`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from KYC")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for KYC")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kYCQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no kYCQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from KYC")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for KYC")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KYCSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KYC slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(kYCBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kYCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `KYC` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kYCPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kYC slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for KYC")
	}

	if len(kYCAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KYC) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKYC(ctx, exec, o.KycNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KYCSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KYCSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kYCPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `KYC`.* FROM `KYC` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, kYCPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KYCSlice")
	}

	*o = slice

	return nil
}

// KYCExists checks if the KYC row exists.
func KYCExists(ctx context.Context, exec boil.ContextExecutor, kycNumber int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `KYC` where `kyc_number`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, kycNumber)
	}

	row := exec.QueryRowContext(ctx, sql, kycNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if KYC exists")
	}

	return exists, nil
}
