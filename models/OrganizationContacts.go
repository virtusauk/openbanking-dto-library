// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrganizationContact is an object representing the database table.
type OrganizationContact struct {
	OrganizationContactID int         `boil:"organization_contact_id" json:"organization_contact_id" toml:"organization_contact_id" yaml:"organization_contact_id"`
	OrganizationPartyID   int         `boil:"organization_party_id" json:"organization_party_id" toml:"organization_party_id" yaml:"organization_party_id"`
	IndividualPartyID     int         `boil:"individual_party_id" json:"individual_party_id" toml:"individual_party_id" yaml:"individual_party_id"`
	Designation           null.String `boil:"designation" json:"designation,omitempty" toml:"designation" yaml:"designation,omitempty"`
	Active                null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	BankID                int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate             time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate           null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID               string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID             null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy            null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate          null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *organizationContactR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationContactL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationContactColumns = struct {
	OrganizationContactID string
	OrganizationPartyID   string
	IndividualPartyID     string
	Designation           string
	Active                string
	BankID                string
	MakerDate             string
	CheckerDate           string
	MakerID               string
	CheckerID             string
	ModifiedBy            string
	ModifiedDate          string
}{
	OrganizationContactID: "organization_contact_id",
	OrganizationPartyID:   "organization_party_id",
	IndividualPartyID:     "individual_party_id",
	Designation:           "designation",
	Active:                "active",
	BankID:                "bank_id",
	MakerDate:             "maker_date",
	CheckerDate:           "checker_date",
	MakerID:               "maker_id",
	CheckerID:             "checker_id",
	ModifiedBy:            "modified_by",
	ModifiedDate:          "modified_date",
}

// Generated where

var OrganizationContactWhere = struct {
	OrganizationContactID whereHelperint
	OrganizationPartyID   whereHelperint
	IndividualPartyID     whereHelperint
	Designation           whereHelpernull_String
	Active                whereHelpernull_String
	BankID                whereHelperint
	MakerDate             whereHelpertime_Time
	CheckerDate           whereHelpernull_Time
	MakerID               whereHelperstring
	CheckerID             whereHelpernull_String
	ModifiedBy            whereHelpernull_String
	ModifiedDate          whereHelpernull_Time
}{
	OrganizationContactID: whereHelperint{field: `organization_contact_id`},
	OrganizationPartyID:   whereHelperint{field: `organization_party_id`},
	IndividualPartyID:     whereHelperint{field: `individual_party_id`},
	Designation:           whereHelpernull_String{field: `designation`},
	Active:                whereHelpernull_String{field: `active`},
	BankID:                whereHelperint{field: `bank_id`},
	MakerDate:             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:           whereHelpernull_Time{field: `checker_date`},
	MakerID:               whereHelperstring{field: `maker_id`},
	CheckerID:             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:            whereHelpernull_String{field: `modified_by`},
	ModifiedDate:          whereHelpernull_Time{field: `modified_date`},
}

// OrganizationContactRels is where relationship names are stored.
var OrganizationContactRels = struct {
	Bank              string
	OrganizationParty string
	IndividualParty   string
}{
	Bank:              "Bank",
	OrganizationParty: "OrganizationParty",
	IndividualParty:   "IndividualParty",
}

// organizationContactR is where relationships are stored.
type organizationContactR struct {
	Bank              *Bank
	OrganizationParty *Organization
	IndividualParty   *Person
}

// NewStruct creates a new relationship struct
func (*organizationContactR) NewStruct() *organizationContactR {
	return &organizationContactR{}
}

// organizationContactL is where Load methods for each relationship are stored.
type organizationContactL struct{}

var (
	organizationContactColumns               = []string{"organization_contact_id", "organization_party_id", "individual_party_id", "designation", "active", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationContactColumnsWithoutDefault = []string{"organization_party_id", "individual_party_id", "designation", "active", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationContactColumnsWithDefault    = []string{"organization_contact_id"}
	organizationContactPrimaryKeyColumns     = []string{"organization_contact_id"}
)

type (
	// OrganizationContactSlice is an alias for a slice of pointers to OrganizationContact.
	// This should generally be used opposed to []OrganizationContact.
	OrganizationContactSlice []*OrganizationContact
	// OrganizationContactHook is the signature for custom OrganizationContact hook methods
	OrganizationContactHook func(context.Context, boil.ContextExecutor, *OrganizationContact) error

	organizationContactQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationContactType                 = reflect.TypeOf(&OrganizationContact{})
	organizationContactMapping              = queries.MakeStructMapping(organizationContactType)
	organizationContactPrimaryKeyMapping, _ = queries.BindMapping(organizationContactType, organizationContactMapping, organizationContactPrimaryKeyColumns)
	organizationContactInsertCacheMut       sync.RWMutex
	organizationContactInsertCache          = make(map[string]insertCache)
	organizationContactUpdateCacheMut       sync.RWMutex
	organizationContactUpdateCache          = make(map[string]updateCache)
	organizationContactUpsertCacheMut       sync.RWMutex
	organizationContactUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationContactBeforeInsertHooks []OrganizationContactHook
var organizationContactBeforeUpdateHooks []OrganizationContactHook
var organizationContactBeforeDeleteHooks []OrganizationContactHook
var organizationContactBeforeUpsertHooks []OrganizationContactHook

var organizationContactAfterInsertHooks []OrganizationContactHook
var organizationContactAfterSelectHooks []OrganizationContactHook
var organizationContactAfterUpdateHooks []OrganizationContactHook
var organizationContactAfterDeleteHooks []OrganizationContactHook
var organizationContactAfterUpsertHooks []OrganizationContactHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationContact) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationContact) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationContact) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationContact) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationContact) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationContact) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationContact) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationContact) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationContact) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationContactAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationContactHook registers your hook function for all future operations.
func AddOrganizationContactHook(hookPoint boil.HookPoint, organizationContactHook OrganizationContactHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationContactBeforeInsertHooks = append(organizationContactBeforeInsertHooks, organizationContactHook)
	case boil.BeforeUpdateHook:
		organizationContactBeforeUpdateHooks = append(organizationContactBeforeUpdateHooks, organizationContactHook)
	case boil.BeforeDeleteHook:
		organizationContactBeforeDeleteHooks = append(organizationContactBeforeDeleteHooks, organizationContactHook)
	case boil.BeforeUpsertHook:
		organizationContactBeforeUpsertHooks = append(organizationContactBeforeUpsertHooks, organizationContactHook)
	case boil.AfterInsertHook:
		organizationContactAfterInsertHooks = append(organizationContactAfterInsertHooks, organizationContactHook)
	case boil.AfterSelectHook:
		organizationContactAfterSelectHooks = append(organizationContactAfterSelectHooks, organizationContactHook)
	case boil.AfterUpdateHook:
		organizationContactAfterUpdateHooks = append(organizationContactAfterUpdateHooks, organizationContactHook)
	case boil.AfterDeleteHook:
		organizationContactAfterDeleteHooks = append(organizationContactAfterDeleteHooks, organizationContactHook)
	case boil.AfterUpsertHook:
		organizationContactAfterUpsertHooks = append(organizationContactAfterUpsertHooks, organizationContactHook)
	}
}

// One returns a single organizationContact record from the query.
func (q organizationContactQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationContact, error) {
	o := &OrganizationContact{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for OrganizationContacts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationContact records from the query.
func (q organizationContactQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationContactSlice, error) {
	var o []*OrganizationContact

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationContact slice")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationContact records in the query.
func (q organizationContactQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count OrganizationContacts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationContactQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if OrganizationContacts exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *OrganizationContact) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// OrganizationParty pointed to by the foreign key.
func (o *OrganizationContact) OrganizationParty(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.OrganizationPartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "`Organization`")

	return query
}

// IndividualParty pointed to by the foreign key.
func (o *OrganizationContact) IndividualParty(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.IndividualPartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "`Person`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationContactL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationContact interface{}, mods queries.Applicator) error {
	var slice []*OrganizationContact
	var object *OrganizationContact

	if singular {
		object = maybeOrganizationContact.(*OrganizationContact)
	} else {
		slice = *maybeOrganizationContact.(*[]*OrganizationContact)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationContactR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationContactR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankOrganizationContacts = append(foreign.R.BankOrganizationContacts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankOrganizationContacts = append(foreign.R.BankOrganizationContacts, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganizationParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationContactL) LoadOrganizationParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationContact interface{}, mods queries.Applicator) error {
	var slice []*OrganizationContact
	var object *OrganizationContact

	if singular {
		object = maybeOrganizationContact.(*OrganizationContact)
	} else {
		slice = *maybeOrganizationContact.(*[]*OrganizationContact)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationContactR{}
		}
		args = append(args, object.OrganizationPartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationContactR{}
			}

			for _, a := range args {
				if a == obj.OrganizationPartyID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationPartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Organization`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Organization")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganizationParty = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.OrganizationPartyOrganizationContacts = append(foreign.R.OrganizationPartyOrganizationContacts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationPartyID == foreign.PartyID {
				local.R.OrganizationParty = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrganizationPartyOrganizationContacts = append(foreign.R.OrganizationPartyOrganizationContacts, local)
				break
			}
		}
	}

	return nil
}

// LoadIndividualParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationContactL) LoadIndividualParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationContact interface{}, mods queries.Applicator) error {
	var slice []*OrganizationContact
	var object *OrganizationContact

	if singular {
		object = maybeOrganizationContact.(*OrganizationContact)
	} else {
		slice = *maybeOrganizationContact.(*[]*OrganizationContact)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationContactR{}
		}
		args = append(args, object.IndividualPartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationContactR{}
			}

			for _, a := range args {
				if a == obj.IndividualPartyID {
					continue Outer
				}
			}

			args = append(args, obj.IndividualPartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Person`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Person")
	}

	if len(organizationContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndividualParty = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.IndividualPartyOrganizationContacts = append(foreign.R.IndividualPartyOrganizationContacts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IndividualPartyID == foreign.PartyID {
				local.R.IndividualParty = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.IndividualPartyOrganizationContacts = append(foreign.R.IndividualPartyOrganizationContacts, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the organizationContact to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankOrganizationContacts.
func (o *OrganizationContact) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `OrganizationContacts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.OrganizationContactID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &organizationContactR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankOrganizationContacts: OrganizationContactSlice{o},
		}
	} else {
		related.R.BankOrganizationContacts = append(related.R.BankOrganizationContacts, o)
	}

	return nil
}

// SetOrganizationParty of the organizationContact to the related item.
// Sets o.R.OrganizationParty to related.
// Adds o to related.R.OrganizationPartyOrganizationContacts.
func (o *OrganizationContact) SetOrganizationParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `OrganizationContacts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_party_id"}),
		strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.OrganizationContactID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationPartyID = related.PartyID
	if o.R == nil {
		o.R = &organizationContactR{
			OrganizationParty: related,
		}
	} else {
		o.R.OrganizationParty = related
	}

	if related.R == nil {
		related.R = &organizationR{
			OrganizationPartyOrganizationContacts: OrganizationContactSlice{o},
		}
	} else {
		related.R.OrganizationPartyOrganizationContacts = append(related.R.OrganizationPartyOrganizationContacts, o)
	}

	return nil
}

// SetIndividualParty of the organizationContact to the related item.
// Sets o.R.IndividualParty to related.
// Adds o to related.R.IndividualPartyOrganizationContacts.
func (o *OrganizationContact) SetIndividualParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `OrganizationContacts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"individual_party_id"}),
		strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.OrganizationContactID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IndividualPartyID = related.PartyID
	if o.R == nil {
		o.R = &organizationContactR{
			IndividualParty: related,
		}
	} else {
		o.R.IndividualParty = related
	}

	if related.R == nil {
		related.R = &personR{
			IndividualPartyOrganizationContacts: OrganizationContactSlice{o},
		}
	} else {
		related.R.IndividualPartyOrganizationContacts = append(related.R.IndividualPartyOrganizationContacts, o)
	}

	return nil
}

// OrganizationContacts retrieves all the records using an executor.
func OrganizationContacts(mods ...qm.QueryMod) organizationContactQuery {
	mods = append(mods, qm.From("`OrganizationContacts`"))
	return organizationContactQuery{NewQuery(mods...)}
}

// FindOrganizationContact retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationContact(ctx context.Context, exec boil.ContextExecutor, organizationContactID int, selectCols ...string) (*OrganizationContact, error) {
	organizationContactObj := &OrganizationContact{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `OrganizationContacts` where `organization_contact_id`=?", sel,
	)

	q := queries.Raw(query, organizationContactID)

	err := q.Bind(ctx, exec, organizationContactObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from OrganizationContacts")
	}

	return organizationContactObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationContact) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationContacts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationContactColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationContactInsertCacheMut.RLock()
	cache, cached := organizationContactInsertCache[key]
	organizationContactInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationContactColumns,
			organizationContactColumnsWithDefault,
			organizationContactColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationContactType, organizationContactMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationContactType, organizationContactMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `OrganizationContacts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `OrganizationContacts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `OrganizationContacts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into OrganizationContacts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationContactID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationContactMapping["OrganizationContactID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrganizationContactID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationContacts")
	}

CacheNoHooks:
	if !cached {
		organizationContactInsertCacheMut.Lock()
		organizationContactInsertCache[key] = cache
		organizationContactInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationContact.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationContact) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationContactUpdateCacheMut.RLock()
	cache, cached := organizationContactUpdateCache[key]
	organizationContactUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationContactColumns,
			organizationContactPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update OrganizationContacts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `OrganizationContacts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, organizationContactPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationContactType, organizationContactMapping, append(wl, organizationContactPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update OrganizationContacts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for OrganizationContacts")
	}

	if !cached {
		organizationContactUpdateCacheMut.Lock()
		organizationContactUpdateCache[key] = cache
		organizationContactUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationContactQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for OrganizationContacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for OrganizationContacts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationContactSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `OrganizationContacts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationContactPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationContact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationContact")
	}
	return rowsAff, nil
}

var mySQLOrganizationContactUniqueColumns = []string{
	"organization_contact_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationContact) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationContacts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationContactColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrganizationContactUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationContactUpsertCacheMut.RLock()
	cache, cached := organizationContactUpsertCache[key]
	organizationContactUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationContactColumns,
			organizationContactColumnsWithDefault,
			organizationContactColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationContactColumns,
			organizationContactPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert OrganizationContacts, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "OrganizationContacts", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `OrganizationContacts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(organizationContactType, organizationContactMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationContactType, organizationContactMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for OrganizationContacts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationContactID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationContactMapping["organization_contact_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(organizationContactType, organizationContactMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for OrganizationContacts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationContacts")
	}

CacheNoHooks:
	if !cached {
		organizationContactUpsertCacheMut.Lock()
		organizationContactUpsertCache[key] = cache
		organizationContactUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationContact record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationContact) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationContact provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationContactPrimaryKeyMapping)
	sql := "DELETE FROM `OrganizationContacts` WHERE `organization_contact_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from OrganizationContacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for OrganizationContacts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationContactQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationContactQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from OrganizationContacts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationContacts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationContactSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationContact slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationContactBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `OrganizationContacts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationContactPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationContact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationContacts")
	}

	if len(organizationContactAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationContact) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationContact(ctx, exec, o.OrganizationContactID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationContactSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationContactSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `OrganizationContacts`.* FROM `OrganizationContacts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationContactPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationContactSlice")
	}

	*o = slice

	return nil
}

// OrganizationContactExists checks if the OrganizationContact row exists.
func OrganizationContactExists(ctx context.Context, exec boil.ContextExecutor, organizationContactID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `OrganizationContacts` where `organization_contact_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, organizationContactID)
	}

	row := exec.QueryRowContext(ctx, sql, organizationContactID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if OrganizationContacts exists")
	}

	return exists, nil
}
