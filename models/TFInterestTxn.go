// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFInterestTxn is an object representing the database table.
type TFInterestTxn struct {
	TradeInterestID      int           `boil:"trade_interest_id" json:"trade_interest_id" toml:"trade_interest_id" yaml:"trade_interest_id"`
	ReferenceID          string        `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	TransactionID        int           `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ProductCode          string        `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	PartyID              int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BranchID             int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	InterestRate         types.Decimal `boil:"interest_rate" json:"interest_rate" toml:"interest_rate" yaml:"interest_rate"`
	TotalInterestAmount  types.Decimal `boil:"total_interest_amount" json:"total_interest_amount" toml:"total_interest_amount" yaml:"total_interest_amount"`
	ActualInterestAmount types.Decimal `boil:"actual_interest_amount" json:"actual_interest_amount" toml:"actual_interest_amount" yaml:"actual_interest_amount"`
	LastInterestDate     time.Time     `boil:"last_interest_date" json:"last_interest_date" toml:"last_interest_date" yaml:"last_interest_date"`
	MakerDate            time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFInterestTxnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFInterestTxnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFInterestTxnColumns = struct {
	TradeInterestID      string
	ReferenceID          string
	TransactionID        string
	ProductCode          string
	PartyID              string
	BranchID             string
	InterestRate         string
	TotalInterestAmount  string
	ActualInterestAmount string
	LastInterestDate     string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	TradeInterestID:      "trade_interest_id",
	ReferenceID:          "reference_id",
	TransactionID:        "transaction_id",
	ProductCode:          "product_code",
	PartyID:              "party_id",
	BranchID:             "branch_id",
	InterestRate:         "interest_rate",
	TotalInterestAmount:  "total_interest_amount",
	ActualInterestAmount: "actual_interest_amount",
	LastInterestDate:     "last_interest_date",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var TFInterestTxnWhere = struct {
	TradeInterestID      whereHelperint
	ReferenceID          whereHelperstring
	TransactionID        whereHelperint
	ProductCode          whereHelperstring
	PartyID              whereHelperint
	BranchID             whereHelperint
	InterestRate         whereHelpertypes_Decimal
	TotalInterestAmount  whereHelpertypes_Decimal
	ActualInterestAmount whereHelpertypes_Decimal
	LastInterestDate     whereHelpertime_Time
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	TradeInterestID:      whereHelperint{field: `trade_interest_id`},
	ReferenceID:          whereHelperstring{field: `reference_id`},
	TransactionID:        whereHelperint{field: `transaction_id`},
	ProductCode:          whereHelperstring{field: `product_code`},
	PartyID:              whereHelperint{field: `party_id`},
	BranchID:             whereHelperint{field: `branch_id`},
	InterestRate:         whereHelpertypes_Decimal{field: `interest_rate`},
	TotalInterestAmount:  whereHelpertypes_Decimal{field: `total_interest_amount`},
	ActualInterestAmount: whereHelpertypes_Decimal{field: `actual_interest_amount`},
	LastInterestDate:     whereHelpertime_Time{field: `last_interest_date`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// TFInterestTxnRels is where relationship names are stored.
var TFInterestTxnRels = struct {
	TradeInterest string
	Reference     string
	Party         string
}{
	TradeInterest: "TradeInterest",
	Reference:     "Reference",
	Party:         "Party",
}

// tFInterestTxnR is where relationships are stored.
type tFInterestTxnR struct {
	TradeInterest *TFInterest
	Reference     *TFLetterOfCredit
	Party         *Party
}

// NewStruct creates a new relationship struct
func (*tFInterestTxnR) NewStruct() *tFInterestTxnR {
	return &tFInterestTxnR{}
}

// tFInterestTxnL is where Load methods for each relationship are stored.
type tFInterestTxnL struct{}

var (
	tFInterestTxnColumns               = []string{"trade_interest_id", "reference_id", "transaction_id", "product_code", "party_id", "branch_id", "interest_rate", "total_interest_amount", "actual_interest_amount", "last_interest_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFInterestTxnColumnsWithoutDefault = []string{"trade_interest_id", "reference_id", "transaction_id", "product_code", "party_id", "branch_id", "interest_rate", "total_interest_amount", "actual_interest_amount", "last_interest_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFInterestTxnColumnsWithDefault    = []string{}
	tFInterestTxnPrimaryKeyColumns     = []string{"trade_interest_id", "transaction_id"}
)

type (
	// TFInterestTxnSlice is an alias for a slice of pointers to TFInterestTxn.
	// This should generally be used opposed to []TFInterestTxn.
	TFInterestTxnSlice []*TFInterestTxn
	// TFInterestTxnHook is the signature for custom TFInterestTxn hook methods
	TFInterestTxnHook func(context.Context, boil.ContextExecutor, *TFInterestTxn) error

	tFInterestTxnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFInterestTxnType                 = reflect.TypeOf(&TFInterestTxn{})
	tFInterestTxnMapping              = queries.MakeStructMapping(tFInterestTxnType)
	tFInterestTxnPrimaryKeyMapping, _ = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, tFInterestTxnPrimaryKeyColumns)
	tFInterestTxnInsertCacheMut       sync.RWMutex
	tFInterestTxnInsertCache          = make(map[string]insertCache)
	tFInterestTxnUpdateCacheMut       sync.RWMutex
	tFInterestTxnUpdateCache          = make(map[string]updateCache)
	tFInterestTxnUpsertCacheMut       sync.RWMutex
	tFInterestTxnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFInterestTxnBeforeInsertHooks []TFInterestTxnHook
var tFInterestTxnBeforeUpdateHooks []TFInterestTxnHook
var tFInterestTxnBeforeDeleteHooks []TFInterestTxnHook
var tFInterestTxnBeforeUpsertHooks []TFInterestTxnHook

var tFInterestTxnAfterInsertHooks []TFInterestTxnHook
var tFInterestTxnAfterSelectHooks []TFInterestTxnHook
var tFInterestTxnAfterUpdateHooks []TFInterestTxnHook
var tFInterestTxnAfterDeleteHooks []TFInterestTxnHook
var tFInterestTxnAfterUpsertHooks []TFInterestTxnHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFInterestTxn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFInterestTxn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFInterestTxn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFInterestTxn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFInterestTxn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFInterestTxn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFInterestTxn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFInterestTxn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFInterestTxn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestTxnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFInterestTxnHook registers your hook function for all future operations.
func AddTFInterestTxnHook(hookPoint boil.HookPoint, tFInterestTxnHook TFInterestTxnHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFInterestTxnBeforeInsertHooks = append(tFInterestTxnBeforeInsertHooks, tFInterestTxnHook)
	case boil.BeforeUpdateHook:
		tFInterestTxnBeforeUpdateHooks = append(tFInterestTxnBeforeUpdateHooks, tFInterestTxnHook)
	case boil.BeforeDeleteHook:
		tFInterestTxnBeforeDeleteHooks = append(tFInterestTxnBeforeDeleteHooks, tFInterestTxnHook)
	case boil.BeforeUpsertHook:
		tFInterestTxnBeforeUpsertHooks = append(tFInterestTxnBeforeUpsertHooks, tFInterestTxnHook)
	case boil.AfterInsertHook:
		tFInterestTxnAfterInsertHooks = append(tFInterestTxnAfterInsertHooks, tFInterestTxnHook)
	case boil.AfterSelectHook:
		tFInterestTxnAfterSelectHooks = append(tFInterestTxnAfterSelectHooks, tFInterestTxnHook)
	case boil.AfterUpdateHook:
		tFInterestTxnAfterUpdateHooks = append(tFInterestTxnAfterUpdateHooks, tFInterestTxnHook)
	case boil.AfterDeleteHook:
		tFInterestTxnAfterDeleteHooks = append(tFInterestTxnAfterDeleteHooks, tFInterestTxnHook)
	case boil.AfterUpsertHook:
		tFInterestTxnAfterUpsertHooks = append(tFInterestTxnAfterUpsertHooks, tFInterestTxnHook)
	}
}

// One returns a single tFInterestTxn record from the query.
func (q tFInterestTxnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFInterestTxn, error) {
	o := &TFInterestTxn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFInterestTxn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFInterestTxn records from the query.
func (q tFInterestTxnQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFInterestTxnSlice, error) {
	var o []*TFInterestTxn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFInterestTxn slice")
	}

	if len(tFInterestTxnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFInterestTxn records in the query.
func (q tFInterestTxnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFInterestTxn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFInterestTxnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFInterestTxn exists")
	}

	return count > 0, nil
}

// TradeInterest pointed to by the foreign key.
func (o *TFInterestTxn) TradeInterest(mods ...qm.QueryMod) tFInterestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("trade_interest_id=?", o.TradeInterestID),
	}

	queryMods = append(queryMods, mods...)

	query := TFInterests(queryMods...)
	queries.SetFrom(query.Query, "`TFInterest`")

	return query
}

// Reference pointed to by the foreign key.
func (o *TFInterestTxn) Reference(mods ...qm.QueryMod) tFLetterOfCreditQuery {
	queryMods := []qm.QueryMod{
		qm.Where("reference_id=?", o.ReferenceID),
	}

	queryMods = append(queryMods, mods...)

	query := TFLetterOfCredits(queryMods...)
	queries.SetFrom(query.Query, "`TFLetterOfCredit`")

	return query
}

// Party pointed to by the foreign key.
func (o *TFInterestTxn) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadTradeInterest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFInterestTxnL) LoadTradeInterest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterestTxn interface{}, mods queries.Applicator) error {
	var slice []*TFInterestTxn
	var object *TFInterestTxn

	if singular {
		object = maybeTFInterestTxn.(*TFInterestTxn)
	} else {
		slice = *maybeTFInterestTxn.(*[]*TFInterestTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestTxnR{}
		}
		args = append(args, object.TradeInterestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestTxnR{}
			}

			for _, a := range args {
				if a == obj.TradeInterestID {
					continue Outer
				}
			}

			args = append(args, obj.TradeInterestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFInterest`), qm.WhereIn(`trade_interest_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFInterest")
	}

	var resultSlice []*TFInterest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFInterest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFInterest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFInterest")
	}

	if len(tFInterestTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TradeInterest = foreign
		if foreign.R == nil {
			foreign.R = &tFInterestR{}
		}
		foreign.R.TradeInterestTFInterestTxns = append(foreign.R.TradeInterestTFInterestTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeInterestID == foreign.TradeInterestID {
				local.R.TradeInterest = foreign
				if foreign.R == nil {
					foreign.R = &tFInterestR{}
				}
				foreign.R.TradeInterestTFInterestTxns = append(foreign.R.TradeInterestTFInterestTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadReference allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFInterestTxnL) LoadReference(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterestTxn interface{}, mods queries.Applicator) error {
	var slice []*TFInterestTxn
	var object *TFInterestTxn

	if singular {
		object = maybeTFInterestTxn.(*TFInterestTxn)
	} else {
		slice = *maybeTFInterestTxn.(*[]*TFInterestTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestTxnR{}
		}
		args = append(args, object.ReferenceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestTxnR{}
			}

			for _, a := range args {
				if a == obj.ReferenceID {
					continue Outer
				}
			}

			args = append(args, obj.ReferenceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFLetterOfCredit`), qm.WhereIn(`reference_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFLetterOfCredit")
	}

	var resultSlice []*TFLetterOfCredit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFLetterOfCredit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFLetterOfCredit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFLetterOfCredit")
	}

	if len(tFInterestTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reference = foreign
		if foreign.R == nil {
			foreign.R = &tFLetterOfCreditR{}
		}
		foreign.R.ReferenceTFInterestTxns = append(foreign.R.ReferenceTFInterestTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReferenceID == foreign.ReferenceID {
				local.R.Reference = foreign
				if foreign.R == nil {
					foreign.R = &tFLetterOfCreditR{}
				}
				foreign.R.ReferenceTFInterestTxns = append(foreign.R.ReferenceTFInterestTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFInterestTxnL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterestTxn interface{}, mods queries.Applicator) error {
	var slice []*TFInterestTxn
	var object *TFInterestTxn

	if singular {
		object = maybeTFInterestTxn.(*TFInterestTxn)
	} else {
		slice = *maybeTFInterestTxn.(*[]*TFInterestTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestTxnR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestTxnR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFInterestTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFInterestTxns = append(foreign.R.PartyTFInterestTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFInterestTxns = append(foreign.R.PartyTFInterestTxns, local)
				break
			}
		}
	}

	return nil
}

// SetTradeInterest of the tFInterestTxn to the related item.
// Sets o.R.TradeInterest to related.
// Adds o to related.R.TradeInterestTFInterestTxns.
func (o *TFInterestTxn) SetTradeInterest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFInterest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFInterestTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"trade_interest_id"}),
		strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.TradeInterestID, o.TradeInterestID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeInterestID = related.TradeInterestID
	if o.R == nil {
		o.R = &tFInterestTxnR{
			TradeInterest: related,
		}
	} else {
		o.R.TradeInterest = related
	}

	if related.R == nil {
		related.R = &tFInterestR{
			TradeInterestTFInterestTxns: TFInterestTxnSlice{o},
		}
	} else {
		related.R.TradeInterestTFInterestTxns = append(related.R.TradeInterestTFInterestTxns, o)
	}

	return nil
}

// SetReference of the tFInterestTxn to the related item.
// Sets o.R.Reference to related.
// Adds o to related.R.ReferenceTFInterestTxns.
func (o *TFInterestTxn) SetReference(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFLetterOfCredit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFInterestTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reference_id"}),
		strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.ReferenceID, o.TradeInterestID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReferenceID = related.ReferenceID
	if o.R == nil {
		o.R = &tFInterestTxnR{
			Reference: related,
		}
	} else {
		o.R.Reference = related
	}

	if related.R == nil {
		related.R = &tFLetterOfCreditR{
			ReferenceTFInterestTxns: TFInterestTxnSlice{o},
		}
	} else {
		related.R.ReferenceTFInterestTxns = append(related.R.ReferenceTFInterestTxns, o)
	}

	return nil
}

// SetParty of the tFInterestTxn to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFInterestTxns.
func (o *TFInterestTxn) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFInterestTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TradeInterestID, o.TransactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFInterestTxnR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFInterestTxns: TFInterestTxnSlice{o},
		}
	} else {
		related.R.PartyTFInterestTxns = append(related.R.PartyTFInterestTxns, o)
	}

	return nil
}

// TFInterestTxns retrieves all the records using an executor.
func TFInterestTxns(mods ...qm.QueryMod) tFInterestTxnQuery {
	mods = append(mods, qm.From("`TFInterestTxn`"))
	return tFInterestTxnQuery{NewQuery(mods...)}
}

// FindTFInterestTxn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFInterestTxn(ctx context.Context, exec boil.ContextExecutor, tradeInterestID int, transactionID int, selectCols ...string) (*TFInterestTxn, error) {
	tFInterestTxnObj := &TFInterestTxn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFInterestTxn` where `trade_interest_id`=? AND `transaction_id`=?", sel,
	)

	q := queries.Raw(query, tradeInterestID, transactionID)

	err := q.Bind(ctx, exec, tFInterestTxnObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFInterestTxn")
	}

	return tFInterestTxnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFInterestTxn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFInterestTxn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFInterestTxnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFInterestTxnInsertCacheMut.RLock()
	cache, cached := tFInterestTxnInsertCache[key]
	tFInterestTxnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFInterestTxnColumns,
			tFInterestTxnColumnsWithDefault,
			tFInterestTxnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFInterestTxn` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFInterestTxn` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFInterestTxn` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFInterestTxn")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TradeInterestID,
		o.TransactionID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFInterestTxn")
	}

CacheNoHooks:
	if !cached {
		tFInterestTxnInsertCacheMut.Lock()
		tFInterestTxnInsertCache[key] = cache
		tFInterestTxnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFInterestTxn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFInterestTxn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFInterestTxnUpdateCacheMut.RLock()
	cache, cached := tFInterestTxnUpdateCache[key]
	tFInterestTxnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFInterestTxnColumns,
			tFInterestTxnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFInterestTxn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFInterestTxn` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, append(wl, tFInterestTxnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFInterestTxn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFInterestTxn")
	}

	if !cached {
		tFInterestTxnUpdateCacheMut.Lock()
		tFInterestTxnUpdateCache[key] = cache
		tFInterestTxnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFInterestTxnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFInterestTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFInterestTxn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFInterestTxnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFInterestTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestTxnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFInterestTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFInterestTxn")
	}
	return rowsAff, nil
}

var mySQLTFInterestTxnUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFInterestTxn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFInterestTxn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFInterestTxnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFInterestTxnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFInterestTxnUpsertCacheMut.RLock()
	cache, cached := tFInterestTxnUpsertCache[key]
	tFInterestTxnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFInterestTxnColumns,
			tFInterestTxnColumnsWithDefault,
			tFInterestTxnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFInterestTxnColumns,
			tFInterestTxnPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFInterestTxn, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFInterestTxn", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFInterestTxn` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFInterestTxn")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFInterestTxnType, tFInterestTxnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFInterestTxn")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFInterestTxn")
	}

CacheNoHooks:
	if !cached {
		tFInterestTxnUpsertCacheMut.Lock()
		tFInterestTxnUpsertCache[key] = cache
		tFInterestTxnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFInterestTxn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFInterestTxn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFInterestTxn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFInterestTxnPrimaryKeyMapping)
	sql := "DELETE FROM `TFInterestTxn` WHERE `trade_interest_id`=? AND `transaction_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFInterestTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFInterestTxn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFInterestTxnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFInterestTxnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFInterestTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFInterestTxn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFInterestTxnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFInterestTxn slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFInterestTxnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFInterestTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestTxnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFInterestTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFInterestTxn")
	}

	if len(tFInterestTxnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFInterestTxn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFInterestTxn(ctx, exec, o.TradeInterestID, o.TransactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFInterestTxnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFInterestTxnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFInterestTxn`.* FROM `TFInterestTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestTxnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFInterestTxnSlice")
	}

	*o = slice

	return nil
}

// TFInterestTxnExists checks if the TFInterestTxn row exists.
func TFInterestTxnExists(ctx context.Context, exec boil.ContextExecutor, tradeInterestID int, transactionID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFInterestTxn` where `trade_interest_id`=? AND `transaction_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tradeInterestID, transactionID)
	}

	row := exec.QueryRowContext(ctx, sql, tradeInterestID, transactionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFInterestTxn exists")
	}

	return exists, nil
}
