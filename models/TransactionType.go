// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TransactionType is an object representing the database table.
type TransactionType struct {
	TransactionTypeID int         `boil:"transaction_type_id" json:"transaction_type_id" toml:"transaction_type_id" yaml:"transaction_type_id"`
	TransactionType   string      `boil:"transaction_type" json:"transaction_type" toml:"transaction_type" yaml:"transaction_type"`
	Active            null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	MakerDate         time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate       null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID           string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID         null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy        null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate      null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *transactionTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionTypeColumns = struct {
	TransactionTypeID string
	TransactionType   string
	Active            string
	Description       string
	MakerDate         string
	CheckerDate       string
	MakerID           string
	CheckerID         string
	ModifiedBy        string
	ModifiedDate      string
}{
	TransactionTypeID: "transaction_type_id",
	TransactionType:   "transaction_type",
	Active:            "active",
	Description:       "description",
	MakerDate:         "maker_date",
	CheckerDate:       "checker_date",
	MakerID:           "maker_id",
	CheckerID:         "checker_id",
	ModifiedBy:        "modified_by",
	ModifiedDate:      "modified_date",
}

// Generated where

var TransactionTypeWhere = struct {
	TransactionTypeID whereHelperint
	TransactionType   whereHelperstring
	Active            whereHelpernull_String
	Description       whereHelpernull_String
	MakerDate         whereHelpertime_Time
	CheckerDate       whereHelpernull_Time
	MakerID           whereHelperstring
	CheckerID         whereHelpernull_String
	ModifiedBy        whereHelpernull_String
	ModifiedDate      whereHelpernull_Time
}{
	TransactionTypeID: whereHelperint{field: `transaction_type_id`},
	TransactionType:   whereHelperstring{field: `transaction_type`},
	Active:            whereHelpernull_String{field: `active`},
	Description:       whereHelpernull_String{field: `description`},
	MakerDate:         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:       whereHelpernull_Time{field: `checker_date`},
	MakerID:           whereHelperstring{field: `maker_id`},
	CheckerID:         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:      whereHelpernull_Time{field: `modified_date`},
}

// TransactionTypeRels is where relationship names are stored.
var TransactionTypeRels = struct {
}{}

// transactionTypeR is where relationships are stored.
type transactionTypeR struct {
}

// NewStruct creates a new relationship struct
func (*transactionTypeR) NewStruct() *transactionTypeR {
	return &transactionTypeR{}
}

// transactionTypeL is where Load methods for each relationship are stored.
type transactionTypeL struct{}

var (
	transactionTypeColumns               = []string{"transaction_type_id", "transaction_type", "active", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transactionTypeColumnsWithoutDefault = []string{"transaction_type", "active", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transactionTypeColumnsWithDefault    = []string{"transaction_type_id"}
	transactionTypePrimaryKeyColumns     = []string{"transaction_type_id"}
)

type (
	// TransactionTypeSlice is an alias for a slice of pointers to TransactionType.
	// This should generally be used opposed to []TransactionType.
	TransactionTypeSlice []*TransactionType
	// TransactionTypeHook is the signature for custom TransactionType hook methods
	TransactionTypeHook func(context.Context, boil.ContextExecutor, *TransactionType) error

	transactionTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionTypeType                 = reflect.TypeOf(&TransactionType{})
	transactionTypeMapping              = queries.MakeStructMapping(transactionTypeType)
	transactionTypePrimaryKeyMapping, _ = queries.BindMapping(transactionTypeType, transactionTypeMapping, transactionTypePrimaryKeyColumns)
	transactionTypeInsertCacheMut       sync.RWMutex
	transactionTypeInsertCache          = make(map[string]insertCache)
	transactionTypeUpdateCacheMut       sync.RWMutex
	transactionTypeUpdateCache          = make(map[string]updateCache)
	transactionTypeUpsertCacheMut       sync.RWMutex
	transactionTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionTypeBeforeInsertHooks []TransactionTypeHook
var transactionTypeBeforeUpdateHooks []TransactionTypeHook
var transactionTypeBeforeDeleteHooks []TransactionTypeHook
var transactionTypeBeforeUpsertHooks []TransactionTypeHook

var transactionTypeAfterInsertHooks []TransactionTypeHook
var transactionTypeAfterSelectHooks []TransactionTypeHook
var transactionTypeAfterUpdateHooks []TransactionTypeHook
var transactionTypeAfterDeleteHooks []TransactionTypeHook
var transactionTypeAfterUpsertHooks []TransactionTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionTypeHook registers your hook function for all future operations.
func AddTransactionTypeHook(hookPoint boil.HookPoint, transactionTypeHook TransactionTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transactionTypeBeforeInsertHooks = append(transactionTypeBeforeInsertHooks, transactionTypeHook)
	case boil.BeforeUpdateHook:
		transactionTypeBeforeUpdateHooks = append(transactionTypeBeforeUpdateHooks, transactionTypeHook)
	case boil.BeforeDeleteHook:
		transactionTypeBeforeDeleteHooks = append(transactionTypeBeforeDeleteHooks, transactionTypeHook)
	case boil.BeforeUpsertHook:
		transactionTypeBeforeUpsertHooks = append(transactionTypeBeforeUpsertHooks, transactionTypeHook)
	case boil.AfterInsertHook:
		transactionTypeAfterInsertHooks = append(transactionTypeAfterInsertHooks, transactionTypeHook)
	case boil.AfterSelectHook:
		transactionTypeAfterSelectHooks = append(transactionTypeAfterSelectHooks, transactionTypeHook)
	case boil.AfterUpdateHook:
		transactionTypeAfterUpdateHooks = append(transactionTypeAfterUpdateHooks, transactionTypeHook)
	case boil.AfterDeleteHook:
		transactionTypeAfterDeleteHooks = append(transactionTypeAfterDeleteHooks, transactionTypeHook)
	case boil.AfterUpsertHook:
		transactionTypeAfterUpsertHooks = append(transactionTypeAfterUpsertHooks, transactionTypeHook)
	}
}

// One returns a single transactionType record from the query.
func (q transactionTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactionType, error) {
	o := &TransactionType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TransactionType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransactionType records from the query.
func (q transactionTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionTypeSlice, error) {
	var o []*TransactionType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransactionType slice")
	}

	if len(transactionTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransactionType records in the query.
func (q transactionTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TransactionType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TransactionType exists")
	}

	return count > 0, nil
}

// TransactionTypes retrieves all the records using an executor.
func TransactionTypes(mods ...qm.QueryMod) transactionTypeQuery {
	mods = append(mods, qm.From("`TransactionType`"))
	return transactionTypeQuery{NewQuery(mods...)}
}

// FindTransactionType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionType(ctx context.Context, exec boil.ContextExecutor, transactionTypeID int, selectCols ...string) (*TransactionType, error) {
	transactionTypeObj := &TransactionType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TransactionType` where `transaction_type_id`=?", sel,
	)

	q := queries.Raw(query, transactionTypeID)

	err := q.Bind(ctx, exec, transactionTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TransactionType")
	}

	return transactionTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TransactionType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionTypeInsertCacheMut.RLock()
	cache, cached := transactionTypeInsertCache[key]
	transactionTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionTypeColumns,
			transactionTypeColumnsWithDefault,
			transactionTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TransactionType` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TransactionType` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TransactionType` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TransactionType")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransactionTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionTypeMapping["TransactionTypeID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionTypeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TransactionType")
	}

CacheNoHooks:
	if !cached {
		transactionTypeInsertCacheMut.Lock()
		transactionTypeInsertCache[key] = cache
		transactionTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TransactionType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionTypeUpdateCacheMut.RLock()
	cache, cached := transactionTypeUpdateCache[key]
	transactionTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionTypeColumns,
			transactionTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TransactionType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TransactionType` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, append(wl, transactionTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TransactionType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TransactionType")
	}

	if !cached {
		transactionTypeUpdateCacheMut.Lock()
		transactionTypeUpdateCache[key] = cache
		transactionTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TransactionType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TransactionType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TransactionType` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transactionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transactionType")
	}
	return rowsAff, nil
}

var mySQLTransactionTypeUniqueColumns = []string{
	"transaction_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TransactionType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransactionTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionTypeUpsertCacheMut.RLock()
	cache, cached := transactionTypeUpsertCache[key]
	transactionTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionTypeColumns,
			transactionTypeColumnsWithDefault,
			transactionTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transactionTypeColumns,
			transactionTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TransactionType, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TransactionType", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TransactionType` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TransactionType")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransactionTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionTypeMapping["transaction_type_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transactionTypeType, transactionTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TransactionType")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TransactionType")
	}

CacheNoHooks:
	if !cached {
		transactionTypeUpsertCacheMut.Lock()
		transactionTypeUpsertCache[key] = cache
		transactionTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TransactionType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionTypePrimaryKeyMapping)
	sql := "DELETE FROM `TransactionType` WHERE `transaction_type_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TransactionType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TransactionType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactionTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TransactionType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TransactionType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TransactionType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TransactionType")
	}

	if len(transactionTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactionType(ctx, exec, o.TransactionTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TransactionType`.* FROM `TransactionType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionTypeSlice")
	}

	*o = slice

	return nil
}

// TransactionTypeExists checks if the TransactionType row exists.
func TransactionTypeExists(ctx context.Context, exec boil.ContextExecutor, transactionTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TransactionType` where `transaction_type_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transactionTypeID)
	}

	row := exec.QueryRowContext(ctx, sql, transactionTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TransactionType exists")
	}

	return exists, nil
}
