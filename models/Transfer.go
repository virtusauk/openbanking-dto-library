// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Transfer is an object representing the database table.
type Transfer struct {
	TransferID         int               `boil:"transfer_id" json:"transfer_id" toml:"transfer_id" yaml:"transfer_id"`
	Amount             types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	DateCreated        null.Time         `boil:"date_created" json:"date_created,omitempty" toml:"date_created" yaml:"date_created,omitempty"`
	ScheduledDate      null.Time         `boil:"scheduled_date" json:"scheduled_date,omitempty" toml:"scheduled_date" yaml:"scheduled_date,omitempty"`
	TransferStatus     null.String       `boil:"transfer_status" json:"transfer_status,omitempty" toml:"transfer_status" yaml:"transfer_status,omitempty"`
	FromCurrencyCode   null.String       `boil:"from_currency_code" json:"from_currency_code,omitempty" toml:"from_currency_code" yaml:"from_currency_code,omitempty"`
	FromPartyID        int               `boil:"from_party_id" json:"from_party_id" toml:"from_party_id" yaml:"from_party_id"`
	ToCurrencyCode     null.String       `boil:"to_currency_code" json:"to_currency_code,omitempty" toml:"to_currency_code" yaml:"to_currency_code,omitempty"`
	TransferMethodCode int               `boil:"transfer_method_code" json:"transfer_method_code" toml:"transfer_method_code" yaml:"transfer_method_code"`
	MakerDate          time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate        null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID            string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID          null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy         null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate       null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *transferR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transferL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransferColumns = struct {
	TransferID         string
	Amount             string
	DateCreated        string
	ScheduledDate      string
	TransferStatus     string
	FromCurrencyCode   string
	FromPartyID        string
	ToCurrencyCode     string
	TransferMethodCode string
	MakerDate          string
	CheckerDate        string
	MakerID            string
	CheckerID          string
	ModifiedBy         string
	ModifiedDate       string
}{
	TransferID:         "transfer_id",
	Amount:             "amount",
	DateCreated:        "date_created",
	ScheduledDate:      "scheduled_date",
	TransferStatus:     "transfer_status",
	FromCurrencyCode:   "from_currency_code",
	FromPartyID:        "from_party_id",
	ToCurrencyCode:     "to_currency_code",
	TransferMethodCode: "transfer_method_code",
	MakerDate:          "maker_date",
	CheckerDate:        "checker_date",
	MakerID:            "maker_id",
	CheckerID:          "checker_id",
	ModifiedBy:         "modified_by",
	ModifiedDate:       "modified_date",
}

// Generated where

var TransferWhere = struct {
	TransferID         whereHelperint
	Amount             whereHelpertypes_NullDecimal
	DateCreated        whereHelpernull_Time
	ScheduledDate      whereHelpernull_Time
	TransferStatus     whereHelpernull_String
	FromCurrencyCode   whereHelpernull_String
	FromPartyID        whereHelperint
	ToCurrencyCode     whereHelpernull_String
	TransferMethodCode whereHelperint
	MakerDate          whereHelpertime_Time
	CheckerDate        whereHelpernull_Time
	MakerID            whereHelperstring
	CheckerID          whereHelpernull_String
	ModifiedBy         whereHelpernull_String
	ModifiedDate       whereHelpernull_Time
}{
	TransferID:         whereHelperint{field: `transfer_id`},
	Amount:             whereHelpertypes_NullDecimal{field: `amount`},
	DateCreated:        whereHelpernull_Time{field: `date_created`},
	ScheduledDate:      whereHelpernull_Time{field: `scheduled_date`},
	TransferStatus:     whereHelpernull_String{field: `transfer_status`},
	FromCurrencyCode:   whereHelpernull_String{field: `from_currency_code`},
	FromPartyID:        whereHelperint{field: `from_party_id`},
	ToCurrencyCode:     whereHelpernull_String{field: `to_currency_code`},
	TransferMethodCode: whereHelperint{field: `transfer_method_code`},
	MakerDate:          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:        whereHelpernull_Time{field: `checker_date`},
	MakerID:            whereHelperstring{field: `maker_id`},
	CheckerID:          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:       whereHelpernull_Time{field: `modified_date`},
}

// TransferRels is where relationship names are stored.
var TransferRels = struct {
	FromParty             string
	TransferMethodCode    string
	TransferTransferAches string
	TransferTransferWires string
}{
	FromParty:             "FromParty",
	TransferMethodCode:    "TransferMethodCode",
	TransferTransferAches: "TransferTransferAches",
	TransferTransferWires: "TransferTransferWires",
}

// transferR is where relationships are stored.
type transferR struct {
	FromParty             *Party
	TransferMethodCode    *TransferMethod
	TransferTransferAches TransferAchSlice
	TransferTransferWires TransferWireSlice
}

// NewStruct creates a new relationship struct
func (*transferR) NewStruct() *transferR {
	return &transferR{}
}

// transferL is where Load methods for each relationship are stored.
type transferL struct{}

var (
	transferColumns               = []string{"transfer_id", "amount", "date_created", "scheduled_date", "transfer_status", "from_currency_code", "from_party_id", "to_currency_code", "transfer_method_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transferColumnsWithoutDefault = []string{"amount", "date_created", "scheduled_date", "transfer_status", "from_currency_code", "from_party_id", "to_currency_code", "transfer_method_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	transferColumnsWithDefault    = []string{"transfer_id"}
	transferPrimaryKeyColumns     = []string{"transfer_id"}
)

type (
	// TransferSlice is an alias for a slice of pointers to Transfer.
	// This should generally be used opposed to []Transfer.
	TransferSlice []*Transfer
	// TransferHook is the signature for custom Transfer hook methods
	TransferHook func(context.Context, boil.ContextExecutor, *Transfer) error

	transferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transferType                 = reflect.TypeOf(&Transfer{})
	transferMapping              = queries.MakeStructMapping(transferType)
	transferPrimaryKeyMapping, _ = queries.BindMapping(transferType, transferMapping, transferPrimaryKeyColumns)
	transferInsertCacheMut       sync.RWMutex
	transferInsertCache          = make(map[string]insertCache)
	transferUpdateCacheMut       sync.RWMutex
	transferUpdateCache          = make(map[string]updateCache)
	transferUpsertCacheMut       sync.RWMutex
	transferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transferBeforeInsertHooks []TransferHook
var transferBeforeUpdateHooks []TransferHook
var transferBeforeDeleteHooks []TransferHook
var transferBeforeUpsertHooks []TransferHook

var transferAfterInsertHooks []TransferHook
var transferAfterSelectHooks []TransferHook
var transferAfterUpdateHooks []TransferHook
var transferAfterDeleteHooks []TransferHook
var transferAfterUpsertHooks []TransferHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transfer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transfer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transfer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transfer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transfer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transfer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transfer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transfer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transfer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransferHook registers your hook function for all future operations.
func AddTransferHook(hookPoint boil.HookPoint, transferHook TransferHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transferBeforeInsertHooks = append(transferBeforeInsertHooks, transferHook)
	case boil.BeforeUpdateHook:
		transferBeforeUpdateHooks = append(transferBeforeUpdateHooks, transferHook)
	case boil.BeforeDeleteHook:
		transferBeforeDeleteHooks = append(transferBeforeDeleteHooks, transferHook)
	case boil.BeforeUpsertHook:
		transferBeforeUpsertHooks = append(transferBeforeUpsertHooks, transferHook)
	case boil.AfterInsertHook:
		transferAfterInsertHooks = append(transferAfterInsertHooks, transferHook)
	case boil.AfterSelectHook:
		transferAfterSelectHooks = append(transferAfterSelectHooks, transferHook)
	case boil.AfterUpdateHook:
		transferAfterUpdateHooks = append(transferAfterUpdateHooks, transferHook)
	case boil.AfterDeleteHook:
		transferAfterDeleteHooks = append(transferAfterDeleteHooks, transferHook)
	case boil.AfterUpsertHook:
		transferAfterUpsertHooks = append(transferAfterUpsertHooks, transferHook)
	}
}

// One returns a single transfer record from the query.
func (q transferQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Transfer, error) {
	o := &Transfer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Transfer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Transfer records from the query.
func (q transferQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransferSlice, error) {
	var o []*Transfer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Transfer slice")
	}

	if len(transferAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Transfer records in the query.
func (q transferQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Transfer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transferQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Transfer exists")
	}

	return count > 0, nil
}

// FromParty pointed to by the foreign key.
func (o *Transfer) FromParty(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.FromPartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// TransferMethodCode pointed to by the foreign key.
func (o *Transfer) TransferMethodCode1(mods ...qm.QueryMod) transferMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("transfer_method_code=?", o.TransferMethodCode),
	}

	queryMods = append(queryMods, mods...)

	query := TransferMethods(queryMods...)
	queries.SetFrom(query.Query, "`TransferMethod`")

	return query
}

// TransferTransferAches retrieves all the TransferAch's TransferAches with an executor via transfer_id column.
func (o *Transfer) TransferTransferAches(mods ...qm.QueryMod) transferAchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TransferAch`.`transfer_id`=?", o.TransferID),
	)

	query := TransferAches(queryMods...)
	queries.SetFrom(query.Query, "`TransferAch`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TransferAch`.*"})
	}

	return query
}

// TransferTransferWires retrieves all the TransferWire's TransferWires with an executor via transfer_id column.
func (o *Transfer) TransferTransferWires(mods ...qm.QueryMod) transferWireQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TransferWire`.`transfer_id`=?", o.TransferID),
	)

	query := TransferWires(queryMods...)
	queries.SetFrom(query.Query, "`TransferWire`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TransferWire`.*"})
	}

	return query
}

// LoadFromParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferL) LoadFromParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.FromPartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.FromPartyID {
					continue Outer
				}
			}

			args = append(args, obj.FromPartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(transferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromParty = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.FromPartyTransfers = append(foreign.R.FromPartyTransfers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromPartyID == foreign.PartyID {
				local.R.FromParty = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.FromPartyTransfers = append(foreign.R.FromPartyTransfers, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferMethodCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferL) LoadTransferMethodCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.TransferMethodCode)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.TransferMethodCode {
					continue Outer
				}
			}

			args = append(args, obj.TransferMethodCode)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TransferMethod`), qm.WhereIn(`transfer_method_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransferMethod")
	}

	var resultSlice []*TransferMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransferMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TransferMethod")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TransferMethod")
	}

	if len(transferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransferMethodCode = foreign
		if foreign.R == nil {
			foreign.R = &transferMethodR{}
		}
		foreign.R.TransferMethodCodeTransfers = append(foreign.R.TransferMethodCodeTransfers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransferMethodCode == foreign.TransferMethodCode {
				local.R.TransferMethodCode = foreign
				if foreign.R == nil {
					foreign.R = &transferMethodR{}
				}
				foreign.R.TransferMethodCodeTransfers = append(foreign.R.TransferMethodCodeTransfers, local)
				break
			}
		}
	}

	return nil
}

// LoadTransferTransferAches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transferL) LoadTransferTransferAches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.TransferID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.TransferID {
					continue Outer
				}
			}

			args = append(args, obj.TransferID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TransferAch`), qm.WhereIn(`transfer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransferAch")
	}

	var resultSlice []*TransferAch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransferAch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TransferAch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TransferAch")
	}

	if len(transferAchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferTransferAches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transferAchR{}
			}
			foreign.R.Transfer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TransferID == foreign.TransferID {
				local.R.TransferTransferAches = append(local.R.TransferTransferAches, foreign)
				if foreign.R == nil {
					foreign.R = &transferAchR{}
				}
				foreign.R.Transfer = local
				break
			}
		}
	}

	return nil
}

// LoadTransferTransferWires allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transferL) LoadTransferTransferWires(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.TransferID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.TransferID {
					continue Outer
				}
			}

			args = append(args, obj.TransferID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TransferWire`), qm.WhereIn(`transfer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransferWire")
	}

	var resultSlice []*TransferWire
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransferWire")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TransferWire")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TransferWire")
	}

	if len(transferWireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransferTransferWires = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transferWireR{}
			}
			foreign.R.Transfer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TransferID == foreign.TransferID {
				local.R.TransferTransferWires = append(local.R.TransferTransferWires, foreign)
				if foreign.R == nil {
					foreign.R = &transferWireR{}
				}
				foreign.R.Transfer = local
				break
			}
		}
	}

	return nil
}

// SetFromParty of the transfer to the related item.
// Sets o.R.FromParty to related.
// Adds o to related.R.FromPartyTransfers.
func (o *Transfer) SetFromParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Transfer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_party_id"}),
		strmangle.WhereClause("`", "`", 0, transferPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TransferID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromPartyID = related.PartyID
	if o.R == nil {
		o.R = &transferR{
			FromParty: related,
		}
	} else {
		o.R.FromParty = related
	}

	if related.R == nil {
		related.R = &partyR{
			FromPartyTransfers: TransferSlice{o},
		}
	} else {
		related.R.FromPartyTransfers = append(related.R.FromPartyTransfers, o)
	}

	return nil
}

// SetTransferMethodCode of the transfer to the related item.
// Sets o.R.TransferMethodCode to related.
// Adds o to related.R.TransferMethodCodeTransfers.
func (o *Transfer) SetTransferMethodCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TransferMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Transfer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transfer_method_code"}),
		strmangle.WhereClause("`", "`", 0, transferPrimaryKeyColumns),
	)
	values := []interface{}{related.TransferMethodCode, o.TransferID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransferMethodCode = related.TransferMethodCode
	if o.R == nil {
		o.R = &transferR{
			TransferMethodCode: related,
		}
	} else {
		o.R.TransferMethodCode = related
	}

	if related.R == nil {
		related.R = &transferMethodR{
			TransferMethodCodeTransfers: TransferSlice{o},
		}
	} else {
		related.R.TransferMethodCodeTransfers = append(related.R.TransferMethodCodeTransfers, o)
	}

	return nil
}

// AddTransferTransferAches adds the given related objects to the existing relationships
// of the Transfer, optionally inserting them as new records.
// Appends related to o.R.TransferTransferAches.
// Sets related.R.Transfer appropriately.
func (o *Transfer) AddTransferTransferAches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TransferAch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransferID = o.TransferID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TransferAch` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transfer_id"}),
				strmangle.WhereClause("`", "`", 0, transferAchPrimaryKeyColumns),
			)
			values := []interface{}{o.TransferID, rel.TransferAchID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransferID = o.TransferID
		}
	}

	if o.R == nil {
		o.R = &transferR{
			TransferTransferAches: related,
		}
	} else {
		o.R.TransferTransferAches = append(o.R.TransferTransferAches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transferAchR{
				Transfer: o,
			}
		} else {
			rel.R.Transfer = o
		}
	}
	return nil
}

// AddTransferTransferWires adds the given related objects to the existing relationships
// of the Transfer, optionally inserting them as new records.
// Appends related to o.R.TransferTransferWires.
// Sets related.R.Transfer appropriately.
func (o *Transfer) AddTransferTransferWires(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TransferWire) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransferID = o.TransferID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TransferWire` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transfer_id"}),
				strmangle.WhereClause("`", "`", 0, transferWirePrimaryKeyColumns),
			)
			values := []interface{}{o.TransferID, rel.TransferWireID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransferID = o.TransferID
		}
	}

	if o.R == nil {
		o.R = &transferR{
			TransferTransferWires: related,
		}
	} else {
		o.R.TransferTransferWires = append(o.R.TransferTransferWires, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transferWireR{
				Transfer: o,
			}
		} else {
			rel.R.Transfer = o
		}
	}
	return nil
}

// Transfers retrieves all the records using an executor.
func Transfers(mods ...qm.QueryMod) transferQuery {
	mods = append(mods, qm.From("`Transfer`"))
	return transferQuery{NewQuery(mods...)}
}

// FindTransfer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransfer(ctx context.Context, exec boil.ContextExecutor, transferID int, selectCols ...string) (*Transfer, error) {
	transferObj := &Transfer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Transfer` where `transfer_id`=?", sel,
	)

	q := queries.Raw(query, transferID)

	err := q.Bind(ctx, exec, transferObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Transfer")
	}

	return transferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transfer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Transfer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transferInsertCacheMut.RLock()
	cache, cached := transferInsertCache[key]
	transferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transferColumns,
			transferColumnsWithDefault,
			transferColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transferType, transferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Transfer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Transfer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Transfer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transferPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Transfer")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransferID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transferMapping["TransferID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransferID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Transfer")
	}

CacheNoHooks:
	if !cached {
		transferInsertCacheMut.Lock()
		transferInsertCache[key] = cache
		transferInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Transfer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transfer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transferUpdateCacheMut.RLock()
	cache, cached := transferUpdateCache[key]
	transferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transferColumns,
			transferPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Transfer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Transfer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, append(wl, transferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Transfer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Transfer")
	}

	if !cached {
		transferUpdateCacheMut.Lock()
		transferUpdateCache[key] = cache
		transferUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transferQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Transfer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Transfer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transfer")
	}
	return rowsAff, nil
}

var mySQLTransferUniqueColumns = []string{
	"transfer_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transfer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Transfer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTransferUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transferUpsertCacheMut.RLock()
	cache, cached := transferUpsertCache[key]
	transferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transferColumns,
			transferColumnsWithDefault,
			transferColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transferColumns,
			transferPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Transfer, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Transfer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Transfer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transferType, transferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Transfer")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TransferID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transferMapping["transfer_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(transferType, transferMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Transfer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Transfer")
	}

CacheNoHooks:
	if !cached {
		transferUpsertCacheMut.Lock()
		transferUpsertCache[key] = cache
		transferUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Transfer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transfer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Transfer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transferPrimaryKeyMapping)
	sql := "DELETE FROM `Transfer` WHERE `transfer_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Transfer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transferQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transferQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Transfer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Transfer slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(transferBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Transfer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Transfer")
	}

	if len(transferAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transfer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransfer(ctx, exec, o.TransferID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Transfer`.* FROM `Transfer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transferPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransferSlice")
	}

	*o = slice

	return nil
}

// TransferExists checks if the Transfer row exists.
func TransferExists(ctx context.Context, exec boil.ContextExecutor, transferID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Transfer` where `transfer_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transferID)
	}

	row := exec.QueryRowContext(ctx, sql, transferID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Transfer exists")
	}

	return exists, nil
}
