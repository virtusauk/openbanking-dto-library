// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFRisk is an object representing the database table.
type TFRisk struct {
	RiskID       int           `boil:"risk_id" json:"risk_id" toml:"risk_id" yaml:"risk_id"`
	RiskTypeID   int           `boil:"risk_type_id" json:"risk_type_id" toml:"risk_type_id" yaml:"risk_type_id"`
	BranchID     int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID      int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	TradeID      int           `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	RiskValue    types.Decimal `boil:"risk_value" json:"risk_value" toml:"risk_value" yaml:"risk_value"`
	MonthOfRisk  int           `boil:"month_of_risk" json:"month_of_risk" toml:"month_of_risk" yaml:"month_of_risk"`
	YearOfRisk   int           `boil:"year_of_risk" json:"year_of_risk" toml:"year_of_risk" yaml:"year_of_risk"`
	BankID       int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate    time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFRiskR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFRiskL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFRiskColumns = struct {
	RiskID       string
	RiskTypeID   string
	BranchID     string
	PartyID      string
	TradeID      string
	RiskValue    string
	MonthOfRisk  string
	YearOfRisk   string
	BankID       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	RiskID:       "risk_id",
	RiskTypeID:   "risk_type_id",
	BranchID:     "branch_id",
	PartyID:      "party_id",
	TradeID:      "trade_id",
	RiskValue:    "risk_value",
	MonthOfRisk:  "month_of_risk",
	YearOfRisk:   "year_of_risk",
	BankID:       "bank_id",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var TFRiskWhere = struct {
	RiskID       whereHelperint
	RiskTypeID   whereHelperint
	BranchID     whereHelperint
	PartyID      whereHelperint
	TradeID      whereHelperint
	RiskValue    whereHelpertypes_Decimal
	MonthOfRisk  whereHelperint
	YearOfRisk   whereHelperint
	BankID       whereHelperint
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	RiskID:       whereHelperint{field: `risk_id`},
	RiskTypeID:   whereHelperint{field: `risk_type_id`},
	BranchID:     whereHelperint{field: `branch_id`},
	PartyID:      whereHelperint{field: `party_id`},
	TradeID:      whereHelperint{field: `trade_id`},
	RiskValue:    whereHelpertypes_Decimal{field: `risk_value`},
	MonthOfRisk:  whereHelperint{field: `month_of_risk`},
	YearOfRisk:   whereHelperint{field: `year_of_risk`},
	BankID:       whereHelperint{field: `bank_id`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// TFRiskRels is where relationship names are stored.
var TFRiskRels = struct {
	Party    string
	RiskType string
	Trade    string
}{
	Party:    "Party",
	RiskType: "RiskType",
	Trade:    "Trade",
}

// tFRiskR is where relationships are stored.
type tFRiskR struct {
	Party    *Party
	RiskType *TFRiskType
	Trade    *TFTrade
}

// NewStruct creates a new relationship struct
func (*tFRiskR) NewStruct() *tFRiskR {
	return &tFRiskR{}
}

// tFRiskL is where Load methods for each relationship are stored.
type tFRiskL struct{}

var (
	tFRiskColumns               = []string{"risk_id", "risk_type_id", "branch_id", "party_id", "trade_id", "risk_value", "month_of_risk", "year_of_risk", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFRiskColumnsWithoutDefault = []string{"risk_id", "risk_type_id", "branch_id", "party_id", "trade_id", "risk_value", "month_of_risk", "year_of_risk", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFRiskColumnsWithDefault    = []string{}
	tFRiskPrimaryKeyColumns     = []string{"risk_id"}
)

type (
	// TFRiskSlice is an alias for a slice of pointers to TFRisk.
	// This should generally be used opposed to []TFRisk.
	TFRiskSlice []*TFRisk
	// TFRiskHook is the signature for custom TFRisk hook methods
	TFRiskHook func(context.Context, boil.ContextExecutor, *TFRisk) error

	tFRiskQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFRiskType                 = reflect.TypeOf(&TFRisk{})
	tFRiskMapping              = queries.MakeStructMapping(tFRiskType)
	tFRiskPrimaryKeyMapping, _ = queries.BindMapping(tFRiskType, tFRiskMapping, tFRiskPrimaryKeyColumns)
	tFRiskInsertCacheMut       sync.RWMutex
	tFRiskInsertCache          = make(map[string]insertCache)
	tFRiskUpdateCacheMut       sync.RWMutex
	tFRiskUpdateCache          = make(map[string]updateCache)
	tFRiskUpsertCacheMut       sync.RWMutex
	tFRiskUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFRiskBeforeInsertHooks []TFRiskHook
var tFRiskBeforeUpdateHooks []TFRiskHook
var tFRiskBeforeDeleteHooks []TFRiskHook
var tFRiskBeforeUpsertHooks []TFRiskHook

var tFRiskAfterInsertHooks []TFRiskHook
var tFRiskAfterSelectHooks []TFRiskHook
var tFRiskAfterUpdateHooks []TFRiskHook
var tFRiskAfterDeleteHooks []TFRiskHook
var tFRiskAfterUpsertHooks []TFRiskHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFRisk) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFRisk) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFRisk) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFRisk) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFRisk) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFRisk) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFRisk) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFRisk) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFRisk) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFRiskAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFRiskHook registers your hook function for all future operations.
func AddTFRiskHook(hookPoint boil.HookPoint, tFRiskHook TFRiskHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFRiskBeforeInsertHooks = append(tFRiskBeforeInsertHooks, tFRiskHook)
	case boil.BeforeUpdateHook:
		tFRiskBeforeUpdateHooks = append(tFRiskBeforeUpdateHooks, tFRiskHook)
	case boil.BeforeDeleteHook:
		tFRiskBeforeDeleteHooks = append(tFRiskBeforeDeleteHooks, tFRiskHook)
	case boil.BeforeUpsertHook:
		tFRiskBeforeUpsertHooks = append(tFRiskBeforeUpsertHooks, tFRiskHook)
	case boil.AfterInsertHook:
		tFRiskAfterInsertHooks = append(tFRiskAfterInsertHooks, tFRiskHook)
	case boil.AfterSelectHook:
		tFRiskAfterSelectHooks = append(tFRiskAfterSelectHooks, tFRiskHook)
	case boil.AfterUpdateHook:
		tFRiskAfterUpdateHooks = append(tFRiskAfterUpdateHooks, tFRiskHook)
	case boil.AfterDeleteHook:
		tFRiskAfterDeleteHooks = append(tFRiskAfterDeleteHooks, tFRiskHook)
	case boil.AfterUpsertHook:
		tFRiskAfterUpsertHooks = append(tFRiskAfterUpsertHooks, tFRiskHook)
	}
}

// One returns a single tFRisk record from the query.
func (q tFRiskQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFRisk, error) {
	o := &TFRisk{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFRisk")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFRisk records from the query.
func (q tFRiskQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFRiskSlice, error) {
	var o []*TFRisk

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFRisk slice")
	}

	if len(tFRiskAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFRisk records in the query.
func (q tFRiskQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFRisk rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFRiskQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFRisk exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *TFRisk) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// RiskType pointed to by the foreign key.
func (o *TFRisk) RiskType(mods ...qm.QueryMod) tFRiskTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("risk_type_id=?", o.RiskTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := TFRiskTypes(queryMods...)
	queries.SetFrom(query.Query, "`TFRiskType`")

	return query
}

// Trade pointed to by the foreign key.
func (o *TFRisk) Trade(mods ...qm.QueryMod) tFTradeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("trade_id=?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := TFTrades(queryMods...)
	queries.SetFrom(query.Query, "`TFTrade`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFRiskL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFRisk interface{}, mods queries.Applicator) error {
	var slice []*TFRisk
	var object *TFRisk

	if singular {
		object = maybeTFRisk.(*TFRisk)
	} else {
		slice = *maybeTFRisk.(*[]*TFRisk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFRiskR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFRiskR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFRiskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFRisks = append(foreign.R.PartyTFRisks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFRisks = append(foreign.R.PartyTFRisks, local)
				break
			}
		}
	}

	return nil
}

// LoadRiskType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFRiskL) LoadRiskType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFRisk interface{}, mods queries.Applicator) error {
	var slice []*TFRisk
	var object *TFRisk

	if singular {
		object = maybeTFRisk.(*TFRisk)
	} else {
		slice = *maybeTFRisk.(*[]*TFRisk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFRiskR{}
		}
		args = append(args, object.RiskTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFRiskR{}
			}

			for _, a := range args {
				if a == obj.RiskTypeID {
					continue Outer
				}
			}

			args = append(args, obj.RiskTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFRiskType`), qm.WhereIn(`risk_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFRiskType")
	}

	var resultSlice []*TFRiskType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFRiskType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFRiskType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFRiskType")
	}

	if len(tFRiskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RiskType = foreign
		if foreign.R == nil {
			foreign.R = &tFRiskTypeR{}
		}
		foreign.R.RiskTypeTFRisks = append(foreign.R.RiskTypeTFRisks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RiskTypeID == foreign.RiskTypeID {
				local.R.RiskType = foreign
				if foreign.R == nil {
					foreign.R = &tFRiskTypeR{}
				}
				foreign.R.RiskTypeTFRisks = append(foreign.R.RiskTypeTFRisks, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFRiskL) LoadTrade(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFRisk interface{}, mods queries.Applicator) error {
	var slice []*TFRisk
	var object *TFRisk

	if singular {
		object = maybeTFRisk.(*TFRisk)
	} else {
		slice = *maybeTFRisk.(*[]*TFRisk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFRiskR{}
		}
		args = append(args, object.TradeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFRiskR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFTrade`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFTrade")
	}

	var resultSlice []*TFTrade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFTrade")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFTrade")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFTrade")
	}

	if len(tFRiskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &tFTradeR{}
		}
		foreign.R.TradeTFRisks = append(foreign.R.TradeTFRisks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TradeID == foreign.TradeID {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &tFTradeR{}
				}
				foreign.R.TradeTFRisks = append(foreign.R.TradeTFRisks, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the tFRisk to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFRisks.
func (o *TFRisk) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFRisk` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.RiskID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFRiskR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFRisks: TFRiskSlice{o},
		}
	} else {
		related.R.PartyTFRisks = append(related.R.PartyTFRisks, o)
	}

	return nil
}

// SetRiskType of the tFRisk to the related item.
// Sets o.R.RiskType to related.
// Adds o to related.R.RiskTypeTFRisks.
func (o *TFRisk) SetRiskType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFRiskType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFRisk` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"risk_type_id"}),
		strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns),
	)
	values := []interface{}{related.RiskTypeID, o.RiskID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RiskTypeID = related.RiskTypeID
	if o.R == nil {
		o.R = &tFRiskR{
			RiskType: related,
		}
	} else {
		o.R.RiskType = related
	}

	if related.R == nil {
		related.R = &tFRiskTypeR{
			RiskTypeTFRisks: TFRiskSlice{o},
		}
	} else {
		related.R.RiskTypeTFRisks = append(related.R.RiskTypeTFRisks, o)
	}

	return nil
}

// SetTrade of the tFRisk to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.TradeTFRisks.
func (o *TFRisk) SetTrade(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFTrade) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFRisk` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"trade_id"}),
		strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns),
	)
	values := []interface{}{related.TradeID, o.RiskID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TradeID = related.TradeID
	if o.R == nil {
		o.R = &tFRiskR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &tFTradeR{
			TradeTFRisks: TFRiskSlice{o},
		}
	} else {
		related.R.TradeTFRisks = append(related.R.TradeTFRisks, o)
	}

	return nil
}

// TFRisks retrieves all the records using an executor.
func TFRisks(mods ...qm.QueryMod) tFRiskQuery {
	mods = append(mods, qm.From("`TFRisk`"))
	return tFRiskQuery{NewQuery(mods...)}
}

// FindTFRisk retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFRisk(ctx context.Context, exec boil.ContextExecutor, riskID int, selectCols ...string) (*TFRisk, error) {
	tFRiskObj := &TFRisk{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFRisk` where `risk_id`=?", sel,
	)

	q := queries.Raw(query, riskID)

	err := q.Bind(ctx, exec, tFRiskObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFRisk")
	}

	return tFRiskObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFRisk) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFRisk provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFRiskColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFRiskInsertCacheMut.RLock()
	cache, cached := tFRiskInsertCache[key]
	tFRiskInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFRiskColumns,
			tFRiskColumnsWithDefault,
			tFRiskColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFRiskType, tFRiskMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFRiskType, tFRiskMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFRisk` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFRisk` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFRisk` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFRisk")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RiskID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFRisk")
	}

CacheNoHooks:
	if !cached {
		tFRiskInsertCacheMut.Lock()
		tFRiskInsertCache[key] = cache
		tFRiskInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFRisk.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFRisk) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFRiskUpdateCacheMut.RLock()
	cache, cached := tFRiskUpdateCache[key]
	tFRiskUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFRiskColumns,
			tFRiskPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFRisk, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFRisk` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFRiskType, tFRiskMapping, append(wl, tFRiskPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFRisk row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFRisk")
	}

	if !cached {
		tFRiskUpdateCacheMut.Lock()
		tFRiskUpdateCache[key] = cache
		tFRiskUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFRiskQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFRisk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFRisk")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFRiskSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFRiskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFRisk` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFRiskPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFRisk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFRisk")
	}
	return rowsAff, nil
}

var mySQLTFRiskUniqueColumns = []string{
	"risk_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFRisk) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFRisk provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFRiskColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFRiskUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFRiskUpsertCacheMut.RLock()
	cache, cached := tFRiskUpsertCache[key]
	tFRiskUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFRiskColumns,
			tFRiskColumnsWithDefault,
			tFRiskColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFRiskColumns,
			tFRiskPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFRisk, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFRisk", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFRisk` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFRiskType, tFRiskMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFRiskType, tFRiskMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFRisk")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFRiskType, tFRiskMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFRisk")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFRisk")
	}

CacheNoHooks:
	if !cached {
		tFRiskUpsertCacheMut.Lock()
		tFRiskUpsertCache[key] = cache
		tFRiskUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFRisk record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFRisk) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFRisk provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFRiskPrimaryKeyMapping)
	sql := "DELETE FROM `TFRisk` WHERE `risk_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFRisk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFRisk")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFRiskQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFRiskQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFRisk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFRisk")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFRiskSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFRisk slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFRiskBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFRiskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFRisk` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFRiskPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFRisk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFRisk")
	}

	if len(tFRiskAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFRisk) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFRisk(ctx, exec, o.RiskID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFRiskSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFRiskSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFRiskPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFRisk`.* FROM `TFRisk` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFRiskPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFRiskSlice")
	}

	*o = slice

	return nil
}

// TFRiskExists checks if the TFRisk row exists.
func TFRiskExists(ctx context.Context, exec boil.ContextExecutor, riskID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFRisk` where `risk_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, riskID)
	}

	row := exec.QueryRowContext(ctx, sql, riskID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFRisk exists")
	}

	return exists, nil
}
