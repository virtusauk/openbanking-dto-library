// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentRtp is an object representing the database table.
type PaymentRtp struct {
	PaymentRTPID         int               `boil:"payment_rtp_id" json:"payment_rtp_id" toml:"payment_rtp_id" yaml:"payment_rtp_id"`
	PaymentID            int               `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	ReceiverTokenID      int               `boil:"receiver_token_id" json:"receiver_token_id" toml:"receiver_token_id" yaml:"receiver_token_id"`
	RTPRequestID         null.Int          `boil:"rtp_request_id" json:"rtp_request_id,omitempty" toml:"rtp_request_id" yaml:"rtp_request_id,omitempty"`
	PaymentRTPStatus     null.String       `boil:"payment_rtp_status" json:"payment_rtp_status,omitempty" toml:"payment_rtp_status" yaml:"payment_rtp_status,omitempty"`
	PaymentRTPAmount     types.NullDecimal `boil:"payment_rtp_amount" json:"payment_rtp_amount,omitempty" toml:"payment_rtp_amount" yaml:"payment_rtp_amount,omitempty"`
	ChargeRTPAmount      types.NullDecimal `boil:"charge_rtp_amount" json:"charge_rtp_amount,omitempty" toml:"charge_rtp_amount" yaml:"charge_rtp_amount,omitempty"`
	FinalRTPCreditAmount types.NullDecimal `boil:"final_rtp_credit_amount" json:"final_rtp_credit_amount,omitempty" toml:"final_rtp_credit_amount" yaml:"final_rtp_credit_amount,omitempty"`
	PaymentRTPDate       null.Time         `boil:"payment_rtp_date" json:"payment_rtp_date,omitempty" toml:"payment_rtp_date" yaml:"payment_rtp_date,omitempty"`
	MakerDate            time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentRtpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentRtpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentRtpColumns = struct {
	PaymentRTPID         string
	PaymentID            string
	ReceiverTokenID      string
	RTPRequestID         string
	PaymentRTPStatus     string
	PaymentRTPAmount     string
	ChargeRTPAmount      string
	FinalRTPCreditAmount string
	PaymentRTPDate       string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	PaymentRTPID:         "payment_rtp_id",
	PaymentID:            "payment_id",
	ReceiverTokenID:      "receiver_token_id",
	RTPRequestID:         "rtp_request_id",
	PaymentRTPStatus:     "payment_rtp_status",
	PaymentRTPAmount:     "payment_rtp_amount",
	ChargeRTPAmount:      "charge_rtp_amount",
	FinalRTPCreditAmount: "final_rtp_credit_amount",
	PaymentRTPDate:       "payment_rtp_date",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var PaymentRtpWhere = struct {
	PaymentRTPID         whereHelperint
	PaymentID            whereHelperint
	ReceiverTokenID      whereHelperint
	RTPRequestID         whereHelpernull_Int
	PaymentRTPStatus     whereHelpernull_String
	PaymentRTPAmount     whereHelpertypes_NullDecimal
	ChargeRTPAmount      whereHelpertypes_NullDecimal
	FinalRTPCreditAmount whereHelpertypes_NullDecimal
	PaymentRTPDate       whereHelpernull_Time
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	PaymentRTPID:         whereHelperint{field: `payment_rtp_id`},
	PaymentID:            whereHelperint{field: `payment_id`},
	ReceiverTokenID:      whereHelperint{field: `receiver_token_id`},
	RTPRequestID:         whereHelpernull_Int{field: `rtp_request_id`},
	PaymentRTPStatus:     whereHelpernull_String{field: `payment_rtp_status`},
	PaymentRTPAmount:     whereHelpertypes_NullDecimal{field: `payment_rtp_amount`},
	ChargeRTPAmount:      whereHelpertypes_NullDecimal{field: `charge_rtp_amount`},
	FinalRTPCreditAmount: whereHelpertypes_NullDecimal{field: `final_rtp_credit_amount`},
	PaymentRTPDate:       whereHelpernull_Time{field: `payment_rtp_date`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// PaymentRtpRels is where relationship names are stored.
var PaymentRtpRels = struct {
	Payment       string
	RTPRequest    string
	ReceiverToken string
}{
	Payment:       "Payment",
	RTPRequest:    "RTPRequest",
	ReceiverToken: "ReceiverToken",
}

// paymentRtpR is where relationships are stored.
type paymentRtpR struct {
	Payment       *PaymentInitiation
	RTPRequest    *RtpRequest
	ReceiverToken *RtpToken
}

// NewStruct creates a new relationship struct
func (*paymentRtpR) NewStruct() *paymentRtpR {
	return &paymentRtpR{}
}

// paymentRtpL is where Load methods for each relationship are stored.
type paymentRtpL struct{}

var (
	paymentRtpColumns               = []string{"payment_rtp_id", "payment_id", "receiver_token_id", "rtp_request_id", "payment_rtp_status", "payment_rtp_amount", "charge_rtp_amount", "final_rtp_credit_amount", "payment_rtp_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentRtpColumnsWithoutDefault = []string{"payment_id", "receiver_token_id", "rtp_request_id", "payment_rtp_status", "payment_rtp_amount", "charge_rtp_amount", "final_rtp_credit_amount", "payment_rtp_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentRtpColumnsWithDefault    = []string{"payment_rtp_id"}
	paymentRtpPrimaryKeyColumns     = []string{"payment_rtp_id"}
)

type (
	// PaymentRtpSlice is an alias for a slice of pointers to PaymentRtp.
	// This should generally be used opposed to []PaymentRtp.
	PaymentRtpSlice []*PaymentRtp
	// PaymentRtpHook is the signature for custom PaymentRtp hook methods
	PaymentRtpHook func(context.Context, boil.ContextExecutor, *PaymentRtp) error

	paymentRtpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentRtpType                 = reflect.TypeOf(&PaymentRtp{})
	paymentRtpMapping              = queries.MakeStructMapping(paymentRtpType)
	paymentRtpPrimaryKeyMapping, _ = queries.BindMapping(paymentRtpType, paymentRtpMapping, paymentRtpPrimaryKeyColumns)
	paymentRtpInsertCacheMut       sync.RWMutex
	paymentRtpInsertCache          = make(map[string]insertCache)
	paymentRtpUpdateCacheMut       sync.RWMutex
	paymentRtpUpdateCache          = make(map[string]updateCache)
	paymentRtpUpsertCacheMut       sync.RWMutex
	paymentRtpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentRtpBeforeInsertHooks []PaymentRtpHook
var paymentRtpBeforeUpdateHooks []PaymentRtpHook
var paymentRtpBeforeDeleteHooks []PaymentRtpHook
var paymentRtpBeforeUpsertHooks []PaymentRtpHook

var paymentRtpAfterInsertHooks []PaymentRtpHook
var paymentRtpAfterSelectHooks []PaymentRtpHook
var paymentRtpAfterUpdateHooks []PaymentRtpHook
var paymentRtpAfterDeleteHooks []PaymentRtpHook
var paymentRtpAfterUpsertHooks []PaymentRtpHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentRtp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentRtp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentRtp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentRtp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentRtp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentRtp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentRtp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentRtp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentRtp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentRtpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentRtpHook registers your hook function for all future operations.
func AddPaymentRtpHook(hookPoint boil.HookPoint, paymentRtpHook PaymentRtpHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentRtpBeforeInsertHooks = append(paymentRtpBeforeInsertHooks, paymentRtpHook)
	case boil.BeforeUpdateHook:
		paymentRtpBeforeUpdateHooks = append(paymentRtpBeforeUpdateHooks, paymentRtpHook)
	case boil.BeforeDeleteHook:
		paymentRtpBeforeDeleteHooks = append(paymentRtpBeforeDeleteHooks, paymentRtpHook)
	case boil.BeforeUpsertHook:
		paymentRtpBeforeUpsertHooks = append(paymentRtpBeforeUpsertHooks, paymentRtpHook)
	case boil.AfterInsertHook:
		paymentRtpAfterInsertHooks = append(paymentRtpAfterInsertHooks, paymentRtpHook)
	case boil.AfterSelectHook:
		paymentRtpAfterSelectHooks = append(paymentRtpAfterSelectHooks, paymentRtpHook)
	case boil.AfterUpdateHook:
		paymentRtpAfterUpdateHooks = append(paymentRtpAfterUpdateHooks, paymentRtpHook)
	case boil.AfterDeleteHook:
		paymentRtpAfterDeleteHooks = append(paymentRtpAfterDeleteHooks, paymentRtpHook)
	case boil.AfterUpsertHook:
		paymentRtpAfterUpsertHooks = append(paymentRtpAfterUpsertHooks, paymentRtpHook)
	}
}

// One returns a single paymentRtp record from the query.
func (q paymentRtpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentRtp, error) {
	o := &PaymentRtp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentRtp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentRtp records from the query.
func (q paymentRtpQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentRtpSlice, error) {
	var o []*PaymentRtp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentRtp slice")
	}

	if len(paymentRtpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentRtp records in the query.
func (q paymentRtpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentRtp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentRtpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentRtp exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentRtp) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// RTPRequest pointed to by the foreign key.
func (o *PaymentRtp) RTPRequest(mods ...qm.QueryMod) rtpRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("rtp_request_id=?", o.RTPRequestID),
	}

	queryMods = append(queryMods, mods...)

	query := RtpRequests(queryMods...)
	queries.SetFrom(query.Query, "`RtpRequest`")

	return query
}

// ReceiverToken pointed to by the foreign key.
func (o *PaymentRtp) ReceiverToken(mods ...qm.QueryMod) rtpTokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("token_id=?", o.ReceiverTokenID),
	}

	queryMods = append(queryMods, mods...)

	query := RtpTokens(queryMods...)
	queries.SetFrom(query.Query, "`RtpToken`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentRtpL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentRtp interface{}, mods queries.Applicator) error {
	var slice []*PaymentRtp
	var object *PaymentRtp

	if singular {
		object = maybePaymentRtp.(*PaymentRtp)
	} else {
		slice = *maybePaymentRtp.(*[]*PaymentRtp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentRtpR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentRtpR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentRtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentRtps = append(foreign.R.PaymentPaymentRtps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentRtps = append(foreign.R.PaymentPaymentRtps, local)
				break
			}
		}
	}

	return nil
}

// LoadRTPRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentRtpL) LoadRTPRequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentRtp interface{}, mods queries.Applicator) error {
	var slice []*PaymentRtp
	var object *PaymentRtp

	if singular {
		object = maybePaymentRtp.(*PaymentRtp)
	} else {
		slice = *maybePaymentRtp.(*[]*PaymentRtp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentRtpR{}
		}
		if !queries.IsNil(object.RTPRequestID) {
			args = append(args, object.RTPRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentRtpR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RTPRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RTPRequestID) {
				args = append(args, obj.RTPRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`RtpRequest`), qm.WhereIn(`rtp_request_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RtpRequest")
	}

	var resultSlice []*RtpRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RtpRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for RtpRequest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RtpRequest")
	}

	if len(paymentRtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RTPRequest = foreign
		if foreign.R == nil {
			foreign.R = &rtpRequestR{}
		}
		foreign.R.RTPRequestPaymentRtps = append(foreign.R.RTPRequestPaymentRtps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RTPRequestID, foreign.RTPRequestID) {
				local.R.RTPRequest = foreign
				if foreign.R == nil {
					foreign.R = &rtpRequestR{}
				}
				foreign.R.RTPRequestPaymentRtps = append(foreign.R.RTPRequestPaymentRtps, local)
				break
			}
		}
	}

	return nil
}

// LoadReceiverToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentRtpL) LoadReceiverToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentRtp interface{}, mods queries.Applicator) error {
	var slice []*PaymentRtp
	var object *PaymentRtp

	if singular {
		object = maybePaymentRtp.(*PaymentRtp)
	} else {
		slice = *maybePaymentRtp.(*[]*PaymentRtp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentRtpR{}
		}
		args = append(args, object.ReceiverTokenID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentRtpR{}
			}

			for _, a := range args {
				if a == obj.ReceiverTokenID {
					continue Outer
				}
			}

			args = append(args, obj.ReceiverTokenID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`RtpToken`), qm.WhereIn(`token_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RtpToken")
	}

	var resultSlice []*RtpToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RtpToken")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for RtpToken")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RtpToken")
	}

	if len(paymentRtpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReceiverToken = foreign
		if foreign.R == nil {
			foreign.R = &rtpTokenR{}
		}
		foreign.R.ReceiverTokenPaymentRtps = append(foreign.R.ReceiverTokenPaymentRtps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReceiverTokenID == foreign.TokenID {
				local.R.ReceiverToken = foreign
				if foreign.R == nil {
					foreign.R = &rtpTokenR{}
				}
				foreign.R.ReceiverTokenPaymentRtps = append(foreign.R.ReceiverTokenPaymentRtps, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentRtp to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentRtps.
func (o *PaymentRtp) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentRtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentRTPID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &paymentRtpR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentRtps: PaymentRtpSlice{o},
		}
	} else {
		related.R.PaymentPaymentRtps = append(related.R.PaymentPaymentRtps, o)
	}

	return nil
}

// SetRTPRequest of the paymentRtp to the related item.
// Sets o.R.RTPRequest to related.
// Adds o to related.R.RTPRequestPaymentRtps.
func (o *PaymentRtp) SetRTPRequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RtpRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentRtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"rtp_request_id"}),
		strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns),
	)
	values := []interface{}{related.RTPRequestID, o.PaymentRTPID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RTPRequestID, related.RTPRequestID)
	if o.R == nil {
		o.R = &paymentRtpR{
			RTPRequest: related,
		}
	} else {
		o.R.RTPRequest = related
	}

	if related.R == nil {
		related.R = &rtpRequestR{
			RTPRequestPaymentRtps: PaymentRtpSlice{o},
		}
	} else {
		related.R.RTPRequestPaymentRtps = append(related.R.RTPRequestPaymentRtps, o)
	}

	return nil
}

// RemoveRTPRequest relationship.
// Sets o.R.RTPRequest to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PaymentRtp) RemoveRTPRequest(ctx context.Context, exec boil.ContextExecutor, related *RtpRequest) error {
	var err error

	queries.SetScanner(&o.RTPRequestID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("rtp_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RTPRequest = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RTPRequestPaymentRtps {
		if queries.Equal(o.RTPRequestID, ri.RTPRequestID) {
			continue
		}

		ln := len(related.R.RTPRequestPaymentRtps)
		if ln > 1 && i < ln-1 {
			related.R.RTPRequestPaymentRtps[i] = related.R.RTPRequestPaymentRtps[ln-1]
		}
		related.R.RTPRequestPaymentRtps = related.R.RTPRequestPaymentRtps[:ln-1]
		break
	}
	return nil
}

// SetReceiverToken of the paymentRtp to the related item.
// Sets o.R.ReceiverToken to related.
// Adds o to related.R.ReceiverTokenPaymentRtps.
func (o *PaymentRtp) SetReceiverToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RtpToken) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentRtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"receiver_token_id"}),
		strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns),
	)
	values := []interface{}{related.TokenID, o.PaymentRTPID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReceiverTokenID = related.TokenID
	if o.R == nil {
		o.R = &paymentRtpR{
			ReceiverToken: related,
		}
	} else {
		o.R.ReceiverToken = related
	}

	if related.R == nil {
		related.R = &rtpTokenR{
			ReceiverTokenPaymentRtps: PaymentRtpSlice{o},
		}
	} else {
		related.R.ReceiverTokenPaymentRtps = append(related.R.ReceiverTokenPaymentRtps, o)
	}

	return nil
}

// PaymentRtps retrieves all the records using an executor.
func PaymentRtps(mods ...qm.QueryMod) paymentRtpQuery {
	mods = append(mods, qm.From("`PaymentRtp`"))
	return paymentRtpQuery{NewQuery(mods...)}
}

// FindPaymentRtp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentRtp(ctx context.Context, exec boil.ContextExecutor, paymentRTPID int, selectCols ...string) (*PaymentRtp, error) {
	paymentRtpObj := &PaymentRtp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentRtp` where `payment_rtp_id`=?", sel,
	)

	q := queries.Raw(query, paymentRTPID)

	err := q.Bind(ctx, exec, paymentRtpObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentRtp")
	}

	return paymentRtpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentRtp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentRtp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentRtpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentRtpInsertCacheMut.RLock()
	cache, cached := paymentRtpInsertCache[key]
	paymentRtpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentRtpColumns,
			paymentRtpColumnsWithDefault,
			paymentRtpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentRtp` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentRtp` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentRtp` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentRtp")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentRTPID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentRtpMapping["PaymentRTPID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentRTPID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentRtp")
	}

CacheNoHooks:
	if !cached {
		paymentRtpInsertCacheMut.Lock()
		paymentRtpInsertCache[key] = cache
		paymentRtpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentRtp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentRtp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentRtpUpdateCacheMut.RLock()
	cache, cached := paymentRtpUpdateCache[key]
	paymentRtpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentRtpColumns,
			paymentRtpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentRtp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentRtp` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentRtpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, append(wl, paymentRtpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentRtp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentRtp")
	}

	if !cached {
		paymentRtpUpdateCacheMut.Lock()
		paymentRtpUpdateCache[key] = cache
		paymentRtpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentRtpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentRtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentRtp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentRtpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentRtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentRtp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentRtpPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentRtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentRtp")
	}
	return rowsAff, nil
}

var mySQLPaymentRtpUniqueColumns = []string{
	"payment_rtp_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentRtp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentRtp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentRtpColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentRtpUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentRtpUpsertCacheMut.RLock()
	cache, cached := paymentRtpUpsertCache[key]
	paymentRtpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentRtpColumns,
			paymentRtpColumnsWithDefault,
			paymentRtpColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentRtpColumns,
			paymentRtpPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentRtp, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentRtp", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentRtp` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentRtp")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentRTPID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentRtpMapping["payment_rtp_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentRtpType, paymentRtpMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentRtp")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentRtp")
	}

CacheNoHooks:
	if !cached {
		paymentRtpUpsertCacheMut.Lock()
		paymentRtpUpsertCache[key] = cache
		paymentRtpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentRtp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentRtp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentRtp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentRtpPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentRtp` WHERE `payment_rtp_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentRtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentRtp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentRtpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentRtpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentRtp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentRtp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentRtpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentRtp slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentRtpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentRtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentRtp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentRtpPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentRtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentRtp")
	}

	if len(paymentRtpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentRtp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentRtp(ctx, exec, o.PaymentRTPID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentRtpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentRtpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentRtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentRtp`.* FROM `PaymentRtp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentRtpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentRtpSlice")
	}

	*o = slice

	return nil
}

// PaymentRtpExists checks if the PaymentRtp row exists.
func PaymentRtpExists(ctx context.Context, exec boil.ContextExecutor, paymentRTPID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentRtp` where `payment_rtp_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentRTPID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentRTPID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentRtp exists")
	}

	return exists, nil
}
