// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// StatementFee is an object representing the database table.
type StatementFee struct {
	StatementFeeID                   int               `boil:"statement_fee_id" json:"statement_fee_id" toml:"statement_fee_id" yaml:"statement_fee_id"`
	StatementID                      int               `boil:"statement_id" json:"statement_id" toml:"statement_id" yaml:"statement_id"`
	StatementFeeCreditDebitIndicator null.String       `boil:"statement_fee_credit_debit_indicator" json:"statement_fee_credit_debit_indicator,omitempty" toml:"statement_fee_credit_debit_indicator" yaml:"statement_fee_credit_debit_indicator,omitempty"`
	StatementFeeType                 null.String       `boil:"statement_fee_type" json:"statement_fee_type,omitempty" toml:"statement_fee_type" yaml:"statement_fee_type,omitempty"`
	Amount                           types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	Currency                         null.String       `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	MakerDate                        time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                      null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                          string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                        null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                       string            `boil:"modified_by" json:"modified_by" toml:"modified_by" yaml:"modified_by"`
	ModifiedDate                     time.Time         `boil:"modified_date" json:"modified_date" toml:"modified_date" yaml:"modified_date"`

	R *statementFeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statementFeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatementFeeColumns = struct {
	StatementFeeID                   string
	StatementID                      string
	StatementFeeCreditDebitIndicator string
	StatementFeeType                 string
	Amount                           string
	Currency                         string
	MakerDate                        string
	CheckerDate                      string
	MakerID                          string
	CheckerID                        string
	ModifiedBy                       string
	ModifiedDate                     string
}{
	StatementFeeID:                   "statement_fee_id",
	StatementID:                      "statement_id",
	StatementFeeCreditDebitIndicator: "statement_fee_credit_debit_indicator",
	StatementFeeType:                 "statement_fee_type",
	Amount:                           "amount",
	Currency:                         "currency",
	MakerDate:                        "maker_date",
	CheckerDate:                      "checker_date",
	MakerID:                          "maker_id",
	CheckerID:                        "checker_id",
	ModifiedBy:                       "modified_by",
	ModifiedDate:                     "modified_date",
}

// Generated where

var StatementFeeWhere = struct {
	StatementFeeID                   whereHelperint
	StatementID                      whereHelperint
	StatementFeeCreditDebitIndicator whereHelpernull_String
	StatementFeeType                 whereHelpernull_String
	Amount                           whereHelpertypes_NullDecimal
	Currency                         whereHelpernull_String
	MakerDate                        whereHelpertime_Time
	CheckerDate                      whereHelpernull_Time
	MakerID                          whereHelperstring
	CheckerID                        whereHelpernull_String
	ModifiedBy                       whereHelperstring
	ModifiedDate                     whereHelpertime_Time
}{
	StatementFeeID:                   whereHelperint{field: `statement_fee_id`},
	StatementID:                      whereHelperint{field: `statement_id`},
	StatementFeeCreditDebitIndicator: whereHelpernull_String{field: `statement_fee_credit_debit_indicator`},
	StatementFeeType:                 whereHelpernull_String{field: `statement_fee_type`},
	Amount:                           whereHelpertypes_NullDecimal{field: `amount`},
	Currency:                         whereHelpernull_String{field: `currency`},
	MakerDate:                        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                      whereHelpernull_Time{field: `checker_date`},
	MakerID:                          whereHelperstring{field: `maker_id`},
	CheckerID:                        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                       whereHelperstring{field: `modified_by`},
	ModifiedDate:                     whereHelpertime_Time{field: `modified_date`},
}

// StatementFeeRels is where relationship names are stored.
var StatementFeeRels = struct {
	Statement string
}{
	Statement: "Statement",
}

// statementFeeR is where relationships are stored.
type statementFeeR struct {
	Statement *Statement
}

// NewStruct creates a new relationship struct
func (*statementFeeR) NewStruct() *statementFeeR {
	return &statementFeeR{}
}

// statementFeeL is where Load methods for each relationship are stored.
type statementFeeL struct{}

var (
	statementFeeColumns               = []string{"statement_fee_id", "statement_id", "statement_fee_credit_debit_indicator", "statement_fee_type", "amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementFeeColumnsWithoutDefault = []string{"statement_fee_id", "statement_id", "statement_fee_credit_debit_indicator", "statement_fee_type", "amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementFeeColumnsWithDefault    = []string{}
	statementFeePrimaryKeyColumns     = []string{"statement_fee_id"}
)

type (
	// StatementFeeSlice is an alias for a slice of pointers to StatementFee.
	// This should generally be used opposed to []StatementFee.
	StatementFeeSlice []*StatementFee
	// StatementFeeHook is the signature for custom StatementFee hook methods
	StatementFeeHook func(context.Context, boil.ContextExecutor, *StatementFee) error

	statementFeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statementFeeType                 = reflect.TypeOf(&StatementFee{})
	statementFeeMapping              = queries.MakeStructMapping(statementFeeType)
	statementFeePrimaryKeyMapping, _ = queries.BindMapping(statementFeeType, statementFeeMapping, statementFeePrimaryKeyColumns)
	statementFeeInsertCacheMut       sync.RWMutex
	statementFeeInsertCache          = make(map[string]insertCache)
	statementFeeUpdateCacheMut       sync.RWMutex
	statementFeeUpdateCache          = make(map[string]updateCache)
	statementFeeUpsertCacheMut       sync.RWMutex
	statementFeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statementFeeBeforeInsertHooks []StatementFeeHook
var statementFeeBeforeUpdateHooks []StatementFeeHook
var statementFeeBeforeDeleteHooks []StatementFeeHook
var statementFeeBeforeUpsertHooks []StatementFeeHook

var statementFeeAfterInsertHooks []StatementFeeHook
var statementFeeAfterSelectHooks []StatementFeeHook
var statementFeeAfterUpdateHooks []StatementFeeHook
var statementFeeAfterDeleteHooks []StatementFeeHook
var statementFeeAfterUpsertHooks []StatementFeeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StatementFee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StatementFee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StatementFee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StatementFee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StatementFee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StatementFee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StatementFee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StatementFee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StatementFee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementFeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatementFeeHook registers your hook function for all future operations.
func AddStatementFeeHook(hookPoint boil.HookPoint, statementFeeHook StatementFeeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statementFeeBeforeInsertHooks = append(statementFeeBeforeInsertHooks, statementFeeHook)
	case boil.BeforeUpdateHook:
		statementFeeBeforeUpdateHooks = append(statementFeeBeforeUpdateHooks, statementFeeHook)
	case boil.BeforeDeleteHook:
		statementFeeBeforeDeleteHooks = append(statementFeeBeforeDeleteHooks, statementFeeHook)
	case boil.BeforeUpsertHook:
		statementFeeBeforeUpsertHooks = append(statementFeeBeforeUpsertHooks, statementFeeHook)
	case boil.AfterInsertHook:
		statementFeeAfterInsertHooks = append(statementFeeAfterInsertHooks, statementFeeHook)
	case boil.AfterSelectHook:
		statementFeeAfterSelectHooks = append(statementFeeAfterSelectHooks, statementFeeHook)
	case boil.AfterUpdateHook:
		statementFeeAfterUpdateHooks = append(statementFeeAfterUpdateHooks, statementFeeHook)
	case boil.AfterDeleteHook:
		statementFeeAfterDeleteHooks = append(statementFeeAfterDeleteHooks, statementFeeHook)
	case boil.AfterUpsertHook:
		statementFeeAfterUpsertHooks = append(statementFeeAfterUpsertHooks, statementFeeHook)
	}
}

// One returns a single statementFee record from the query.
func (q statementFeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StatementFee, error) {
	o := &StatementFee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for StatementFee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StatementFee records from the query.
func (q statementFeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (StatementFeeSlice, error) {
	var o []*StatementFee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StatementFee slice")
	}

	if len(statementFeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StatementFee records in the query.
func (q statementFeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count StatementFee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statementFeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if StatementFee exists")
	}

	return count > 0, nil
}

// Statement pointed to by the foreign key.
func (o *StatementFee) Statement(mods ...qm.QueryMod) statementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("statement_id=?", o.StatementID),
	}

	queryMods = append(queryMods, mods...)

	query := Statements(queryMods...)
	queries.SetFrom(query.Query, "`Statement`")

	return query
}

// LoadStatement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statementFeeL) LoadStatement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStatementFee interface{}, mods queries.Applicator) error {
	var slice []*StatementFee
	var object *StatementFee

	if singular {
		object = maybeStatementFee.(*StatementFee)
	} else {
		slice = *maybeStatementFee.(*[]*StatementFee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statementFeeR{}
		}
		args = append(args, object.StatementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statementFeeR{}
			}

			for _, a := range args {
				if a == obj.StatementID {
					continue Outer
				}
			}

			args = append(args, obj.StatementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Statement`), qm.WhereIn(`statement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Statement")
	}

	var resultSlice []*Statement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Statement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Statement")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Statement")
	}

	if len(statementFeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Statement = foreign
		if foreign.R == nil {
			foreign.R = &statementR{}
		}
		foreign.R.StatementStatementFees = append(foreign.R.StatementStatementFees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StatementID == foreign.StatementID {
				local.R.Statement = foreign
				if foreign.R == nil {
					foreign.R = &statementR{}
				}
				foreign.R.StatementStatementFees = append(foreign.R.StatementStatementFees, local)
				break
			}
		}
	}

	return nil
}

// SetStatement of the statementFee to the related item.
// Sets o.R.Statement to related.
// Adds o to related.R.StatementStatementFees.
func (o *StatementFee) SetStatement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Statement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `StatementFee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"statement_id"}),
		strmangle.WhereClause("`", "`", 0, statementFeePrimaryKeyColumns),
	)
	values := []interface{}{related.StatementID, o.StatementFeeID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StatementID = related.StatementID
	if o.R == nil {
		o.R = &statementFeeR{
			Statement: related,
		}
	} else {
		o.R.Statement = related
	}

	if related.R == nil {
		related.R = &statementR{
			StatementStatementFees: StatementFeeSlice{o},
		}
	} else {
		related.R.StatementStatementFees = append(related.R.StatementStatementFees, o)
	}

	return nil
}

// StatementFees retrieves all the records using an executor.
func StatementFees(mods ...qm.QueryMod) statementFeeQuery {
	mods = append(mods, qm.From("`StatementFee`"))
	return statementFeeQuery{NewQuery(mods...)}
}

// FindStatementFee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatementFee(ctx context.Context, exec boil.ContextExecutor, statementFeeID int, selectCols ...string) (*StatementFee, error) {
	statementFeeObj := &StatementFee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `StatementFee` where `statement_fee_id`=?", sel,
	)

	q := queries.Raw(query, statementFeeID)

	err := q.Bind(ctx, exec, statementFeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from StatementFee")
	}

	return statementFeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StatementFee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementFee provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementFeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statementFeeInsertCacheMut.RLock()
	cache, cached := statementFeeInsertCache[key]
	statementFeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statementFeeColumns,
			statementFeeColumnsWithDefault,
			statementFeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statementFeeType, statementFeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statementFeeType, statementFeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `StatementFee` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `StatementFee` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `StatementFee` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, statementFeePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into StatementFee")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StatementFeeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementFee")
	}

CacheNoHooks:
	if !cached {
		statementFeeInsertCacheMut.Lock()
		statementFeeInsertCache[key] = cache
		statementFeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StatementFee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StatementFee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	statementFeeUpdateCacheMut.RLock()
	cache, cached := statementFeeUpdateCache[key]
	statementFeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statementFeeColumns,
			statementFeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update StatementFee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `StatementFee` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, statementFeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statementFeeType, statementFeeMapping, append(wl, statementFeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update StatementFee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for StatementFee")
	}

	if !cached {
		statementFeeUpdateCacheMut.Lock()
		statementFeeUpdateCache[key] = cache
		statementFeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statementFeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for StatementFee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for StatementFee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatementFeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementFeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `StatementFee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementFeePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in statementFee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all statementFee")
	}
	return rowsAff, nil
}

var mySQLStatementFeeUniqueColumns = []string{
	"statement_fee_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StatementFee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementFee provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementFeeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStatementFeeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statementFeeUpsertCacheMut.RLock()
	cache, cached := statementFeeUpsertCache[key]
	statementFeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statementFeeColumns,
			statementFeeColumnsWithDefault,
			statementFeeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			statementFeeColumns,
			statementFeePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert StatementFee, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "StatementFee", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `StatementFee` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(statementFeeType, statementFeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statementFeeType, statementFeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for StatementFee")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(statementFeeType, statementFeeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for StatementFee")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementFee")
	}

CacheNoHooks:
	if !cached {
		statementFeeUpsertCacheMut.Lock()
		statementFeeUpsertCache[key] = cache
		statementFeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StatementFee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StatementFee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementFee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statementFeePrimaryKeyMapping)
	sql := "DELETE FROM `StatementFee` WHERE `statement_fee_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from StatementFee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for StatementFee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statementFeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no statementFeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from StatementFee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementFee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatementFeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementFee slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(statementFeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementFeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `StatementFee` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementFeePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from statementFee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementFee")
	}

	if len(statementFeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StatementFee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStatementFee(ctx, exec, o.StatementFeeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatementFeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatementFeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementFeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `StatementFee`.* FROM `StatementFee` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementFeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StatementFeeSlice")
	}

	*o = slice

	return nil
}

// StatementFeeExists checks if the StatementFee row exists.
func StatementFeeExists(ctx context.Context, exec boil.ContextExecutor, statementFeeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `StatementFee` where `statement_fee_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, statementFeeID)
	}

	row := exec.QueryRowContext(ctx, sql, statementFeeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if StatementFee exists")
	}

	return exists, nil
}
