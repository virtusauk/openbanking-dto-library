// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// StatementInterest is an object representing the database table.
type StatementInterest struct {
	StatementInterestID                   int               `boil:"statement_interest_id" json:"statement_interest_id" toml:"statement_interest_id" yaml:"statement_interest_id"`
	StatementID                           int               `boil:"statement_id" json:"statement_id" toml:"statement_id" yaml:"statement_id"`
	StatementInterestCreditDebitIndicator null.String       `boil:"statement_interest_credit_debit_indicator" json:"statement_interest_credit_debit_indicator,omitempty" toml:"statement_interest_credit_debit_indicator" yaml:"statement_interest_credit_debit_indicator,omitempty"`
	StatementInterestType                 null.String       `boil:"statement_interest_type" json:"statement_interest_type,omitempty" toml:"statement_interest_type" yaml:"statement_interest_type,omitempty"`
	Amount                                types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	Currency                              null.String       `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	MakerDate                             time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                           null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                               string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                             null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                            string            `boil:"modified_by" json:"modified_by" toml:"modified_by" yaml:"modified_by"`
	ModifiedDate                          time.Time         `boil:"modified_date" json:"modified_date" toml:"modified_date" yaml:"modified_date"`

	R *statementInterestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statementInterestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatementInterestColumns = struct {
	StatementInterestID                   string
	StatementID                           string
	StatementInterestCreditDebitIndicator string
	StatementInterestType                 string
	Amount                                string
	Currency                              string
	MakerDate                             string
	CheckerDate                           string
	MakerID                               string
	CheckerID                             string
	ModifiedBy                            string
	ModifiedDate                          string
}{
	StatementInterestID:                   "statement_interest_id",
	StatementID:                           "statement_id",
	StatementInterestCreditDebitIndicator: "statement_interest_credit_debit_indicator",
	StatementInterestType:                 "statement_interest_type",
	Amount:                                "amount",
	Currency:                              "currency",
	MakerDate:                             "maker_date",
	CheckerDate:                           "checker_date",
	MakerID:                               "maker_id",
	CheckerID:                             "checker_id",
	ModifiedBy:                            "modified_by",
	ModifiedDate:                          "modified_date",
}

// Generated where

var StatementInterestWhere = struct {
	StatementInterestID                   whereHelperint
	StatementID                           whereHelperint
	StatementInterestCreditDebitIndicator whereHelpernull_String
	StatementInterestType                 whereHelpernull_String
	Amount                                whereHelpertypes_NullDecimal
	Currency                              whereHelpernull_String
	MakerDate                             whereHelpertime_Time
	CheckerDate                           whereHelpernull_Time
	MakerID                               whereHelperstring
	CheckerID                             whereHelpernull_String
	ModifiedBy                            whereHelperstring
	ModifiedDate                          whereHelpertime_Time
}{
	StatementInterestID:                   whereHelperint{field: `statement_interest_id`},
	StatementID:                           whereHelperint{field: `statement_id`},
	StatementInterestCreditDebitIndicator: whereHelpernull_String{field: `statement_interest_credit_debit_indicator`},
	StatementInterestType:                 whereHelpernull_String{field: `statement_interest_type`},
	Amount:                                whereHelpertypes_NullDecimal{field: `amount`},
	Currency:                              whereHelpernull_String{field: `currency`},
	MakerDate:                             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                           whereHelpernull_Time{field: `checker_date`},
	MakerID:                               whereHelperstring{field: `maker_id`},
	CheckerID:                             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                            whereHelperstring{field: `modified_by`},
	ModifiedDate:                          whereHelpertime_Time{field: `modified_date`},
}

// StatementInterestRels is where relationship names are stored.
var StatementInterestRels = struct {
	Statement string
}{
	Statement: "Statement",
}

// statementInterestR is where relationships are stored.
type statementInterestR struct {
	Statement *Statement
}

// NewStruct creates a new relationship struct
func (*statementInterestR) NewStruct() *statementInterestR {
	return &statementInterestR{}
}

// statementInterestL is where Load methods for each relationship are stored.
type statementInterestL struct{}

var (
	statementInterestColumns               = []string{"statement_interest_id", "statement_id", "statement_interest_credit_debit_indicator", "statement_interest_type", "amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementInterestColumnsWithoutDefault = []string{"statement_interest_id", "statement_id", "statement_interest_credit_debit_indicator", "statement_interest_type", "amount", "currency", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	statementInterestColumnsWithDefault    = []string{}
	statementInterestPrimaryKeyColumns     = []string{"statement_interest_id"}
)

type (
	// StatementInterestSlice is an alias for a slice of pointers to StatementInterest.
	// This should generally be used opposed to []StatementInterest.
	StatementInterestSlice []*StatementInterest
	// StatementInterestHook is the signature for custom StatementInterest hook methods
	StatementInterestHook func(context.Context, boil.ContextExecutor, *StatementInterest) error

	statementInterestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statementInterestType                 = reflect.TypeOf(&StatementInterest{})
	statementInterestMapping              = queries.MakeStructMapping(statementInterestType)
	statementInterestPrimaryKeyMapping, _ = queries.BindMapping(statementInterestType, statementInterestMapping, statementInterestPrimaryKeyColumns)
	statementInterestInsertCacheMut       sync.RWMutex
	statementInterestInsertCache          = make(map[string]insertCache)
	statementInterestUpdateCacheMut       sync.RWMutex
	statementInterestUpdateCache          = make(map[string]updateCache)
	statementInterestUpsertCacheMut       sync.RWMutex
	statementInterestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var statementInterestBeforeInsertHooks []StatementInterestHook
var statementInterestBeforeUpdateHooks []StatementInterestHook
var statementInterestBeforeDeleteHooks []StatementInterestHook
var statementInterestBeforeUpsertHooks []StatementInterestHook

var statementInterestAfterInsertHooks []StatementInterestHook
var statementInterestAfterSelectHooks []StatementInterestHook
var statementInterestAfterUpdateHooks []StatementInterestHook
var statementInterestAfterDeleteHooks []StatementInterestHook
var statementInterestAfterUpsertHooks []StatementInterestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StatementInterest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StatementInterest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StatementInterest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StatementInterest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StatementInterest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StatementInterest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StatementInterest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StatementInterest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StatementInterest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range statementInterestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStatementInterestHook registers your hook function for all future operations.
func AddStatementInterestHook(hookPoint boil.HookPoint, statementInterestHook StatementInterestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		statementInterestBeforeInsertHooks = append(statementInterestBeforeInsertHooks, statementInterestHook)
	case boil.BeforeUpdateHook:
		statementInterestBeforeUpdateHooks = append(statementInterestBeforeUpdateHooks, statementInterestHook)
	case boil.BeforeDeleteHook:
		statementInterestBeforeDeleteHooks = append(statementInterestBeforeDeleteHooks, statementInterestHook)
	case boil.BeforeUpsertHook:
		statementInterestBeforeUpsertHooks = append(statementInterestBeforeUpsertHooks, statementInterestHook)
	case boil.AfterInsertHook:
		statementInterestAfterInsertHooks = append(statementInterestAfterInsertHooks, statementInterestHook)
	case boil.AfterSelectHook:
		statementInterestAfterSelectHooks = append(statementInterestAfterSelectHooks, statementInterestHook)
	case boil.AfterUpdateHook:
		statementInterestAfterUpdateHooks = append(statementInterestAfterUpdateHooks, statementInterestHook)
	case boil.AfterDeleteHook:
		statementInterestAfterDeleteHooks = append(statementInterestAfterDeleteHooks, statementInterestHook)
	case boil.AfterUpsertHook:
		statementInterestAfterUpsertHooks = append(statementInterestAfterUpsertHooks, statementInterestHook)
	}
}

// One returns a single statementInterest record from the query.
func (q statementInterestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StatementInterest, error) {
	o := &StatementInterest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for StatementInterest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StatementInterest records from the query.
func (q statementInterestQuery) All(ctx context.Context, exec boil.ContextExecutor) (StatementInterestSlice, error) {
	var o []*StatementInterest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StatementInterest slice")
	}

	if len(statementInterestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StatementInterest records in the query.
func (q statementInterestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count StatementInterest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statementInterestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if StatementInterest exists")
	}

	return count > 0, nil
}

// Statement pointed to by the foreign key.
func (o *StatementInterest) Statement(mods ...qm.QueryMod) statementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("statement_id=?", o.StatementID),
	}

	queryMods = append(queryMods, mods...)

	query := Statements(queryMods...)
	queries.SetFrom(query.Query, "`Statement`")

	return query
}

// LoadStatement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (statementInterestL) LoadStatement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStatementInterest interface{}, mods queries.Applicator) error {
	var slice []*StatementInterest
	var object *StatementInterest

	if singular {
		object = maybeStatementInterest.(*StatementInterest)
	} else {
		slice = *maybeStatementInterest.(*[]*StatementInterest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &statementInterestR{}
		}
		args = append(args, object.StatementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &statementInterestR{}
			}

			for _, a := range args {
				if a == obj.StatementID {
					continue Outer
				}
			}

			args = append(args, obj.StatementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Statement`), qm.WhereIn(`statement_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Statement")
	}

	var resultSlice []*Statement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Statement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Statement")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Statement")
	}

	if len(statementInterestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Statement = foreign
		if foreign.R == nil {
			foreign.R = &statementR{}
		}
		foreign.R.StatementStatementInterests = append(foreign.R.StatementStatementInterests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StatementID == foreign.StatementID {
				local.R.Statement = foreign
				if foreign.R == nil {
					foreign.R = &statementR{}
				}
				foreign.R.StatementStatementInterests = append(foreign.R.StatementStatementInterests, local)
				break
			}
		}
	}

	return nil
}

// SetStatement of the statementInterest to the related item.
// Sets o.R.Statement to related.
// Adds o to related.R.StatementStatementInterests.
func (o *StatementInterest) SetStatement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Statement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `StatementInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"statement_id"}),
		strmangle.WhereClause("`", "`", 0, statementInterestPrimaryKeyColumns),
	)
	values := []interface{}{related.StatementID, o.StatementInterestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StatementID = related.StatementID
	if o.R == nil {
		o.R = &statementInterestR{
			Statement: related,
		}
	} else {
		o.R.Statement = related
	}

	if related.R == nil {
		related.R = &statementR{
			StatementStatementInterests: StatementInterestSlice{o},
		}
	} else {
		related.R.StatementStatementInterests = append(related.R.StatementStatementInterests, o)
	}

	return nil
}

// StatementInterests retrieves all the records using an executor.
func StatementInterests(mods ...qm.QueryMod) statementInterestQuery {
	mods = append(mods, qm.From("`StatementInterest`"))
	return statementInterestQuery{NewQuery(mods...)}
}

// FindStatementInterest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatementInterest(ctx context.Context, exec boil.ContextExecutor, statementInterestID int, selectCols ...string) (*StatementInterest, error) {
	statementInterestObj := &StatementInterest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `StatementInterest` where `statement_interest_id`=?", sel,
	)

	q := queries.Raw(query, statementInterestID)

	err := q.Bind(ctx, exec, statementInterestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from StatementInterest")
	}

	return statementInterestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StatementInterest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementInterest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementInterestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statementInterestInsertCacheMut.RLock()
	cache, cached := statementInterestInsertCache[key]
	statementInterestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statementInterestColumns,
			statementInterestColumnsWithDefault,
			statementInterestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statementInterestType, statementInterestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statementInterestType, statementInterestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `StatementInterest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `StatementInterest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `StatementInterest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, statementInterestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into StatementInterest")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StatementInterestID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementInterest")
	}

CacheNoHooks:
	if !cached {
		statementInterestInsertCacheMut.Lock()
		statementInterestInsertCache[key] = cache
		statementInterestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StatementInterest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StatementInterest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	statementInterestUpdateCacheMut.RLock()
	cache, cached := statementInterestUpdateCache[key]
	statementInterestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statementInterestColumns,
			statementInterestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update StatementInterest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `StatementInterest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, statementInterestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statementInterestType, statementInterestMapping, append(wl, statementInterestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update StatementInterest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for StatementInterest")
	}

	if !cached {
		statementInterestUpdateCacheMut.Lock()
		statementInterestUpdateCache[key] = cache
		statementInterestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q statementInterestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for StatementInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for StatementInterest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatementInterestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `StatementInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementInterestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in statementInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all statementInterest")
	}
	return rowsAff, nil
}

var mySQLStatementInterestUniqueColumns = []string{
	"statement_interest_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StatementInterest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no StatementInterest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(statementInterestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStatementInterestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statementInterestUpsertCacheMut.RLock()
	cache, cached := statementInterestUpsertCache[key]
	statementInterestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statementInterestColumns,
			statementInterestColumnsWithDefault,
			statementInterestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			statementInterestColumns,
			statementInterestPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert StatementInterest, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "StatementInterest", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `StatementInterest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(statementInterestType, statementInterestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statementInterestType, statementInterestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for StatementInterest")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(statementInterestType, statementInterestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for StatementInterest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for StatementInterest")
	}

CacheNoHooks:
	if !cached {
		statementInterestUpsertCacheMut.Lock()
		statementInterestUpsertCache[key] = cache
		statementInterestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StatementInterest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StatementInterest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementInterest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statementInterestPrimaryKeyMapping)
	sql := "DELETE FROM `StatementInterest` WHERE `statement_interest_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from StatementInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for StatementInterest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statementInterestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no statementInterestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from StatementInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementInterest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatementInterestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StatementInterest slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(statementInterestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `StatementInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementInterestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from statementInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for StatementInterest")
	}

	if len(statementInterestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StatementInterest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStatementInterest(ctx, exec, o.StatementInterestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatementInterestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatementInterestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statementInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `StatementInterest`.* FROM `StatementInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statementInterestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StatementInterestSlice")
	}

	*o = slice

	return nil
}

// StatementInterestExists checks if the StatementInterest row exists.
func StatementInterestExists(ctx context.Context, exec boil.ContextExecutor, statementInterestID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `StatementInterest` where `statement_interest_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, statementInterestID)
	}

	row := exec.QueryRowContext(ctx, sql, statementInterestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if StatementInterest exists")
	}

	return exists, nil
}
