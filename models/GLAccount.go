// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GLAccount is an object representing the database table.
type GLAccount struct {
	GLCode       string      `boil:"gl_code" json:"gl_code" toml:"gl_code" yaml:"gl_code"`
	Type         string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	UsageType    null.String `boil:"usage_type" json:"usage_type,omitempty" toml:"usage_type" yaml:"usage_type,omitempty"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Activated    null.String `boil:"activated" json:"activated,omitempty" toml:"activated" yaml:"activated,omitempty"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	BankID       int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *gLAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gLAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GLAccountColumns = struct {
	GLCode       string
	Type         string
	UsageType    string
	Name         string
	Activated    string
	Description  string
	BankID       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	GLCode:       "gl_code",
	Type:         "type",
	UsageType:    "usage_type",
	Name:         "name",
	Activated:    "activated",
	Description:  "description",
	BankID:       "bank_id",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var GLAccountWhere = struct {
	GLCode       whereHelperstring
	Type         whereHelperstring
	UsageType    whereHelpernull_String
	Name         whereHelperstring
	Activated    whereHelpernull_String
	Description  whereHelpernull_String
	BankID       whereHelperint
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	GLCode:       whereHelperstring{field: `gl_code`},
	Type:         whereHelperstring{field: `type`},
	UsageType:    whereHelpernull_String{field: `usage_type`},
	Name:         whereHelperstring{field: `name`},
	Activated:    whereHelpernull_String{field: `activated`},
	Description:  whereHelpernull_String{field: `description`},
	BankID:       whereHelperint{field: `bank_id`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// GLAccountRels is where relationship names are stored.
var GLAccountRels = struct {
	Bank                           string
	GLAccountCodeJournalEntryLines string
}{
	Bank:                           "Bank",
	GLAccountCodeJournalEntryLines: "GLAccountCodeJournalEntryLines",
}

// gLAccountR is where relationships are stored.
type gLAccountR struct {
	Bank                           *Bank
	GLAccountCodeJournalEntryLines JournalEntryLineSlice
}

// NewStruct creates a new relationship struct
func (*gLAccountR) NewStruct() *gLAccountR {
	return &gLAccountR{}
}

// gLAccountL is where Load methods for each relationship are stored.
type gLAccountL struct{}

var (
	gLAccountColumns               = []string{"gl_code", "type", "usage_type", "name", "activated", "description", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	gLAccountColumnsWithoutDefault = []string{"gl_code", "type", "usage_type", "name", "activated", "description", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	gLAccountColumnsWithDefault    = []string{}
	gLAccountPrimaryKeyColumns     = []string{"gl_code"}
)

type (
	// GLAccountSlice is an alias for a slice of pointers to GLAccount.
	// This should generally be used opposed to []GLAccount.
	GLAccountSlice []*GLAccount
	// GLAccountHook is the signature for custom GLAccount hook methods
	GLAccountHook func(context.Context, boil.ContextExecutor, *GLAccount) error

	gLAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gLAccountType                 = reflect.TypeOf(&GLAccount{})
	gLAccountMapping              = queries.MakeStructMapping(gLAccountType)
	gLAccountPrimaryKeyMapping, _ = queries.BindMapping(gLAccountType, gLAccountMapping, gLAccountPrimaryKeyColumns)
	gLAccountInsertCacheMut       sync.RWMutex
	gLAccountInsertCache          = make(map[string]insertCache)
	gLAccountUpdateCacheMut       sync.RWMutex
	gLAccountUpdateCache          = make(map[string]updateCache)
	gLAccountUpsertCacheMut       sync.RWMutex
	gLAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gLAccountBeforeInsertHooks []GLAccountHook
var gLAccountBeforeUpdateHooks []GLAccountHook
var gLAccountBeforeDeleteHooks []GLAccountHook
var gLAccountBeforeUpsertHooks []GLAccountHook

var gLAccountAfterInsertHooks []GLAccountHook
var gLAccountAfterSelectHooks []GLAccountHook
var gLAccountAfterUpdateHooks []GLAccountHook
var gLAccountAfterDeleteHooks []GLAccountHook
var gLAccountAfterUpsertHooks []GLAccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GLAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GLAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GLAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GLAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GLAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GLAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GLAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GLAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GLAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gLAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGLAccountHook registers your hook function for all future operations.
func AddGLAccountHook(hookPoint boil.HookPoint, gLAccountHook GLAccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gLAccountBeforeInsertHooks = append(gLAccountBeforeInsertHooks, gLAccountHook)
	case boil.BeforeUpdateHook:
		gLAccountBeforeUpdateHooks = append(gLAccountBeforeUpdateHooks, gLAccountHook)
	case boil.BeforeDeleteHook:
		gLAccountBeforeDeleteHooks = append(gLAccountBeforeDeleteHooks, gLAccountHook)
	case boil.BeforeUpsertHook:
		gLAccountBeforeUpsertHooks = append(gLAccountBeforeUpsertHooks, gLAccountHook)
	case boil.AfterInsertHook:
		gLAccountAfterInsertHooks = append(gLAccountAfterInsertHooks, gLAccountHook)
	case boil.AfterSelectHook:
		gLAccountAfterSelectHooks = append(gLAccountAfterSelectHooks, gLAccountHook)
	case boil.AfterUpdateHook:
		gLAccountAfterUpdateHooks = append(gLAccountAfterUpdateHooks, gLAccountHook)
	case boil.AfterDeleteHook:
		gLAccountAfterDeleteHooks = append(gLAccountAfterDeleteHooks, gLAccountHook)
	case boil.AfterUpsertHook:
		gLAccountAfterUpsertHooks = append(gLAccountAfterUpsertHooks, gLAccountHook)
	}
}

// One returns a single gLAccount record from the query.
func (q gLAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GLAccount, error) {
	o := &GLAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for GLAccount")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GLAccount records from the query.
func (q gLAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (GLAccountSlice, error) {
	var o []*GLAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GLAccount slice")
	}

	if len(gLAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GLAccount records in the query.
func (q gLAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count GLAccount rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gLAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if GLAccount exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *GLAccount) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// GLAccountCodeJournalEntryLines retrieves all the JournalEntryLine's JournalEntryLines with an executor via gl_account_code column.
func (o *GLAccount) GLAccountCodeJournalEntryLines(mods ...qm.QueryMod) journalEntryLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`JournalEntryLine`.`gl_account_code`=?", o.GLCode),
	)

	query := JournalEntryLines(queryMods...)
	queries.SetFrom(query.Query, "`JournalEntryLine`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`JournalEntryLine`.*"})
	}

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gLAccountL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGLAccount interface{}, mods queries.Applicator) error {
	var slice []*GLAccount
	var object *GLAccount

	if singular {
		object = maybeGLAccount.(*GLAccount)
	} else {
		slice = *maybeGLAccount.(*[]*GLAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gLAccountR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gLAccountR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(gLAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankGLAccounts = append(foreign.R.BankGLAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankGLAccounts = append(foreign.R.BankGLAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadGLAccountCodeJournalEntryLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gLAccountL) LoadGLAccountCodeJournalEntryLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGLAccount interface{}, mods queries.Applicator) error {
	var slice []*GLAccount
	var object *GLAccount

	if singular {
		object = maybeGLAccount.(*GLAccount)
	} else {
		slice = *maybeGLAccount.(*[]*GLAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gLAccountR{}
		}
		args = append(args, object.GLCode)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gLAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GLCode) {
					continue Outer
				}
			}

			args = append(args, obj.GLCode)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`JournalEntryLine`), qm.WhereIn(`gl_account_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load JournalEntryLine")
	}

	var resultSlice []*JournalEntryLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice JournalEntryLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on JournalEntryLine")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for JournalEntryLine")
	}

	if len(journalEntryLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GLAccountCodeJournalEntryLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &journalEntryLineR{}
			}
			foreign.R.GLAccountCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.GLCode, foreign.GLAccountCode) {
				local.R.GLAccountCodeJournalEntryLines = append(local.R.GLAccountCodeJournalEntryLines, foreign)
				if foreign.R == nil {
					foreign.R = &journalEntryLineR{}
				}
				foreign.R.GLAccountCode = local
				break
			}
		}
	}

	return nil
}

// SetBank of the gLAccount to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankGLAccounts.
func (o *GLAccount) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `GLAccount` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, gLAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.GLCode}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &gLAccountR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankGLAccounts: GLAccountSlice{o},
		}
	} else {
		related.R.BankGLAccounts = append(related.R.BankGLAccounts, o)
	}

	return nil
}

// AddGLAccountCodeJournalEntryLines adds the given related objects to the existing relationships
// of the GLAccount, optionally inserting them as new records.
// Appends related to o.R.GLAccountCodeJournalEntryLines.
// Sets related.R.GLAccountCode appropriately.
func (o *GLAccount) AddGLAccountCodeJournalEntryLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JournalEntryLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GLAccountCode, o.GLCode)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `JournalEntryLine` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"gl_account_code"}),
				strmangle.WhereClause("`", "`", 0, journalEntryLinePrimaryKeyColumns),
			)
			values := []interface{}{o.GLCode, rel.JournalEntryLineID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GLAccountCode, o.GLCode)
		}
	}

	if o.R == nil {
		o.R = &gLAccountR{
			GLAccountCodeJournalEntryLines: related,
		}
	} else {
		o.R.GLAccountCodeJournalEntryLines = append(o.R.GLAccountCodeJournalEntryLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &journalEntryLineR{
				GLAccountCode: o,
			}
		} else {
			rel.R.GLAccountCode = o
		}
	}
	return nil
}

// SetGLAccountCodeJournalEntryLines removes all previously related items of the
// GLAccount replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GLAccountCode's GLAccountCodeJournalEntryLines accordingly.
// Replaces o.R.GLAccountCodeJournalEntryLines with related.
// Sets related.R.GLAccountCode's GLAccountCodeJournalEntryLines accordingly.
func (o *GLAccount) SetGLAccountCodeJournalEntryLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JournalEntryLine) error {
	query := "update `JournalEntryLine` set `gl_account_code` = null where `gl_account_code` = ?"
	values := []interface{}{o.GLCode}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GLAccountCodeJournalEntryLines {
			queries.SetScanner(&rel.GLAccountCode, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GLAccountCode = nil
		}

		o.R.GLAccountCodeJournalEntryLines = nil
	}
	return o.AddGLAccountCodeJournalEntryLines(ctx, exec, insert, related...)
}

// RemoveGLAccountCodeJournalEntryLines relationships from objects passed in.
// Removes related items from R.GLAccountCodeJournalEntryLines (uses pointer comparison, removal does not keep order)
// Sets related.R.GLAccountCode.
func (o *GLAccount) RemoveGLAccountCodeJournalEntryLines(ctx context.Context, exec boil.ContextExecutor, related ...*JournalEntryLine) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GLAccountCode, nil)
		if rel.R != nil {
			rel.R.GLAccountCode = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("gl_account_code")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GLAccountCodeJournalEntryLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.GLAccountCodeJournalEntryLines)
			if ln > 1 && i < ln-1 {
				o.R.GLAccountCodeJournalEntryLines[i] = o.R.GLAccountCodeJournalEntryLines[ln-1]
			}
			o.R.GLAccountCodeJournalEntryLines = o.R.GLAccountCodeJournalEntryLines[:ln-1]
			break
		}
	}

	return nil
}

// GLAccounts retrieves all the records using an executor.
func GLAccounts(mods ...qm.QueryMod) gLAccountQuery {
	mods = append(mods, qm.From("`GLAccount`"))
	return gLAccountQuery{NewQuery(mods...)}
}

// FindGLAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGLAccount(ctx context.Context, exec boil.ContextExecutor, gLCode string, selectCols ...string) (*GLAccount, error) {
	gLAccountObj := &GLAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `GLAccount` where `gl_code`=?", sel,
	)

	q := queries.Raw(query, gLCode)

	err := q.Bind(ctx, exec, gLAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from GLAccount")
	}

	return gLAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GLAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GLAccount provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gLAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gLAccountInsertCacheMut.RLock()
	cache, cached := gLAccountInsertCache[key]
	gLAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gLAccountColumns,
			gLAccountColumnsWithDefault,
			gLAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gLAccountType, gLAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gLAccountType, gLAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `GLAccount` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `GLAccount` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `GLAccount` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gLAccountPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into GLAccount")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GLCode,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for GLAccount")
	}

CacheNoHooks:
	if !cached {
		gLAccountInsertCacheMut.Lock()
		gLAccountInsertCache[key] = cache
		gLAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GLAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GLAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gLAccountUpdateCacheMut.RLock()
	cache, cached := gLAccountUpdateCache[key]
	gLAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gLAccountColumns,
			gLAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update GLAccount, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `GLAccount` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gLAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gLAccountType, gLAccountMapping, append(wl, gLAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update GLAccount row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for GLAccount")
	}

	if !cached {
		gLAccountUpdateCacheMut.Lock()
		gLAccountUpdateCache[key] = cache
		gLAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gLAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for GLAccount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for GLAccount")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GLAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gLAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `GLAccount` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gLAccountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gLAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gLAccount")
	}
	return rowsAff, nil
}

var mySQLGLAccountUniqueColumns = []string{
	"gl_code",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GLAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GLAccount provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gLAccountColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGLAccountUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gLAccountUpsertCacheMut.RLock()
	cache, cached := gLAccountUpsertCache[key]
	gLAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gLAccountColumns,
			gLAccountColumnsWithDefault,
			gLAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			gLAccountColumns,
			gLAccountPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert GLAccount, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "GLAccount", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `GLAccount` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gLAccountType, gLAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gLAccountType, gLAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for GLAccount")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gLAccountType, gLAccountMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for GLAccount")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for GLAccount")
	}

CacheNoHooks:
	if !cached {
		gLAccountUpsertCacheMut.Lock()
		gLAccountUpsertCache[key] = cache
		gLAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GLAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GLAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GLAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gLAccountPrimaryKeyMapping)
	sql := "DELETE FROM `GLAccount` WHERE `gl_code`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from GLAccount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for GLAccount")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gLAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gLAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from GLAccount")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GLAccount")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GLAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GLAccount slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(gLAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gLAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `GLAccount` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gLAccountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gLAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GLAccount")
	}

	if len(gLAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GLAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGLAccount(ctx, exec, o.GLCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GLAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GLAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gLAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `GLAccount`.* FROM `GLAccount` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gLAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GLAccountSlice")
	}

	*o = slice

	return nil
}

// GLAccountExists checks if the GLAccount row exists.
func GLAccountExists(ctx context.Context, exec boil.ContextExecutor, gLCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `GLAccount` where `gl_code`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, gLCode)
	}

	row := exec.QueryRowContext(ctx, sql, gLCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if GLAccount exists")
	}

	return exists, nil
}
