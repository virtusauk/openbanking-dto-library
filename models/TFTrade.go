// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFTrade is an object representing the database table.
type TFTrade struct {
	TradeID            int               `boil:"trade_id" json:"trade_id" toml:"trade_id" yaml:"trade_id"`
	BranchID           int               `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	FromPartyID        int               `boil:"from_party_id" json:"from_party_id" toml:"from_party_id" yaml:"from_party_id"`
	ToPartyID          int               `boil:"to_party_id" json:"to_party_id" toml:"to_party_id" yaml:"to_party_id"`
	IssueingBankID     int               `boil:"issueing_bank_id" json:"issueing_bank_id" toml:"issueing_bank_id" yaml:"issueing_bank_id"`
	ConfirmingBankID   int               `boil:"confirming_bank_id" json:"confirming_bank_id" toml:"confirming_bank_id" yaml:"confirming_bank_id"`
	TradeStatus        null.String       `boil:"trade_status" json:"trade_status,omitempty" toml:"trade_status" yaml:"trade_status,omitempty"`
	ApplicationDate    null.Time         `boil:"application_date" json:"application_date,omitempty" toml:"application_date" yaml:"application_date,omitempty"`
	TradeRisk          types.NullDecimal `boil:"trade_risk" json:"trade_risk,omitempty" toml:"trade_risk" yaml:"trade_risk,omitempty"`
	Amount             types.NullDecimal `boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	CurrencyCode       string            `boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	IsRequiredShipping null.String       `boil:"is_required_shipping" json:"is_required_shipping,omitempty" toml:"is_required_shipping" yaml:"is_required_shipping,omitempty"`
	DaysOfPayment      null.Int          `boil:"days_of_payment" json:"days_of_payment,omitempty" toml:"days_of_payment" yaml:"days_of_payment,omitempty"`
	DateOfPayment      null.Time         `boil:"date_of_payment" json:"date_of_payment,omitempty" toml:"date_of_payment" yaml:"date_of_payment,omitempty"`
	BankID             int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate          time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate        null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID            string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID          null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy         null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate       null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFTradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFTradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFTradeColumns = struct {
	TradeID            string
	BranchID           string
	FromPartyID        string
	ToPartyID          string
	IssueingBankID     string
	ConfirmingBankID   string
	TradeStatus        string
	ApplicationDate    string
	TradeRisk          string
	Amount             string
	CurrencyCode       string
	IsRequiredShipping string
	DaysOfPayment      string
	DateOfPayment      string
	BankID             string
	MakerDate          string
	CheckerDate        string
	MakerID            string
	CheckerID          string
	ModifiedBy         string
	ModifiedDate       string
}{
	TradeID:            "trade_id",
	BranchID:           "branch_id",
	FromPartyID:        "from_party_id",
	ToPartyID:          "to_party_id",
	IssueingBankID:     "issueing_bank_id",
	ConfirmingBankID:   "confirming_bank_id",
	TradeStatus:        "trade_status",
	ApplicationDate:    "application_date",
	TradeRisk:          "trade_risk",
	Amount:             "amount",
	CurrencyCode:       "currency_code",
	IsRequiredShipping: "is_required_shipping",
	DaysOfPayment:      "days_of_payment",
	DateOfPayment:      "date_of_payment",
	BankID:             "bank_id",
	MakerDate:          "maker_date",
	CheckerDate:        "checker_date",
	MakerID:            "maker_id",
	CheckerID:          "checker_id",
	ModifiedBy:         "modified_by",
	ModifiedDate:       "modified_date",
}

// Generated where

var TFTradeWhere = struct {
	TradeID            whereHelperint
	BranchID           whereHelperint
	FromPartyID        whereHelperint
	ToPartyID          whereHelperint
	IssueingBankID     whereHelperint
	ConfirmingBankID   whereHelperint
	TradeStatus        whereHelpernull_String
	ApplicationDate    whereHelpernull_Time
	TradeRisk          whereHelpertypes_NullDecimal
	Amount             whereHelpertypes_NullDecimal
	CurrencyCode       whereHelperstring
	IsRequiredShipping whereHelpernull_String
	DaysOfPayment      whereHelpernull_Int
	DateOfPayment      whereHelpernull_Time
	BankID             whereHelperint
	MakerDate          whereHelpertime_Time
	CheckerDate        whereHelpernull_Time
	MakerID            whereHelperstring
	CheckerID          whereHelpernull_String
	ModifiedBy         whereHelpernull_String
	ModifiedDate       whereHelpernull_Time
}{
	TradeID:            whereHelperint{field: `trade_id`},
	BranchID:           whereHelperint{field: `branch_id`},
	FromPartyID:        whereHelperint{field: `from_party_id`},
	ToPartyID:          whereHelperint{field: `to_party_id`},
	IssueingBankID:     whereHelperint{field: `issueing_bank_id`},
	ConfirmingBankID:   whereHelperint{field: `confirming_bank_id`},
	TradeStatus:        whereHelpernull_String{field: `trade_status`},
	ApplicationDate:    whereHelpernull_Time{field: `application_date`},
	TradeRisk:          whereHelpertypes_NullDecimal{field: `trade_risk`},
	Amount:             whereHelpertypes_NullDecimal{field: `amount`},
	CurrencyCode:       whereHelperstring{field: `currency_code`},
	IsRequiredShipping: whereHelpernull_String{field: `is_required_shipping`},
	DaysOfPayment:      whereHelpernull_Int{field: `days_of_payment`},
	DateOfPayment:      whereHelpernull_Time{field: `date_of_payment`},
	BankID:             whereHelperint{field: `bank_id`},
	MakerDate:          whereHelpertime_Time{field: `maker_date`},
	CheckerDate:        whereHelpernull_Time{field: `checker_date`},
	MakerID:            whereHelperstring{field: `maker_id`},
	CheckerID:          whereHelpernull_String{field: `checker_id`},
	ModifiedBy:         whereHelpernull_String{field: `modified_by`},
	ModifiedDate:       whereHelpernull_Time{field: `modified_date`},
}

// TFTradeRels is where relationship names are stored.
var TFTradeRels = struct {
	TradeTFRisks      string
	TradeTFShipments  string
	TradeTFTradeItems string
}{
	TradeTFRisks:      "TradeTFRisks",
	TradeTFShipments:  "TradeTFShipments",
	TradeTFTradeItems: "TradeTFTradeItems",
}

// tFTradeR is where relationships are stored.
type tFTradeR struct {
	TradeTFRisks      TFRiskSlice
	TradeTFShipments  TFShipmentSlice
	TradeTFTradeItems TFTradeItemSlice
}

// NewStruct creates a new relationship struct
func (*tFTradeR) NewStruct() *tFTradeR {
	return &tFTradeR{}
}

// tFTradeL is where Load methods for each relationship are stored.
type tFTradeL struct{}

var (
	tFTradeColumns               = []string{"trade_id", "branch_id", "from_party_id", "to_party_id", "issueing_bank_id", "confirming_bank_id", "trade_status", "application_date", "trade_risk", "amount", "currency_code", "is_required_shipping", "days_of_payment", "date_of_payment", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFTradeColumnsWithoutDefault = []string{"trade_id", "branch_id", "from_party_id", "to_party_id", "issueing_bank_id", "confirming_bank_id", "trade_status", "application_date", "trade_risk", "amount", "currency_code", "is_required_shipping", "days_of_payment", "date_of_payment", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFTradeColumnsWithDefault    = []string{}
	tFTradePrimaryKeyColumns     = []string{"trade_id"}
)

type (
	// TFTradeSlice is an alias for a slice of pointers to TFTrade.
	// This should generally be used opposed to []TFTrade.
	TFTradeSlice []*TFTrade
	// TFTradeHook is the signature for custom TFTrade hook methods
	TFTradeHook func(context.Context, boil.ContextExecutor, *TFTrade) error

	tFTradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFTradeType                 = reflect.TypeOf(&TFTrade{})
	tFTradeMapping              = queries.MakeStructMapping(tFTradeType)
	tFTradePrimaryKeyMapping, _ = queries.BindMapping(tFTradeType, tFTradeMapping, tFTradePrimaryKeyColumns)
	tFTradeInsertCacheMut       sync.RWMutex
	tFTradeInsertCache          = make(map[string]insertCache)
	tFTradeUpdateCacheMut       sync.RWMutex
	tFTradeUpdateCache          = make(map[string]updateCache)
	tFTradeUpsertCacheMut       sync.RWMutex
	tFTradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFTradeBeforeInsertHooks []TFTradeHook
var tFTradeBeforeUpdateHooks []TFTradeHook
var tFTradeBeforeDeleteHooks []TFTradeHook
var tFTradeBeforeUpsertHooks []TFTradeHook

var tFTradeAfterInsertHooks []TFTradeHook
var tFTradeAfterSelectHooks []TFTradeHook
var tFTradeAfterUpdateHooks []TFTradeHook
var tFTradeAfterDeleteHooks []TFTradeHook
var tFTradeAfterUpsertHooks []TFTradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFTrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFTrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFTrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFTrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFTrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFTrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFTrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFTrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFTrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFTradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFTradeHook registers your hook function for all future operations.
func AddTFTradeHook(hookPoint boil.HookPoint, tFTradeHook TFTradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFTradeBeforeInsertHooks = append(tFTradeBeforeInsertHooks, tFTradeHook)
	case boil.BeforeUpdateHook:
		tFTradeBeforeUpdateHooks = append(tFTradeBeforeUpdateHooks, tFTradeHook)
	case boil.BeforeDeleteHook:
		tFTradeBeforeDeleteHooks = append(tFTradeBeforeDeleteHooks, tFTradeHook)
	case boil.BeforeUpsertHook:
		tFTradeBeforeUpsertHooks = append(tFTradeBeforeUpsertHooks, tFTradeHook)
	case boil.AfterInsertHook:
		tFTradeAfterInsertHooks = append(tFTradeAfterInsertHooks, tFTradeHook)
	case boil.AfterSelectHook:
		tFTradeAfterSelectHooks = append(tFTradeAfterSelectHooks, tFTradeHook)
	case boil.AfterUpdateHook:
		tFTradeAfterUpdateHooks = append(tFTradeAfterUpdateHooks, tFTradeHook)
	case boil.AfterDeleteHook:
		tFTradeAfterDeleteHooks = append(tFTradeAfterDeleteHooks, tFTradeHook)
	case boil.AfterUpsertHook:
		tFTradeAfterUpsertHooks = append(tFTradeAfterUpsertHooks, tFTradeHook)
	}
}

// One returns a single tFTrade record from the query.
func (q tFTradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFTrade, error) {
	o := &TFTrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFTrade")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFTrade records from the query.
func (q tFTradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFTradeSlice, error) {
	var o []*TFTrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFTrade slice")
	}

	if len(tFTradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFTrade records in the query.
func (q tFTradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFTrade rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFTradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFTrade exists")
	}

	return count > 0, nil
}

// TradeTFRisks retrieves all the TFRisk's TFRisks with an executor via trade_id column.
func (o *TFTrade) TradeTFRisks(mods ...qm.QueryMod) tFRiskQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFRisk`.`trade_id`=?", o.TradeID),
	)

	query := TFRisks(queryMods...)
	queries.SetFrom(query.Query, "`TFRisk`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFRisk`.*"})
	}

	return query
}

// TradeTFShipments retrieves all the TFShipment's TFShipments with an executor via trade_id column.
func (o *TFTrade) TradeTFShipments(mods ...qm.QueryMod) tFShipmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFShipment`.`trade_id`=?", o.TradeID),
	)

	query := TFShipments(queryMods...)
	queries.SetFrom(query.Query, "`TFShipment`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFShipment`.*"})
	}

	return query
}

// TradeTFTradeItems retrieves all the TFTradeItem's TFTradeItems with an executor via trade_id column.
func (o *TFTrade) TradeTFTradeItems(mods ...qm.QueryMod) tFTradeItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFTradeItem`.`trade_id`=?", o.TradeID),
	)

	query := TFTradeItems(queryMods...)
	queries.SetFrom(query.Query, "`TFTradeItem`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFTradeItem`.*"})
	}

	return query
}

// LoadTradeTFRisks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tFTradeL) LoadTradeTFRisks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFTrade interface{}, mods queries.Applicator) error {
	var slice []*TFTrade
	var object *TFTrade

	if singular {
		object = maybeTFTrade.(*TFTrade)
	} else {
		slice = *maybeTFTrade.(*[]*TFTrade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFTradeR{}
		}
		args = append(args, object.TradeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFTradeR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFRisk`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFRisk")
	}

	var resultSlice []*TFRisk
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFRisk")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFRisk")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFRisk")
	}

	if len(tFRiskAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeTFRisks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFRiskR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TradeID == foreign.TradeID {
				local.R.TradeTFRisks = append(local.R.TradeTFRisks, foreign)
				if foreign.R == nil {
					foreign.R = &tFRiskR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// LoadTradeTFShipments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tFTradeL) LoadTradeTFShipments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFTrade interface{}, mods queries.Applicator) error {
	var slice []*TFTrade
	var object *TFTrade

	if singular {
		object = maybeTFTrade.(*TFTrade)
	} else {
		slice = *maybeTFTrade.(*[]*TFTrade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFTradeR{}
		}
		args = append(args, object.TradeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFTradeR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFShipment`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFShipment")
	}

	var resultSlice []*TFShipment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFShipment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFShipment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFShipment")
	}

	if len(tFShipmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeTFShipments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFShipmentR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TradeID == foreign.TradeID {
				local.R.TradeTFShipments = append(local.R.TradeTFShipments, foreign)
				if foreign.R == nil {
					foreign.R = &tFShipmentR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// LoadTradeTFTradeItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tFTradeL) LoadTradeTFTradeItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFTrade interface{}, mods queries.Applicator) error {
	var slice []*TFTrade
	var object *TFTrade

	if singular {
		object = maybeTFTrade.(*TFTrade)
	} else {
		slice = *maybeTFTrade.(*[]*TFTrade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFTradeR{}
		}
		args = append(args, object.TradeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFTradeR{}
			}

			for _, a := range args {
				if a == obj.TradeID {
					continue Outer
				}
			}

			args = append(args, obj.TradeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFTradeItem`), qm.WhereIn(`trade_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFTradeItem")
	}

	var resultSlice []*TFTradeItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFTradeItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFTradeItem")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFTradeItem")
	}

	if len(tFTradeItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeTFTradeItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFTradeItemR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TradeID == foreign.TradeID {
				local.R.TradeTFTradeItems = append(local.R.TradeTFTradeItems, foreign)
				if foreign.R == nil {
					foreign.R = &tFTradeItemR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// AddTradeTFRisks adds the given related objects to the existing relationships
// of the TFTrade, optionally inserting them as new records.
// Appends related to o.R.TradeTFRisks.
// Sets related.R.Trade appropriately.
func (o *TFTrade) AddTradeTFRisks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFRisk) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeID = o.TradeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFRisk` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"trade_id"}),
				strmangle.WhereClause("`", "`", 0, tFRiskPrimaryKeyColumns),
			)
			values := []interface{}{o.TradeID, rel.RiskID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeID = o.TradeID
		}
	}

	if o.R == nil {
		o.R = &tFTradeR{
			TradeTFRisks: related,
		}
	} else {
		o.R.TradeTFRisks = append(o.R.TradeTFRisks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFRiskR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// AddTradeTFShipments adds the given related objects to the existing relationships
// of the TFTrade, optionally inserting them as new records.
// Appends related to o.R.TradeTFShipments.
// Sets related.R.Trade appropriately.
func (o *TFTrade) AddTradeTFShipments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFShipment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeID = o.TradeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFShipment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"trade_id"}),
				strmangle.WhereClause("`", "`", 0, tFShipmentPrimaryKeyColumns),
			)
			values := []interface{}{o.TradeID, rel.ShipmentID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeID = o.TradeID
		}
	}

	if o.R == nil {
		o.R = &tFTradeR{
			TradeTFShipments: related,
		}
	} else {
		o.R.TradeTFShipments = append(o.R.TradeTFShipments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFShipmentR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// AddTradeTFTradeItems adds the given related objects to the existing relationships
// of the TFTrade, optionally inserting them as new records.
// Appends related to o.R.TradeTFTradeItems.
// Sets related.R.Trade appropriately.
func (o *TFTrade) AddTradeTFTradeItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFTradeItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeID = o.TradeID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFTradeItem` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"trade_id"}),
				strmangle.WhereClause("`", "`", 0, tFTradeItemPrimaryKeyColumns),
			)
			values := []interface{}{o.TradeID, rel.TradeItemID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeID = o.TradeID
		}
	}

	if o.R == nil {
		o.R = &tFTradeR{
			TradeTFTradeItems: related,
		}
	} else {
		o.R.TradeTFTradeItems = append(o.R.TradeTFTradeItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFTradeItemR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// TFTrades retrieves all the records using an executor.
func TFTrades(mods ...qm.QueryMod) tFTradeQuery {
	mods = append(mods, qm.From("`TFTrade`"))
	return tFTradeQuery{NewQuery(mods...)}
}

// FindTFTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFTrade(ctx context.Context, exec boil.ContextExecutor, tradeID int, selectCols ...string) (*TFTrade, error) {
	tFTradeObj := &TFTrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFTrade` where `trade_id`=?", sel,
	)

	q := queries.Raw(query, tradeID)

	err := q.Bind(ctx, exec, tFTradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFTrade")
	}

	return tFTradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFTrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFTrade provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFTradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFTradeInsertCacheMut.RLock()
	cache, cached := tFTradeInsertCache[key]
	tFTradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFTradeColumns,
			tFTradeColumnsWithDefault,
			tFTradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFTradeType, tFTradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFTradeType, tFTradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFTrade` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFTrade` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFTrade` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFTradePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFTrade")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TradeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFTrade")
	}

CacheNoHooks:
	if !cached {
		tFTradeInsertCacheMut.Lock()
		tFTradeInsertCache[key] = cache
		tFTradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFTrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFTrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFTradeUpdateCacheMut.RLock()
	cache, cached := tFTradeUpdateCache[key]
	tFTradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFTradeColumns,
			tFTradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFTrade, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFTrade` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFTradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFTradeType, tFTradeMapping, append(wl, tFTradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFTrade row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFTrade")
	}

	if !cached {
		tFTradeUpdateCacheMut.Lock()
		tFTradeUpdateCache[key] = cache
		tFTradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFTradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFTrade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFTrade")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFTradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFTrade` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFTrade")
	}
	return rowsAff, nil
}

var mySQLTFTradeUniqueColumns = []string{
	"trade_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFTrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFTrade provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFTradeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFTradeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFTradeUpsertCacheMut.RLock()
	cache, cached := tFTradeUpsertCache[key]
	tFTradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFTradeColumns,
			tFTradeColumnsWithDefault,
			tFTradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFTradeColumns,
			tFTradePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFTrade, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFTrade", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFTrade` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFTradeType, tFTradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFTradeType, tFTradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFTrade")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFTradeType, tFTradeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFTrade")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFTrade")
	}

CacheNoHooks:
	if !cached {
		tFTradeUpsertCacheMut.Lock()
		tFTradeUpsertCache[key] = cache
		tFTradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFTrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFTrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFTrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFTradePrimaryKeyMapping)
	sql := "DELETE FROM `TFTrade` WHERE `trade_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFTrade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFTrade")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFTradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFTradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFTrade")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFTrade")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFTradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFTrade slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFTradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFTrade` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFTrade")
	}

	if len(tFTradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFTrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFTrade(ctx, exec, o.TradeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFTradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFTradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFTrade`.* FROM `TFTrade` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFTradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFTradeSlice")
	}

	*o = slice

	return nil
}

// TFTradeExists checks if the TFTrade row exists.
func TFTradeExists(ctx context.Context, exec boil.ContextExecutor, tradeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFTrade` where `trade_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tradeID)
	}

	row := exec.QueryRowContext(ctx, sql, tradeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFTrade exists")
	}

	return exists, nil
}
