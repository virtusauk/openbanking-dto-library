// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SocialInfo is an object representing the database table.
type SocialInfo struct {
	SocialInfoID        int         `boil:"social_info_id" json:"social_info_id" toml:"social_info_id" yaml:"social_info_id"`
	PartyID             int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	SocialType          string      `boil:"social_type" json:"social_type" toml:"social_type" yaml:"social_type"`
	SocialID            string      `boil:"social_id" json:"social_id" toml:"social_id" yaml:"social_id"`
	Active              string      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CountOfAdverseMedia null.Int    `boil:"count_of_adverse_media" json:"count_of_adverse_media,omitempty" toml:"count_of_adverse_media" yaml:"count_of_adverse_media,omitempty"`
	BankID              int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate           time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate         null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID             string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID           null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy          null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate        null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *socialInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L socialInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SocialInfoColumns = struct {
	SocialInfoID        string
	PartyID             string
	SocialType          string
	SocialID            string
	Active              string
	CountOfAdverseMedia string
	BankID              string
	MakerDate           string
	CheckerDate         string
	MakerID             string
	CheckerID           string
	ModifiedBy          string
	ModifiedDate        string
}{
	SocialInfoID:        "social_info_id",
	PartyID:             "party_id",
	SocialType:          "social_type",
	SocialID:            "social_id",
	Active:              "active",
	CountOfAdverseMedia: "count_of_adverse_media",
	BankID:              "bank_id",
	MakerDate:           "maker_date",
	CheckerDate:         "checker_date",
	MakerID:             "maker_id",
	CheckerID:           "checker_id",
	ModifiedBy:          "modified_by",
	ModifiedDate:        "modified_date",
}

// Generated where

var SocialInfoWhere = struct {
	SocialInfoID        whereHelperint
	PartyID             whereHelperint
	SocialType          whereHelperstring
	SocialID            whereHelperstring
	Active              whereHelperstring
	CountOfAdverseMedia whereHelpernull_Int
	BankID              whereHelperint
	MakerDate           whereHelpertime_Time
	CheckerDate         whereHelpernull_Time
	MakerID             whereHelperstring
	CheckerID           whereHelpernull_String
	ModifiedBy          whereHelpernull_String
	ModifiedDate        whereHelpernull_Time
}{
	SocialInfoID:        whereHelperint{field: `social_info_id`},
	PartyID:             whereHelperint{field: `party_id`},
	SocialType:          whereHelperstring{field: `social_type`},
	SocialID:            whereHelperstring{field: `social_id`},
	Active:              whereHelperstring{field: `active`},
	CountOfAdverseMedia: whereHelpernull_Int{field: `count_of_adverse_media`},
	BankID:              whereHelperint{field: `bank_id`},
	MakerDate:           whereHelpertime_Time{field: `maker_date`},
	CheckerDate:         whereHelpernull_Time{field: `checker_date`},
	MakerID:             whereHelperstring{field: `maker_id`},
	CheckerID:           whereHelpernull_String{field: `checker_id`},
	ModifiedBy:          whereHelpernull_String{field: `modified_by`},
	ModifiedDate:        whereHelpernull_Time{field: `modified_date`},
}

// SocialInfoRels is where relationship names are stored.
var SocialInfoRels = struct {
	Bank  string
	Party string
}{
	Bank:  "Bank",
	Party: "Party",
}

// socialInfoR is where relationships are stored.
type socialInfoR struct {
	Bank  *Bank
	Party *Party
}

// NewStruct creates a new relationship struct
func (*socialInfoR) NewStruct() *socialInfoR {
	return &socialInfoR{}
}

// socialInfoL is where Load methods for each relationship are stored.
type socialInfoL struct{}

var (
	socialInfoColumns               = []string{"social_info_id", "party_id", "social_type", "social_id", "active", "count_of_adverse_media", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	socialInfoColumnsWithoutDefault = []string{"party_id", "social_type", "social_id", "active", "count_of_adverse_media", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	socialInfoColumnsWithDefault    = []string{"social_info_id"}
	socialInfoPrimaryKeyColumns     = []string{"social_info_id"}
)

type (
	// SocialInfoSlice is an alias for a slice of pointers to SocialInfo.
	// This should generally be used opposed to []SocialInfo.
	SocialInfoSlice []*SocialInfo
	// SocialInfoHook is the signature for custom SocialInfo hook methods
	SocialInfoHook func(context.Context, boil.ContextExecutor, *SocialInfo) error

	socialInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	socialInfoType                 = reflect.TypeOf(&SocialInfo{})
	socialInfoMapping              = queries.MakeStructMapping(socialInfoType)
	socialInfoPrimaryKeyMapping, _ = queries.BindMapping(socialInfoType, socialInfoMapping, socialInfoPrimaryKeyColumns)
	socialInfoInsertCacheMut       sync.RWMutex
	socialInfoInsertCache          = make(map[string]insertCache)
	socialInfoUpdateCacheMut       sync.RWMutex
	socialInfoUpdateCache          = make(map[string]updateCache)
	socialInfoUpsertCacheMut       sync.RWMutex
	socialInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var socialInfoBeforeInsertHooks []SocialInfoHook
var socialInfoBeforeUpdateHooks []SocialInfoHook
var socialInfoBeforeDeleteHooks []SocialInfoHook
var socialInfoBeforeUpsertHooks []SocialInfoHook

var socialInfoAfterInsertHooks []SocialInfoHook
var socialInfoAfterSelectHooks []SocialInfoHook
var socialInfoAfterUpdateHooks []SocialInfoHook
var socialInfoAfterDeleteHooks []SocialInfoHook
var socialInfoAfterUpsertHooks []SocialInfoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SocialInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SocialInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SocialInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SocialInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SocialInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SocialInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SocialInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SocialInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SocialInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSocialInfoHook registers your hook function for all future operations.
func AddSocialInfoHook(hookPoint boil.HookPoint, socialInfoHook SocialInfoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		socialInfoBeforeInsertHooks = append(socialInfoBeforeInsertHooks, socialInfoHook)
	case boil.BeforeUpdateHook:
		socialInfoBeforeUpdateHooks = append(socialInfoBeforeUpdateHooks, socialInfoHook)
	case boil.BeforeDeleteHook:
		socialInfoBeforeDeleteHooks = append(socialInfoBeforeDeleteHooks, socialInfoHook)
	case boil.BeforeUpsertHook:
		socialInfoBeforeUpsertHooks = append(socialInfoBeforeUpsertHooks, socialInfoHook)
	case boil.AfterInsertHook:
		socialInfoAfterInsertHooks = append(socialInfoAfterInsertHooks, socialInfoHook)
	case boil.AfterSelectHook:
		socialInfoAfterSelectHooks = append(socialInfoAfterSelectHooks, socialInfoHook)
	case boil.AfterUpdateHook:
		socialInfoAfterUpdateHooks = append(socialInfoAfterUpdateHooks, socialInfoHook)
	case boil.AfterDeleteHook:
		socialInfoAfterDeleteHooks = append(socialInfoAfterDeleteHooks, socialInfoHook)
	case boil.AfterUpsertHook:
		socialInfoAfterUpsertHooks = append(socialInfoAfterUpsertHooks, socialInfoHook)
	}
}

// One returns a single socialInfo record from the query.
func (q socialInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SocialInfo, error) {
	o := &SocialInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for SocialInfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SocialInfo records from the query.
func (q socialInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (SocialInfoSlice, error) {
	var o []*SocialInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SocialInfo slice")
	}

	if len(socialInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SocialInfo records in the query.
func (q socialInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count SocialInfo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q socialInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if SocialInfo exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *SocialInfo) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Party pointed to by the foreign key.
func (o *SocialInfo) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (socialInfoL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocialInfo interface{}, mods queries.Applicator) error {
	var slice []*SocialInfo
	var object *SocialInfo

	if singular {
		object = maybeSocialInfo.(*SocialInfo)
	} else {
		slice = *maybeSocialInfo.(*[]*SocialInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &socialInfoR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialInfoR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(socialInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankSocialInfos = append(foreign.R.BankSocialInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankSocialInfos = append(foreign.R.BankSocialInfos, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (socialInfoL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocialInfo interface{}, mods queries.Applicator) error {
	var slice []*SocialInfo
	var object *SocialInfo

	if singular {
		object = maybeSocialInfo.(*SocialInfo)
	} else {
		slice = *maybeSocialInfo.(*[]*SocialInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &socialInfoR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialInfoR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(socialInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartySocialInfos = append(foreign.R.PartySocialInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartySocialInfos = append(foreign.R.PartySocialInfos, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the socialInfo to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankSocialInfos.
func (o *SocialInfo) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `SocialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, socialInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.SocialInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &socialInfoR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankSocialInfos: SocialInfoSlice{o},
		}
	} else {
		related.R.BankSocialInfos = append(related.R.BankSocialInfos, o)
	}

	return nil
}

// SetParty of the socialInfo to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartySocialInfos.
func (o *SocialInfo) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `SocialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, socialInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.SocialInfoID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &socialInfoR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartySocialInfos: SocialInfoSlice{o},
		}
	} else {
		related.R.PartySocialInfos = append(related.R.PartySocialInfos, o)
	}

	return nil
}

// SocialInfos retrieves all the records using an executor.
func SocialInfos(mods ...qm.QueryMod) socialInfoQuery {
	mods = append(mods, qm.From("`SocialInfo`"))
	return socialInfoQuery{NewQuery(mods...)}
}

// FindSocialInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSocialInfo(ctx context.Context, exec boil.ContextExecutor, socialInfoID int, selectCols ...string) (*SocialInfo, error) {
	socialInfoObj := &SocialInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `SocialInfo` where `social_info_id`=?", sel,
	)

	q := queries.Raw(query, socialInfoID)

	err := q.Bind(ctx, exec, socialInfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from SocialInfo")
	}

	return socialInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SocialInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SocialInfo provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	socialInfoInsertCacheMut.RLock()
	cache, cached := socialInfoInsertCache[key]
	socialInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			socialInfoColumns,
			socialInfoColumnsWithDefault,
			socialInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(socialInfoType, socialInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(socialInfoType, socialInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `SocialInfo` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `SocialInfo` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `SocialInfo` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, socialInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into SocialInfo")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SocialInfoID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == socialInfoMapping["SocialInfoID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SocialInfoID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for SocialInfo")
	}

CacheNoHooks:
	if !cached {
		socialInfoInsertCacheMut.Lock()
		socialInfoInsertCache[key] = cache
		socialInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SocialInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SocialInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	socialInfoUpdateCacheMut.RLock()
	cache, cached := socialInfoUpdateCache[key]
	socialInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			socialInfoColumns,
			socialInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update SocialInfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `SocialInfo` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, socialInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(socialInfoType, socialInfoMapping, append(wl, socialInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update SocialInfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for SocialInfo")
	}

	if !cached {
		socialInfoUpdateCacheMut.Lock()
		socialInfoUpdateCache[key] = cache
		socialInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q socialInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for SocialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for SocialInfo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SocialInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `SocialInfo` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, socialInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in socialInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all socialInfo")
	}
	return rowsAff, nil
}

var mySQLSocialInfoUniqueColumns = []string{
	"social_info_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SocialInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SocialInfo provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSocialInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	socialInfoUpsertCacheMut.RLock()
	cache, cached := socialInfoUpsertCache[key]
	socialInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			socialInfoColumns,
			socialInfoColumnsWithDefault,
			socialInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			socialInfoColumns,
			socialInfoPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert SocialInfo, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "SocialInfo", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `SocialInfo` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(socialInfoType, socialInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(socialInfoType, socialInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for SocialInfo")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.SocialInfoID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == socialInfoMapping["social_info_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(socialInfoType, socialInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for SocialInfo")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for SocialInfo")
	}

CacheNoHooks:
	if !cached {
		socialInfoUpsertCacheMut.Lock()
		socialInfoUpsertCache[key] = cache
		socialInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SocialInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SocialInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SocialInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), socialInfoPrimaryKeyMapping)
	sql := "DELETE FROM `SocialInfo` WHERE `social_info_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from SocialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for SocialInfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q socialInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no socialInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from SocialInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SocialInfo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SocialInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SocialInfo slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(socialInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `SocialInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, socialInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from socialInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SocialInfo")
	}

	if len(socialInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SocialInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSocialInfo(ctx, exec, o.SocialInfoID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SocialInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SocialInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `SocialInfo`.* FROM `SocialInfo` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, socialInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SocialInfoSlice")
	}

	*o = slice

	return nil
}

// SocialInfoExists checks if the SocialInfo row exists.
func SocialInfoExists(ctx context.Context, exec boil.ContextExecutor, socialInfoID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `SocialInfo` where `social_info_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, socialInfoID)
	}

	row := exec.QueryRowContext(ctx, sql, socialInfoID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if SocialInfo exists")
	}

	return exists, nil
}
