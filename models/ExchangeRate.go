// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// ExchangeRate is an object representing the database table.
type ExchangeRate struct {
	FromCurrency     string            `boil:"from_currency" json:"from_currency" toml:"from_currency" yaml:"from_currency"`
	ToCurrency       string            `boil:"to_currency" json:"to_currency" toml:"to_currency" yaml:"to_currency"`
	ExchangeBuyRate  types.Decimal     `boil:"exchange_buy_rate" json:"exchange_buy_rate" toml:"exchange_buy_rate" yaml:"exchange_buy_rate"`
	ExchangeSellRate types.NullDecimal `boil:"exchange_sell_rate" json:"exchange_sell_rate,omitempty" toml:"exchange_sell_rate" yaml:"exchange_sell_rate,omitempty"`
	ExRateDate       time.Time         `boil:"ex_rate_date" json:"ex_rate_date" toml:"ex_rate_date" yaml:"ex_rate_date"`
	BaseIsoCode      null.String       `boil:"base_iso_code" json:"base_iso_code,omitempty" toml:"base_iso_code" yaml:"base_iso_code,omitempty"`
	IsoCode          null.String       `boil:"iso_code" json:"iso_code,omitempty" toml:"iso_code" yaml:"iso_code,omitempty"`
	BuyRate          types.NullDecimal `boil:"buy_rate" json:"buy_rate,omitempty" toml:"buy_rate" yaml:"buy_rate,omitempty"`
	SellRate         types.NullDecimal `boil:"sell_rate" json:"sell_rate,omitempty" toml:"sell_rate" yaml:"sell_rate,omitempty"`
	IsDeleted        null.String       `boil:"is_deleted" json:"is_deleted,omitempty" toml:"is_deleted" yaml:"is_deleted,omitempty"`
	SysModifiedDT    null.Time         `boil:"sys_modified_dt" json:"sys_modified_dt,omitempty" toml:"sys_modified_dt" yaml:"sys_modified_dt,omitempty"`
	BankID           int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate        time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate      null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID          string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID        null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy       null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate     null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *exchangeRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeRateColumns = struct {
	FromCurrency     string
	ToCurrency       string
	ExchangeBuyRate  string
	ExchangeSellRate string
	ExRateDate       string
	BaseIsoCode      string
	IsoCode          string
	BuyRate          string
	SellRate         string
	IsDeleted        string
	SysModifiedDT    string
	BankID           string
	MakerDate        string
	CheckerDate      string
	MakerID          string
	CheckerID        string
	ModifiedBy       string
	ModifiedDate     string
}{
	FromCurrency:     "from_currency",
	ToCurrency:       "to_currency",
	ExchangeBuyRate:  "exchange_buy_rate",
	ExchangeSellRate: "exchange_sell_rate",
	ExRateDate:       "ex_rate_date",
	BaseIsoCode:      "base_iso_code",
	IsoCode:          "iso_code",
	BuyRate:          "buy_rate",
	SellRate:         "sell_rate",
	IsDeleted:        "is_deleted",
	SysModifiedDT:    "sys_modified_dt",
	BankID:           "bank_id",
	MakerDate:        "maker_date",
	CheckerDate:      "checker_date",
	MakerID:          "maker_id",
	CheckerID:        "checker_id",
	ModifiedBy:       "modified_by",
	ModifiedDate:     "modified_date",
}

// Generated where

var ExchangeRateWhere = struct {
	FromCurrency     whereHelperstring
	ToCurrency       whereHelperstring
	ExchangeBuyRate  whereHelpertypes_Decimal
	ExchangeSellRate whereHelpertypes_NullDecimal
	ExRateDate       whereHelpertime_Time
	BaseIsoCode      whereHelpernull_String
	IsoCode          whereHelpernull_String
	BuyRate          whereHelpertypes_NullDecimal
	SellRate         whereHelpertypes_NullDecimal
	IsDeleted        whereHelpernull_String
	SysModifiedDT    whereHelpernull_Time
	BankID           whereHelperint
	MakerDate        whereHelpertime_Time
	CheckerDate      whereHelpernull_Time
	MakerID          whereHelperstring
	CheckerID        whereHelpernull_String
	ModifiedBy       whereHelpernull_String
	ModifiedDate     whereHelpernull_Time
}{
	FromCurrency:     whereHelperstring{field: `from_currency`},
	ToCurrency:       whereHelperstring{field: `to_currency`},
	ExchangeBuyRate:  whereHelpertypes_Decimal{field: `exchange_buy_rate`},
	ExchangeSellRate: whereHelpertypes_NullDecimal{field: `exchange_sell_rate`},
	ExRateDate:       whereHelpertime_Time{field: `ex_rate_date`},
	BaseIsoCode:      whereHelpernull_String{field: `base_iso_code`},
	IsoCode:          whereHelpernull_String{field: `iso_code`},
	BuyRate:          whereHelpertypes_NullDecimal{field: `buy_rate`},
	SellRate:         whereHelpertypes_NullDecimal{field: `sell_rate`},
	IsDeleted:        whereHelpernull_String{field: `is_deleted`},
	SysModifiedDT:    whereHelpernull_Time{field: `sys_modified_dt`},
	BankID:           whereHelperint{field: `bank_id`},
	MakerDate:        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:      whereHelpernull_Time{field: `checker_date`},
	MakerID:          whereHelperstring{field: `maker_id`},
	CheckerID:        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:       whereHelpernull_String{field: `modified_by`},
	ModifiedDate:     whereHelpernull_Time{field: `modified_date`},
}

// ExchangeRateRels is where relationship names are stored.
var ExchangeRateRels = struct {
}{}

// exchangeRateR is where relationships are stored.
type exchangeRateR struct {
}

// NewStruct creates a new relationship struct
func (*exchangeRateR) NewStruct() *exchangeRateR {
	return &exchangeRateR{}
}

// exchangeRateL is where Load methods for each relationship are stored.
type exchangeRateL struct{}

var (
	exchangeRateColumns               = []string{"from_currency", "to_currency", "exchange_buy_rate", "exchange_sell_rate", "ex_rate_date", "base_iso_code", "iso_code", "buy_rate", "sell_rate", "is_deleted", "sys_modified_dt", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	exchangeRateColumnsWithoutDefault = []string{"from_currency", "to_currency", "exchange_buy_rate", "exchange_sell_rate", "ex_rate_date", "base_iso_code", "iso_code", "buy_rate", "sell_rate", "is_deleted", "sys_modified_dt", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	exchangeRateColumnsWithDefault    = []string{}
	exchangeRatePrimaryKeyColumns     = []string{"from_currency", "to_currency", "ex_rate_date"}
)

type (
	// ExchangeRateSlice is an alias for a slice of pointers to ExchangeRate.
	// This should generally be used opposed to []ExchangeRate.
	ExchangeRateSlice []*ExchangeRate
	// ExchangeRateHook is the signature for custom ExchangeRate hook methods
	ExchangeRateHook func(context.Context, boil.ContextExecutor, *ExchangeRate) error

	exchangeRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeRateType                 = reflect.TypeOf(&ExchangeRate{})
	exchangeRateMapping              = queries.MakeStructMapping(exchangeRateType)
	exchangeRatePrimaryKeyMapping, _ = queries.BindMapping(exchangeRateType, exchangeRateMapping, exchangeRatePrimaryKeyColumns)
	exchangeRateInsertCacheMut       sync.RWMutex
	exchangeRateInsertCache          = make(map[string]insertCache)
	exchangeRateUpdateCacheMut       sync.RWMutex
	exchangeRateUpdateCache          = make(map[string]updateCache)
	exchangeRateUpsertCacheMut       sync.RWMutex
	exchangeRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var exchangeRateBeforeInsertHooks []ExchangeRateHook
var exchangeRateBeforeUpdateHooks []ExchangeRateHook
var exchangeRateBeforeDeleteHooks []ExchangeRateHook
var exchangeRateBeforeUpsertHooks []ExchangeRateHook

var exchangeRateAfterInsertHooks []ExchangeRateHook
var exchangeRateAfterSelectHooks []ExchangeRateHook
var exchangeRateAfterUpdateHooks []ExchangeRateHook
var exchangeRateAfterDeleteHooks []ExchangeRateHook
var exchangeRateAfterUpsertHooks []ExchangeRateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExchangeRate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExchangeRate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExchangeRate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExchangeRate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExchangeRate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExchangeRate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExchangeRate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExchangeRate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExchangeRate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exchangeRateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangeRateHook registers your hook function for all future operations.
func AddExchangeRateHook(hookPoint boil.HookPoint, exchangeRateHook ExchangeRateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangeRateBeforeInsertHooks = append(exchangeRateBeforeInsertHooks, exchangeRateHook)
	case boil.BeforeUpdateHook:
		exchangeRateBeforeUpdateHooks = append(exchangeRateBeforeUpdateHooks, exchangeRateHook)
	case boil.BeforeDeleteHook:
		exchangeRateBeforeDeleteHooks = append(exchangeRateBeforeDeleteHooks, exchangeRateHook)
	case boil.BeforeUpsertHook:
		exchangeRateBeforeUpsertHooks = append(exchangeRateBeforeUpsertHooks, exchangeRateHook)
	case boil.AfterInsertHook:
		exchangeRateAfterInsertHooks = append(exchangeRateAfterInsertHooks, exchangeRateHook)
	case boil.AfterSelectHook:
		exchangeRateAfterSelectHooks = append(exchangeRateAfterSelectHooks, exchangeRateHook)
	case boil.AfterUpdateHook:
		exchangeRateAfterUpdateHooks = append(exchangeRateAfterUpdateHooks, exchangeRateHook)
	case boil.AfterDeleteHook:
		exchangeRateAfterDeleteHooks = append(exchangeRateAfterDeleteHooks, exchangeRateHook)
	case boil.AfterUpsertHook:
		exchangeRateAfterUpsertHooks = append(exchangeRateAfterUpsertHooks, exchangeRateHook)
	}
}

// One returns a single exchangeRate record from the query.
func (q exchangeRateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExchangeRate, error) {
	o := &ExchangeRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ExchangeRate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExchangeRate records from the query.
func (q exchangeRateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExchangeRateSlice, error) {
	var o []*ExchangeRate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeRate slice")
	}

	if len(exchangeRateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExchangeRate records in the query.
func (q exchangeRateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ExchangeRate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exchangeRateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ExchangeRate exists")
	}

	return count > 0, nil
}

// ExchangeRates retrieves all the records using an executor.
func ExchangeRates(mods ...qm.QueryMod) exchangeRateQuery {
	mods = append(mods, qm.From("`ExchangeRate`"))
	return exchangeRateQuery{NewQuery(mods...)}
}

// FindExchangeRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeRate(ctx context.Context, exec boil.ContextExecutor, fromCurrency string, toCurrency string, exRateDate time.Time, selectCols ...string) (*ExchangeRate, error) {
	exchangeRateObj := &ExchangeRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ExchangeRate` where `from_currency`=? AND `to_currency`=? AND `ex_rate_date`=?", sel,
	)

	q := queries.Raw(query, fromCurrency, toCurrency, exRateDate)

	err := q.Bind(ctx, exec, exchangeRateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ExchangeRate")
	}

	return exchangeRateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangeRate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ExchangeRate provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeRateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangeRateInsertCacheMut.RLock()
	cache, cached := exchangeRateInsertCache[key]
	exchangeRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangeRateColumns,
			exchangeRateColumnsWithDefault,
			exchangeRateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ExchangeRate` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ExchangeRate` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ExchangeRate` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, exchangeRatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ExchangeRate")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FromCurrency,
		o.ToCurrency,
		o.ExRateDate,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ExchangeRate")
	}

CacheNoHooks:
	if !cached {
		exchangeRateInsertCacheMut.Lock()
		exchangeRateInsertCache[key] = cache
		exchangeRateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExchangeRate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangeRate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exchangeRateUpdateCacheMut.RLock()
	cache, cached := exchangeRateUpdateCache[key]
	exchangeRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangeRateColumns,
			exchangeRatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ExchangeRate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ExchangeRate` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, exchangeRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, append(wl, exchangeRatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ExchangeRate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ExchangeRate")
	}

	if !cached {
		exchangeRateUpdateCacheMut.Lock()
		exchangeRateUpdateCache[key] = cache
		exchangeRateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeRateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ExchangeRate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ExchangeRate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeRateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ExchangeRate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeRatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangeRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangeRate")
	}
	return rowsAff, nil
}

var mySQLExchangeRateUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExchangeRate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ExchangeRate provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeRateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExchangeRateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exchangeRateUpsertCacheMut.RLock()
	cache, cached := exchangeRateUpsertCache[key]
	exchangeRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			exchangeRateColumns,
			exchangeRateColumnsWithDefault,
			exchangeRateColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			exchangeRateColumns,
			exchangeRatePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ExchangeRate, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ExchangeRate", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ExchangeRate` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ExchangeRate")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(exchangeRateType, exchangeRateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ExchangeRate")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ExchangeRate")
	}

CacheNoHooks:
	if !cached {
		exchangeRateUpsertCacheMut.Lock()
		exchangeRateUpsertCache[key] = cache
		exchangeRateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExchangeRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeRate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeRate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeRatePrimaryKeyMapping)
	sql := "DELETE FROM `ExchangeRate` WHERE `from_currency`=? AND `to_currency`=? AND `ex_rate_date`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ExchangeRate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ExchangeRate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangeRateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangeRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ExchangeRate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ExchangeRate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeRateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeRate slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exchangeRateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ExchangeRate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeRatePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangeRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ExchangeRate")
	}

	if len(exchangeRateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeRate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExchangeRate(ctx, exec, o.FromCurrency, o.ToCurrency, o.ExRateDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeRateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangeRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ExchangeRate`.* FROM `ExchangeRate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeRateSlice")
	}

	*o = slice

	return nil
}

// ExchangeRateExists checks if the ExchangeRate row exists.
func ExchangeRateExists(ctx context.Context, exec boil.ContextExecutor, fromCurrency string, toCurrency string, exRateDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ExchangeRate` where `from_currency`=? AND `to_currency`=? AND `ex_rate_date`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, fromCurrency, toCurrency, exRateDate)
	}

	row := exec.QueryRowContext(ctx, sql, fromCurrency, toCurrency, exRateDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ExchangeRate exists")
	}

	return exists, nil
}
