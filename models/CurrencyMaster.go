// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CurrencyMaster is an object representing the database table.
type CurrencyMaster struct {
	CurrencyID             string      `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	CurrencyDesc           string      `boil:"currency_desc" json:"currency_desc" toml:"currency_desc" yaml:"currency_desc"`
	CurrencyCode           string      `boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	CurrencyName           string      `boil:"currency_name" json:"currency_name" toml:"currency_name" yaml:"currency_name"`
	Active                 string      `boil:"active" json:"active" toml:"active" yaml:"active"`
	CurrencySymbol         string      `boil:"currency_symbol" json:"currency_symbol" toml:"currency_symbol" yaml:"currency_symbol"`
	DigitsAfterDecimal     null.Int    `boil:"digits_after_decimal" json:"digits_after_decimal,omitempty" toml:"digits_after_decimal" yaml:"digits_after_decimal,omitempty"`
	CurrencySymbolPosition null.String `boil:"currency_symbol_position" json:"currency_symbol_position,omitempty" toml:"currency_symbol_position" yaml:"currency_symbol_position,omitempty"`
	IsBaseCurrency         string      `boil:"is_base_currency" json:"is_base_currency" toml:"is_base_currency" yaml:"is_base_currency"`
	IsoCode                null.String `boil:"iso_code" json:"iso_code,omitempty" toml:"iso_code" yaml:"iso_code,omitempty"`
	MajorName              null.String `boil:"major_name" json:"major_name,omitempty" toml:"major_name" yaml:"major_name,omitempty"`
	MinorName              null.String `boil:"minor_name" json:"minor_name,omitempty" toml:"minor_name" yaml:"minor_name,omitempty"`
	MakerDate              time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate            null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID              null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy             null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate           null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *currencyMasterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyMasterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyMasterColumns = struct {
	CurrencyID             string
	CurrencyDesc           string
	CurrencyCode           string
	CurrencyName           string
	Active                 string
	CurrencySymbol         string
	DigitsAfterDecimal     string
	CurrencySymbolPosition string
	IsBaseCurrency         string
	IsoCode                string
	MajorName              string
	MinorName              string
	MakerDate              string
	CheckerDate            string
	MakerID                string
	CheckerID              string
	ModifiedBy             string
	ModifiedDate           string
}{
	CurrencyID:             "currency_id",
	CurrencyDesc:           "currency_desc",
	CurrencyCode:           "currency_code",
	CurrencyName:           "currency_name",
	Active:                 "active",
	CurrencySymbol:         "currency_symbol",
	DigitsAfterDecimal:     "digits_after_decimal",
	CurrencySymbolPosition: "currency_symbol_position",
	IsBaseCurrency:         "is_base_currency",
	IsoCode:                "iso_code",
	MajorName:              "major_name",
	MinorName:              "minor_name",
	MakerDate:              "maker_date",
	CheckerDate:            "checker_date",
	MakerID:                "maker_id",
	CheckerID:              "checker_id",
	ModifiedBy:             "modified_by",
	ModifiedDate:           "modified_date",
}

// Generated where

var CurrencyMasterWhere = struct {
	CurrencyID             whereHelperstring
	CurrencyDesc           whereHelperstring
	CurrencyCode           whereHelperstring
	CurrencyName           whereHelperstring
	Active                 whereHelperstring
	CurrencySymbol         whereHelperstring
	DigitsAfterDecimal     whereHelpernull_Int
	CurrencySymbolPosition whereHelpernull_String
	IsBaseCurrency         whereHelperstring
	IsoCode                whereHelpernull_String
	MajorName              whereHelpernull_String
	MinorName              whereHelpernull_String
	MakerDate              whereHelpertime_Time
	CheckerDate            whereHelpernull_Time
	MakerID                whereHelperstring
	CheckerID              whereHelpernull_String
	ModifiedBy             whereHelpernull_String
	ModifiedDate           whereHelpernull_Time
}{
	CurrencyID:             whereHelperstring{field: `currency_id`},
	CurrencyDesc:           whereHelperstring{field: `currency_desc`},
	CurrencyCode:           whereHelperstring{field: `currency_code`},
	CurrencyName:           whereHelperstring{field: `currency_name`},
	Active:                 whereHelperstring{field: `active`},
	CurrencySymbol:         whereHelperstring{field: `currency_symbol`},
	DigitsAfterDecimal:     whereHelpernull_Int{field: `digits_after_decimal`},
	CurrencySymbolPosition: whereHelpernull_String{field: `currency_symbol_position`},
	IsBaseCurrency:         whereHelperstring{field: `is_base_currency`},
	IsoCode:                whereHelpernull_String{field: `iso_code`},
	MajorName:              whereHelpernull_String{field: `major_name`},
	MinorName:              whereHelpernull_String{field: `minor_name`},
	MakerDate:              whereHelpertime_Time{field: `maker_date`},
	CheckerDate:            whereHelpernull_Time{field: `checker_date`},
	MakerID:                whereHelperstring{field: `maker_id`},
	CheckerID:              whereHelpernull_String{field: `checker_id`},
	ModifiedBy:             whereHelpernull_String{field: `modified_by`},
	ModifiedDate:           whereHelpernull_Time{field: `modified_date`},
}

// CurrencyMasterRels is where relationship names are stored.
var CurrencyMasterRels = struct {
	CurrencyCodeTransactions string
}{
	CurrencyCodeTransactions: "CurrencyCodeTransactions",
}

// currencyMasterR is where relationships are stored.
type currencyMasterR struct {
	CurrencyCodeTransactions TransactionSlice
}

// NewStruct creates a new relationship struct
func (*currencyMasterR) NewStruct() *currencyMasterR {
	return &currencyMasterR{}
}

// currencyMasterL is where Load methods for each relationship are stored.
type currencyMasterL struct{}

var (
	currencyMasterColumns               = []string{"currency_id", "currency_desc", "currency_code", "currency_name", "active", "currency_symbol", "digits_after_decimal", "currency_symbol_position", "is_base_currency", "iso_code", "major_name", "minor_name", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	currencyMasterColumnsWithoutDefault = []string{"currency_id", "currency_desc", "currency_code", "currency_name", "active", "currency_symbol", "digits_after_decimal", "currency_symbol_position", "is_base_currency", "iso_code", "major_name", "minor_name", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	currencyMasterColumnsWithDefault    = []string{}
	currencyMasterPrimaryKeyColumns     = []string{"currency_id"}
)

type (
	// CurrencyMasterSlice is an alias for a slice of pointers to CurrencyMaster.
	// This should generally be used opposed to []CurrencyMaster.
	CurrencyMasterSlice []*CurrencyMaster
	// CurrencyMasterHook is the signature for custom CurrencyMaster hook methods
	CurrencyMasterHook func(context.Context, boil.ContextExecutor, *CurrencyMaster) error

	currencyMasterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyMasterType                 = reflect.TypeOf(&CurrencyMaster{})
	currencyMasterMapping              = queries.MakeStructMapping(currencyMasterType)
	currencyMasterPrimaryKeyMapping, _ = queries.BindMapping(currencyMasterType, currencyMasterMapping, currencyMasterPrimaryKeyColumns)
	currencyMasterInsertCacheMut       sync.RWMutex
	currencyMasterInsertCache          = make(map[string]insertCache)
	currencyMasterUpdateCacheMut       sync.RWMutex
	currencyMasterUpdateCache          = make(map[string]updateCache)
	currencyMasterUpsertCacheMut       sync.RWMutex
	currencyMasterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currencyMasterBeforeInsertHooks []CurrencyMasterHook
var currencyMasterBeforeUpdateHooks []CurrencyMasterHook
var currencyMasterBeforeDeleteHooks []CurrencyMasterHook
var currencyMasterBeforeUpsertHooks []CurrencyMasterHook

var currencyMasterAfterInsertHooks []CurrencyMasterHook
var currencyMasterAfterSelectHooks []CurrencyMasterHook
var currencyMasterAfterUpdateHooks []CurrencyMasterHook
var currencyMasterAfterDeleteHooks []CurrencyMasterHook
var currencyMasterAfterUpsertHooks []CurrencyMasterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrencyMaster) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrencyMaster) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrencyMaster) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrencyMaster) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrencyMaster) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrencyMaster) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrencyMaster) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrencyMaster) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrencyMaster) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyMasterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyMasterHook registers your hook function for all future operations.
func AddCurrencyMasterHook(hookPoint boil.HookPoint, currencyMasterHook CurrencyMasterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		currencyMasterBeforeInsertHooks = append(currencyMasterBeforeInsertHooks, currencyMasterHook)
	case boil.BeforeUpdateHook:
		currencyMasterBeforeUpdateHooks = append(currencyMasterBeforeUpdateHooks, currencyMasterHook)
	case boil.BeforeDeleteHook:
		currencyMasterBeforeDeleteHooks = append(currencyMasterBeforeDeleteHooks, currencyMasterHook)
	case boil.BeforeUpsertHook:
		currencyMasterBeforeUpsertHooks = append(currencyMasterBeforeUpsertHooks, currencyMasterHook)
	case boil.AfterInsertHook:
		currencyMasterAfterInsertHooks = append(currencyMasterAfterInsertHooks, currencyMasterHook)
	case boil.AfterSelectHook:
		currencyMasterAfterSelectHooks = append(currencyMasterAfterSelectHooks, currencyMasterHook)
	case boil.AfterUpdateHook:
		currencyMasterAfterUpdateHooks = append(currencyMasterAfterUpdateHooks, currencyMasterHook)
	case boil.AfterDeleteHook:
		currencyMasterAfterDeleteHooks = append(currencyMasterAfterDeleteHooks, currencyMasterHook)
	case boil.AfterUpsertHook:
		currencyMasterAfterUpsertHooks = append(currencyMasterAfterUpsertHooks, currencyMasterHook)
	}
}

// One returns a single currencyMaster record from the query.
func (q currencyMasterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrencyMaster, error) {
	o := &CurrencyMaster{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for CurrencyMaster")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrencyMaster records from the query.
func (q currencyMasterQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrencyMasterSlice, error) {
	var o []*CurrencyMaster

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrencyMaster slice")
	}

	if len(currencyMasterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrencyMaster records in the query.
func (q currencyMasterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count CurrencyMaster rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currencyMasterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if CurrencyMaster exists")
	}

	return count > 0, nil
}

// CurrencyCodeTransactions retrieves all the Transaction's Transactions with an executor via currency_code column.
func (o *CurrencyMaster) CurrencyCodeTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Transaction`.`currency_code`=?", o.CurrencyID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "`Transaction`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Transaction`.*"})
	}

	return query
}

// LoadCurrencyCodeTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyMasterL) LoadCurrencyCodeTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrencyMaster interface{}, mods queries.Applicator) error {
	var slice []*CurrencyMaster
	var object *CurrencyMaster

	if singular {
		object = maybeCurrencyMaster.(*CurrencyMaster)
	} else {
		slice = *maybeCurrencyMaster.(*[]*CurrencyMaster)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyMasterR{}
		}
		args = append(args, object.CurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyMasterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CurrencyID) {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Transaction`), qm.WhereIn(`currency_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Transaction")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrencyCodeTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.CurrencyCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CurrencyID, foreign.CurrencyCode) {
				local.R.CurrencyCodeTransactions = append(local.R.CurrencyCodeTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.CurrencyCode = local
				break
			}
		}
	}

	return nil
}

// AddCurrencyCodeTransactions adds the given related objects to the existing relationships
// of the CurrencyMaster, optionally inserting them as new records.
// Appends related to o.R.CurrencyCodeTransactions.
// Sets related.R.CurrencyCode appropriately.
func (o *CurrencyMaster) AddCurrencyCodeTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CurrencyCode, o.CurrencyID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Transaction` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"currency_code"}),
				strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.CurrencyID, rel.TransactionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CurrencyCode, o.CurrencyID)
		}
	}

	if o.R == nil {
		o.R = &currencyMasterR{
			CurrencyCodeTransactions: related,
		}
	} else {
		o.R.CurrencyCodeTransactions = append(o.R.CurrencyCodeTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				CurrencyCode: o,
			}
		} else {
			rel.R.CurrencyCode = o
		}
	}
	return nil
}

// SetCurrencyCodeTransactions removes all previously related items of the
// CurrencyMaster replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CurrencyCode's CurrencyCodeTransactions accordingly.
// Replaces o.R.CurrencyCodeTransactions with related.
// Sets related.R.CurrencyCode's CurrencyCodeTransactions accordingly.
func (o *CurrencyMaster) SetCurrencyCodeTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	query := "update `Transaction` set `currency_code` = null where `currency_code` = ?"
	values := []interface{}{o.CurrencyID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CurrencyCodeTransactions {
			queries.SetScanner(&rel.CurrencyCode, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CurrencyCode = nil
		}

		o.R.CurrencyCodeTransactions = nil
	}
	return o.AddCurrencyCodeTransactions(ctx, exec, insert, related...)
}

// RemoveCurrencyCodeTransactions relationships from objects passed in.
// Removes related items from R.CurrencyCodeTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.CurrencyCode.
func (o *CurrencyMaster) RemoveCurrencyCodeTransactions(ctx context.Context, exec boil.ContextExecutor, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CurrencyCode, nil)
		if rel.R != nil {
			rel.R.CurrencyCode = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("currency_code")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CurrencyCodeTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.CurrencyCodeTransactions)
			if ln > 1 && i < ln-1 {
				o.R.CurrencyCodeTransactions[i] = o.R.CurrencyCodeTransactions[ln-1]
			}
			o.R.CurrencyCodeTransactions = o.R.CurrencyCodeTransactions[:ln-1]
			break
		}
	}

	return nil
}

// CurrencyMasters retrieves all the records using an executor.
func CurrencyMasters(mods ...qm.QueryMod) currencyMasterQuery {
	mods = append(mods, qm.From("`CurrencyMaster`"))
	return currencyMasterQuery{NewQuery(mods...)}
}

// FindCurrencyMaster retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrencyMaster(ctx context.Context, exec boil.ContextExecutor, currencyID string, selectCols ...string) (*CurrencyMaster, error) {
	currencyMasterObj := &CurrencyMaster{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `CurrencyMaster` where `currency_id`=?", sel,
	)

	q := queries.Raw(query, currencyID)

	err := q.Bind(ctx, exec, currencyMasterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from CurrencyMaster")
	}

	return currencyMasterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrencyMaster) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CurrencyMaster provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyMasterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currencyMasterInsertCacheMut.RLock()
	cache, cached := currencyMasterInsertCache[key]
	currencyMasterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currencyMasterColumns,
			currencyMasterColumnsWithDefault,
			currencyMasterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `CurrencyMaster` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `CurrencyMaster` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `CurrencyMaster` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, currencyMasterPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into CurrencyMaster")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CurrencyID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CurrencyMaster")
	}

CacheNoHooks:
	if !cached {
		currencyMasterInsertCacheMut.Lock()
		currencyMasterInsertCache[key] = cache
		currencyMasterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrencyMaster.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrencyMaster) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currencyMasterUpdateCacheMut.RLock()
	cache, cached := currencyMasterUpdateCache[key]
	currencyMasterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currencyMasterColumns,
			currencyMasterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update CurrencyMaster, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `CurrencyMaster` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, currencyMasterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, append(wl, currencyMasterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update CurrencyMaster row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for CurrencyMaster")
	}

	if !cached {
		currencyMasterUpdateCacheMut.Lock()
		currencyMasterUpdateCache[key] = cache
		currencyMasterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currencyMasterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for CurrencyMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for CurrencyMaster")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencyMasterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `CurrencyMaster` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currencyMasterPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currencyMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currencyMaster")
	}
	return rowsAff, nil
}

var mySQLCurrencyMasterUniqueColumns = []string{
	"currency_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrencyMaster) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no CurrencyMaster provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyMasterColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCurrencyMasterUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyMasterUpsertCacheMut.RLock()
	cache, cached := currencyMasterUpsertCache[key]
	currencyMasterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currencyMasterColumns,
			currencyMasterColumnsWithDefault,
			currencyMasterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			currencyMasterColumns,
			currencyMasterPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert CurrencyMaster, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "CurrencyMaster", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `CurrencyMaster` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for CurrencyMaster")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(currencyMasterType, currencyMasterMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for CurrencyMaster")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for CurrencyMaster")
	}

CacheNoHooks:
	if !cached {
		currencyMasterUpsertCacheMut.Lock()
		currencyMasterUpsertCache[key] = cache
		currencyMasterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrencyMaster record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrencyMaster) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrencyMaster provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyMasterPrimaryKeyMapping)
	sql := "DELETE FROM `CurrencyMaster` WHERE `currency_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from CurrencyMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for CurrencyMaster")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currencyMasterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currencyMasterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from CurrencyMaster")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CurrencyMaster")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencyMasterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrencyMaster slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(currencyMasterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `CurrencyMaster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currencyMasterPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currencyMaster slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for CurrencyMaster")
	}

	if len(currencyMasterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrencyMaster) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrencyMaster(ctx, exec, o.CurrencyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencyMasterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrencyMasterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyMasterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `CurrencyMaster`.* FROM `CurrencyMaster` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, currencyMasterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrencyMasterSlice")
	}

	*o = slice

	return nil
}

// CurrencyMasterExists checks if the CurrencyMaster row exists.
func CurrencyMasterExists(ctx context.Context, exec boil.ContextExecutor, currencyID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `CurrencyMaster` where `currency_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, currencyID)
	}

	row := exec.QueryRowContext(ctx, sql, currencyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if CurrencyMaster exists")
	}

	return exists, nil
}
