// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FiscalYear is an object representing the database table.
type FiscalYear struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	FromDate     null.Time   `boil:"from_date" json:"from_date,omitempty" toml:"from_date" yaml:"from_date,omitempty"`
	ToDate       null.Time   `boil:"to_date" json:"to_date,omitempty" toml:"to_date" yaml:"to_date,omitempty"`
	BankID       int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *fiscalYearR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fiscalYearL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FiscalYearColumns = struct {
	ID           string
	Name         string
	FromDate     string
	ToDate       string
	BankID       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	ID:           "id",
	Name:         "name",
	FromDate:     "from_date",
	ToDate:       "to_date",
	BankID:       "bank_id",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var FiscalYearWhere = struct {
	ID           whereHelperint
	Name         whereHelpernull_String
	FromDate     whereHelpernull_Time
	ToDate       whereHelpernull_Time
	BankID       whereHelperint
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	ID:           whereHelperint{field: `id`},
	Name:         whereHelpernull_String{field: `name`},
	FromDate:     whereHelpernull_Time{field: `from_date`},
	ToDate:       whereHelpernull_Time{field: `to_date`},
	BankID:       whereHelperint{field: `bank_id`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// FiscalYearRels is where relationship names are stored.
var FiscalYearRels = struct {
}{}

// fiscalYearR is where relationships are stored.
type fiscalYearR struct {
}

// NewStruct creates a new relationship struct
func (*fiscalYearR) NewStruct() *fiscalYearR {
	return &fiscalYearR{}
}

// fiscalYearL is where Load methods for each relationship are stored.
type fiscalYearL struct{}

var (
	fiscalYearColumns               = []string{"id", "name", "from_date", "to_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fiscalYearColumnsWithoutDefault = []string{"id", "name", "from_date", "to_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fiscalYearColumnsWithDefault    = []string{}
	fiscalYearPrimaryKeyColumns     = []string{"id"}
)

type (
	// FiscalYearSlice is an alias for a slice of pointers to FiscalYear.
	// This should generally be used opposed to []FiscalYear.
	FiscalYearSlice []*FiscalYear
	// FiscalYearHook is the signature for custom FiscalYear hook methods
	FiscalYearHook func(context.Context, boil.ContextExecutor, *FiscalYear) error

	fiscalYearQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fiscalYearType                 = reflect.TypeOf(&FiscalYear{})
	fiscalYearMapping              = queries.MakeStructMapping(fiscalYearType)
	fiscalYearPrimaryKeyMapping, _ = queries.BindMapping(fiscalYearType, fiscalYearMapping, fiscalYearPrimaryKeyColumns)
	fiscalYearInsertCacheMut       sync.RWMutex
	fiscalYearInsertCache          = make(map[string]insertCache)
	fiscalYearUpdateCacheMut       sync.RWMutex
	fiscalYearUpdateCache          = make(map[string]updateCache)
	fiscalYearUpsertCacheMut       sync.RWMutex
	fiscalYearUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fiscalYearBeforeInsertHooks []FiscalYearHook
var fiscalYearBeforeUpdateHooks []FiscalYearHook
var fiscalYearBeforeDeleteHooks []FiscalYearHook
var fiscalYearBeforeUpsertHooks []FiscalYearHook

var fiscalYearAfterInsertHooks []FiscalYearHook
var fiscalYearAfterSelectHooks []FiscalYearHook
var fiscalYearAfterUpdateHooks []FiscalYearHook
var fiscalYearAfterDeleteHooks []FiscalYearHook
var fiscalYearAfterUpsertHooks []FiscalYearHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FiscalYear) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FiscalYear) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FiscalYear) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FiscalYear) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FiscalYear) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FiscalYear) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FiscalYear) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FiscalYear) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FiscalYear) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fiscalYearAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFiscalYearHook registers your hook function for all future operations.
func AddFiscalYearHook(hookPoint boil.HookPoint, fiscalYearHook FiscalYearHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fiscalYearBeforeInsertHooks = append(fiscalYearBeforeInsertHooks, fiscalYearHook)
	case boil.BeforeUpdateHook:
		fiscalYearBeforeUpdateHooks = append(fiscalYearBeforeUpdateHooks, fiscalYearHook)
	case boil.BeforeDeleteHook:
		fiscalYearBeforeDeleteHooks = append(fiscalYearBeforeDeleteHooks, fiscalYearHook)
	case boil.BeforeUpsertHook:
		fiscalYearBeforeUpsertHooks = append(fiscalYearBeforeUpsertHooks, fiscalYearHook)
	case boil.AfterInsertHook:
		fiscalYearAfterInsertHooks = append(fiscalYearAfterInsertHooks, fiscalYearHook)
	case boil.AfterSelectHook:
		fiscalYearAfterSelectHooks = append(fiscalYearAfterSelectHooks, fiscalYearHook)
	case boil.AfterUpdateHook:
		fiscalYearAfterUpdateHooks = append(fiscalYearAfterUpdateHooks, fiscalYearHook)
	case boil.AfterDeleteHook:
		fiscalYearAfterDeleteHooks = append(fiscalYearAfterDeleteHooks, fiscalYearHook)
	case boil.AfterUpsertHook:
		fiscalYearAfterUpsertHooks = append(fiscalYearAfterUpsertHooks, fiscalYearHook)
	}
}

// One returns a single fiscalYear record from the query.
func (q fiscalYearQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FiscalYear, error) {
	o := &FiscalYear{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FiscalYear")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FiscalYear records from the query.
func (q fiscalYearQuery) All(ctx context.Context, exec boil.ContextExecutor) (FiscalYearSlice, error) {
	var o []*FiscalYear

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FiscalYear slice")
	}

	if len(fiscalYearAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FiscalYear records in the query.
func (q fiscalYearQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FiscalYear rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fiscalYearQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FiscalYear exists")
	}

	return count > 0, nil
}

// FiscalYears retrieves all the records using an executor.
func FiscalYears(mods ...qm.QueryMod) fiscalYearQuery {
	mods = append(mods, qm.From("`FiscalYear`"))
	return fiscalYearQuery{NewQuery(mods...)}
}

// FindFiscalYear retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFiscalYear(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FiscalYear, error) {
	fiscalYearObj := &FiscalYear{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FiscalYear` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fiscalYearObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FiscalYear")
	}

	return fiscalYearObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FiscalYear) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FiscalYear provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiscalYearColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fiscalYearInsertCacheMut.RLock()
	cache, cached := fiscalYearInsertCache[key]
	fiscalYearInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fiscalYearColumns,
			fiscalYearColumnsWithDefault,
			fiscalYearColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FiscalYear` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FiscalYear` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FiscalYear` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fiscalYearPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FiscalYear")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FiscalYear")
	}

CacheNoHooks:
	if !cached {
		fiscalYearInsertCacheMut.Lock()
		fiscalYearInsertCache[key] = cache
		fiscalYearInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FiscalYear.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FiscalYear) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fiscalYearUpdateCacheMut.RLock()
	cache, cached := fiscalYearUpdateCache[key]
	fiscalYearUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fiscalYearColumns,
			fiscalYearPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FiscalYear, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FiscalYear` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fiscalYearPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, append(wl, fiscalYearPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FiscalYear row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FiscalYear")
	}

	if !cached {
		fiscalYearUpdateCacheMut.Lock()
		fiscalYearUpdateCache[key] = cache
		fiscalYearUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fiscalYearQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FiscalYear")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FiscalYear")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FiscalYearSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiscalYearPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FiscalYear` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fiscalYearPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fiscalYear slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fiscalYear")
	}
	return rowsAff, nil
}

var mySQLFiscalYearUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FiscalYear) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FiscalYear provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiscalYearColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFiscalYearUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fiscalYearUpsertCacheMut.RLock()
	cache, cached := fiscalYearUpsertCache[key]
	fiscalYearUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fiscalYearColumns,
			fiscalYearColumnsWithDefault,
			fiscalYearColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fiscalYearColumns,
			fiscalYearPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert FiscalYear, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "FiscalYear", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FiscalYear` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for FiscalYear")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fiscalYearType, fiscalYearMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for FiscalYear")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FiscalYear")
	}

CacheNoHooks:
	if !cached {
		fiscalYearUpsertCacheMut.Lock()
		fiscalYearUpsertCache[key] = cache
		fiscalYearUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FiscalYear record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FiscalYear) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FiscalYear provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fiscalYearPrimaryKeyMapping)
	sql := "DELETE FROM `FiscalYear` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FiscalYear")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FiscalYear")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fiscalYearQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fiscalYearQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FiscalYear")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FiscalYear")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FiscalYearSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FiscalYear slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fiscalYearBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiscalYearPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FiscalYear` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fiscalYearPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fiscalYear slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FiscalYear")
	}

	if len(fiscalYearAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FiscalYear) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFiscalYear(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FiscalYearSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FiscalYearSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiscalYearPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FiscalYear`.* FROM `FiscalYear` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fiscalYearPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FiscalYearSlice")
	}

	*o = slice

	return nil
}

// FiscalYearExists checks if the FiscalYear row exists.
func FiscalYearExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FiscalYear` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FiscalYear exists")
	}

	return exists, nil
}
