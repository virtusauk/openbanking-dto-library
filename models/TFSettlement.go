// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFSettlement is an object representing the database table.
type TFSettlement struct {
	TFSettlementID       int           `boil:"tf_settlement_id" json:"tf_settlement_id" toml:"tf_settlement_id" yaml:"tf_settlement_id"`
	BranchID             int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	ReferenceID          string        `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	ProductCode          string        `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	PartyID              int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	TransactionID        int           `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AcountNo             string        `boil:"acount_no" json:"acount_no" toml:"acount_no" yaml:"acount_no"`
	TransactionValueDate time.Time     `boil:"transaction_value_date" json:"transaction_value_date" toml:"transaction_value_date" yaml:"transaction_value_date"`
	TransactionCurrency  string        `boil:"transaction_currency" json:"transaction_currency" toml:"transaction_currency" yaml:"transaction_currency"`
	TransactionAmount    types.Decimal `boil:"transaction_amount" json:"transaction_amount" toml:"transaction_amount" yaml:"transaction_amount"`
	MakerDate            time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFSettlementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFSettlementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFSettlementColumns = struct {
	TFSettlementID       string
	BranchID             string
	ReferenceID          string
	ProductCode          string
	PartyID              string
	TransactionID        string
	AcountNo             string
	TransactionValueDate string
	TransactionCurrency  string
	TransactionAmount    string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	TFSettlementID:       "tf_settlement_id",
	BranchID:             "branch_id",
	ReferenceID:          "reference_id",
	ProductCode:          "product_code",
	PartyID:              "party_id",
	TransactionID:        "transaction_id",
	AcountNo:             "acount_no",
	TransactionValueDate: "transaction_value_date",
	TransactionCurrency:  "transaction_currency",
	TransactionAmount:    "transaction_amount",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var TFSettlementWhere = struct {
	TFSettlementID       whereHelperint
	BranchID             whereHelperint
	ReferenceID          whereHelperstring
	ProductCode          whereHelperstring
	PartyID              whereHelperint
	TransactionID        whereHelperint
	AcountNo             whereHelperstring
	TransactionValueDate whereHelpertime_Time
	TransactionCurrency  whereHelperstring
	TransactionAmount    whereHelpertypes_Decimal
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	TFSettlementID:       whereHelperint{field: `tf_settlement_id`},
	BranchID:             whereHelperint{field: `branch_id`},
	ReferenceID:          whereHelperstring{field: `reference_id`},
	ProductCode:          whereHelperstring{field: `product_code`},
	PartyID:              whereHelperint{field: `party_id`},
	TransactionID:        whereHelperint{field: `transaction_id`},
	AcountNo:             whereHelperstring{field: `acount_no`},
	TransactionValueDate: whereHelpertime_Time{field: `transaction_value_date`},
	TransactionCurrency:  whereHelperstring{field: `transaction_currency`},
	TransactionAmount:    whereHelpertypes_Decimal{field: `transaction_amount`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// TFSettlementRels is where relationship names are stored.
var TFSettlementRels = struct {
	Party string
}{
	Party: "Party",
}

// tFSettlementR is where relationships are stored.
type tFSettlementR struct {
	Party *Party
}

// NewStruct creates a new relationship struct
func (*tFSettlementR) NewStruct() *tFSettlementR {
	return &tFSettlementR{}
}

// tFSettlementL is where Load methods for each relationship are stored.
type tFSettlementL struct{}

var (
	tFSettlementColumns               = []string{"tf_settlement_id", "branch_id", "reference_id", "product_code", "party_id", "transaction_id", "acount_no", "transaction_value_date", "transaction_currency", "transaction_amount", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFSettlementColumnsWithoutDefault = []string{"tf_settlement_id", "branch_id", "reference_id", "product_code", "party_id", "transaction_id", "acount_no", "transaction_value_date", "transaction_currency", "transaction_amount", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFSettlementColumnsWithDefault    = []string{}
	tFSettlementPrimaryKeyColumns     = []string{"tf_settlement_id"}
)

type (
	// TFSettlementSlice is an alias for a slice of pointers to TFSettlement.
	// This should generally be used opposed to []TFSettlement.
	TFSettlementSlice []*TFSettlement
	// TFSettlementHook is the signature for custom TFSettlement hook methods
	TFSettlementHook func(context.Context, boil.ContextExecutor, *TFSettlement) error

	tFSettlementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFSettlementType                 = reflect.TypeOf(&TFSettlement{})
	tFSettlementMapping              = queries.MakeStructMapping(tFSettlementType)
	tFSettlementPrimaryKeyMapping, _ = queries.BindMapping(tFSettlementType, tFSettlementMapping, tFSettlementPrimaryKeyColumns)
	tFSettlementInsertCacheMut       sync.RWMutex
	tFSettlementInsertCache          = make(map[string]insertCache)
	tFSettlementUpdateCacheMut       sync.RWMutex
	tFSettlementUpdateCache          = make(map[string]updateCache)
	tFSettlementUpsertCacheMut       sync.RWMutex
	tFSettlementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFSettlementBeforeInsertHooks []TFSettlementHook
var tFSettlementBeforeUpdateHooks []TFSettlementHook
var tFSettlementBeforeDeleteHooks []TFSettlementHook
var tFSettlementBeforeUpsertHooks []TFSettlementHook

var tFSettlementAfterInsertHooks []TFSettlementHook
var tFSettlementAfterSelectHooks []TFSettlementHook
var tFSettlementAfterUpdateHooks []TFSettlementHook
var tFSettlementAfterDeleteHooks []TFSettlementHook
var tFSettlementAfterUpsertHooks []TFSettlementHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFSettlement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFSettlement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFSettlement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFSettlement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFSettlement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFSettlement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFSettlement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFSettlement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFSettlement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFSettlementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFSettlementHook registers your hook function for all future operations.
func AddTFSettlementHook(hookPoint boil.HookPoint, tFSettlementHook TFSettlementHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFSettlementBeforeInsertHooks = append(tFSettlementBeforeInsertHooks, tFSettlementHook)
	case boil.BeforeUpdateHook:
		tFSettlementBeforeUpdateHooks = append(tFSettlementBeforeUpdateHooks, tFSettlementHook)
	case boil.BeforeDeleteHook:
		tFSettlementBeforeDeleteHooks = append(tFSettlementBeforeDeleteHooks, tFSettlementHook)
	case boil.BeforeUpsertHook:
		tFSettlementBeforeUpsertHooks = append(tFSettlementBeforeUpsertHooks, tFSettlementHook)
	case boil.AfterInsertHook:
		tFSettlementAfterInsertHooks = append(tFSettlementAfterInsertHooks, tFSettlementHook)
	case boil.AfterSelectHook:
		tFSettlementAfterSelectHooks = append(tFSettlementAfterSelectHooks, tFSettlementHook)
	case boil.AfterUpdateHook:
		tFSettlementAfterUpdateHooks = append(tFSettlementAfterUpdateHooks, tFSettlementHook)
	case boil.AfterDeleteHook:
		tFSettlementAfterDeleteHooks = append(tFSettlementAfterDeleteHooks, tFSettlementHook)
	case boil.AfterUpsertHook:
		tFSettlementAfterUpsertHooks = append(tFSettlementAfterUpsertHooks, tFSettlementHook)
	}
}

// One returns a single tFSettlement record from the query.
func (q tFSettlementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFSettlement, error) {
	o := &TFSettlement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFSettlement")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFSettlement records from the query.
func (q tFSettlementQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFSettlementSlice, error) {
	var o []*TFSettlement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFSettlement slice")
	}

	if len(tFSettlementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFSettlement records in the query.
func (q tFSettlementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFSettlement rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFSettlementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFSettlement exists")
	}

	return count > 0, nil
}

// Party pointed to by the foreign key.
func (o *TFSettlement) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFSettlementL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFSettlement interface{}, mods queries.Applicator) error {
	var slice []*TFSettlement
	var object *TFSettlement

	if singular {
		object = maybeTFSettlement.(*TFSettlement)
	} else {
		slice = *maybeTFSettlement.(*[]*TFSettlement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFSettlementR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFSettlementR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFSettlementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFSettlements = append(foreign.R.PartyTFSettlements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFSettlements = append(foreign.R.PartyTFSettlements, local)
				break
			}
		}
	}

	return nil
}

// SetParty of the tFSettlement to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFSettlements.
func (o *TFSettlement) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFSettlement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFSettlementPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFSettlementID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFSettlementR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFSettlements: TFSettlementSlice{o},
		}
	} else {
		related.R.PartyTFSettlements = append(related.R.PartyTFSettlements, o)
	}

	return nil
}

// TFSettlements retrieves all the records using an executor.
func TFSettlements(mods ...qm.QueryMod) tFSettlementQuery {
	mods = append(mods, qm.From("`TFSettlement`"))
	return tFSettlementQuery{NewQuery(mods...)}
}

// FindTFSettlement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFSettlement(ctx context.Context, exec boil.ContextExecutor, tFSettlementID int, selectCols ...string) (*TFSettlement, error) {
	tFSettlementObj := &TFSettlement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFSettlement` where `tf_settlement_id`=?", sel,
	)

	q := queries.Raw(query, tFSettlementID)

	err := q.Bind(ctx, exec, tFSettlementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFSettlement")
	}

	return tFSettlementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFSettlement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFSettlement provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFSettlementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFSettlementInsertCacheMut.RLock()
	cache, cached := tFSettlementInsertCache[key]
	tFSettlementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFSettlementColumns,
			tFSettlementColumnsWithDefault,
			tFSettlementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFSettlement` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFSettlement` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFSettlement` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFSettlementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFSettlement")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFSettlementID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFSettlement")
	}

CacheNoHooks:
	if !cached {
		tFSettlementInsertCacheMut.Lock()
		tFSettlementInsertCache[key] = cache
		tFSettlementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFSettlement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFSettlement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFSettlementUpdateCacheMut.RLock()
	cache, cached := tFSettlementUpdateCache[key]
	tFSettlementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFSettlementColumns,
			tFSettlementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFSettlement, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFSettlement` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFSettlementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, append(wl, tFSettlementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFSettlement row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFSettlement")
	}

	if !cached {
		tFSettlementUpdateCacheMut.Lock()
		tFSettlementUpdateCache[key] = cache
		tFSettlementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFSettlementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFSettlement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFSettlement")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFSettlementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFSettlementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFSettlement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFSettlementPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFSettlement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFSettlement")
	}
	return rowsAff, nil
}

var mySQLTFSettlementUniqueColumns = []string{
	"tf_settlement_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFSettlement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFSettlement provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFSettlementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFSettlementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFSettlementUpsertCacheMut.RLock()
	cache, cached := tFSettlementUpsertCache[key]
	tFSettlementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFSettlementColumns,
			tFSettlementColumnsWithDefault,
			tFSettlementColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFSettlementColumns,
			tFSettlementPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFSettlement, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFSettlement", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFSettlement` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFSettlement")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFSettlementType, tFSettlementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFSettlement")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFSettlement")
	}

CacheNoHooks:
	if !cached {
		tFSettlementUpsertCacheMut.Lock()
		tFSettlementUpsertCache[key] = cache
		tFSettlementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFSettlement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFSettlement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFSettlement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFSettlementPrimaryKeyMapping)
	sql := "DELETE FROM `TFSettlement` WHERE `tf_settlement_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFSettlement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFSettlement")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFSettlementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFSettlementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFSettlement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFSettlement")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFSettlementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFSettlement slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFSettlementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFSettlementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFSettlement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFSettlementPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFSettlement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFSettlement")
	}

	if len(tFSettlementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFSettlement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFSettlement(ctx, exec, o.TFSettlementID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFSettlementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFSettlementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFSettlementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFSettlement`.* FROM `TFSettlement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFSettlementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFSettlementSlice")
	}

	*o = slice

	return nil
}

// TFSettlementExists checks if the TFSettlement row exists.
func TFSettlementExists(ctx context.Context, exec boil.ContextExecutor, tFSettlementID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFSettlement` where `tf_settlement_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFSettlementID)
	}

	row := exec.QueryRowContext(ctx, sql, tFSettlementID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFSettlement exists")
	}

	return exists, nil
}
