// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// PaymentBill is an object representing the database table.
type PaymentBill struct {
	PaymentBillID       int               `boil:"payment_bill_id" json:"payment_bill_id" toml:"payment_bill_id" yaml:"payment_bill_id"`
	PaymentID           int               `boil:"payment_id" json:"payment_id" toml:"payment_id" yaml:"payment_id"`
	Amount              types.Decimal     `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	BillPayStatus       string            `boil:"bill_pay_status" json:"bill_pay_status" toml:"bill_pay_status" yaml:"bill_pay_status"`
	DateCreated         time.Time         `boil:"date_created" json:"date_created" toml:"date_created" yaml:"date_created"`
	ScheduledDate       time.Time         `boil:"scheduled_date" json:"scheduled_date" toml:"scheduled_date" yaml:"scheduled_date"`
	BillerID            int               `boil:"biller_id" json:"biller_id" toml:"biller_id" yaml:"biller_id"`
	FromAccountID       int               `boil:"from_account_id" json:"from_account_id" toml:"from_account_id" yaml:"from_account_id"`
	FromCurrencyCode    string            `boil:"from_currency_code" json:"from_currency_code" toml:"from_currency_code" yaml:"from_currency_code"`
	FromPartyID         int               `boil:"from_party_id" json:"from_party_id" toml:"from_party_id" yaml:"from_party_id"`
	ToCurrencyCode      string            `boil:"to_currency_code" json:"to_currency_code" toml:"to_currency_code" yaml:"to_currency_code"`
	BillPresentmentDate null.Time         `boil:"bill_presentment_date" json:"bill_presentment_date,omitempty" toml:"bill_presentment_date" yaml:"bill_presentment_date,omitempty"`
	BillPayByDate       null.Time         `boil:"bill_pay_by_date" json:"bill_pay_by_date,omitempty" toml:"bill_pay_by_date" yaml:"bill_pay_by_date,omitempty"`
	PaymentStatus       null.String       `boil:"payment_status" json:"payment_status,omitempty" toml:"payment_status" yaml:"payment_status,omitempty"`
	PaymentCharges      types.NullDecimal `boil:"payment_charges" json:"payment_charges,omitempty" toml:"payment_charges" yaml:"payment_charges,omitempty"`
	PaymentTotalAmount  types.NullDecimal `boil:"payment_total_amount" json:"payment_total_amount,omitempty" toml:"payment_total_amount" yaml:"payment_total_amount,omitempty"`
	PaymentDate         null.Time         `boil:"payment_date" json:"payment_date,omitempty" toml:"payment_date" yaml:"payment_date,omitempty"`
	MakerDate           time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate         null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID             string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID           null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy          null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate        null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *paymentBillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentBillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentBillColumns = struct {
	PaymentBillID       string
	PaymentID           string
	Amount              string
	BillPayStatus       string
	DateCreated         string
	ScheduledDate       string
	BillerID            string
	FromAccountID       string
	FromCurrencyCode    string
	FromPartyID         string
	ToCurrencyCode      string
	BillPresentmentDate string
	BillPayByDate       string
	PaymentStatus       string
	PaymentCharges      string
	PaymentTotalAmount  string
	PaymentDate         string
	MakerDate           string
	CheckerDate         string
	MakerID             string
	CheckerID           string
	ModifiedBy          string
	ModifiedDate        string
}{
	PaymentBillID:       "payment_bill_id",
	PaymentID:           "payment_id",
	Amount:              "amount",
	BillPayStatus:       "bill_pay_status",
	DateCreated:         "date_created",
	ScheduledDate:       "scheduled_date",
	BillerID:            "biller_id",
	FromAccountID:       "from_account_id",
	FromCurrencyCode:    "from_currency_code",
	FromPartyID:         "from_party_id",
	ToCurrencyCode:      "to_currency_code",
	BillPresentmentDate: "bill_presentment_date",
	BillPayByDate:       "bill_pay_by_date",
	PaymentStatus:       "payment_status",
	PaymentCharges:      "payment_charges",
	PaymentTotalAmount:  "payment_total_amount",
	PaymentDate:         "payment_date",
	MakerDate:           "maker_date",
	CheckerDate:         "checker_date",
	MakerID:             "maker_id",
	CheckerID:           "checker_id",
	ModifiedBy:          "modified_by",
	ModifiedDate:        "modified_date",
}

// Generated where

var PaymentBillWhere = struct {
	PaymentBillID       whereHelperint
	PaymentID           whereHelperint
	Amount              whereHelpertypes_Decimal
	BillPayStatus       whereHelperstring
	DateCreated         whereHelpertime_Time
	ScheduledDate       whereHelpertime_Time
	BillerID            whereHelperint
	FromAccountID       whereHelperint
	FromCurrencyCode    whereHelperstring
	FromPartyID         whereHelperint
	ToCurrencyCode      whereHelperstring
	BillPresentmentDate whereHelpernull_Time
	BillPayByDate       whereHelpernull_Time
	PaymentStatus       whereHelpernull_String
	PaymentCharges      whereHelpertypes_NullDecimal
	PaymentTotalAmount  whereHelpertypes_NullDecimal
	PaymentDate         whereHelpernull_Time
	MakerDate           whereHelpertime_Time
	CheckerDate         whereHelpernull_Time
	MakerID             whereHelperstring
	CheckerID           whereHelpernull_String
	ModifiedBy          whereHelpernull_String
	ModifiedDate        whereHelpernull_Time
}{
	PaymentBillID:       whereHelperint{field: `payment_bill_id`},
	PaymentID:           whereHelperint{field: `payment_id`},
	Amount:              whereHelpertypes_Decimal{field: `amount`},
	BillPayStatus:       whereHelperstring{field: `bill_pay_status`},
	DateCreated:         whereHelpertime_Time{field: `date_created`},
	ScheduledDate:       whereHelpertime_Time{field: `scheduled_date`},
	BillerID:            whereHelperint{field: `biller_id`},
	FromAccountID:       whereHelperint{field: `from_account_id`},
	FromCurrencyCode:    whereHelperstring{field: `from_currency_code`},
	FromPartyID:         whereHelperint{field: `from_party_id`},
	ToCurrencyCode:      whereHelperstring{field: `to_currency_code`},
	BillPresentmentDate: whereHelpernull_Time{field: `bill_presentment_date`},
	BillPayByDate:       whereHelpernull_Time{field: `bill_pay_by_date`},
	PaymentStatus:       whereHelpernull_String{field: `payment_status`},
	PaymentCharges:      whereHelpertypes_NullDecimal{field: `payment_charges`},
	PaymentTotalAmount:  whereHelpertypes_NullDecimal{field: `payment_total_amount`},
	PaymentDate:         whereHelpernull_Time{field: `payment_date`},
	MakerDate:           whereHelpertime_Time{field: `maker_date`},
	CheckerDate:         whereHelpernull_Time{field: `checker_date`},
	MakerID:             whereHelperstring{field: `maker_id`},
	CheckerID:           whereHelpernull_String{field: `checker_id`},
	ModifiedBy:          whereHelpernull_String{field: `modified_by`},
	ModifiedDate:        whereHelpernull_Time{field: `modified_date`},
}

// PaymentBillRels is where relationship names are stored.
var PaymentBillRels = struct {
	Payment     string
	Biller      string
	FromAccount string
	FromParty   string
}{
	Payment:     "Payment",
	Biller:      "Biller",
	FromAccount: "FromAccount",
	FromParty:   "FromParty",
}

// paymentBillR is where relationships are stored.
type paymentBillR struct {
	Payment     *PaymentInitiation
	Biller      *Biller
	FromAccount *Account
	FromParty   *Party
}

// NewStruct creates a new relationship struct
func (*paymentBillR) NewStruct() *paymentBillR {
	return &paymentBillR{}
}

// paymentBillL is where Load methods for each relationship are stored.
type paymentBillL struct{}

var (
	paymentBillColumns               = []string{"payment_bill_id", "payment_id", "amount", "bill_pay_status", "date_created", "scheduled_date", "biller_id", "from_account_id", "from_currency_code", "from_party_id", "to_currency_code", "bill_presentment_date", "bill_pay_by_date", "payment_status", "payment_charges", "payment_total_amount", "payment_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentBillColumnsWithoutDefault = []string{"payment_id", "amount", "bill_pay_status", "date_created", "scheduled_date", "biller_id", "from_account_id", "from_currency_code", "from_party_id", "to_currency_code", "bill_presentment_date", "bill_pay_by_date", "payment_status", "payment_charges", "payment_total_amount", "payment_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	paymentBillColumnsWithDefault    = []string{"payment_bill_id"}
	paymentBillPrimaryKeyColumns     = []string{"payment_bill_id"}
)

type (
	// PaymentBillSlice is an alias for a slice of pointers to PaymentBill.
	// This should generally be used opposed to []PaymentBill.
	PaymentBillSlice []*PaymentBill
	// PaymentBillHook is the signature for custom PaymentBill hook methods
	PaymentBillHook func(context.Context, boil.ContextExecutor, *PaymentBill) error

	paymentBillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentBillType                 = reflect.TypeOf(&PaymentBill{})
	paymentBillMapping              = queries.MakeStructMapping(paymentBillType)
	paymentBillPrimaryKeyMapping, _ = queries.BindMapping(paymentBillType, paymentBillMapping, paymentBillPrimaryKeyColumns)
	paymentBillInsertCacheMut       sync.RWMutex
	paymentBillInsertCache          = make(map[string]insertCache)
	paymentBillUpdateCacheMut       sync.RWMutex
	paymentBillUpdateCache          = make(map[string]updateCache)
	paymentBillUpsertCacheMut       sync.RWMutex
	paymentBillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentBillBeforeInsertHooks []PaymentBillHook
var paymentBillBeforeUpdateHooks []PaymentBillHook
var paymentBillBeforeDeleteHooks []PaymentBillHook
var paymentBillBeforeUpsertHooks []PaymentBillHook

var paymentBillAfterInsertHooks []PaymentBillHook
var paymentBillAfterSelectHooks []PaymentBillHook
var paymentBillAfterUpdateHooks []PaymentBillHook
var paymentBillAfterDeleteHooks []PaymentBillHook
var paymentBillAfterUpsertHooks []PaymentBillHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentBill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentBill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentBill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentBill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentBill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentBill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentBill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentBill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentBill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentBillHook registers your hook function for all future operations.
func AddPaymentBillHook(hookPoint boil.HookPoint, paymentBillHook PaymentBillHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		paymentBillBeforeInsertHooks = append(paymentBillBeforeInsertHooks, paymentBillHook)
	case boil.BeforeUpdateHook:
		paymentBillBeforeUpdateHooks = append(paymentBillBeforeUpdateHooks, paymentBillHook)
	case boil.BeforeDeleteHook:
		paymentBillBeforeDeleteHooks = append(paymentBillBeforeDeleteHooks, paymentBillHook)
	case boil.BeforeUpsertHook:
		paymentBillBeforeUpsertHooks = append(paymentBillBeforeUpsertHooks, paymentBillHook)
	case boil.AfterInsertHook:
		paymentBillAfterInsertHooks = append(paymentBillAfterInsertHooks, paymentBillHook)
	case boil.AfterSelectHook:
		paymentBillAfterSelectHooks = append(paymentBillAfterSelectHooks, paymentBillHook)
	case boil.AfterUpdateHook:
		paymentBillAfterUpdateHooks = append(paymentBillAfterUpdateHooks, paymentBillHook)
	case boil.AfterDeleteHook:
		paymentBillAfterDeleteHooks = append(paymentBillAfterDeleteHooks, paymentBillHook)
	case boil.AfterUpsertHook:
		paymentBillAfterUpsertHooks = append(paymentBillAfterUpsertHooks, paymentBillHook)
	}
}

// One returns a single paymentBill record from the query.
func (q paymentBillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentBill, error) {
	o := &PaymentBill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PaymentBill")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentBill records from the query.
func (q paymentBillQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentBillSlice, error) {
	var o []*PaymentBill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentBill slice")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentBill records in the query.
func (q paymentBillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PaymentBill rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentBillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PaymentBill exists")
	}

	return count > 0, nil
}

// Payment pointed to by the foreign key.
func (o *PaymentBill) Payment(mods ...qm.QueryMod) paymentInitiationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("payment_id=?", o.PaymentID),
	}

	queryMods = append(queryMods, mods...)

	query := PaymentInitiations(queryMods...)
	queries.SetFrom(query.Query, "`PaymentInitiation`")

	return query
}

// Biller pointed to by the foreign key.
func (o *PaymentBill) Biller(mods ...qm.QueryMod) billerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("biller_id=?", o.BillerID),
	}

	queryMods = append(queryMods, mods...)

	query := Billers(queryMods...)
	queries.SetFrom(query.Query, "`Biller`")

	return query
}

// FromAccount pointed to by the foreign key.
func (o *PaymentBill) FromAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.FromAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// FromParty pointed to by the foreign key.
func (o *PaymentBill) FromParty(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.FromPartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentBillL) LoadPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentBill interface{}, mods queries.Applicator) error {
	var slice []*PaymentBill
	var object *PaymentBill

	if singular {
		object = maybePaymentBill.(*PaymentBill)
	} else {
		slice = *maybePaymentBill.(*[]*PaymentBill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentBillR{}
		}
		args = append(args, object.PaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentBillR{}
			}

			for _, a := range args {
				if a == obj.PaymentID {
					continue Outer
				}
			}

			args = append(args, obj.PaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PaymentInitiation`), qm.WhereIn(`payment_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PaymentInitiation")
	}

	var resultSlice []*PaymentInitiation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PaymentInitiation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for PaymentInitiation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PaymentInitiation")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Payment = foreign
		if foreign.R == nil {
			foreign.R = &paymentInitiationR{}
		}
		foreign.R.PaymentPaymentBills = append(foreign.R.PaymentPaymentBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentID == foreign.PaymentID {
				local.R.Payment = foreign
				if foreign.R == nil {
					foreign.R = &paymentInitiationR{}
				}
				foreign.R.PaymentPaymentBills = append(foreign.R.PaymentPaymentBills, local)
				break
			}
		}
	}

	return nil
}

// LoadBiller allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentBillL) LoadBiller(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentBill interface{}, mods queries.Applicator) error {
	var slice []*PaymentBill
	var object *PaymentBill

	if singular {
		object = maybePaymentBill.(*PaymentBill)
	} else {
		slice = *maybePaymentBill.(*[]*PaymentBill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentBillR{}
		}
		args = append(args, object.BillerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentBillR{}
			}

			for _, a := range args {
				if a == obj.BillerID {
					continue Outer
				}
			}

			args = append(args, obj.BillerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Biller`), qm.WhereIn(`biller_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Biller")
	}

	var resultSlice []*Biller
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Biller")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Biller")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Biller")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Biller = foreign
		if foreign.R == nil {
			foreign.R = &billerR{}
		}
		foreign.R.BillerPaymentBills = append(foreign.R.BillerPaymentBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillerID == foreign.BillerID {
				local.R.Biller = foreign
				if foreign.R == nil {
					foreign.R = &billerR{}
				}
				foreign.R.BillerPaymentBills = append(foreign.R.BillerPaymentBills, local)
				break
			}
		}
	}

	return nil
}

// LoadFromAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentBillL) LoadFromAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentBill interface{}, mods queries.Applicator) error {
	var slice []*PaymentBill
	var object *PaymentBill

	if singular {
		object = maybePaymentBill.(*PaymentBill)
	} else {
		slice = *maybePaymentBill.(*[]*PaymentBill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentBillR{}
		}
		args = append(args, object.FromAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentBillR{}
			}

			for _, a := range args {
				if a == obj.FromAccountID {
					continue Outer
				}
			}

			args = append(args, obj.FromAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FromAccountPaymentBills = append(foreign.R.FromAccountPaymentBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromAccountID == foreign.AccountID {
				local.R.FromAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FromAccountPaymentBills = append(foreign.R.FromAccountPaymentBills, local)
				break
			}
		}
	}

	return nil
}

// LoadFromParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentBillL) LoadFromParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentBill interface{}, mods queries.Applicator) error {
	var slice []*PaymentBill
	var object *PaymentBill

	if singular {
		object = maybePaymentBill.(*PaymentBill)
	} else {
		slice = *maybePaymentBill.(*[]*PaymentBill)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentBillR{}
		}
		args = append(args, object.FromPartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentBillR{}
			}

			for _, a := range args {
				if a == obj.FromPartyID {
					continue Outer
				}
			}

			args = append(args, obj.FromPartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(paymentBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromParty = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.FromPartyPaymentBills = append(foreign.R.FromPartyPaymentBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromPartyID == foreign.PartyID {
				local.R.FromParty = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.FromPartyPaymentBills = append(foreign.R.FromPartyPaymentBills, local)
				break
			}
		}
	}

	return nil
}

// SetPayment of the paymentBill to the related item.
// Sets o.R.Payment to related.
// Adds o to related.R.PaymentPaymentBills.
func (o *PaymentBill) SetPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PaymentInitiation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"payment_id"}),
		strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentID, o.PaymentBillID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentID = related.PaymentID
	if o.R == nil {
		o.R = &paymentBillR{
			Payment: related,
		}
	} else {
		o.R.Payment = related
	}

	if related.R == nil {
		related.R = &paymentInitiationR{
			PaymentPaymentBills: PaymentBillSlice{o},
		}
	} else {
		related.R.PaymentPaymentBills = append(related.R.PaymentPaymentBills, o)
	}

	return nil
}

// SetBiller of the paymentBill to the related item.
// Sets o.R.Biller to related.
// Adds o to related.R.BillerPaymentBills.
func (o *PaymentBill) SetBiller(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Biller) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"biller_id"}),
		strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
	)
	values := []interface{}{related.BillerID, o.PaymentBillID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillerID = related.BillerID
	if o.R == nil {
		o.R = &paymentBillR{
			Biller: related,
		}
	} else {
		o.R.Biller = related
	}

	if related.R == nil {
		related.R = &billerR{
			BillerPaymentBills: PaymentBillSlice{o},
		}
	} else {
		related.R.BillerPaymentBills = append(related.R.BillerPaymentBills, o)
	}

	return nil
}

// SetFromAccount of the paymentBill to the related item.
// Sets o.R.FromAccount to related.
// Adds o to related.R.FromAccountPaymentBills.
func (o *PaymentBill) SetFromAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_account_id"}),
		strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PaymentBillID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromAccountID = related.AccountID
	if o.R == nil {
		o.R = &paymentBillR{
			FromAccount: related,
		}
	} else {
		o.R.FromAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			FromAccountPaymentBills: PaymentBillSlice{o},
		}
	} else {
		related.R.FromAccountPaymentBills = append(related.R.FromAccountPaymentBills, o)
	}

	return nil
}

// SetFromParty of the paymentBill to the related item.
// Sets o.R.FromParty to related.
// Adds o to related.R.FromPartyPaymentBills.
func (o *PaymentBill) SetFromParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `PaymentBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"from_party_id"}),
		strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.PaymentBillID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromPartyID = related.PartyID
	if o.R == nil {
		o.R = &paymentBillR{
			FromParty: related,
		}
	} else {
		o.R.FromParty = related
	}

	if related.R == nil {
		related.R = &partyR{
			FromPartyPaymentBills: PaymentBillSlice{o},
		}
	} else {
		related.R.FromPartyPaymentBills = append(related.R.FromPartyPaymentBills, o)
	}

	return nil
}

// PaymentBills retrieves all the records using an executor.
func PaymentBills(mods ...qm.QueryMod) paymentBillQuery {
	mods = append(mods, qm.From("`PaymentBill`"))
	return paymentBillQuery{NewQuery(mods...)}
}

// FindPaymentBill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentBill(ctx context.Context, exec boil.ContextExecutor, paymentBillID int, selectCols ...string) (*PaymentBill, error) {
	paymentBillObj := &PaymentBill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `PaymentBill` where `payment_bill_id`=?", sel,
	)

	q := queries.Raw(query, paymentBillID)

	err := q.Bind(ctx, exec, paymentBillObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PaymentBill")
	}

	return paymentBillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentBill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentBill provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentBillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentBillInsertCacheMut.RLock()
	cache, cached := paymentBillInsertCache[key]
	paymentBillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentBillColumns,
			paymentBillColumnsWithDefault,
			paymentBillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentBillType, paymentBillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentBillType, paymentBillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `PaymentBill` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `PaymentBill` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `PaymentBill` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PaymentBill")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentBillID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentBillMapping["PaymentBillID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentBillID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentBill")
	}

CacheNoHooks:
	if !cached {
		paymentBillInsertCacheMut.Lock()
		paymentBillInsertCache[key] = cache
		paymentBillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentBill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentBill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentBillUpdateCacheMut.RLock()
	cache, cached := paymentBillUpdateCache[key]
	paymentBillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentBillColumns,
			paymentBillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PaymentBill, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `PaymentBill` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, paymentBillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentBillType, paymentBillMapping, append(wl, paymentBillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PaymentBill row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PaymentBill")
	}

	if !cached {
		paymentBillUpdateCacheMut.Lock()
		paymentBillUpdateCache[key] = cache
		paymentBillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentBillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PaymentBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PaymentBill")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentBillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `PaymentBill` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentBillPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentBill")
	}
	return rowsAff, nil
}

var mySQLPaymentBillUniqueColumns = []string{
	"payment_bill_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentBill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PaymentBill provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentBillColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPaymentBillUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentBillUpsertCacheMut.RLock()
	cache, cached := paymentBillUpsertCache[key]
	paymentBillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentBillColumns,
			paymentBillColumnsWithDefault,
			paymentBillColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			paymentBillColumns,
			paymentBillPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert PaymentBill, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "PaymentBill", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `PaymentBill` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(paymentBillType, paymentBillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentBillType, paymentBillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for PaymentBill")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PaymentBillID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == paymentBillMapping["payment_bill_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(paymentBillType, paymentBillMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for PaymentBill")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for PaymentBill")
	}

CacheNoHooks:
	if !cached {
		paymentBillUpsertCacheMut.Lock()
		paymentBillUpsertCache[key] = cache
		paymentBillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentBill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentBill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentBill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentBillPrimaryKeyMapping)
	sql := "DELETE FROM `PaymentBill` WHERE `payment_bill_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PaymentBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PaymentBill")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentBillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentBillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PaymentBill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentBill")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentBillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentBill slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentBillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `PaymentBill` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentBillPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PaymentBill")
	}

	if len(paymentBillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentBill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentBill(ctx, exec, o.PaymentBillID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentBillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentBillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `PaymentBill`.* FROM `PaymentBill` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, paymentBillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentBillSlice")
	}

	*o = slice

	return nil
}

// PaymentBillExists checks if the PaymentBill row exists.
func PaymentBillExists(ctx context.Context, exec boil.ContextExecutor, paymentBillID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `PaymentBill` where `payment_bill_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, paymentBillID)
	}

	row := exec.QueryRowContext(ctx, sql, paymentBillID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PaymentBill exists")
	}

	return exists, nil
}
