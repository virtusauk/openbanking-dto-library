// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Recommendation is an object representing the database table.
type Recommendation struct {
	RecommendationNumber int           `boil:"recommendation_number" json:"recommendation_number" toml:"recommendation_number" yaml:"recommendation_number"`
	PortfolioID          int           `boil:"portfolio_id" json:"portfolio_id" toml:"portfolio_id" yaml:"portfolio_id"`
	Name                 string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type                 string        `boil:"type" json:"type" toml:"type" yaml:"type"`
	GoalID               int           `boil:"goal_id" json:"goal_id" toml:"goal_id" yaml:"goal_id"`
	CurrentValue         int           `boil:"current_value" json:"current_value" toml:"current_value" yaml:"current_value"`
	Units                types.Decimal `boil:"units" json:"units" toml:"units" yaml:"units"`
	CurrentPrice         types.Decimal `boil:"current_price" json:"current_price" toml:"current_price" yaml:"current_price"`
	TargetPrice          types.Decimal `boil:"target_price" json:"target_price" toml:"target_price" yaml:"target_price"`
	TargetValue          types.Decimal `boil:"target_value" json:"target_value" toml:"target_value" yaml:"target_value"`
	RecommendetionDate   time.Time     `boil:"recommendetion_date" json:"recommendetion_date" toml:"recommendetion_date" yaml:"recommendetion_date"`
	Action               null.String   `boil:"action" json:"action,omitempty" toml:"action" yaml:"action,omitempty"`
	Status               null.String   `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ExpiryInMins         null.Int      `boil:"expiry_in_mins" json:"expiry_in_mins,omitempty" toml:"expiry_in_mins" yaml:"expiry_in_mins,omitempty"`
	BankID               int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate            time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *recommendationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recommendationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecommendationColumns = struct {
	RecommendationNumber string
	PortfolioID          string
	Name                 string
	Type                 string
	GoalID               string
	CurrentValue         string
	Units                string
	CurrentPrice         string
	TargetPrice          string
	TargetValue          string
	RecommendetionDate   string
	Action               string
	Status               string
	ExpiryInMins         string
	BankID               string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	RecommendationNumber: "recommendation_number",
	PortfolioID:          "portfolio_id",
	Name:                 "name",
	Type:                 "type",
	GoalID:               "goal_id",
	CurrentValue:         "current_value",
	Units:                "units",
	CurrentPrice:         "current_price",
	TargetPrice:          "target_price",
	TargetValue:          "target_value",
	RecommendetionDate:   "recommendetion_date",
	Action:               "action",
	Status:               "status",
	ExpiryInMins:         "expiry_in_mins",
	BankID:               "bank_id",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var RecommendationWhere = struct {
	RecommendationNumber whereHelperint
	PortfolioID          whereHelperint
	Name                 whereHelperstring
	Type                 whereHelperstring
	GoalID               whereHelperint
	CurrentValue         whereHelperint
	Units                whereHelpertypes_Decimal
	CurrentPrice         whereHelpertypes_Decimal
	TargetPrice          whereHelpertypes_Decimal
	TargetValue          whereHelpertypes_Decimal
	RecommendetionDate   whereHelpertime_Time
	Action               whereHelpernull_String
	Status               whereHelpernull_String
	ExpiryInMins         whereHelpernull_Int
	BankID               whereHelperint
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	RecommendationNumber: whereHelperint{field: `recommendation_number`},
	PortfolioID:          whereHelperint{field: `portfolio_id`},
	Name:                 whereHelperstring{field: `name`},
	Type:                 whereHelperstring{field: `type`},
	GoalID:               whereHelperint{field: `goal_id`},
	CurrentValue:         whereHelperint{field: `current_value`},
	Units:                whereHelpertypes_Decimal{field: `units`},
	CurrentPrice:         whereHelpertypes_Decimal{field: `current_price`},
	TargetPrice:          whereHelpertypes_Decimal{field: `target_price`},
	TargetValue:          whereHelpertypes_Decimal{field: `target_value`},
	RecommendetionDate:   whereHelpertime_Time{field: `recommendetion_date`},
	Action:               whereHelpernull_String{field: `action`},
	Status:               whereHelpernull_String{field: `status`},
	ExpiryInMins:         whereHelpernull_Int{field: `expiry_in_mins`},
	BankID:               whereHelperint{field: `bank_id`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// RecommendationRels is where relationship names are stored.
var RecommendationRels = struct {
	Goal      string
	Portfolio string
}{
	Goal:      "Goal",
	Portfolio: "Portfolio",
}

// recommendationR is where relationships are stored.
type recommendationR struct {
	Goal      *GoalMaster
	Portfolio *Portfolio
}

// NewStruct creates a new relationship struct
func (*recommendationR) NewStruct() *recommendationR {
	return &recommendationR{}
}

// recommendationL is where Load methods for each relationship are stored.
type recommendationL struct{}

var (
	recommendationColumns               = []string{"recommendation_number", "portfolio_id", "name", "type", "goal_id", "current_value", "units", "current_price", "target_price", "target_value", "recommendetion_date", "action", "status", "expiry_in_mins", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	recommendationColumnsWithoutDefault = []string{"portfolio_id", "name", "type", "goal_id", "current_value", "units", "current_price", "target_price", "target_value", "recommendetion_date", "action", "expiry_in_mins", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	recommendationColumnsWithDefault    = []string{"recommendation_number", "status"}
	recommendationPrimaryKeyColumns     = []string{"recommendation_number", "recommendetion_date"}
)

type (
	// RecommendationSlice is an alias for a slice of pointers to Recommendation.
	// This should generally be used opposed to []Recommendation.
	RecommendationSlice []*Recommendation
	// RecommendationHook is the signature for custom Recommendation hook methods
	RecommendationHook func(context.Context, boil.ContextExecutor, *Recommendation) error

	recommendationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recommendationType                 = reflect.TypeOf(&Recommendation{})
	recommendationMapping              = queries.MakeStructMapping(recommendationType)
	recommendationPrimaryKeyMapping, _ = queries.BindMapping(recommendationType, recommendationMapping, recommendationPrimaryKeyColumns)
	recommendationInsertCacheMut       sync.RWMutex
	recommendationInsertCache          = make(map[string]insertCache)
	recommendationUpdateCacheMut       sync.RWMutex
	recommendationUpdateCache          = make(map[string]updateCache)
	recommendationUpsertCacheMut       sync.RWMutex
	recommendationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recommendationBeforeInsertHooks []RecommendationHook
var recommendationBeforeUpdateHooks []RecommendationHook
var recommendationBeforeDeleteHooks []RecommendationHook
var recommendationBeforeUpsertHooks []RecommendationHook

var recommendationAfterInsertHooks []RecommendationHook
var recommendationAfterSelectHooks []RecommendationHook
var recommendationAfterUpdateHooks []RecommendationHook
var recommendationAfterDeleteHooks []RecommendationHook
var recommendationAfterUpsertHooks []RecommendationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recommendation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recommendation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recommendation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recommendation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recommendation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recommendation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recommendation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recommendation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recommendation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recommendationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecommendationHook registers your hook function for all future operations.
func AddRecommendationHook(hookPoint boil.HookPoint, recommendationHook RecommendationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recommendationBeforeInsertHooks = append(recommendationBeforeInsertHooks, recommendationHook)
	case boil.BeforeUpdateHook:
		recommendationBeforeUpdateHooks = append(recommendationBeforeUpdateHooks, recommendationHook)
	case boil.BeforeDeleteHook:
		recommendationBeforeDeleteHooks = append(recommendationBeforeDeleteHooks, recommendationHook)
	case boil.BeforeUpsertHook:
		recommendationBeforeUpsertHooks = append(recommendationBeforeUpsertHooks, recommendationHook)
	case boil.AfterInsertHook:
		recommendationAfterInsertHooks = append(recommendationAfterInsertHooks, recommendationHook)
	case boil.AfterSelectHook:
		recommendationAfterSelectHooks = append(recommendationAfterSelectHooks, recommendationHook)
	case boil.AfterUpdateHook:
		recommendationAfterUpdateHooks = append(recommendationAfterUpdateHooks, recommendationHook)
	case boil.AfterDeleteHook:
		recommendationAfterDeleteHooks = append(recommendationAfterDeleteHooks, recommendationHook)
	case boil.AfterUpsertHook:
		recommendationAfterUpsertHooks = append(recommendationAfterUpsertHooks, recommendationHook)
	}
}

// One returns a single recommendation record from the query.
func (q recommendationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recommendation, error) {
	o := &Recommendation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Recommendations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recommendation records from the query.
func (q recommendationQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecommendationSlice, error) {
	var o []*Recommendation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recommendation slice")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recommendation records in the query.
func (q recommendationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Recommendations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recommendationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Recommendations exists")
	}

	return count > 0, nil
}

// Goal pointed to by the foreign key.
func (o *Recommendation) Goal(mods ...qm.QueryMod) goalMasterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("goal_id=?", o.GoalID),
	}

	queryMods = append(queryMods, mods...)

	query := GoalMasters(queryMods...)
	queries.SetFrom(query.Query, "`GoalMaster`")

	return query
}

// Portfolio pointed to by the foreign key.
func (o *Recommendation) Portfolio(mods ...qm.QueryMod) portfolioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("portfolio_id=?", o.PortfolioID),
	}

	queryMods = append(queryMods, mods...)

	query := Portfolios(queryMods...)
	queries.SetFrom(query.Query, "`Portfolio`")

	return query
}

// LoadGoal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recommendationL) LoadGoal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecommendation interface{}, mods queries.Applicator) error {
	var slice []*Recommendation
	var object *Recommendation

	if singular {
		object = maybeRecommendation.(*Recommendation)
	} else {
		slice = *maybeRecommendation.(*[]*Recommendation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recommendationR{}
		}
		args = append(args, object.GoalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recommendationR{}
			}

			for _, a := range args {
				if a == obj.GoalID {
					continue Outer
				}
			}

			args = append(args, obj.GoalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`GoalMaster`), qm.WhereIn(`goal_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GoalMaster")
	}

	var resultSlice []*GoalMaster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GoalMaster")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for GoalMaster")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for GoalMaster")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Goal = foreign
		if foreign.R == nil {
			foreign.R = &goalMasterR{}
		}
		foreign.R.GoalRecommendations = append(foreign.R.GoalRecommendations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GoalID == foreign.GoalID {
				local.R.Goal = foreign
				if foreign.R == nil {
					foreign.R = &goalMasterR{}
				}
				foreign.R.GoalRecommendations = append(foreign.R.GoalRecommendations, local)
				break
			}
		}
	}

	return nil
}

// LoadPortfolio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recommendationL) LoadPortfolio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecommendation interface{}, mods queries.Applicator) error {
	var slice []*Recommendation
	var object *Recommendation

	if singular {
		object = maybeRecommendation.(*Recommendation)
	} else {
		slice = *maybeRecommendation.(*[]*Recommendation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recommendationR{}
		}
		args = append(args, object.PortfolioID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recommendationR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Portfolio`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Portfolio")
	}

	var resultSlice []*Portfolio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Portfolio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Portfolio")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Portfolio")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Portfolio = foreign
		if foreign.R == nil {
			foreign.R = &portfolioR{}
		}
		foreign.R.PortfolioRecommendations = append(foreign.R.PortfolioRecommendations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.Portfolio = foreign
				if foreign.R == nil {
					foreign.R = &portfolioR{}
				}
				foreign.R.PortfolioRecommendations = append(foreign.R.PortfolioRecommendations, local)
				break
			}
		}
	}

	return nil
}

// SetGoal of the recommendation to the related item.
// Sets o.R.Goal to related.
// Adds o to related.R.GoalRecommendations.
func (o *Recommendation) SetGoal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GoalMaster) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Recommendations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"goal_id"}),
		strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns),
	)
	values := []interface{}{related.GoalID, o.RecommendationNumber, o.RecommendetionDate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GoalID = related.GoalID
	if o.R == nil {
		o.R = &recommendationR{
			Goal: related,
		}
	} else {
		o.R.Goal = related
	}

	if related.R == nil {
		related.R = &goalMasterR{
			GoalRecommendations: RecommendationSlice{o},
		}
	} else {
		related.R.GoalRecommendations = append(related.R.GoalRecommendations, o)
	}

	return nil
}

// SetPortfolio of the recommendation to the related item.
// Sets o.R.Portfolio to related.
// Adds o to related.R.PortfolioRecommendations.
func (o *Recommendation) SetPortfolio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Portfolio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Recommendations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
		strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns),
	)
	values := []interface{}{related.PortfolioID, o.RecommendationNumber, o.RecommendetionDate}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PortfolioID = related.PortfolioID
	if o.R == nil {
		o.R = &recommendationR{
			Portfolio: related,
		}
	} else {
		o.R.Portfolio = related
	}

	if related.R == nil {
		related.R = &portfolioR{
			PortfolioRecommendations: RecommendationSlice{o},
		}
	} else {
		related.R.PortfolioRecommendations = append(related.R.PortfolioRecommendations, o)
	}

	return nil
}

// Recommendations retrieves all the records using an executor.
func Recommendations(mods ...qm.QueryMod) recommendationQuery {
	mods = append(mods, qm.From("`Recommendations`"))
	return recommendationQuery{NewQuery(mods...)}
}

// FindRecommendation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecommendation(ctx context.Context, exec boil.ContextExecutor, recommendationNumber int, recommendetionDate time.Time, selectCols ...string) (*Recommendation, error) {
	recommendationObj := &Recommendation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Recommendations` where `recommendation_number`=? AND `recommendetion_date`=?", sel,
	)

	q := queries.Raw(query, recommendationNumber, recommendetionDate)

	err := q.Bind(ctx, exec, recommendationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Recommendations")
	}

	return recommendationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recommendation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Recommendations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recommendationInsertCacheMut.RLock()
	cache, cached := recommendationInsertCache[key]
	recommendationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recommendationColumns,
			recommendationColumnsWithDefault,
			recommendationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recommendationType, recommendationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Recommendations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Recommendations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Recommendations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Recommendations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RecommendationNumber,
		o.RecommendetionDate,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Recommendations")
	}

CacheNoHooks:
	if !cached {
		recommendationInsertCacheMut.Lock()
		recommendationInsertCache[key] = cache
		recommendationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recommendation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recommendation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recommendationUpdateCacheMut.RLock()
	cache, cached := recommendationUpdateCache[key]
	recommendationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recommendationColumns,
			recommendationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Recommendations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Recommendations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, append(wl, recommendationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Recommendations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Recommendations")
	}

	if !cached {
		recommendationUpdateCacheMut.Lock()
		recommendationUpdateCache[key] = cache
		recommendationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recommendationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Recommendations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecommendationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Recommendations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recommendationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recommendation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recommendation")
	}
	return rowsAff, nil
}

var mySQLRecommendationUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recommendation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Recommendations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recommendationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRecommendationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recommendationUpsertCacheMut.RLock()
	cache, cached := recommendationUpsertCache[key]
	recommendationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recommendationColumns,
			recommendationColumnsWithDefault,
			recommendationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recommendationColumns,
			recommendationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Recommendations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Recommendations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Recommendations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(recommendationType, recommendationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recommendationType, recommendationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Recommendations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(recommendationType, recommendationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Recommendations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Recommendations")
	}

CacheNoHooks:
	if !cached {
		recommendationUpsertCacheMut.Lock()
		recommendationUpsertCache[key] = cache
		recommendationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recommendation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recommendation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recommendation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recommendationPrimaryKeyMapping)
	sql := "DELETE FROM `Recommendations` WHERE `recommendation_number`=? AND `recommendetion_date`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Recommendations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recommendationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recommendationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Recommendations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Recommendations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecommendationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recommendation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(recommendationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Recommendations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recommendationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recommendation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Recommendations")
	}

	if len(recommendationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recommendation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecommendation(ctx, exec, o.RecommendationNumber, o.RecommendetionDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecommendationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecommendationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recommendationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Recommendations`.* FROM `Recommendations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recommendationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecommendationSlice")
	}

	*o = slice

	return nil
}

// RecommendationExists checks if the Recommendation row exists.
func RecommendationExists(ctx context.Context, exec boil.ContextExecutor, recommendationNumber int, recommendetionDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Recommendations` where `recommendation_number`=? AND `recommendetion_date`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, recommendationNumber, recommendetionDate)
	}

	row := exec.QueryRowContext(ctx, sql, recommendationNumber, recommendetionDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Recommendations exists")
	}

	return exists, nil
}
