// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Borrower is an object representing the database table.
type Borrower struct {
	BorrowerID   int         `boil:"borrower_id" json:"borrower_id" toml:"borrower_id" yaml:"borrower_id"`
	PartyID      int         `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	LoanID       int         `boil:"loan_id" json:"loan_id" toml:"loan_id" yaml:"loan_id"`
	Active       null.String `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	BankID       int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate    time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate  null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID      string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID    null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy   null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *borrowerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L borrowerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BorrowerColumns = struct {
	BorrowerID   string
	PartyID      string
	LoanID       string
	Active       string
	BankID       string
	MakerDate    string
	CheckerDate  string
	MakerID      string
	CheckerID    string
	ModifiedBy   string
	ModifiedDate string
}{
	BorrowerID:   "borrower_id",
	PartyID:      "party_id",
	LoanID:       "loan_id",
	Active:       "active",
	BankID:       "bank_id",
	MakerDate:    "maker_date",
	CheckerDate:  "checker_date",
	MakerID:      "maker_id",
	CheckerID:    "checker_id",
	ModifiedBy:   "modified_by",
	ModifiedDate: "modified_date",
}

// Generated where

var BorrowerWhere = struct {
	BorrowerID   whereHelperint
	PartyID      whereHelperint
	LoanID       whereHelperint
	Active       whereHelpernull_String
	BankID       whereHelperint
	MakerDate    whereHelpertime_Time
	CheckerDate  whereHelpernull_Time
	MakerID      whereHelperstring
	CheckerID    whereHelpernull_String
	ModifiedBy   whereHelpernull_String
	ModifiedDate whereHelpernull_Time
}{
	BorrowerID:   whereHelperint{field: `borrower_id`},
	PartyID:      whereHelperint{field: `party_id`},
	LoanID:       whereHelperint{field: `loan_id`},
	Active:       whereHelpernull_String{field: `active`},
	BankID:       whereHelperint{field: `bank_id`},
	MakerDate:    whereHelpertime_Time{field: `maker_date`},
	CheckerDate:  whereHelpernull_Time{field: `checker_date`},
	MakerID:      whereHelperstring{field: `maker_id`},
	CheckerID:    whereHelpernull_String{field: `checker_id`},
	ModifiedBy:   whereHelpernull_String{field: `modified_by`},
	ModifiedDate: whereHelpernull_Time{field: `modified_date`},
}

// BorrowerRels is where relationship names are stored.
var BorrowerRels = struct {
	Bank  string
	Party string
	Loan  string
}{
	Bank:  "Bank",
	Party: "Party",
	Loan:  "Loan",
}

// borrowerR is where relationships are stored.
type borrowerR struct {
	Bank  *Bank
	Party *Party
	Loan  *Loan
}

// NewStruct creates a new relationship struct
func (*borrowerR) NewStruct() *borrowerR {
	return &borrowerR{}
}

// borrowerL is where Load methods for each relationship are stored.
type borrowerL struct{}

var (
	borrowerColumns               = []string{"borrower_id", "party_id", "loan_id", "active", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	borrowerColumnsWithoutDefault = []string{"borrower_id", "active", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	borrowerColumnsWithDefault    = []string{"party_id", "loan_id"}
	borrowerPrimaryKeyColumns     = []string{"borrower_id"}
)

type (
	// BorrowerSlice is an alias for a slice of pointers to Borrower.
	// This should generally be used opposed to []Borrower.
	BorrowerSlice []*Borrower
	// BorrowerHook is the signature for custom Borrower hook methods
	BorrowerHook func(context.Context, boil.ContextExecutor, *Borrower) error

	borrowerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	borrowerType                 = reflect.TypeOf(&Borrower{})
	borrowerMapping              = queries.MakeStructMapping(borrowerType)
	borrowerPrimaryKeyMapping, _ = queries.BindMapping(borrowerType, borrowerMapping, borrowerPrimaryKeyColumns)
	borrowerInsertCacheMut       sync.RWMutex
	borrowerInsertCache          = make(map[string]insertCache)
	borrowerUpdateCacheMut       sync.RWMutex
	borrowerUpdateCache          = make(map[string]updateCache)
	borrowerUpsertCacheMut       sync.RWMutex
	borrowerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var borrowerBeforeInsertHooks []BorrowerHook
var borrowerBeforeUpdateHooks []BorrowerHook
var borrowerBeforeDeleteHooks []BorrowerHook
var borrowerBeforeUpsertHooks []BorrowerHook

var borrowerAfterInsertHooks []BorrowerHook
var borrowerAfterSelectHooks []BorrowerHook
var borrowerAfterUpdateHooks []BorrowerHook
var borrowerAfterDeleteHooks []BorrowerHook
var borrowerAfterUpsertHooks []BorrowerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Borrower) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Borrower) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Borrower) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Borrower) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Borrower) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Borrower) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Borrower) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Borrower) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Borrower) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range borrowerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBorrowerHook registers your hook function for all future operations.
func AddBorrowerHook(hookPoint boil.HookPoint, borrowerHook BorrowerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		borrowerBeforeInsertHooks = append(borrowerBeforeInsertHooks, borrowerHook)
	case boil.BeforeUpdateHook:
		borrowerBeforeUpdateHooks = append(borrowerBeforeUpdateHooks, borrowerHook)
	case boil.BeforeDeleteHook:
		borrowerBeforeDeleteHooks = append(borrowerBeforeDeleteHooks, borrowerHook)
	case boil.BeforeUpsertHook:
		borrowerBeforeUpsertHooks = append(borrowerBeforeUpsertHooks, borrowerHook)
	case boil.AfterInsertHook:
		borrowerAfterInsertHooks = append(borrowerAfterInsertHooks, borrowerHook)
	case boil.AfterSelectHook:
		borrowerAfterSelectHooks = append(borrowerAfterSelectHooks, borrowerHook)
	case boil.AfterUpdateHook:
		borrowerAfterUpdateHooks = append(borrowerAfterUpdateHooks, borrowerHook)
	case boil.AfterDeleteHook:
		borrowerAfterDeleteHooks = append(borrowerAfterDeleteHooks, borrowerHook)
	case boil.AfterUpsertHook:
		borrowerAfterUpsertHooks = append(borrowerAfterUpsertHooks, borrowerHook)
	}
}

// One returns a single borrower record from the query.
func (q borrowerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Borrower, error) {
	o := &Borrower{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Borrower")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Borrower records from the query.
func (q borrowerQuery) All(ctx context.Context, exec boil.ContextExecutor) (BorrowerSlice, error) {
	var o []*Borrower

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Borrower slice")
	}

	if len(borrowerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Borrower records in the query.
func (q borrowerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Borrower rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q borrowerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Borrower exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *Borrower) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Party pointed to by the foreign key.
func (o *Borrower) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// Loan pointed to by the foreign key.
func (o *Borrower) Loan(mods ...qm.QueryMod) loanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("loan_id=?", o.LoanID),
	}

	queryMods = append(queryMods, mods...)

	query := Loans(queryMods...)
	queries.SetFrom(query.Query, "`Loan`")

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (borrowerL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBorrower interface{}, mods queries.Applicator) error {
	var slice []*Borrower
	var object *Borrower

	if singular {
		object = maybeBorrower.(*Borrower)
	} else {
		slice = *maybeBorrower.(*[]*Borrower)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &borrowerR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &borrowerR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(borrowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankBorrowers = append(foreign.R.BankBorrowers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankBorrowers = append(foreign.R.BankBorrowers, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (borrowerL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBorrower interface{}, mods queries.Applicator) error {
	var slice []*Borrower
	var object *Borrower

	if singular {
		object = maybeBorrower.(*Borrower)
	} else {
		slice = *maybeBorrower.(*[]*Borrower)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &borrowerR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &borrowerR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(borrowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyBorrowers = append(foreign.R.PartyBorrowers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyBorrowers = append(foreign.R.PartyBorrowers, local)
				break
			}
		}
	}

	return nil
}

// LoadLoan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (borrowerL) LoadLoan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBorrower interface{}, mods queries.Applicator) error {
	var slice []*Borrower
	var object *Borrower

	if singular {
		object = maybeBorrower.(*Borrower)
	} else {
		slice = *maybeBorrower.(*[]*Borrower)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &borrowerR{}
		}
		args = append(args, object.LoanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &borrowerR{}
			}

			for _, a := range args {
				if a == obj.LoanID {
					continue Outer
				}
			}

			args = append(args, obj.LoanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Loan`), qm.WhereIn(`loan_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Loan")
	}

	var resultSlice []*Loan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Loan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Loan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Loan")
	}

	if len(borrowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Loan = foreign
		if foreign.R == nil {
			foreign.R = &loanR{}
		}
		foreign.R.LoanBorrowers = append(foreign.R.LoanBorrowers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LoanID == foreign.LoanID {
				local.R.Loan = foreign
				if foreign.R == nil {
					foreign.R = &loanR{}
				}
				foreign.R.LoanBorrowers = append(foreign.R.LoanBorrowers, local)
				break
			}
		}
	}

	return nil
}

// SetBank of the borrower to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankBorrowers.
func (o *Borrower) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Borrower` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, borrowerPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.BorrowerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &borrowerR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankBorrowers: BorrowerSlice{o},
		}
	} else {
		related.R.BankBorrowers = append(related.R.BankBorrowers, o)
	}

	return nil
}

// SetParty of the borrower to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyBorrowers.
func (o *Borrower) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Borrower` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, borrowerPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.BorrowerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &borrowerR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyBorrowers: BorrowerSlice{o},
		}
	} else {
		related.R.PartyBorrowers = append(related.R.PartyBorrowers, o)
	}

	return nil
}

// SetLoan of the borrower to the related item.
// Sets o.R.Loan to related.
// Adds o to related.R.LoanBorrowers.
func (o *Borrower) SetLoan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Loan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Borrower` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"loan_id"}),
		strmangle.WhereClause("`", "`", 0, borrowerPrimaryKeyColumns),
	)
	values := []interface{}{related.LoanID, o.BorrowerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LoanID = related.LoanID
	if o.R == nil {
		o.R = &borrowerR{
			Loan: related,
		}
	} else {
		o.R.Loan = related
	}

	if related.R == nil {
		related.R = &loanR{
			LoanBorrowers: BorrowerSlice{o},
		}
	} else {
		related.R.LoanBorrowers = append(related.R.LoanBorrowers, o)
	}

	return nil
}

// Borrowers retrieves all the records using an executor.
func Borrowers(mods ...qm.QueryMod) borrowerQuery {
	mods = append(mods, qm.From("`Borrower`"))
	return borrowerQuery{NewQuery(mods...)}
}

// FindBorrower retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBorrower(ctx context.Context, exec boil.ContextExecutor, borrowerID int, selectCols ...string) (*Borrower, error) {
	borrowerObj := &Borrower{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Borrower` where `borrower_id`=?", sel,
	)

	q := queries.Raw(query, borrowerID)

	err := q.Bind(ctx, exec, borrowerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Borrower")
	}

	return borrowerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Borrower) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Borrower provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(borrowerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	borrowerInsertCacheMut.RLock()
	cache, cached := borrowerInsertCache[key]
	borrowerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			borrowerColumns,
			borrowerColumnsWithDefault,
			borrowerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(borrowerType, borrowerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(borrowerType, borrowerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Borrower` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Borrower` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Borrower` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, borrowerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Borrower")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BorrowerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Borrower")
	}

CacheNoHooks:
	if !cached {
		borrowerInsertCacheMut.Lock()
		borrowerInsertCache[key] = cache
		borrowerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Borrower.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Borrower) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	borrowerUpdateCacheMut.RLock()
	cache, cached := borrowerUpdateCache[key]
	borrowerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			borrowerColumns,
			borrowerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Borrower, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Borrower` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, borrowerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(borrowerType, borrowerMapping, append(wl, borrowerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Borrower row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Borrower")
	}

	if !cached {
		borrowerUpdateCacheMut.Lock()
		borrowerUpdateCache[key] = cache
		borrowerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q borrowerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Borrower")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Borrower")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BorrowerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), borrowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Borrower` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, borrowerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in borrower slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all borrower")
	}
	return rowsAff, nil
}

var mySQLBorrowerUniqueColumns = []string{
	"borrower_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Borrower) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Borrower provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(borrowerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBorrowerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	borrowerUpsertCacheMut.RLock()
	cache, cached := borrowerUpsertCache[key]
	borrowerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			borrowerColumns,
			borrowerColumnsWithDefault,
			borrowerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			borrowerColumns,
			borrowerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Borrower, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Borrower", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Borrower` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(borrowerType, borrowerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(borrowerType, borrowerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Borrower")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(borrowerType, borrowerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Borrower")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Borrower")
	}

CacheNoHooks:
	if !cached {
		borrowerUpsertCacheMut.Lock()
		borrowerUpsertCache[key] = cache
		borrowerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Borrower record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Borrower) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Borrower provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), borrowerPrimaryKeyMapping)
	sql := "DELETE FROM `Borrower` WHERE `borrower_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Borrower")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Borrower")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q borrowerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no borrowerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Borrower")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Borrower")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BorrowerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Borrower slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(borrowerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), borrowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Borrower` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, borrowerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from borrower slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Borrower")
	}

	if len(borrowerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Borrower) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBorrower(ctx, exec, o.BorrowerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BorrowerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BorrowerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), borrowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Borrower`.* FROM `Borrower` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, borrowerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BorrowerSlice")
	}

	*o = slice

	return nil
}

// BorrowerExists checks if the Borrower row exists.
func BorrowerExists(ctx context.Context, exec boil.ContextExecutor, borrowerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Borrower` where `borrower_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, borrowerID)
	}

	row := exec.QueryRowContext(ctx, sql, borrowerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Borrower exists")
	}

	return exists, nil
}
