// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Portfolio is an object representing the database table.
type Portfolio struct {
	PortfolioID          int               `boil:"portfolio_id" json:"portfolio_id" toml:"portfolio_id" yaml:"portfolio_id"`
	AccountID            int               `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	InvestmentTypeID     int               `boil:"investment_type_id" json:"investment_type_id" toml:"investment_type_id" yaml:"investment_type_id"`
	TotalAmountInv       types.Decimal     `boil:"total_amount_inv" json:"total_amount_inv" toml:"total_amount_inv" yaml:"total_amount_inv"`
	TotalAmountWithdrwan types.NullDecimal `boil:"total_amount_withdrwan" json:"total_amount_withdrwan,omitempty" toml:"total_amount_withdrwan" yaml:"total_amount_withdrwan,omitempty"`
	Status               string            `boil:"status" json:"status" toml:"status" yaml:"status"`
	IssueDate            time.Time         `boil:"issue_date" json:"issue_date" toml:"issue_date" yaml:"issue_date"`
	MaturityDate         time.Time         `boil:"maturity_date" json:"maturity_date" toml:"maturity_date" yaml:"maturity_date"`
	ExpectedReturn       types.NullDecimal `boil:"expected_return" json:"expected_return,omitempty" toml:"expected_return" yaml:"expected_return,omitempty"`
	ReturnPercent        types.NullDecimal `boil:"return_percent" json:"return_percent,omitempty" toml:"return_percent" yaml:"return_percent,omitempty"`
	Velocity             types.NullDecimal `boil:"velocity" json:"velocity,omitempty" toml:"velocity" yaml:"velocity,omitempty"`
	Growth               types.NullDecimal `boil:"growth" json:"growth,omitempty" toml:"growth" yaml:"growth,omitempty"`
	NPSScore             types.NullDecimal `boil:"nps_score" json:"nps_score,omitempty" toml:"nps_score" yaml:"nps_score,omitempty"`
	CurrentValue         types.NullDecimal `boil:"current_value" json:"current_value,omitempty" toml:"current_value" yaml:"current_value,omitempty"`
	BankID               int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate            time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *portfolioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portfolioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortfolioColumns = struct {
	PortfolioID          string
	AccountID            string
	InvestmentTypeID     string
	TotalAmountInv       string
	TotalAmountWithdrwan string
	Status               string
	IssueDate            string
	MaturityDate         string
	ExpectedReturn       string
	ReturnPercent        string
	Velocity             string
	Growth               string
	NPSScore             string
	CurrentValue         string
	BankID               string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	PortfolioID:          "portfolio_id",
	AccountID:            "account_id",
	InvestmentTypeID:     "investment_type_id",
	TotalAmountInv:       "total_amount_inv",
	TotalAmountWithdrwan: "total_amount_withdrwan",
	Status:               "status",
	IssueDate:            "issue_date",
	MaturityDate:         "maturity_date",
	ExpectedReturn:       "expected_return",
	ReturnPercent:        "return_percent",
	Velocity:             "velocity",
	Growth:               "growth",
	NPSScore:             "nps_score",
	CurrentValue:         "current_value",
	BankID:               "bank_id",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var PortfolioWhere = struct {
	PortfolioID          whereHelperint
	AccountID            whereHelperint
	InvestmentTypeID     whereHelperint
	TotalAmountInv       whereHelpertypes_Decimal
	TotalAmountWithdrwan whereHelpertypes_NullDecimal
	Status               whereHelperstring
	IssueDate            whereHelpertime_Time
	MaturityDate         whereHelpertime_Time
	ExpectedReturn       whereHelpertypes_NullDecimal
	ReturnPercent        whereHelpertypes_NullDecimal
	Velocity             whereHelpertypes_NullDecimal
	Growth               whereHelpertypes_NullDecimal
	NPSScore             whereHelpertypes_NullDecimal
	CurrentValue         whereHelpertypes_NullDecimal
	BankID               whereHelperint
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	PortfolioID:          whereHelperint{field: `portfolio_id`},
	AccountID:            whereHelperint{field: `account_id`},
	InvestmentTypeID:     whereHelperint{field: `investment_type_id`},
	TotalAmountInv:       whereHelpertypes_Decimal{field: `total_amount_inv`},
	TotalAmountWithdrwan: whereHelpertypes_NullDecimal{field: `total_amount_withdrwan`},
	Status:               whereHelperstring{field: `status`},
	IssueDate:            whereHelpertime_Time{field: `issue_date`},
	MaturityDate:         whereHelpertime_Time{field: `maturity_date`},
	ExpectedReturn:       whereHelpertypes_NullDecimal{field: `expected_return`},
	ReturnPercent:        whereHelpertypes_NullDecimal{field: `return_percent`},
	Velocity:             whereHelpertypes_NullDecimal{field: `velocity`},
	Growth:               whereHelpertypes_NullDecimal{field: `growth`},
	NPSScore:             whereHelpertypes_NullDecimal{field: `nps_score`},
	CurrentValue:         whereHelpertypes_NullDecimal{field: `current_value`},
	BankID:               whereHelperint{field: `bank_id`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// PortfolioRels is where relationship names are stored.
var PortfolioRels = struct {
	Account                         string
	InvestmentType                  string
	PortfolioCurrentHoldings        string
	PortfolioPortfolioGoalSummaries string
	PortfolioRecommendations        string
}{
	Account:                         "Account",
	InvestmentType:                  "InvestmentType",
	PortfolioCurrentHoldings:        "PortfolioCurrentHoldings",
	PortfolioPortfolioGoalSummaries: "PortfolioPortfolioGoalSummaries",
	PortfolioRecommendations:        "PortfolioRecommendations",
}

// portfolioR is where relationships are stored.
type portfolioR struct {
	Account                         *Account
	InvestmentType                  *InvestmentType
	PortfolioCurrentHoldings        CurrentHoldingSlice
	PortfolioPortfolioGoalSummaries PortfolioGoalSummarySlice
	PortfolioRecommendations        RecommendationSlice
}

// NewStruct creates a new relationship struct
func (*portfolioR) NewStruct() *portfolioR {
	return &portfolioR{}
}

// portfolioL is where Load methods for each relationship are stored.
type portfolioL struct{}

var (
	portfolioColumns               = []string{"portfolio_id", "account_id", "investment_type_id", "total_amount_inv", "total_amount_withdrwan", "status", "issue_date", "maturity_date", "expected_return", "return_percent", "velocity", "growth", "nps_score", "current_value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	portfolioColumnsWithoutDefault = []string{"account_id", "investment_type_id", "total_amount_inv", "total_amount_withdrwan", "status", "issue_date", "maturity_date", "expected_return", "return_percent", "velocity", "growth", "nps_score", "current_value", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	portfolioColumnsWithDefault    = []string{"portfolio_id"}
	portfolioPrimaryKeyColumns     = []string{"portfolio_id"}
)

type (
	// PortfolioSlice is an alias for a slice of pointers to Portfolio.
	// This should generally be used opposed to []Portfolio.
	PortfolioSlice []*Portfolio
	// PortfolioHook is the signature for custom Portfolio hook methods
	PortfolioHook func(context.Context, boil.ContextExecutor, *Portfolio) error

	portfolioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portfolioType                 = reflect.TypeOf(&Portfolio{})
	portfolioMapping              = queries.MakeStructMapping(portfolioType)
	portfolioPrimaryKeyMapping, _ = queries.BindMapping(portfolioType, portfolioMapping, portfolioPrimaryKeyColumns)
	portfolioInsertCacheMut       sync.RWMutex
	portfolioInsertCache          = make(map[string]insertCache)
	portfolioUpdateCacheMut       sync.RWMutex
	portfolioUpdateCache          = make(map[string]updateCache)
	portfolioUpsertCacheMut       sync.RWMutex
	portfolioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portfolioBeforeInsertHooks []PortfolioHook
var portfolioBeforeUpdateHooks []PortfolioHook
var portfolioBeforeDeleteHooks []PortfolioHook
var portfolioBeforeUpsertHooks []PortfolioHook

var portfolioAfterInsertHooks []PortfolioHook
var portfolioAfterSelectHooks []PortfolioHook
var portfolioAfterUpdateHooks []PortfolioHook
var portfolioAfterDeleteHooks []PortfolioHook
var portfolioAfterUpsertHooks []PortfolioHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Portfolio) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Portfolio) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Portfolio) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Portfolio) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Portfolio) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Portfolio) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Portfolio) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Portfolio) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Portfolio) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portfolioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortfolioHook registers your hook function for all future operations.
func AddPortfolioHook(hookPoint boil.HookPoint, portfolioHook PortfolioHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portfolioBeforeInsertHooks = append(portfolioBeforeInsertHooks, portfolioHook)
	case boil.BeforeUpdateHook:
		portfolioBeforeUpdateHooks = append(portfolioBeforeUpdateHooks, portfolioHook)
	case boil.BeforeDeleteHook:
		portfolioBeforeDeleteHooks = append(portfolioBeforeDeleteHooks, portfolioHook)
	case boil.BeforeUpsertHook:
		portfolioBeforeUpsertHooks = append(portfolioBeforeUpsertHooks, portfolioHook)
	case boil.AfterInsertHook:
		portfolioAfterInsertHooks = append(portfolioAfterInsertHooks, portfolioHook)
	case boil.AfterSelectHook:
		portfolioAfterSelectHooks = append(portfolioAfterSelectHooks, portfolioHook)
	case boil.AfterUpdateHook:
		portfolioAfterUpdateHooks = append(portfolioAfterUpdateHooks, portfolioHook)
	case boil.AfterDeleteHook:
		portfolioAfterDeleteHooks = append(portfolioAfterDeleteHooks, portfolioHook)
	case boil.AfterUpsertHook:
		portfolioAfterUpsertHooks = append(portfolioAfterUpsertHooks, portfolioHook)
	}
}

// One returns a single portfolio record from the query.
func (q portfolioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Portfolio, error) {
	o := &Portfolio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Portfolio")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Portfolio records from the query.
func (q portfolioQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortfolioSlice, error) {
	var o []*Portfolio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Portfolio slice")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Portfolio records in the query.
func (q portfolioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Portfolio rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portfolioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Portfolio exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Portfolio) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// InvestmentType pointed to by the foreign key.
func (o *Portfolio) InvestmentType(mods ...qm.QueryMod) investmentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("investmenttype_id=?", o.InvestmentTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := InvestmentTypes(queryMods...)
	queries.SetFrom(query.Query, "`InvestmentType`")

	return query
}

// PortfolioCurrentHoldings retrieves all the CurrentHolding's CurrentHoldings with an executor via portfolio_id column.
func (o *Portfolio) PortfolioCurrentHoldings(mods ...qm.QueryMod) currentHoldingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`CurrentHolding`.`portfolio_id`=?", o.PortfolioID),
	)

	query := CurrentHoldings(queryMods...)
	queries.SetFrom(query.Query, "`CurrentHolding`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`CurrentHolding`.*"})
	}

	return query
}

// PortfolioPortfolioGoalSummaries retrieves all the PortfolioGoalSummary's PortfolioGoalSummaries with an executor via portfolio_id column.
func (o *Portfolio) PortfolioPortfolioGoalSummaries(mods ...qm.QueryMod) portfolioGoalSummaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`PortfolioGoalSummary`.`portfolio_id`=?", o.PortfolioID),
	)

	query := PortfolioGoalSummaries(queryMods...)
	queries.SetFrom(query.Query, "`PortfolioGoalSummary`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`PortfolioGoalSummary`.*"})
	}

	return query
}

// PortfolioRecommendations retrieves all the Recommendation's Recommendations with an executor via portfolio_id column.
func (o *Portfolio) PortfolioRecommendations(mods ...qm.QueryMod) recommendationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Recommendations`.`portfolio_id`=?", o.PortfolioID),
	)

	query := Recommendations(queryMods...)
	queries.SetFrom(query.Query, "`Recommendations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Recommendations`.*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountPortfolios = append(foreign.R.AccountPortfolios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountPortfolios = append(foreign.R.AccountPortfolios, local)
				break
			}
		}
	}

	return nil
}

// LoadInvestmentType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioL) LoadInvestmentType(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.InvestmentTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.InvestmentTypeID {
					continue Outer
				}
			}

			args = append(args, obj.InvestmentTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`InvestmentType`), qm.WhereIn(`investmenttype_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load InvestmentType")
	}

	var resultSlice []*InvestmentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice InvestmentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for InvestmentType")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for InvestmentType")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvestmentType = foreign
		if foreign.R == nil {
			foreign.R = &investmentTypeR{}
		}
		foreign.R.InvestmentTypePortfolios = append(foreign.R.InvestmentTypePortfolios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvestmentTypeID == foreign.InvestmenttypeID {
				local.R.InvestmentType = foreign
				if foreign.R == nil {
					foreign.R = &investmentTypeR{}
				}
				foreign.R.InvestmentTypePortfolios = append(foreign.R.InvestmentTypePortfolios, local)
				break
			}
		}
	}

	return nil
}

// LoadPortfolioCurrentHoldings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portfolioL) LoadPortfolioCurrentHoldings(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.PortfolioID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`CurrentHolding`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CurrentHolding")
	}

	var resultSlice []*CurrentHolding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CurrentHolding")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on CurrentHolding")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for CurrentHolding")
	}

	if len(currentHoldingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PortfolioCurrentHoldings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentHoldingR{}
			}
			foreign.R.Portfolio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.PortfolioCurrentHoldings = append(local.R.PortfolioCurrentHoldings, foreign)
				if foreign.R == nil {
					foreign.R = &currentHoldingR{}
				}
				foreign.R.Portfolio = local
				break
			}
		}
	}

	return nil
}

// LoadPortfolioPortfolioGoalSummaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portfolioL) LoadPortfolioPortfolioGoalSummaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.PortfolioID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`PortfolioGoalSummary`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PortfolioGoalSummary")
	}

	var resultSlice []*PortfolioGoalSummary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PortfolioGoalSummary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PortfolioGoalSummary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PortfolioGoalSummary")
	}

	if len(portfolioGoalSummaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PortfolioPortfolioGoalSummaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &portfolioGoalSummaryR{}
			}
			foreign.R.Portfolio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.PortfolioPortfolioGoalSummaries = append(local.R.PortfolioPortfolioGoalSummaries, foreign)
				if foreign.R == nil {
					foreign.R = &portfolioGoalSummaryR{}
				}
				foreign.R.Portfolio = local
				break
			}
		}
	}

	return nil
}

// LoadPortfolioRecommendations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portfolioL) LoadPortfolioRecommendations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.PortfolioID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Recommendations`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recommendations")
	}

	var resultSlice []*Recommendation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recommendations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Recommendations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Recommendations")
	}

	if len(recommendationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PortfolioRecommendations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &recommendationR{}
			}
			foreign.R.Portfolio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PortfolioID == foreign.PortfolioID {
				local.R.PortfolioRecommendations = append(local.R.PortfolioRecommendations, foreign)
				if foreign.R == nil {
					foreign.R = &recommendationR{}
				}
				foreign.R.Portfolio = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the portfolio to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountPortfolios.
func (o *Portfolio) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Portfolio` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, portfolioPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.PortfolioID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &portfolioR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountPortfolios: PortfolioSlice{o},
		}
	} else {
		related.R.AccountPortfolios = append(related.R.AccountPortfolios, o)
	}

	return nil
}

// SetInvestmentType of the portfolio to the related item.
// Sets o.R.InvestmentType to related.
// Adds o to related.R.InvestmentTypePortfolios.
func (o *Portfolio) SetInvestmentType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *InvestmentType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Portfolio` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"investment_type_id"}),
		strmangle.WhereClause("`", "`", 0, portfolioPrimaryKeyColumns),
	)
	values := []interface{}{related.InvestmenttypeID, o.PortfolioID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvestmentTypeID = related.InvestmenttypeID
	if o.R == nil {
		o.R = &portfolioR{
			InvestmentType: related,
		}
	} else {
		o.R.InvestmentType = related
	}

	if related.R == nil {
		related.R = &investmentTypeR{
			InvestmentTypePortfolios: PortfolioSlice{o},
		}
	} else {
		related.R.InvestmentTypePortfolios = append(related.R.InvestmentTypePortfolios, o)
	}

	return nil
}

// AddPortfolioCurrentHoldings adds the given related objects to the existing relationships
// of the Portfolio, optionally inserting them as new records.
// Appends related to o.R.PortfolioCurrentHoldings.
// Sets related.R.Portfolio appropriately.
func (o *Portfolio) AddPortfolioCurrentHoldings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrentHolding) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortfolioID = o.PortfolioID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `CurrentHolding` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
				strmangle.WhereClause("`", "`", 0, currentHoldingPrimaryKeyColumns),
			)
			values := []interface{}{o.PortfolioID, rel.CurrentHoldingID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortfolioID = o.PortfolioID
		}
	}

	if o.R == nil {
		o.R = &portfolioR{
			PortfolioCurrentHoldings: related,
		}
	} else {
		o.R.PortfolioCurrentHoldings = append(o.R.PortfolioCurrentHoldings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentHoldingR{
				Portfolio: o,
			}
		} else {
			rel.R.Portfolio = o
		}
	}
	return nil
}

// AddPortfolioPortfolioGoalSummaries adds the given related objects to the existing relationships
// of the Portfolio, optionally inserting them as new records.
// Appends related to o.R.PortfolioPortfolioGoalSummaries.
// Sets related.R.Portfolio appropriately.
func (o *Portfolio) AddPortfolioPortfolioGoalSummaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PortfolioGoalSummary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortfolioID = o.PortfolioID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `PortfolioGoalSummary` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
				strmangle.WhereClause("`", "`", 0, portfolioGoalSummaryPrimaryKeyColumns),
			)
			values := []interface{}{o.PortfolioID, rel.PartyID, rel.GoalID, rel.ReportDate}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortfolioID = o.PortfolioID
		}
	}

	if o.R == nil {
		o.R = &portfolioR{
			PortfolioPortfolioGoalSummaries: related,
		}
	} else {
		o.R.PortfolioPortfolioGoalSummaries = append(o.R.PortfolioPortfolioGoalSummaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &portfolioGoalSummaryR{
				Portfolio: o,
			}
		} else {
			rel.R.Portfolio = o
		}
	}
	return nil
}

// AddPortfolioRecommendations adds the given related objects to the existing relationships
// of the Portfolio, optionally inserting them as new records.
// Appends related to o.R.PortfolioRecommendations.
// Sets related.R.Portfolio appropriately.
func (o *Portfolio) AddPortfolioRecommendations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Recommendation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortfolioID = o.PortfolioID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Recommendations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"portfolio_id"}),
				strmangle.WhereClause("`", "`", 0, recommendationPrimaryKeyColumns),
			)
			values := []interface{}{o.PortfolioID, rel.RecommendationNumber, rel.RecommendetionDate}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortfolioID = o.PortfolioID
		}
	}

	if o.R == nil {
		o.R = &portfolioR{
			PortfolioRecommendations: related,
		}
	} else {
		o.R.PortfolioRecommendations = append(o.R.PortfolioRecommendations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recommendationR{
				Portfolio: o,
			}
		} else {
			rel.R.Portfolio = o
		}
	}
	return nil
}

// Portfolios retrieves all the records using an executor.
func Portfolios(mods ...qm.QueryMod) portfolioQuery {
	mods = append(mods, qm.From("`Portfolio`"))
	return portfolioQuery{NewQuery(mods...)}
}

// FindPortfolio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortfolio(ctx context.Context, exec boil.ContextExecutor, portfolioID int, selectCols ...string) (*Portfolio, error) {
	portfolioObj := &Portfolio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Portfolio` where `portfolio_id`=?", sel,
	)

	q := queries.Raw(query, portfolioID)

	err := q.Bind(ctx, exec, portfolioObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Portfolio")
	}

	return portfolioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Portfolio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Portfolio provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portfolioInsertCacheMut.RLock()
	cache, cached := portfolioInsertCache[key]
	portfolioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portfolioColumns,
			portfolioColumnsWithDefault,
			portfolioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portfolioType, portfolioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portfolioType, portfolioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Portfolio` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Portfolio` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Portfolio` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, portfolioPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Portfolio")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PortfolioID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portfolioMapping["PortfolioID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PortfolioID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Portfolio")
	}

CacheNoHooks:
	if !cached {
		portfolioInsertCacheMut.Lock()
		portfolioInsertCache[key] = cache
		portfolioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Portfolio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Portfolio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portfolioUpdateCacheMut.RLock()
	cache, cached := portfolioUpdateCache[key]
	portfolioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portfolioColumns,
			portfolioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Portfolio, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Portfolio` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, portfolioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portfolioType, portfolioMapping, append(wl, portfolioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Portfolio row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Portfolio")
	}

	if !cached {
		portfolioUpdateCacheMut.Lock()
		portfolioUpdateCache[key] = cache
		portfolioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portfolioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Portfolio")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortfolioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Portfolio` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portfolio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portfolio")
	}
	return rowsAff, nil
}

var mySQLPortfolioUniqueColumns = []string{
	"portfolio_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Portfolio) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Portfolio provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPortfolioUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portfolioUpsertCacheMut.RLock()
	cache, cached := portfolioUpsertCache[key]
	portfolioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portfolioColumns,
			portfolioColumnsWithDefault,
			portfolioColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			portfolioColumns,
			portfolioPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Portfolio, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Portfolio", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Portfolio` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(portfolioType, portfolioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portfolioType, portfolioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Portfolio")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.PortfolioID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portfolioMapping["portfolio_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(portfolioType, portfolioMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Portfolio")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Portfolio")
	}

CacheNoHooks:
	if !cached {
		portfolioUpsertCacheMut.Lock()
		portfolioUpsertCache[key] = cache
		portfolioUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Portfolio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Portfolio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Portfolio provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portfolioPrimaryKeyMapping)
	sql := "DELETE FROM `Portfolio` WHERE `portfolio_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Portfolio")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portfolioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portfolioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Portfolio")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortfolioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Portfolio slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(portfolioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Portfolio` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Portfolio")
	}

	if len(portfolioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Portfolio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortfolio(ctx, exec, o.PortfolioID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortfolioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortfolioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Portfolio`.* FROM `Portfolio` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortfolioSlice")
	}

	*o = slice

	return nil
}

// PortfolioExists checks if the Portfolio row exists.
func PortfolioExists(ctx context.Context, exec boil.ContextExecutor, portfolioID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Portfolio` where `portfolio_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, portfolioID)
	}

	row := exec.QueryRowContext(ctx, sql, portfolioID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Portfolio exists")
	}

	return exists, nil
}
