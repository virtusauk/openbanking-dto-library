// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TierBand is an object representing the database table.
type TierBand struct {
	TierbandID                           int               `boil:"tierband_id" json:"tierband_id" toml:"tierband_id" yaml:"tierband_id"`
	TierBandSetID                        int               `boil:"tier_band_set_id" json:"tier_band_set_id" toml:"tier_band_set_id" yaml:"tier_band_set_id"`
	Identification                       null.String       `boil:"identification" json:"identification,omitempty" toml:"identification" yaml:"identification,omitempty"`
	TierValueMinimum                     types.Decimal     `boil:"tier_value_minimum" json:"tier_value_minimum" toml:"tier_value_minimum" yaml:"tier_value_minimum"`
	TierValueMaximum                     types.NullDecimal `boil:"tier_value_maximum" json:"tier_value_maximum,omitempty" toml:"tier_value_maximum" yaml:"tier_value_maximum,omitempty"`
	CalculationFrequency                 string            `boil:"calculation_frequency" json:"calculation_frequency" toml:"calculation_frequency" yaml:"calculation_frequency"`
	ApplicationFrequency                 string            `boil:"application_frequency" json:"application_frequency" toml:"application_frequency" yaml:"application_frequency"`
	DepositInterestAppliedCoverage       null.String       `boil:"deposit_interest_applied_coverage" json:"deposit_interest_applied_coverage,omitempty" toml:"deposit_interest_applied_coverage" yaml:"deposit_interest_applied_coverage,omitempty"`
	FixedVariableInterestRate            string            `boil:"fixed_variable_interest_rate" json:"fixed_variable_interest_rate" toml:"fixed_variable_interest_rate" yaml:"fixed_variable_interest_rate"`
	Aer                                  int               `boil:"aer" json:"aer" toml:"aer" yaml:"aer"`
	BankInterestRateType                 null.String       `boil:"bank_interest_rate_type" json:"bank_interest_rate_type,omitempty" toml:"bank_interest_rate_type" yaml:"bank_interest_rate_type,omitempty"`
	BankInterestRate                     types.NullDecimal `boil:"bank_interest_rate" json:"bank_interest_rate,omitempty" toml:"bank_interest_rate" yaml:"bank_interest_rate,omitempty"`
	Notes                                null.String       `boil:"notes" json:"notes,omitempty" toml:"notes" yaml:"notes,omitempty"`
	OtherBankInterestTypeCode            null.String       `boil:"other_bank_interest_type_code" json:"other_bank_interest_type_code,omitempty" toml:"other_bank_interest_type_code" yaml:"other_bank_interest_type_code,omitempty"`
	OtherBankInterestTypeName            null.String       `boil:"other_bank_interest_type_name" json:"other_bank_interest_type_name,omitempty" toml:"other_bank_interest_type_name" yaml:"other_bank_interest_type_name,omitempty"`
	OtherBankInterestTypeDescription     null.String       `boil:"other_bank_interest_type_description" json:"other_bank_interest_type_description,omitempty" toml:"other_bank_interest_type_description" yaml:"other_bank_interest_type_description,omitempty"`
	OtherApplicationFrequencyCode        null.String       `boil:"other_application_frequency_code" json:"other_application_frequency_code,omitempty" toml:"other_application_frequency_code" yaml:"other_application_frequency_code,omitempty"`
	OtherApplicationFrequencyName        null.String       `boil:"other_application_frequency_name" json:"other_application_frequency_name,omitempty" toml:"other_application_frequency_name" yaml:"other_application_frequency_name,omitempty"`
	OtherApplicationFrequencyDescription null.String       `boil:"other_application_frequency_description" json:"other_application_frequency_description,omitempty" toml:"other_application_frequency_description" yaml:"other_application_frequency_description,omitempty"`
	OtherCalculationFrequencyCode        null.String       `boil:"other_calculation_frequency_code" json:"other_calculation_frequency_code,omitempty" toml:"other_calculation_frequency_code" yaml:"other_calculation_frequency_code,omitempty"`
	OtherCalculationFrequencyName        null.String       `boil:"other_calculation_frequency_name" json:"other_calculation_frequency_name,omitempty" toml:"other_calculation_frequency_name" yaml:"other_calculation_frequency_name,omitempty"`
	OtherCalculationFrequencyDescription null.String       `boil:"other_calculation_frequency_description" json:"other_calculation_frequency_description,omitempty" toml:"other_calculation_frequency_description" yaml:"other_calculation_frequency_description,omitempty"`

	R *tierBandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tierBandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TierBandColumns = struct {
	TierbandID                           string
	TierBandSetID                        string
	Identification                       string
	TierValueMinimum                     string
	TierValueMaximum                     string
	CalculationFrequency                 string
	ApplicationFrequency                 string
	DepositInterestAppliedCoverage       string
	FixedVariableInterestRate            string
	Aer                                  string
	BankInterestRateType                 string
	BankInterestRate                     string
	Notes                                string
	OtherBankInterestTypeCode            string
	OtherBankInterestTypeName            string
	OtherBankInterestTypeDescription     string
	OtherApplicationFrequencyCode        string
	OtherApplicationFrequencyName        string
	OtherApplicationFrequencyDescription string
	OtherCalculationFrequencyCode        string
	OtherCalculationFrequencyName        string
	OtherCalculationFrequencyDescription string
}{
	TierbandID:                           "tierband_id",
	TierBandSetID:                        "tier_band_set_id",
	Identification:                       "identification",
	TierValueMinimum:                     "tier_value_minimum",
	TierValueMaximum:                     "tier_value_maximum",
	CalculationFrequency:                 "calculation_frequency",
	ApplicationFrequency:                 "application_frequency",
	DepositInterestAppliedCoverage:       "deposit_interest_applied_coverage",
	FixedVariableInterestRate:            "fixed_variable_interest_rate",
	Aer:                                  "aer",
	BankInterestRateType:                 "bank_interest_rate_type",
	BankInterestRate:                     "bank_interest_rate",
	Notes:                                "notes",
	OtherBankInterestTypeCode:            "other_bank_interest_type_code",
	OtherBankInterestTypeName:            "other_bank_interest_type_name",
	OtherBankInterestTypeDescription:     "other_bank_interest_type_description",
	OtherApplicationFrequencyCode:        "other_application_frequency_code",
	OtherApplicationFrequencyName:        "other_application_frequency_name",
	OtherApplicationFrequencyDescription: "other_application_frequency_description",
	OtherCalculationFrequencyCode:        "other_calculation_frequency_code",
	OtherCalculationFrequencyName:        "other_calculation_frequency_name",
	OtherCalculationFrequencyDescription: "other_calculation_frequency_description",
}

// Generated where

var TierBandWhere = struct {
	TierbandID                           whereHelperint
	TierBandSetID                        whereHelperint
	Identification                       whereHelpernull_String
	TierValueMinimum                     whereHelpertypes_Decimal
	TierValueMaximum                     whereHelpertypes_NullDecimal
	CalculationFrequency                 whereHelperstring
	ApplicationFrequency                 whereHelperstring
	DepositInterestAppliedCoverage       whereHelpernull_String
	FixedVariableInterestRate            whereHelperstring
	Aer                                  whereHelperint
	BankInterestRateType                 whereHelpernull_String
	BankInterestRate                     whereHelpertypes_NullDecimal
	Notes                                whereHelpernull_String
	OtherBankInterestTypeCode            whereHelpernull_String
	OtherBankInterestTypeName            whereHelpernull_String
	OtherBankInterestTypeDescription     whereHelpernull_String
	OtherApplicationFrequencyCode        whereHelpernull_String
	OtherApplicationFrequencyName        whereHelpernull_String
	OtherApplicationFrequencyDescription whereHelpernull_String
	OtherCalculationFrequencyCode        whereHelpernull_String
	OtherCalculationFrequencyName        whereHelpernull_String
	OtherCalculationFrequencyDescription whereHelpernull_String
}{
	TierbandID:                           whereHelperint{field: `tierband_id`},
	TierBandSetID:                        whereHelperint{field: `tier_band_set_id`},
	Identification:                       whereHelpernull_String{field: `identification`},
	TierValueMinimum:                     whereHelpertypes_Decimal{field: `tier_value_minimum`},
	TierValueMaximum:                     whereHelpertypes_NullDecimal{field: `tier_value_maximum`},
	CalculationFrequency:                 whereHelperstring{field: `calculation_frequency`},
	ApplicationFrequency:                 whereHelperstring{field: `application_frequency`},
	DepositInterestAppliedCoverage:       whereHelpernull_String{field: `deposit_interest_applied_coverage`},
	FixedVariableInterestRate:            whereHelperstring{field: `fixed_variable_interest_rate`},
	Aer:                                  whereHelperint{field: `aer`},
	BankInterestRateType:                 whereHelpernull_String{field: `bank_interest_rate_type`},
	BankInterestRate:                     whereHelpertypes_NullDecimal{field: `bank_interest_rate`},
	Notes:                                whereHelpernull_String{field: `notes`},
	OtherBankInterestTypeCode:            whereHelpernull_String{field: `other_bank_interest_type_code`},
	OtherBankInterestTypeName:            whereHelpernull_String{field: `other_bank_interest_type_name`},
	OtherBankInterestTypeDescription:     whereHelpernull_String{field: `other_bank_interest_type_description`},
	OtherApplicationFrequencyCode:        whereHelpernull_String{field: `other_application_frequency_code`},
	OtherApplicationFrequencyName:        whereHelpernull_String{field: `other_application_frequency_name`},
	OtherApplicationFrequencyDescription: whereHelpernull_String{field: `other_application_frequency_description`},
	OtherCalculationFrequencyCode:        whereHelpernull_String{field: `other_calculation_frequency_code`},
	OtherCalculationFrequencyName:        whereHelpernull_String{field: `other_calculation_frequency_name`},
	OtherCalculationFrequencyDescription: whereHelpernull_String{field: `other_calculation_frequency_description`},
}

// TierBandRels is where relationship names are stored.
var TierBandRels = struct {
	TierBandSet string
}{
	TierBandSet: "TierBandSet",
}

// tierBandR is where relationships are stored.
type tierBandR struct {
	TierBandSet *TierBandSet
}

// NewStruct creates a new relationship struct
func (*tierBandR) NewStruct() *tierBandR {
	return &tierBandR{}
}

// tierBandL is where Load methods for each relationship are stored.
type tierBandL struct{}

var (
	tierBandColumns               = []string{"tierband_id", "tier_band_set_id", "identification", "tier_value_minimum", "tier_value_maximum", "calculation_frequency", "application_frequency", "deposit_interest_applied_coverage", "fixed_variable_interest_rate", "aer", "bank_interest_rate_type", "bank_interest_rate", "notes", "other_bank_interest_type_code", "other_bank_interest_type_name", "other_bank_interest_type_description", "other_application_frequency_code", "other_application_frequency_name", "other_application_frequency_description", "other_calculation_frequency_code", "other_calculation_frequency_name", "other_calculation_frequency_description"}
	tierBandColumnsWithoutDefault = []string{"tierband_id", "tier_band_set_id", "identification", "tier_value_minimum", "tier_value_maximum", "calculation_frequency", "application_frequency", "deposit_interest_applied_coverage", "fixed_variable_interest_rate", "aer", "bank_interest_rate_type", "bank_interest_rate", "notes", "other_bank_interest_type_code", "other_bank_interest_type_name", "other_bank_interest_type_description", "other_application_frequency_code", "other_application_frequency_name", "other_application_frequency_description", "other_calculation_frequency_code", "other_calculation_frequency_name", "other_calculation_frequency_description"}
	tierBandColumnsWithDefault    = []string{}
	tierBandPrimaryKeyColumns     = []string{"tierband_id"}
)

type (
	// TierBandSlice is an alias for a slice of pointers to TierBand.
	// This should generally be used opposed to []TierBand.
	TierBandSlice []*TierBand
	// TierBandHook is the signature for custom TierBand hook methods
	TierBandHook func(context.Context, boil.ContextExecutor, *TierBand) error

	tierBandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tierBandType                 = reflect.TypeOf(&TierBand{})
	tierBandMapping              = queries.MakeStructMapping(tierBandType)
	tierBandPrimaryKeyMapping, _ = queries.BindMapping(tierBandType, tierBandMapping, tierBandPrimaryKeyColumns)
	tierBandInsertCacheMut       sync.RWMutex
	tierBandInsertCache          = make(map[string]insertCache)
	tierBandUpdateCacheMut       sync.RWMutex
	tierBandUpdateCache          = make(map[string]updateCache)
	tierBandUpsertCacheMut       sync.RWMutex
	tierBandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tierBandBeforeInsertHooks []TierBandHook
var tierBandBeforeUpdateHooks []TierBandHook
var tierBandBeforeDeleteHooks []TierBandHook
var tierBandBeforeUpsertHooks []TierBandHook

var tierBandAfterInsertHooks []TierBandHook
var tierBandAfterSelectHooks []TierBandHook
var tierBandAfterUpdateHooks []TierBandHook
var tierBandAfterDeleteHooks []TierBandHook
var tierBandAfterUpsertHooks []TierBandHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TierBand) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TierBand) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TierBand) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TierBand) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TierBand) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TierBand) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TierBand) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TierBand) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TierBand) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tierBandAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTierBandHook registers your hook function for all future operations.
func AddTierBandHook(hookPoint boil.HookPoint, tierBandHook TierBandHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tierBandBeforeInsertHooks = append(tierBandBeforeInsertHooks, tierBandHook)
	case boil.BeforeUpdateHook:
		tierBandBeforeUpdateHooks = append(tierBandBeforeUpdateHooks, tierBandHook)
	case boil.BeforeDeleteHook:
		tierBandBeforeDeleteHooks = append(tierBandBeforeDeleteHooks, tierBandHook)
	case boil.BeforeUpsertHook:
		tierBandBeforeUpsertHooks = append(tierBandBeforeUpsertHooks, tierBandHook)
	case boil.AfterInsertHook:
		tierBandAfterInsertHooks = append(tierBandAfterInsertHooks, tierBandHook)
	case boil.AfterSelectHook:
		tierBandAfterSelectHooks = append(tierBandAfterSelectHooks, tierBandHook)
	case boil.AfterUpdateHook:
		tierBandAfterUpdateHooks = append(tierBandAfterUpdateHooks, tierBandHook)
	case boil.AfterDeleteHook:
		tierBandAfterDeleteHooks = append(tierBandAfterDeleteHooks, tierBandHook)
	case boil.AfterUpsertHook:
		tierBandAfterUpsertHooks = append(tierBandAfterUpsertHooks, tierBandHook)
	}
}

// One returns a single tierBand record from the query.
func (q tierBandQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TierBand, error) {
	o := &TierBand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TierBand")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TierBand records from the query.
func (q tierBandQuery) All(ctx context.Context, exec boil.ContextExecutor) (TierBandSlice, error) {
	var o []*TierBand

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TierBand slice")
	}

	if len(tierBandAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TierBand records in the query.
func (q tierBandQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TierBand rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tierBandQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TierBand exists")
	}

	return count > 0, nil
}

// TierBandSet pointed to by the foreign key.
func (o *TierBand) TierBandSet(mods ...qm.QueryMod) tierBandSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("tier_band_set_id=?", o.TierBandSetID),
	}

	queryMods = append(queryMods, mods...)

	query := TierBandSets(queryMods...)
	queries.SetFrom(query.Query, "`TierBandSet`")

	return query
}

// LoadTierBandSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tierBandL) LoadTierBandSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTierBand interface{}, mods queries.Applicator) error {
	var slice []*TierBand
	var object *TierBand

	if singular {
		object = maybeTierBand.(*TierBand)
	} else {
		slice = *maybeTierBand.(*[]*TierBand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tierBandR{}
		}
		args = append(args, object.TierBandSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tierBandR{}
			}

			for _, a := range args {
				if a == obj.TierBandSetID {
					continue Outer
				}
			}

			args = append(args, obj.TierBandSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TierBandSet`), qm.WhereIn(`tier_band_set_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TierBandSet")
	}

	var resultSlice []*TierBandSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TierBandSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TierBandSet")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TierBandSet")
	}

	if len(tierBandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TierBandSet = foreign
		if foreign.R == nil {
			foreign.R = &tierBandSetR{}
		}
		foreign.R.TierBandSetTierBands = append(foreign.R.TierBandSetTierBands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TierBandSetID == foreign.TierBandSetID {
				local.R.TierBandSet = foreign
				if foreign.R == nil {
					foreign.R = &tierBandSetR{}
				}
				foreign.R.TierBandSetTierBands = append(foreign.R.TierBandSetTierBands, local)
				break
			}
		}
	}

	return nil
}

// SetTierBandSet of the tierBand to the related item.
// Sets o.R.TierBandSet to related.
// Adds o to related.R.TierBandSetTierBands.
func (o *TierBand) SetTierBandSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TierBandSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TierBand` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tier_band_set_id"}),
		strmangle.WhereClause("`", "`", 0, tierBandPrimaryKeyColumns),
	)
	values := []interface{}{related.TierBandSetID, o.TierbandID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TierBandSetID = related.TierBandSetID
	if o.R == nil {
		o.R = &tierBandR{
			TierBandSet: related,
		}
	} else {
		o.R.TierBandSet = related
	}

	if related.R == nil {
		related.R = &tierBandSetR{
			TierBandSetTierBands: TierBandSlice{o},
		}
	} else {
		related.R.TierBandSetTierBands = append(related.R.TierBandSetTierBands, o)
	}

	return nil
}

// TierBands retrieves all the records using an executor.
func TierBands(mods ...qm.QueryMod) tierBandQuery {
	mods = append(mods, qm.From("`TierBand`"))
	return tierBandQuery{NewQuery(mods...)}
}

// FindTierBand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTierBand(ctx context.Context, exec boil.ContextExecutor, tierbandID int, selectCols ...string) (*TierBand, error) {
	tierBandObj := &TierBand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TierBand` where `tierband_id`=?", sel,
	)

	q := queries.Raw(query, tierbandID)

	err := q.Bind(ctx, exec, tierBandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TierBand")
	}

	return tierBandObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TierBand) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TierBand provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tierBandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tierBandInsertCacheMut.RLock()
	cache, cached := tierBandInsertCache[key]
	tierBandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tierBandColumns,
			tierBandColumnsWithDefault,
			tierBandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tierBandType, tierBandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tierBandType, tierBandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TierBand` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TierBand` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TierBand` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tierBandPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TierBand")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TierbandID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TierBand")
	}

CacheNoHooks:
	if !cached {
		tierBandInsertCacheMut.Lock()
		tierBandInsertCache[key] = cache
		tierBandInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TierBand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TierBand) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tierBandUpdateCacheMut.RLock()
	cache, cached := tierBandUpdateCache[key]
	tierBandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tierBandColumns,
			tierBandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TierBand, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TierBand` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tierBandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tierBandType, tierBandMapping, append(wl, tierBandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TierBand row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TierBand")
	}

	if !cached {
		tierBandUpdateCacheMut.Lock()
		tierBandUpdateCache[key] = cache
		tierBandUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tierBandQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TierBand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TierBand")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TierBandSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tierBandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TierBand` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tierBandPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tierBand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tierBand")
	}
	return rowsAff, nil
}

var mySQLTierBandUniqueColumns = []string{
	"tierband_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TierBand) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TierBand provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tierBandColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTierBandUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tierBandUpsertCacheMut.RLock()
	cache, cached := tierBandUpsertCache[key]
	tierBandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tierBandColumns,
			tierBandColumnsWithDefault,
			tierBandColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tierBandColumns,
			tierBandPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TierBand, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TierBand", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TierBand` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tierBandType, tierBandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tierBandType, tierBandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TierBand")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tierBandType, tierBandMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TierBand")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TierBand")
	}

CacheNoHooks:
	if !cached {
		tierBandUpsertCacheMut.Lock()
		tierBandUpsertCache[key] = cache
		tierBandUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TierBand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TierBand) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TierBand provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tierBandPrimaryKeyMapping)
	sql := "DELETE FROM `TierBand` WHERE `tierband_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TierBand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TierBand")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tierBandQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tierBandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TierBand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TierBand")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TierBandSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TierBand slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tierBandBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tierBandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TierBand` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tierBandPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tierBand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TierBand")
	}

	if len(tierBandAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TierBand) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTierBand(ctx, exec, o.TierbandID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TierBandSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TierBandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tierBandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TierBand`.* FROM `TierBand` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tierBandPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TierBandSlice")
	}

	*o = slice

	return nil
}

// TierBandExists checks if the TierBand row exists.
func TierBandExists(ctx context.Context, exec boil.ContextExecutor, tierbandID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TierBand` where `tierband_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tierbandID)
	}

	row := exec.QueryRowContext(ctx, sql, tierbandID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TierBand exists")
	}

	return exists, nil
}
