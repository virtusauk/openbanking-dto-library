// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// AccountOwner is an object representing the database table.
type AccountOwner struct {
	AccountOwnerID        int           `boil:"account_owner_id" json:"account_owner_id" toml:"account_owner_id" yaml:"account_owner_id"`
	AccountID             int           `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	BankID                int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	PartyID               int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	SchemeName            string        `boil:"scheme_name" json:"scheme_name" toml:"scheme_name" yaml:"scheme_name"`
	AccountIdentification string        `boil:"account_identification" json:"account_identification" toml:"account_identification" yaml:"account_identification"`
	IsOnlineAccessEnabled null.String   `boil:"is_online_access_enabled" json:"is_online_access_enabled,omitempty" toml:"is_online_access_enabled" yaml:"is_online_access_enabled,omitempty"`
	AccountJoiningDate    time.Time     `boil:"account_joining_date" json:"account_joining_date" toml:"account_joining_date" yaml:"account_joining_date"`
	AccountLeavingDate    null.Time     `boil:"account_leaving_date" json:"account_leaving_date,omitempty" toml:"account_leaving_date" yaml:"account_leaving_date,omitempty"`
	IsPrimaryOwner        string        `boil:"is_primary_owner" json:"is_primary_owner" toml:"is_primary_owner" yaml:"is_primary_owner"`
	PercentageOfShare     types.Decimal `boil:"percentage_of_share" json:"percentage_of_share" toml:"percentage_of_share" yaml:"percentage_of_share"`
	Status                string        `boil:"status" json:"status" toml:"status" yaml:"status"`
	StartDate             time.Time     `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate               null.Time     `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	MakerDate             time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate           null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID               string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID             null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy            null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate          null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *accountOwnerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountOwnerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountOwnerColumns = struct {
	AccountOwnerID        string
	AccountID             string
	BankID                string
	PartyID               string
	SchemeName            string
	AccountIdentification string
	IsOnlineAccessEnabled string
	AccountJoiningDate    string
	AccountLeavingDate    string
	IsPrimaryOwner        string
	PercentageOfShare     string
	Status                string
	StartDate             string
	EndDate               string
	MakerDate             string
	CheckerDate           string
	MakerID               string
	CheckerID             string
	ModifiedBy            string
	ModifiedDate          string
}{
	AccountOwnerID:        "account_owner_id",
	AccountID:             "account_id",
	BankID:                "bank_id",
	PartyID:               "party_id",
	SchemeName:            "scheme_name",
	AccountIdentification: "account_identification",
	IsOnlineAccessEnabled: "is_online_access_enabled",
	AccountJoiningDate:    "account_joining_date",
	AccountLeavingDate:    "account_leaving_date",
	IsPrimaryOwner:        "is_primary_owner",
	PercentageOfShare:     "percentage_of_share",
	Status:                "status",
	StartDate:             "start_date",
	EndDate:               "end_date",
	MakerDate:             "maker_date",
	CheckerDate:           "checker_date",
	MakerID:               "maker_id",
	CheckerID:             "checker_id",
	ModifiedBy:            "modified_by",
	ModifiedDate:          "modified_date",
}

// Generated where

var AccountOwnerWhere = struct {
	AccountOwnerID        whereHelperint
	AccountID             whereHelperint
	BankID                whereHelperint
	PartyID               whereHelperint
	SchemeName            whereHelperstring
	AccountIdentification whereHelperstring
	IsOnlineAccessEnabled whereHelpernull_String
	AccountJoiningDate    whereHelpertime_Time
	AccountLeavingDate    whereHelpernull_Time
	IsPrimaryOwner        whereHelperstring
	PercentageOfShare     whereHelpertypes_Decimal
	Status                whereHelperstring
	StartDate             whereHelpertime_Time
	EndDate               whereHelpernull_Time
	MakerDate             whereHelpertime_Time
	CheckerDate           whereHelpernull_Time
	MakerID               whereHelperstring
	CheckerID             whereHelpernull_String
	ModifiedBy            whereHelpernull_String
	ModifiedDate          whereHelpernull_Time
}{
	AccountOwnerID:        whereHelperint{field: `account_owner_id`},
	AccountID:             whereHelperint{field: `account_id`},
	BankID:                whereHelperint{field: `bank_id`},
	PartyID:               whereHelperint{field: `party_id`},
	SchemeName:            whereHelperstring{field: `scheme_name`},
	AccountIdentification: whereHelperstring{field: `account_identification`},
	IsOnlineAccessEnabled: whereHelpernull_String{field: `is_online_access_enabled`},
	AccountJoiningDate:    whereHelpertime_Time{field: `account_joining_date`},
	AccountLeavingDate:    whereHelpernull_Time{field: `account_leaving_date`},
	IsPrimaryOwner:        whereHelperstring{field: `is_primary_owner`},
	PercentageOfShare:     whereHelpertypes_Decimal{field: `percentage_of_share`},
	Status:                whereHelperstring{field: `status`},
	StartDate:             whereHelpertime_Time{field: `start_date`},
	EndDate:               whereHelpernull_Time{field: `end_date`},
	MakerDate:             whereHelpertime_Time{field: `maker_date`},
	CheckerDate:           whereHelpernull_Time{field: `checker_date`},
	MakerID:               whereHelperstring{field: `maker_id`},
	CheckerID:             whereHelpernull_String{field: `checker_id`},
	ModifiedBy:            whereHelpernull_String{field: `modified_by`},
	ModifiedDate:          whereHelpernull_Time{field: `modified_date`},
}

// AccountOwnerRels is where relationship names are stored.
var AccountOwnerRels = struct {
	Bank                            string
	Account                         string
	Party                           string
	DebtorAccountOwnerBeneficiaries string
}{
	Bank:                            "Bank",
	Account:                         "Account",
	Party:                           "Party",
	DebtorAccountOwnerBeneficiaries: "DebtorAccountOwnerBeneficiaries",
}

// accountOwnerR is where relationships are stored.
type accountOwnerR struct {
	Bank                            *Bank
	Account                         *Account
	Party                           *Party
	DebtorAccountOwnerBeneficiaries BeneficiarySlice
}

// NewStruct creates a new relationship struct
func (*accountOwnerR) NewStruct() *accountOwnerR {
	return &accountOwnerR{}
}

// accountOwnerL is where Load methods for each relationship are stored.
type accountOwnerL struct{}

var (
	accountOwnerColumns               = []string{"account_owner_id", "account_id", "bank_id", "party_id", "scheme_name", "account_identification", "is_online_access_enabled", "account_joining_date", "account_leaving_date", "is_primary_owner", "percentage_of_share", "status", "start_date", "end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	accountOwnerColumnsWithoutDefault = []string{"account_id", "bank_id", "party_id", "scheme_name", "account_identification", "is_online_access_enabled", "account_joining_date", "account_leaving_date", "is_primary_owner", "percentage_of_share", "status", "start_date", "end_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	accountOwnerColumnsWithDefault    = []string{"account_owner_id"}
	accountOwnerPrimaryKeyColumns     = []string{"account_owner_id"}
)

type (
	// AccountOwnerSlice is an alias for a slice of pointers to AccountOwner.
	// This should generally be used opposed to []AccountOwner.
	AccountOwnerSlice []*AccountOwner
	// AccountOwnerHook is the signature for custom AccountOwner hook methods
	AccountOwnerHook func(context.Context, boil.ContextExecutor, *AccountOwner) error

	accountOwnerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountOwnerType                 = reflect.TypeOf(&AccountOwner{})
	accountOwnerMapping              = queries.MakeStructMapping(accountOwnerType)
	accountOwnerPrimaryKeyMapping, _ = queries.BindMapping(accountOwnerType, accountOwnerMapping, accountOwnerPrimaryKeyColumns)
	accountOwnerInsertCacheMut       sync.RWMutex
	accountOwnerInsertCache          = make(map[string]insertCache)
	accountOwnerUpdateCacheMut       sync.RWMutex
	accountOwnerUpdateCache          = make(map[string]updateCache)
	accountOwnerUpsertCacheMut       sync.RWMutex
	accountOwnerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountOwnerBeforeInsertHooks []AccountOwnerHook
var accountOwnerBeforeUpdateHooks []AccountOwnerHook
var accountOwnerBeforeDeleteHooks []AccountOwnerHook
var accountOwnerBeforeUpsertHooks []AccountOwnerHook

var accountOwnerAfterInsertHooks []AccountOwnerHook
var accountOwnerAfterSelectHooks []AccountOwnerHook
var accountOwnerAfterUpdateHooks []AccountOwnerHook
var accountOwnerAfterDeleteHooks []AccountOwnerHook
var accountOwnerAfterUpsertHooks []AccountOwnerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountOwner) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountOwner) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountOwner) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountOwner) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountOwner) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountOwner) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountOwner) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountOwner) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountOwner) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOwnerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountOwnerHook registers your hook function for all future operations.
func AddAccountOwnerHook(hookPoint boil.HookPoint, accountOwnerHook AccountOwnerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accountOwnerBeforeInsertHooks = append(accountOwnerBeforeInsertHooks, accountOwnerHook)
	case boil.BeforeUpdateHook:
		accountOwnerBeforeUpdateHooks = append(accountOwnerBeforeUpdateHooks, accountOwnerHook)
	case boil.BeforeDeleteHook:
		accountOwnerBeforeDeleteHooks = append(accountOwnerBeforeDeleteHooks, accountOwnerHook)
	case boil.BeforeUpsertHook:
		accountOwnerBeforeUpsertHooks = append(accountOwnerBeforeUpsertHooks, accountOwnerHook)
	case boil.AfterInsertHook:
		accountOwnerAfterInsertHooks = append(accountOwnerAfterInsertHooks, accountOwnerHook)
	case boil.AfterSelectHook:
		accountOwnerAfterSelectHooks = append(accountOwnerAfterSelectHooks, accountOwnerHook)
	case boil.AfterUpdateHook:
		accountOwnerAfterUpdateHooks = append(accountOwnerAfterUpdateHooks, accountOwnerHook)
	case boil.AfterDeleteHook:
		accountOwnerAfterDeleteHooks = append(accountOwnerAfterDeleteHooks, accountOwnerHook)
	case boil.AfterUpsertHook:
		accountOwnerAfterUpsertHooks = append(accountOwnerAfterUpsertHooks, accountOwnerHook)
	}
}

// One returns a single accountOwner record from the query.
func (q accountOwnerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountOwner, error) {
	o := &AccountOwner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AccountOwners")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountOwner records from the query.
func (q accountOwnerQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountOwnerSlice, error) {
	var o []*AccountOwner

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountOwner slice")
	}

	if len(accountOwnerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountOwner records in the query.
func (q accountOwnerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AccountOwners rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountOwnerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AccountOwners exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *AccountOwner) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("bank_id=?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	query := Banks(queryMods...)
	queries.SetFrom(query.Query, "`Banks`")

	return query
}

// Account pointed to by the foreign key.
func (o *AccountOwner) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account_id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "`Account`")

	return query
}

// Party pointed to by the foreign key.
func (o *AccountOwner) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// DebtorAccountOwnerBeneficiaries retrieves all the Beneficiary's Beneficiaries with an executor via debtor_account_owner_id column.
func (o *AccountOwner) DebtorAccountOwnerBeneficiaries(mods ...qm.QueryMod) beneficiaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Beneficiary`.`debtor_account_owner_id`=?", o.AccountOwnerID),
	)

	query := Beneficiaries(queryMods...)
	queries.SetFrom(query.Query, "`Beneficiary`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Beneficiary`.*"})
	}

	return query
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOwnerL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOwner interface{}, mods queries.Applicator) error {
	var slice []*AccountOwner
	var object *AccountOwner

	if singular {
		object = maybeAccountOwner.(*AccountOwner)
	} else {
		slice = *maybeAccountOwner.(*[]*AccountOwner)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOwnerR{}
		}
		args = append(args, object.BankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOwnerR{}
			}

			for _, a := range args {
				if a == obj.BankID {
					continue Outer
				}
			}

			args = append(args, obj.BankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Banks`), qm.WhereIn(`bank_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Banks")
	}

	if len(accountOwnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.BankAccountOwners = append(foreign.R.BankAccountOwners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.BankID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.BankAccountOwners = append(foreign.R.BankAccountOwners, local)
				break
			}
		}
	}

	return nil
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOwnerL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOwner interface{}, mods queries.Applicator) error {
	var slice []*AccountOwner
	var object *AccountOwner

	if singular {
		object = maybeAccountOwner.(*AccountOwner)
	} else {
		slice = *maybeAccountOwner.(*[]*AccountOwner)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOwnerR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOwnerR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Account`), qm.WhereIn(`account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Account")
	}

	if len(accountOwnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountAccountOwners = append(foreign.R.AccountAccountOwners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.AccountID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountAccountOwners = append(foreign.R.AccountAccountOwners, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOwnerL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOwner interface{}, mods queries.Applicator) error {
	var slice []*AccountOwner
	var object *AccountOwner

	if singular {
		object = maybeAccountOwner.(*AccountOwner)
	} else {
		slice = *maybeAccountOwner.(*[]*AccountOwner)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOwnerR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOwnerR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(accountOwnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyAccountOwners = append(foreign.R.PartyAccountOwners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyAccountOwners = append(foreign.R.PartyAccountOwners, local)
				break
			}
		}
	}

	return nil
}

// LoadDebtorAccountOwnerBeneficiaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountOwnerL) LoadDebtorAccountOwnerBeneficiaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOwner interface{}, mods queries.Applicator) error {
	var slice []*AccountOwner
	var object *AccountOwner

	if singular {
		object = maybeAccountOwner.(*AccountOwner)
	} else {
		slice = *maybeAccountOwner.(*[]*AccountOwner)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOwnerR{}
		}
		args = append(args, object.AccountOwnerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOwnerR{}
			}

			for _, a := range args {
				if a == obj.AccountOwnerID {
					continue Outer
				}
			}

			args = append(args, obj.AccountOwnerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Beneficiary`), qm.WhereIn(`debtor_account_owner_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Beneficiary")
	}

	var resultSlice []*Beneficiary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Beneficiary")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Beneficiary")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Beneficiary")
	}

	if len(beneficiaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DebtorAccountOwnerBeneficiaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &beneficiaryR{}
			}
			foreign.R.DebtorAccountOwner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AccountOwnerID == foreign.DebtorAccountOwnerID {
				local.R.DebtorAccountOwnerBeneficiaries = append(local.R.DebtorAccountOwnerBeneficiaries, foreign)
				if foreign.R == nil {
					foreign.R = &beneficiaryR{}
				}
				foreign.R.DebtorAccountOwner = local
				break
			}
		}
	}

	return nil
}

// SetBank of the accountOwner to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.BankAccountOwners.
func (o *AccountOwner) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `AccountOwners` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"bank_id"}),
		strmangle.WhereClause("`", "`", 0, accountOwnerPrimaryKeyColumns),
	)
	values := []interface{}{related.BankID, o.AccountOwnerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.BankID
	if o.R == nil {
		o.R = &accountOwnerR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			BankAccountOwners: AccountOwnerSlice{o},
		}
	} else {
		related.R.BankAccountOwners = append(related.R.BankAccountOwners, o)
	}

	return nil
}

// SetAccount of the accountOwner to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountAccountOwners.
func (o *AccountOwner) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `AccountOwners` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"account_id"}),
		strmangle.WhereClause("`", "`", 0, accountOwnerPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountID, o.AccountOwnerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.AccountID
	if o.R == nil {
		o.R = &accountOwnerR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountAccountOwners: AccountOwnerSlice{o},
		}
	} else {
		related.R.AccountAccountOwners = append(related.R.AccountAccountOwners, o)
	}

	return nil
}

// SetParty of the accountOwner to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyAccountOwners.
func (o *AccountOwner) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `AccountOwners` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, accountOwnerPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.AccountOwnerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &accountOwnerR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyAccountOwners: AccountOwnerSlice{o},
		}
	} else {
		related.R.PartyAccountOwners = append(related.R.PartyAccountOwners, o)
	}

	return nil
}

// AddDebtorAccountOwnerBeneficiaries adds the given related objects to the existing relationships
// of the AccountOwner, optionally inserting them as new records.
// Appends related to o.R.DebtorAccountOwnerBeneficiaries.
// Sets related.R.DebtorAccountOwner appropriately.
func (o *AccountOwner) AddDebtorAccountOwnerBeneficiaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Beneficiary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DebtorAccountOwnerID = o.AccountOwnerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Beneficiary` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"debtor_account_owner_id"}),
				strmangle.WhereClause("`", "`", 0, beneficiaryPrimaryKeyColumns),
			)
			values := []interface{}{o.AccountOwnerID, rel.BeneficiaryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DebtorAccountOwnerID = o.AccountOwnerID
		}
	}

	if o.R == nil {
		o.R = &accountOwnerR{
			DebtorAccountOwnerBeneficiaries: related,
		}
	} else {
		o.R.DebtorAccountOwnerBeneficiaries = append(o.R.DebtorAccountOwnerBeneficiaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &beneficiaryR{
				DebtorAccountOwner: o,
			}
		} else {
			rel.R.DebtorAccountOwner = o
		}
	}
	return nil
}

// AccountOwners retrieves all the records using an executor.
func AccountOwners(mods ...qm.QueryMod) accountOwnerQuery {
	mods = append(mods, qm.From("`AccountOwners`"))
	return accountOwnerQuery{NewQuery(mods...)}
}

// FindAccountOwner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountOwner(ctx context.Context, exec boil.ContextExecutor, accountOwnerID int, selectCols ...string) (*AccountOwner, error) {
	accountOwnerObj := &AccountOwner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `AccountOwners` where `account_owner_id`=?", sel,
	)

	q := queries.Raw(query, accountOwnerID)

	err := q.Bind(ctx, exec, accountOwnerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AccountOwners")
	}

	return accountOwnerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountOwner) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AccountOwners provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOwnerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountOwnerInsertCacheMut.RLock()
	cache, cached := accountOwnerInsertCache[key]
	accountOwnerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountOwnerColumns,
			accountOwnerColumnsWithDefault,
			accountOwnerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `AccountOwners` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `AccountOwners` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `AccountOwners` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, accountOwnerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AccountOwners")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AccountOwnerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == accountOwnerMapping["AccountOwnerID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AccountOwnerID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AccountOwners")
	}

CacheNoHooks:
	if !cached {
		accountOwnerInsertCacheMut.Lock()
		accountOwnerInsertCache[key] = cache
		accountOwnerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AccountOwner.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountOwner) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountOwnerUpdateCacheMut.RLock()
	cache, cached := accountOwnerUpdateCache[key]
	accountOwnerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountOwnerColumns,
			accountOwnerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AccountOwners, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `AccountOwners` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, accountOwnerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, append(wl, accountOwnerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AccountOwners row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AccountOwners")
	}

	if !cached {
		accountOwnerUpdateCacheMut.Lock()
		accountOwnerUpdateCache[key] = cache
		accountOwnerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountOwnerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AccountOwners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AccountOwners")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountOwnerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOwnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `AccountOwners` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountOwnerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountOwner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountOwner")
	}
	return rowsAff, nil
}

var mySQLAccountOwnerUniqueColumns = []string{
	"account_owner_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountOwner) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AccountOwners provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOwnerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAccountOwnerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountOwnerUpsertCacheMut.RLock()
	cache, cached := accountOwnerUpsertCache[key]
	accountOwnerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountOwnerColumns,
			accountOwnerColumnsWithDefault,
			accountOwnerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			accountOwnerColumns,
			accountOwnerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert AccountOwners, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "AccountOwners", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `AccountOwners` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for AccountOwners")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.AccountOwnerID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == accountOwnerMapping["account_owner_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(accountOwnerType, accountOwnerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for AccountOwners")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for AccountOwners")
	}

CacheNoHooks:
	if !cached {
		accountOwnerUpsertCacheMut.Lock()
		accountOwnerUpsertCache[key] = cache
		accountOwnerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AccountOwner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountOwner) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountOwner provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountOwnerPrimaryKeyMapping)
	sql := "DELETE FROM `AccountOwners` WHERE `account_owner_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AccountOwners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AccountOwners")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountOwnerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountOwnerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AccountOwners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AccountOwners")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountOwnerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountOwner slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(accountOwnerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOwnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `AccountOwners` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountOwnerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountOwner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AccountOwners")
	}

	if len(accountOwnerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountOwner) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountOwner(ctx, exec, o.AccountOwnerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountOwnerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountOwnerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOwnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `AccountOwners`.* FROM `AccountOwners` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountOwnerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountOwnerSlice")
	}

	*o = slice

	return nil
}

// AccountOwnerExists checks if the AccountOwner row exists.
func AccountOwnerExists(ctx context.Context, exec boil.ContextExecutor, accountOwnerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `AccountOwners` where `account_owner_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, accountOwnerID)
	}

	row := exec.QueryRowContext(ctx, sql, accountOwnerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AccountOwners exists")
	}

	return exists, nil
}
