// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Document is an object representing the database table.
type Document struct {
	DocumentID                        int         `boil:"document_id" json:"document_id" toml:"document_id" yaml:"document_id"`
	DocumentHolderPartyID             null.Int    `boil:"document_holder_party_id" json:"document_holder_party_id,omitempty" toml:"document_holder_party_id" yaml:"document_holder_party_id,omitempty"`
	TradeID                           null.Int    `boil:"trade_id" json:"trade_id,omitempty" toml:"trade_id" yaml:"trade_id,omitempty"`
	DocumentName                      string      `boil:"document_name" json:"document_name" toml:"document_name" yaml:"document_name"`
	DocumentTypeID                    int         `boil:"document_type_id" json:"document_type_id" toml:"document_type_id" yaml:"document_type_id"`
	DocumentSize                      null.Int    `boil:"document_size" json:"document_size,omitempty" toml:"document_size" yaml:"document_size,omitempty"`
	DocumentOriginalFilename          string      `boil:"document_original_filename" json:"document_original_filename" toml:"document_original_filename" yaml:"document_original_filename"`
	DocumentLocation                  string      `boil:"document_location" json:"document_location" toml:"document_location" yaml:"document_location"`
	Description                       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ToPartyNameInDocument             null.String `boil:"to_party_name_in_document" json:"to_party_name_in_document,omitempty" toml:"to_party_name_in_document" yaml:"to_party_name_in_document,omitempty"`
	ToPartyAddressInDocument          null.String `boil:"to_party_address_in_document" json:"to_party_address_in_document,omitempty" toml:"to_party_address_in_document" yaml:"to_party_address_in_document,omitempty"`
	ToPartyPincodeInDocument          null.String `boil:"to_party_pincode_in_document" json:"to_party_pincode_in_document,omitempty" toml:"to_party_pincode_in_document" yaml:"to_party_pincode_in_document,omitempty"`
	ToPartyCountryInDocument          null.String `boil:"to_party_country_in_document" json:"to_party_country_in_document,omitempty" toml:"to_party_country_in_document" yaml:"to_party_country_in_document,omitempty"`
	FromPartyNameInDocument           null.String `boil:"from_party_name_in_document" json:"from_party_name_in_document,omitempty" toml:"from_party_name_in_document" yaml:"from_party_name_in_document,omitempty"`
	FromPartyAddressInDocument        null.String `boil:"from_party_address_in_document" json:"from_party_address_in_document,omitempty" toml:"from_party_address_in_document" yaml:"from_party_address_in_document,omitempty"`
	FromOrganizationPincodeInDocument null.String `boil:"from_organization_pincode_in_document" json:"from_organization_pincode_in_document,omitempty" toml:"from_organization_pincode_in_document" yaml:"from_organization_pincode_in_document,omitempty"`
	FromOrganizationCountryInDocument null.String `boil:"from_organization_country_in_document" json:"from_organization_country_in_document,omitempty" toml:"from_organization_country_in_document" yaml:"from_organization_country_in_document,omitempty"`
	Reference                         string      `boil:"reference" json:"reference" toml:"reference" yaml:"reference"`
	ReferenceDate                     null.Time   `boil:"reference_date" json:"reference_date,omitempty" toml:"reference_date" yaml:"reference_date,omitempty"`
	BankID                            int         `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate                         time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate                       null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID                           string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID                         null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy                        null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate                      null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *documentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L documentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DocumentColumns = struct {
	DocumentID                        string
	DocumentHolderPartyID             string
	TradeID                           string
	DocumentName                      string
	DocumentTypeID                    string
	DocumentSize                      string
	DocumentOriginalFilename          string
	DocumentLocation                  string
	Description                       string
	ToPartyNameInDocument             string
	ToPartyAddressInDocument          string
	ToPartyPincodeInDocument          string
	ToPartyCountryInDocument          string
	FromPartyNameInDocument           string
	FromPartyAddressInDocument        string
	FromOrganizationPincodeInDocument string
	FromOrganizationCountryInDocument string
	Reference                         string
	ReferenceDate                     string
	BankID                            string
	MakerDate                         string
	CheckerDate                       string
	MakerID                           string
	CheckerID                         string
	ModifiedBy                        string
	ModifiedDate                      string
}{
	DocumentID:                        "document_id",
	DocumentHolderPartyID:             "document_holder_party_id",
	TradeID:                           "trade_id",
	DocumentName:                      "document_name",
	DocumentTypeID:                    "document_type_id",
	DocumentSize:                      "document_size",
	DocumentOriginalFilename:          "document_original_filename",
	DocumentLocation:                  "document_location",
	Description:                       "description",
	ToPartyNameInDocument:             "to_party_name_in_document",
	ToPartyAddressInDocument:          "to_party_address_in_document",
	ToPartyPincodeInDocument:          "to_party_pincode_in_document",
	ToPartyCountryInDocument:          "to_party_country_in_document",
	FromPartyNameInDocument:           "from_party_name_in_document",
	FromPartyAddressInDocument:        "from_party_address_in_document",
	FromOrganizationPincodeInDocument: "from_organization_pincode_in_document",
	FromOrganizationCountryInDocument: "from_organization_country_in_document",
	Reference:                         "reference",
	ReferenceDate:                     "reference_date",
	BankID:                            "bank_id",
	MakerDate:                         "maker_date",
	CheckerDate:                       "checker_date",
	MakerID:                           "maker_id",
	CheckerID:                         "checker_id",
	ModifiedBy:                        "modified_by",
	ModifiedDate:                      "modified_date",
}

// Generated where

var DocumentWhere = struct {
	DocumentID                        whereHelperint
	DocumentHolderPartyID             whereHelpernull_Int
	TradeID                           whereHelpernull_Int
	DocumentName                      whereHelperstring
	DocumentTypeID                    whereHelperint
	DocumentSize                      whereHelpernull_Int
	DocumentOriginalFilename          whereHelperstring
	DocumentLocation                  whereHelperstring
	Description                       whereHelpernull_String
	ToPartyNameInDocument             whereHelpernull_String
	ToPartyAddressInDocument          whereHelpernull_String
	ToPartyPincodeInDocument          whereHelpernull_String
	ToPartyCountryInDocument          whereHelpernull_String
	FromPartyNameInDocument           whereHelpernull_String
	FromPartyAddressInDocument        whereHelpernull_String
	FromOrganizationPincodeInDocument whereHelpernull_String
	FromOrganizationCountryInDocument whereHelpernull_String
	Reference                         whereHelperstring
	ReferenceDate                     whereHelpernull_Time
	BankID                            whereHelperint
	MakerDate                         whereHelpertime_Time
	CheckerDate                       whereHelpernull_Time
	MakerID                           whereHelperstring
	CheckerID                         whereHelpernull_String
	ModifiedBy                        whereHelpernull_String
	ModifiedDate                      whereHelpernull_Time
}{
	DocumentID:                        whereHelperint{field: `document_id`},
	DocumentHolderPartyID:             whereHelpernull_Int{field: `document_holder_party_id`},
	TradeID:                           whereHelpernull_Int{field: `trade_id`},
	DocumentName:                      whereHelperstring{field: `document_name`},
	DocumentTypeID:                    whereHelperint{field: `document_type_id`},
	DocumentSize:                      whereHelpernull_Int{field: `document_size`},
	DocumentOriginalFilename:          whereHelperstring{field: `document_original_filename`},
	DocumentLocation:                  whereHelperstring{field: `document_location`},
	Description:                       whereHelpernull_String{field: `description`},
	ToPartyNameInDocument:             whereHelpernull_String{field: `to_party_name_in_document`},
	ToPartyAddressInDocument:          whereHelpernull_String{field: `to_party_address_in_document`},
	ToPartyPincodeInDocument:          whereHelpernull_String{field: `to_party_pincode_in_document`},
	ToPartyCountryInDocument:          whereHelpernull_String{field: `to_party_country_in_document`},
	FromPartyNameInDocument:           whereHelpernull_String{field: `from_party_name_in_document`},
	FromPartyAddressInDocument:        whereHelpernull_String{field: `from_party_address_in_document`},
	FromOrganizationPincodeInDocument: whereHelpernull_String{field: `from_organization_pincode_in_document`},
	FromOrganizationCountryInDocument: whereHelpernull_String{field: `from_organization_country_in_document`},
	Reference:                         whereHelperstring{field: `reference`},
	ReferenceDate:                     whereHelpernull_Time{field: `reference_date`},
	BankID:                            whereHelperint{field: `bank_id`},
	MakerDate:                         whereHelpertime_Time{field: `maker_date`},
	CheckerDate:                       whereHelpernull_Time{field: `checker_date`},
	MakerID:                           whereHelperstring{field: `maker_id`},
	CheckerID:                         whereHelpernull_String{field: `checker_id`},
	ModifiedBy:                        whereHelpernull_String{field: `modified_by`},
	ModifiedDate:                      whereHelpernull_Time{field: `modified_date`},
}

// DocumentRels is where relationship names are stored.
var DocumentRels = struct {
	DocumentHolderParty         string
	ProofOfAddressDocumentKYCS  string
	ProofOfIdentityDocumentKYCS string
	DocumentNotifications       string
}{
	DocumentHolderParty:         "DocumentHolderParty",
	ProofOfAddressDocumentKYCS:  "ProofOfAddressDocumentKYCS",
	ProofOfIdentityDocumentKYCS: "ProofOfIdentityDocumentKYCS",
	DocumentNotifications:       "DocumentNotifications",
}

// documentR is where relationships are stored.
type documentR struct {
	DocumentHolderParty         *Party
	ProofOfAddressDocumentKYCS  KYCSlice
	ProofOfIdentityDocumentKYCS KYCSlice
	DocumentNotifications       NotificationSlice
}

// NewStruct creates a new relationship struct
func (*documentR) NewStruct() *documentR {
	return &documentR{}
}

// documentL is where Load methods for each relationship are stored.
type documentL struct{}

var (
	documentColumns               = []string{"document_id", "document_holder_party_id", "trade_id", "document_name", "document_type_id", "document_size", "document_original_filename", "document_location", "description", "to_party_name_in_document", "to_party_address_in_document", "to_party_pincode_in_document", "to_party_country_in_document", "from_party_name_in_document", "from_party_address_in_document", "from_organization_pincode_in_document", "from_organization_country_in_document", "reference", "reference_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	documentColumnsWithoutDefault = []string{"document_holder_party_id", "trade_id", "document_name", "document_type_id", "document_size", "document_original_filename", "document_location", "description", "to_party_name_in_document", "to_party_address_in_document", "to_party_pincode_in_document", "to_party_country_in_document", "from_party_name_in_document", "from_party_address_in_document", "from_organization_pincode_in_document", "from_organization_country_in_document", "reference", "reference_date", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	documentColumnsWithDefault    = []string{"document_id"}
	documentPrimaryKeyColumns     = []string{"document_id"}
)

type (
	// DocumentSlice is an alias for a slice of pointers to Document.
	// This should generally be used opposed to []Document.
	DocumentSlice []*Document
	// DocumentHook is the signature for custom Document hook methods
	DocumentHook func(context.Context, boil.ContextExecutor, *Document) error

	documentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	documentType                 = reflect.TypeOf(&Document{})
	documentMapping              = queries.MakeStructMapping(documentType)
	documentPrimaryKeyMapping, _ = queries.BindMapping(documentType, documentMapping, documentPrimaryKeyColumns)
	documentInsertCacheMut       sync.RWMutex
	documentInsertCache          = make(map[string]insertCache)
	documentUpdateCacheMut       sync.RWMutex
	documentUpdateCache          = make(map[string]updateCache)
	documentUpsertCacheMut       sync.RWMutex
	documentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var documentBeforeInsertHooks []DocumentHook
var documentBeforeUpdateHooks []DocumentHook
var documentBeforeDeleteHooks []DocumentHook
var documentBeforeUpsertHooks []DocumentHook

var documentAfterInsertHooks []DocumentHook
var documentAfterSelectHooks []DocumentHook
var documentAfterUpdateHooks []DocumentHook
var documentAfterDeleteHooks []DocumentHook
var documentAfterUpsertHooks []DocumentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Document) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Document) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Document) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Document) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Document) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Document) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Document) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Document) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Document) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range documentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDocumentHook registers your hook function for all future operations.
func AddDocumentHook(hookPoint boil.HookPoint, documentHook DocumentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		documentBeforeInsertHooks = append(documentBeforeInsertHooks, documentHook)
	case boil.BeforeUpdateHook:
		documentBeforeUpdateHooks = append(documentBeforeUpdateHooks, documentHook)
	case boil.BeforeDeleteHook:
		documentBeforeDeleteHooks = append(documentBeforeDeleteHooks, documentHook)
	case boil.BeforeUpsertHook:
		documentBeforeUpsertHooks = append(documentBeforeUpsertHooks, documentHook)
	case boil.AfterInsertHook:
		documentAfterInsertHooks = append(documentAfterInsertHooks, documentHook)
	case boil.AfterSelectHook:
		documentAfterSelectHooks = append(documentAfterSelectHooks, documentHook)
	case boil.AfterUpdateHook:
		documentAfterUpdateHooks = append(documentAfterUpdateHooks, documentHook)
	case boil.AfterDeleteHook:
		documentAfterDeleteHooks = append(documentAfterDeleteHooks, documentHook)
	case boil.AfterUpsertHook:
		documentAfterUpsertHooks = append(documentAfterUpsertHooks, documentHook)
	}
}

// One returns a single document record from the query.
func (q documentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Document, error) {
	o := &Document{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Document")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Document records from the query.
func (q documentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DocumentSlice, error) {
	var o []*Document

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Document slice")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Document records in the query.
func (q documentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Document rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q documentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Document exists")
	}

	return count > 0, nil
}

// DocumentHolderParty pointed to by the foreign key.
func (o *Document) DocumentHolderParty(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.DocumentHolderPartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// ProofOfAddressDocumentKYCS retrieves all the KYC's KYCS with an executor via proof_of_address_document_id column.
func (o *Document) ProofOfAddressDocumentKYCS(mods ...qm.QueryMod) kYCQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`KYC`.`proof_of_address_document_id`=?", o.DocumentID),
	)

	query := KYCS(queryMods...)
	queries.SetFrom(query.Query, "`KYC`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`KYC`.*"})
	}

	return query
}

// ProofOfIdentityDocumentKYCS retrieves all the KYC's KYCS with an executor via proof_of_identity_document_id column.
func (o *Document) ProofOfIdentityDocumentKYCS(mods ...qm.QueryMod) kYCQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`KYC`.`proof_of_identity_document_id`=?", o.DocumentID),
	)

	query := KYCS(queryMods...)
	queries.SetFrom(query.Query, "`KYC`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`KYC`.*"})
	}

	return query
}

// DocumentNotifications retrieves all the Notification's Notifications with an executor via document_id column.
func (o *Document) DocumentNotifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Notifications`.`document_id`=?", o.DocumentID),
	)

	query := Notifications(queryMods...)
	queries.SetFrom(query.Query, "`Notifications`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Notifications`.*"})
	}

	return query
}

// LoadDocumentHolderParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (documentL) LoadDocumentHolderParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		if !queries.IsNil(object.DocumentHolderPartyID) {
			args = append(args, object.DocumentHolderPartyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocumentHolderPartyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DocumentHolderPartyID) {
				args = append(args, obj.DocumentHolderPartyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocumentHolderParty = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.DocumentHolderPartyDocuments = append(foreign.R.DocumentHolderPartyDocuments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DocumentHolderPartyID, foreign.PartyID) {
				local.R.DocumentHolderParty = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.DocumentHolderPartyDocuments = append(foreign.R.DocumentHolderPartyDocuments, local)
				break
			}
		}
	}

	return nil
}

// LoadProofOfAddressDocumentKYCS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (documentL) LoadProofOfAddressDocumentKYCS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args = append(args, object.DocumentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if a == obj.DocumentID {
					continue Outer
				}
			}

			args = append(args, obj.DocumentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`KYC`), qm.WhereIn(`proof_of_address_document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load KYC")
	}

	var resultSlice []*KYC
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice KYC")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on KYC")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for KYC")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProofOfAddressDocumentKYCS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &kYCR{}
			}
			foreign.R.ProofOfAddressDocument = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocumentID == foreign.ProofOfAddressDocumentID {
				local.R.ProofOfAddressDocumentKYCS = append(local.R.ProofOfAddressDocumentKYCS, foreign)
				if foreign.R == nil {
					foreign.R = &kYCR{}
				}
				foreign.R.ProofOfAddressDocument = local
				break
			}
		}
	}

	return nil
}

// LoadProofOfIdentityDocumentKYCS allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (documentL) LoadProofOfIdentityDocumentKYCS(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args = append(args, object.DocumentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if a == obj.DocumentID {
					continue Outer
				}
			}

			args = append(args, obj.DocumentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`KYC`), qm.WhereIn(`proof_of_identity_document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load KYC")
	}

	var resultSlice []*KYC
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice KYC")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on KYC")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for KYC")
	}

	if len(kYCAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProofOfIdentityDocumentKYCS = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &kYCR{}
			}
			foreign.R.ProofOfIdentityDocument = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DocumentID == foreign.ProofOfIdentityDocumentID {
				local.R.ProofOfIdentityDocumentKYCS = append(local.R.ProofOfIdentityDocumentKYCS, foreign)
				if foreign.R == nil {
					foreign.R = &kYCR{}
				}
				foreign.R.ProofOfIdentityDocument = local
				break
			}
		}
	}

	return nil
}

// LoadDocumentNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (documentL) LoadDocumentNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDocument interface{}, mods queries.Applicator) error {
	var slice []*Document
	var object *Document

	if singular {
		object = maybeDocument.(*Document)
	} else {
		slice = *maybeDocument.(*[]*Document)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &documentR{}
		}
		args = append(args, object.DocumentID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &documentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocumentID) {
					continue Outer
				}
			}

			args = append(args, obj.DocumentID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Notifications`), qm.WhereIn(`document_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notifications")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Notifications")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DocumentNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.Document = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.DocumentID, foreign.DocumentID) {
				local.R.DocumentNotifications = append(local.R.DocumentNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.Document = local
				break
			}
		}
	}

	return nil
}

// SetDocumentHolderParty of the document to the related item.
// Sets o.R.DocumentHolderParty to related.
// Adds o to related.R.DocumentHolderPartyDocuments.
func (o *Document) SetDocumentHolderParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `Document` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"document_holder_party_id"}),
		strmangle.WhereClause("`", "`", 0, documentPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.DocumentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DocumentHolderPartyID, related.PartyID)
	if o.R == nil {
		o.R = &documentR{
			DocumentHolderParty: related,
		}
	} else {
		o.R.DocumentHolderParty = related
	}

	if related.R == nil {
		related.R = &partyR{
			DocumentHolderPartyDocuments: DocumentSlice{o},
		}
	} else {
		related.R.DocumentHolderPartyDocuments = append(related.R.DocumentHolderPartyDocuments, o)
	}

	return nil
}

// RemoveDocumentHolderParty relationship.
// Sets o.R.DocumentHolderParty to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Document) RemoveDocumentHolderParty(ctx context.Context, exec boil.ContextExecutor, related *Party) error {
	var err error

	queries.SetScanner(&o.DocumentHolderPartyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("document_holder_party_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DocumentHolderParty = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DocumentHolderPartyDocuments {
		if queries.Equal(o.DocumentHolderPartyID, ri.DocumentHolderPartyID) {
			continue
		}

		ln := len(related.R.DocumentHolderPartyDocuments)
		if ln > 1 && i < ln-1 {
			related.R.DocumentHolderPartyDocuments[i] = related.R.DocumentHolderPartyDocuments[ln-1]
		}
		related.R.DocumentHolderPartyDocuments = related.R.DocumentHolderPartyDocuments[:ln-1]
		break
	}
	return nil
}

// AddProofOfAddressDocumentKYCS adds the given related objects to the existing relationships
// of the Document, optionally inserting them as new records.
// Appends related to o.R.ProofOfAddressDocumentKYCS.
// Sets related.R.ProofOfAddressDocument appropriately.
func (o *Document) AddProofOfAddressDocumentKYCS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KYC) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProofOfAddressDocumentID = o.DocumentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `KYC` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"proof_of_address_document_id"}),
				strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
			)
			values := []interface{}{o.DocumentID, rel.KycNumber}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProofOfAddressDocumentID = o.DocumentID
		}
	}

	if o.R == nil {
		o.R = &documentR{
			ProofOfAddressDocumentKYCS: related,
		}
	} else {
		o.R.ProofOfAddressDocumentKYCS = append(o.R.ProofOfAddressDocumentKYCS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &kYCR{
				ProofOfAddressDocument: o,
			}
		} else {
			rel.R.ProofOfAddressDocument = o
		}
	}
	return nil
}

// AddProofOfIdentityDocumentKYCS adds the given related objects to the existing relationships
// of the Document, optionally inserting them as new records.
// Appends related to o.R.ProofOfIdentityDocumentKYCS.
// Sets related.R.ProofOfIdentityDocument appropriately.
func (o *Document) AddProofOfIdentityDocumentKYCS(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KYC) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProofOfIdentityDocumentID = o.DocumentID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `KYC` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"proof_of_identity_document_id"}),
				strmangle.WhereClause("`", "`", 0, kYCPrimaryKeyColumns),
			)
			values := []interface{}{o.DocumentID, rel.KycNumber}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProofOfIdentityDocumentID = o.DocumentID
		}
	}

	if o.R == nil {
		o.R = &documentR{
			ProofOfIdentityDocumentKYCS: related,
		}
	} else {
		o.R.ProofOfIdentityDocumentKYCS = append(o.R.ProofOfIdentityDocumentKYCS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &kYCR{
				ProofOfIdentityDocument: o,
			}
		} else {
			rel.R.ProofOfIdentityDocument = o
		}
	}
	return nil
}

// AddDocumentNotifications adds the given related objects to the existing relationships
// of the Document, optionally inserting them as new records.
// Appends related to o.R.DocumentNotifications.
// Sets related.R.Document appropriately.
func (o *Document) AddDocumentNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocumentID, o.DocumentID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Notifications` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"document_id"}),
				strmangle.WhereClause("`", "`", 0, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.DocumentID, rel.MSGID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocumentID, o.DocumentID)
		}
	}

	if o.R == nil {
		o.R = &documentR{
			DocumentNotifications: related,
		}
	} else {
		o.R.DocumentNotifications = append(o.R.DocumentNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Document: o,
			}
		} else {
			rel.R.Document = o
		}
	}
	return nil
}

// SetDocumentNotifications removes all previously related items of the
// Document replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Document's DocumentNotifications accordingly.
// Replaces o.R.DocumentNotifications with related.
// Sets related.R.Document's DocumentNotifications accordingly.
func (o *Document) SetDocumentNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	query := "update `Notifications` set `document_id` = null where `document_id` = ?"
	values := []interface{}{o.DocumentID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DocumentNotifications {
			queries.SetScanner(&rel.DocumentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Document = nil
		}

		o.R.DocumentNotifications = nil
	}
	return o.AddDocumentNotifications(ctx, exec, insert, related...)
}

// RemoveDocumentNotifications relationships from objects passed in.
// Removes related items from R.DocumentNotifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Document.
func (o *Document) RemoveDocumentNotifications(ctx context.Context, exec boil.ContextExecutor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocumentID, nil)
		if rel.R != nil {
			rel.R.Document = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("document_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocumentNotifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocumentNotifications)
			if ln > 1 && i < ln-1 {
				o.R.DocumentNotifications[i] = o.R.DocumentNotifications[ln-1]
			}
			o.R.DocumentNotifications = o.R.DocumentNotifications[:ln-1]
			break
		}
	}

	return nil
}

// Documents retrieves all the records using an executor.
func Documents(mods ...qm.QueryMod) documentQuery {
	mods = append(mods, qm.From("`Document`"))
	return documentQuery{NewQuery(mods...)}
}

// FindDocument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDocument(ctx context.Context, exec boil.ContextExecutor, documentID int, selectCols ...string) (*Document, error) {
	documentObj := &Document{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Document` where `document_id`=?", sel,
	)

	q := queries.Raw(query, documentID)

	err := q.Bind(ctx, exec, documentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Document")
	}

	return documentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Document) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Document provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	documentInsertCacheMut.RLock()
	cache, cached := documentInsertCache[key]
	documentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			documentColumns,
			documentColumnsWithDefault,
			documentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(documentType, documentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Document` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Document` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Document` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, documentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Document")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DocumentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == documentMapping["DocumentID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DocumentID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Document")
	}

CacheNoHooks:
	if !cached {
		documentInsertCacheMut.Lock()
		documentInsertCache[key] = cache
		documentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Document.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Document) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	documentUpdateCacheMut.RLock()
	cache, cached := documentUpdateCache[key]
	documentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			documentColumns,
			documentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Document, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Document` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, documentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, append(wl, documentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Document row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Document")
	}

	if !cached {
		documentUpdateCacheMut.Lock()
		documentUpdateCache[key] = cache
		documentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q documentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Document")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DocumentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Document` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in document slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all document")
	}
	return rowsAff, nil
}

var mySQLDocumentUniqueColumns = []string{
	"document_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Document) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Document provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(documentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDocumentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	documentUpsertCacheMut.RLock()
	cache, cached := documentUpsertCache[key]
	documentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			documentColumns,
			documentColumnsWithDefault,
			documentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			documentColumns,
			documentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert Document, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "Document", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Document` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(documentType, documentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(documentType, documentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for Document")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.DocumentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == documentMapping["document_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(documentType, documentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for Document")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for Document")
	}

CacheNoHooks:
	if !cached {
		documentUpsertCacheMut.Lock()
		documentUpsertCache[key] = cache
		documentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Document record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Document) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Document provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), documentPrimaryKeyMapping)
	sql := "DELETE FROM `Document` WHERE `document_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Document")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q documentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no documentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Document")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DocumentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Document slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(documentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Document` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from document slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Document")
	}

	if len(documentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Document) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDocument(ctx, exec, o.DocumentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DocumentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DocumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), documentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Document`.* FROM `Document` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, documentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DocumentSlice")
	}

	*o = slice

	return nil
}

// DocumentExists checks if the Document row exists.
func DocumentExists(ctx context.Context, exec boil.ContextExecutor, documentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Document` where `document_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, documentID)
	}

	row := exec.QueryRowContext(ctx, sql, documentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Document exists")
	}

	return exists, nil
}
