// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrganizationType is an object representing the database table.
type OrganizationType struct {
	OrganizationTypeID  int         `boil:"organization_type_id" json:"organization_type_id" toml:"organization_type_id" yaml:"organization_type_id"`
	IndustryTypeName    string      `boil:"industry_type_name" json:"industry_type_name" toml:"industry_type_name" yaml:"industry_type_name"`
	IndustrySubTypeName string      `boil:"industry_sub_type_name" json:"industry_sub_type_name" toml:"industry_sub_type_name" yaml:"industry_sub_type_name"`
	Description         string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	MakerDate           time.Time   `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate         null.Time   `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID             string      `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID           null.String `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy          null.String `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate        null.Time   `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *organizationTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationTypeColumns = struct {
	OrganizationTypeID  string
	IndustryTypeName    string
	IndustrySubTypeName string
	Description         string
	MakerDate           string
	CheckerDate         string
	MakerID             string
	CheckerID           string
	ModifiedBy          string
	ModifiedDate        string
}{
	OrganizationTypeID:  "organization_type_id",
	IndustryTypeName:    "industry_type_name",
	IndustrySubTypeName: "industry_sub_type_name",
	Description:         "description",
	MakerDate:           "maker_date",
	CheckerDate:         "checker_date",
	MakerID:             "maker_id",
	CheckerID:           "checker_id",
	ModifiedBy:          "modified_by",
	ModifiedDate:        "modified_date",
}

// Generated where

var OrganizationTypeWhere = struct {
	OrganizationTypeID  whereHelperint
	IndustryTypeName    whereHelperstring
	IndustrySubTypeName whereHelperstring
	Description         whereHelperstring
	MakerDate           whereHelpertime_Time
	CheckerDate         whereHelpernull_Time
	MakerID             whereHelperstring
	CheckerID           whereHelpernull_String
	ModifiedBy          whereHelpernull_String
	ModifiedDate        whereHelpernull_Time
}{
	OrganizationTypeID:  whereHelperint{field: `organization_type_id`},
	IndustryTypeName:    whereHelperstring{field: `industry_type_name`},
	IndustrySubTypeName: whereHelperstring{field: `industry_sub_type_name`},
	Description:         whereHelperstring{field: `description`},
	MakerDate:           whereHelpertime_Time{field: `maker_date`},
	CheckerDate:         whereHelpernull_Time{field: `checker_date`},
	MakerID:             whereHelperstring{field: `maker_id`},
	CheckerID:           whereHelpernull_String{field: `checker_id`},
	ModifiedBy:          whereHelpernull_String{field: `modified_by`},
	ModifiedDate:        whereHelpernull_Time{field: `modified_date`},
}

// OrganizationTypeRels is where relationship names are stored.
var OrganizationTypeRels = struct {
	OrganizationTypeOrganizations string
}{
	OrganizationTypeOrganizations: "OrganizationTypeOrganizations",
}

// organizationTypeR is where relationships are stored.
type organizationTypeR struct {
	OrganizationTypeOrganizations OrganizationSlice
}

// NewStruct creates a new relationship struct
func (*organizationTypeR) NewStruct() *organizationTypeR {
	return &organizationTypeR{}
}

// organizationTypeL is where Load methods for each relationship are stored.
type organizationTypeL struct{}

var (
	organizationTypeColumns               = []string{"organization_type_id", "industry_type_name", "industry_sub_type_name", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationTypeColumnsWithoutDefault = []string{"industry_type_name", "industry_sub_type_name", "description", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	organizationTypeColumnsWithDefault    = []string{"organization_type_id"}
	organizationTypePrimaryKeyColumns     = []string{"organization_type_id"}
)

type (
	// OrganizationTypeSlice is an alias for a slice of pointers to OrganizationType.
	// This should generally be used opposed to []OrganizationType.
	OrganizationTypeSlice []*OrganizationType
	// OrganizationTypeHook is the signature for custom OrganizationType hook methods
	OrganizationTypeHook func(context.Context, boil.ContextExecutor, *OrganizationType) error

	organizationTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationTypeType                 = reflect.TypeOf(&OrganizationType{})
	organizationTypeMapping              = queries.MakeStructMapping(organizationTypeType)
	organizationTypePrimaryKeyMapping, _ = queries.BindMapping(organizationTypeType, organizationTypeMapping, organizationTypePrimaryKeyColumns)
	organizationTypeInsertCacheMut       sync.RWMutex
	organizationTypeInsertCache          = make(map[string]insertCache)
	organizationTypeUpdateCacheMut       sync.RWMutex
	organizationTypeUpdateCache          = make(map[string]updateCache)
	organizationTypeUpsertCacheMut       sync.RWMutex
	organizationTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationTypeBeforeInsertHooks []OrganizationTypeHook
var organizationTypeBeforeUpdateHooks []OrganizationTypeHook
var organizationTypeBeforeDeleteHooks []OrganizationTypeHook
var organizationTypeBeforeUpsertHooks []OrganizationTypeHook

var organizationTypeAfterInsertHooks []OrganizationTypeHook
var organizationTypeAfterSelectHooks []OrganizationTypeHook
var organizationTypeAfterUpdateHooks []OrganizationTypeHook
var organizationTypeAfterDeleteHooks []OrganizationTypeHook
var organizationTypeAfterUpsertHooks []OrganizationTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationTypeHook registers your hook function for all future operations.
func AddOrganizationTypeHook(hookPoint boil.HookPoint, organizationTypeHook OrganizationTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationTypeBeforeInsertHooks = append(organizationTypeBeforeInsertHooks, organizationTypeHook)
	case boil.BeforeUpdateHook:
		organizationTypeBeforeUpdateHooks = append(organizationTypeBeforeUpdateHooks, organizationTypeHook)
	case boil.BeforeDeleteHook:
		organizationTypeBeforeDeleteHooks = append(organizationTypeBeforeDeleteHooks, organizationTypeHook)
	case boil.BeforeUpsertHook:
		organizationTypeBeforeUpsertHooks = append(organizationTypeBeforeUpsertHooks, organizationTypeHook)
	case boil.AfterInsertHook:
		organizationTypeAfterInsertHooks = append(organizationTypeAfterInsertHooks, organizationTypeHook)
	case boil.AfterSelectHook:
		organizationTypeAfterSelectHooks = append(organizationTypeAfterSelectHooks, organizationTypeHook)
	case boil.AfterUpdateHook:
		organizationTypeAfterUpdateHooks = append(organizationTypeAfterUpdateHooks, organizationTypeHook)
	case boil.AfterDeleteHook:
		organizationTypeAfterDeleteHooks = append(organizationTypeAfterDeleteHooks, organizationTypeHook)
	case boil.AfterUpsertHook:
		organizationTypeAfterUpsertHooks = append(organizationTypeAfterUpsertHooks, organizationTypeHook)
	}
}

// One returns a single organizationType record from the query.
func (q organizationTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationType, error) {
	o := &OrganizationType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for OrganizationType")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationType records from the query.
func (q organizationTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationTypeSlice, error) {
	var o []*OrganizationType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationType slice")
	}

	if len(organizationTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationType records in the query.
func (q organizationTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count OrganizationType rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if OrganizationType exists")
	}

	return count > 0, nil
}

// OrganizationTypeOrganizations retrieves all the Organization's Organizations with an executor via organization_type_id column.
func (o *OrganizationType) OrganizationTypeOrganizations(mods ...qm.QueryMod) organizationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Organization`.`organization_type_id`=?", o.OrganizationTypeID),
	)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "`Organization`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Organization`.*"})
	}

	return query
}

// LoadOrganizationTypeOrganizations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationTypeL) LoadOrganizationTypeOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationType interface{}, mods queries.Applicator) error {
	var slice []*OrganizationType
	var object *OrganizationType

	if singular {
		object = maybeOrganizationType.(*OrganizationType)
	} else {
		slice = *maybeOrganizationType.(*[]*OrganizationType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationTypeR{}
		}
		args = append(args, object.OrganizationTypeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrganizationTypeID) {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationTypeID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Organization`), qm.WhereIn(`organization_type_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Organization")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationTypeOrganizations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationR{}
			}
			foreign.R.OrganizationType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrganizationTypeID, foreign.OrganizationTypeID) {
				local.R.OrganizationTypeOrganizations = append(local.R.OrganizationTypeOrganizations, foreign)
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrganizationType = local
				break
			}
		}
	}

	return nil
}

// AddOrganizationTypeOrganizations adds the given related objects to the existing relationships
// of the OrganizationType, optionally inserting them as new records.
// Appends related to o.R.OrganizationTypeOrganizations.
// Sets related.R.OrganizationType appropriately.
func (o *OrganizationType) AddOrganizationTypeOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrganizationTypeID, o.OrganizationTypeID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Organization` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"organization_type_id"}),
				strmangle.WhereClause("`", "`", 0, organizationPrimaryKeyColumns),
			)
			values := []interface{}{o.OrganizationTypeID, rel.PartyID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrganizationTypeID, o.OrganizationTypeID)
		}
	}

	if o.R == nil {
		o.R = &organizationTypeR{
			OrganizationTypeOrganizations: related,
		}
	} else {
		o.R.OrganizationTypeOrganizations = append(o.R.OrganizationTypeOrganizations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationR{
				OrganizationType: o,
			}
		} else {
			rel.R.OrganizationType = o
		}
	}
	return nil
}

// SetOrganizationTypeOrganizations removes all previously related items of the
// OrganizationType replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrganizationType's OrganizationTypeOrganizations accordingly.
// Replaces o.R.OrganizationTypeOrganizations with related.
// Sets related.R.OrganizationType's OrganizationTypeOrganizations accordingly.
func (o *OrganizationType) SetOrganizationTypeOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	query := "update `Organization` set `organization_type_id` = null where `organization_type_id` = ?"
	values := []interface{}{o.OrganizationTypeID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrganizationTypeOrganizations {
			queries.SetScanner(&rel.OrganizationTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrganizationType = nil
		}

		o.R.OrganizationTypeOrganizations = nil
	}
	return o.AddOrganizationTypeOrganizations(ctx, exec, insert, related...)
}

// RemoveOrganizationTypeOrganizations relationships from objects passed in.
// Removes related items from R.OrganizationTypeOrganizations (uses pointer comparison, removal does not keep order)
// Sets related.R.OrganizationType.
func (o *OrganizationType) RemoveOrganizationTypeOrganizations(ctx context.Context, exec boil.ContextExecutor, related ...*Organization) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrganizationTypeID, nil)
		if rel.R != nil {
			rel.R.OrganizationType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("organization_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrganizationTypeOrganizations {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrganizationTypeOrganizations)
			if ln > 1 && i < ln-1 {
				o.R.OrganizationTypeOrganizations[i] = o.R.OrganizationTypeOrganizations[ln-1]
			}
			o.R.OrganizationTypeOrganizations = o.R.OrganizationTypeOrganizations[:ln-1]
			break
		}
	}

	return nil
}

// OrganizationTypes retrieves all the records using an executor.
func OrganizationTypes(mods ...qm.QueryMod) organizationTypeQuery {
	mods = append(mods, qm.From("`OrganizationType`"))
	return organizationTypeQuery{NewQuery(mods...)}
}

// FindOrganizationType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationType(ctx context.Context, exec boil.ContextExecutor, organizationTypeID int, selectCols ...string) (*OrganizationType, error) {
	organizationTypeObj := &OrganizationType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `OrganizationType` where `organization_type_id`=?", sel,
	)

	q := queries.Raw(query, organizationTypeID)

	err := q.Bind(ctx, exec, organizationTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from OrganizationType")
	}

	return organizationTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationType provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationTypeInsertCacheMut.RLock()
	cache, cached := organizationTypeInsertCache[key]
	organizationTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationTypeColumns,
			organizationTypeColumnsWithDefault,
			organizationTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `OrganizationType` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `OrganizationType` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `OrganizationType` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, organizationTypePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into OrganizationType")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationTypeMapping["OrganizationTypeID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrganizationTypeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationType")
	}

CacheNoHooks:
	if !cached {
		organizationTypeInsertCacheMut.Lock()
		organizationTypeInsertCache[key] = cache
		organizationTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationTypeUpdateCacheMut.RLock()
	cache, cached := organizationTypeUpdateCache[key]
	organizationTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationTypeColumns,
			organizationTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update OrganizationType, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `OrganizationType` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, organizationTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, append(wl, organizationTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update OrganizationType row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for OrganizationType")
	}

	if !cached {
		organizationTypeUpdateCacheMut.Lock()
		organizationTypeUpdateCache[key] = cache
		organizationTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for OrganizationType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for OrganizationType")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `OrganizationType` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationType")
	}
	return rowsAff, nil
}

var mySQLOrganizationTypeUniqueColumns = []string{
	"organization_type_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OrganizationType provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationTypeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrganizationTypeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationTypeUpsertCacheMut.RLock()
	cache, cached := organizationTypeUpsertCache[key]
	organizationTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationTypeColumns,
			organizationTypeColumnsWithDefault,
			organizationTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationTypeColumns,
			organizationTypePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert OrganizationType, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "OrganizationType", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `OrganizationType` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for OrganizationType")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.OrganizationTypeID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationTypeMapping["organization_type_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(organizationTypeType, organizationTypeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for OrganizationType")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for OrganizationType")
	}

CacheNoHooks:
	if !cached {
		organizationTypeUpsertCacheMut.Lock()
		organizationTypeUpsertCache[key] = cache
		organizationTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationTypePrimaryKeyMapping)
	sql := "DELETE FROM `OrganizationType` WHERE `organization_type_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from OrganizationType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for OrganizationType")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from OrganizationType")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationType")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationType slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `OrganizationType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OrganizationType")
	}

	if len(organizationTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationType(ctx, exec, o.OrganizationTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `OrganizationType`.* FROM `OrganizationType` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationTypeSlice")
	}

	*o = slice

	return nil
}

// OrganizationTypeExists checks if the OrganizationType row exists.
func OrganizationTypeExists(ctx context.Context, exec boil.ContextExecutor, organizationTypeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `OrganizationType` where `organization_type_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, organizationTypeID)
	}

	row := exec.QueryRowContext(ctx, sql, organizationTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if OrganizationType exists")
	}

	return exists, nil
}
