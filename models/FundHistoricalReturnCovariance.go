// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// FundHistoricalReturnCovariance is an object representing the database table.
type FundHistoricalReturnCovariance struct {
	FundID1          int               `boil:"fund_id1" json:"fund_id1" toml:"fund_id1" yaml:"fund_id1"`
	FundID2          int               `boil:"fund_id2" json:"fund_id2" toml:"fund_id2" yaml:"fund_id2"`
	ReportDate       time.Time         `boil:"report_date" json:"report_date" toml:"report_date" yaml:"report_date"`
	ReturnCovariance types.NullDecimal `boil:"return_covariance" json:"return_covariance,omitempty" toml:"return_covariance" yaml:"return_covariance,omitempty"`
	BankID           int               `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	MakerDate        time.Time         `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate      null.Time         `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID          string            `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID        null.String       `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy       null.String       `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate     null.Time         `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *fundHistoricalReturnCovarianceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fundHistoricalReturnCovarianceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FundHistoricalReturnCovarianceColumns = struct {
	FundID1          string
	FundID2          string
	ReportDate       string
	ReturnCovariance string
	BankID           string
	MakerDate        string
	CheckerDate      string
	MakerID          string
	CheckerID        string
	ModifiedBy       string
	ModifiedDate     string
}{
	FundID1:          "fund_id1",
	FundID2:          "fund_id2",
	ReportDate:       "report_date",
	ReturnCovariance: "return_covariance",
	BankID:           "bank_id",
	MakerDate:        "maker_date",
	CheckerDate:      "checker_date",
	MakerID:          "maker_id",
	CheckerID:        "checker_id",
	ModifiedBy:       "modified_by",
	ModifiedDate:     "modified_date",
}

// Generated where

var FundHistoricalReturnCovarianceWhere = struct {
	FundID1          whereHelperint
	FundID2          whereHelperint
	ReportDate       whereHelpertime_Time
	ReturnCovariance whereHelpertypes_NullDecimal
	BankID           whereHelperint
	MakerDate        whereHelpertime_Time
	CheckerDate      whereHelpernull_Time
	MakerID          whereHelperstring
	CheckerID        whereHelpernull_String
	ModifiedBy       whereHelpernull_String
	ModifiedDate     whereHelpernull_Time
}{
	FundID1:          whereHelperint{field: `fund_id1`},
	FundID2:          whereHelperint{field: `fund_id2`},
	ReportDate:       whereHelpertime_Time{field: `report_date`},
	ReturnCovariance: whereHelpertypes_NullDecimal{field: `return_covariance`},
	BankID:           whereHelperint{field: `bank_id`},
	MakerDate:        whereHelpertime_Time{field: `maker_date`},
	CheckerDate:      whereHelpernull_Time{field: `checker_date`},
	MakerID:          whereHelperstring{field: `maker_id`},
	CheckerID:        whereHelpernull_String{field: `checker_id`},
	ModifiedBy:       whereHelpernull_String{field: `modified_by`},
	ModifiedDate:     whereHelpernull_Time{field: `modified_date`},
}

// FundHistoricalReturnCovarianceRels is where relationship names are stored.
var FundHistoricalReturnCovarianceRels = struct {
	FundID1 string
	FundID2 string
}{
	FundID1: "FundID1",
	FundID2: "FundID2",
}

// fundHistoricalReturnCovarianceR is where relationships are stored.
type fundHistoricalReturnCovarianceR struct {
	FundID1 *FundDescription
	FundID2 *FundDescription
}

// NewStruct creates a new relationship struct
func (*fundHistoricalReturnCovarianceR) NewStruct() *fundHistoricalReturnCovarianceR {
	return &fundHistoricalReturnCovarianceR{}
}

// fundHistoricalReturnCovarianceL is where Load methods for each relationship are stored.
type fundHistoricalReturnCovarianceL struct{}

var (
	fundHistoricalReturnCovarianceColumns               = []string{"fund_id1", "fund_id2", "report_date", "return_covariance", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fundHistoricalReturnCovarianceColumnsWithoutDefault = []string{"fund_id1", "fund_id2", "report_date", "return_covariance", "bank_id", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	fundHistoricalReturnCovarianceColumnsWithDefault    = []string{}
	fundHistoricalReturnCovariancePrimaryKeyColumns     = []string{"fund_id1"}
)

type (
	// FundHistoricalReturnCovarianceSlice is an alias for a slice of pointers to FundHistoricalReturnCovariance.
	// This should generally be used opposed to []FundHistoricalReturnCovariance.
	FundHistoricalReturnCovarianceSlice []*FundHistoricalReturnCovariance
	// FundHistoricalReturnCovarianceHook is the signature for custom FundHistoricalReturnCovariance hook methods
	FundHistoricalReturnCovarianceHook func(context.Context, boil.ContextExecutor, *FundHistoricalReturnCovariance) error

	fundHistoricalReturnCovarianceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fundHistoricalReturnCovarianceType                 = reflect.TypeOf(&FundHistoricalReturnCovariance{})
	fundHistoricalReturnCovarianceMapping              = queries.MakeStructMapping(fundHistoricalReturnCovarianceType)
	fundHistoricalReturnCovariancePrimaryKeyMapping, _ = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, fundHistoricalReturnCovariancePrimaryKeyColumns)
	fundHistoricalReturnCovarianceInsertCacheMut       sync.RWMutex
	fundHistoricalReturnCovarianceInsertCache          = make(map[string]insertCache)
	fundHistoricalReturnCovarianceUpdateCacheMut       sync.RWMutex
	fundHistoricalReturnCovarianceUpdateCache          = make(map[string]updateCache)
	fundHistoricalReturnCovarianceUpsertCacheMut       sync.RWMutex
	fundHistoricalReturnCovarianceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fundHistoricalReturnCovarianceBeforeInsertHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceBeforeUpdateHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceBeforeDeleteHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceBeforeUpsertHooks []FundHistoricalReturnCovarianceHook

var fundHistoricalReturnCovarianceAfterInsertHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceAfterSelectHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceAfterUpdateHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceAfterDeleteHooks []FundHistoricalReturnCovarianceHook
var fundHistoricalReturnCovarianceAfterUpsertHooks []FundHistoricalReturnCovarianceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FundHistoricalReturnCovariance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FundHistoricalReturnCovariance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FundHistoricalReturnCovariance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FundHistoricalReturnCovariance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FundHistoricalReturnCovariance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FundHistoricalReturnCovariance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FundHistoricalReturnCovariance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FundHistoricalReturnCovariance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FundHistoricalReturnCovariance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fundHistoricalReturnCovarianceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFundHistoricalReturnCovarianceHook registers your hook function for all future operations.
func AddFundHistoricalReturnCovarianceHook(hookPoint boil.HookPoint, fundHistoricalReturnCovarianceHook FundHistoricalReturnCovarianceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fundHistoricalReturnCovarianceBeforeInsertHooks = append(fundHistoricalReturnCovarianceBeforeInsertHooks, fundHistoricalReturnCovarianceHook)
	case boil.BeforeUpdateHook:
		fundHistoricalReturnCovarianceBeforeUpdateHooks = append(fundHistoricalReturnCovarianceBeforeUpdateHooks, fundHistoricalReturnCovarianceHook)
	case boil.BeforeDeleteHook:
		fundHistoricalReturnCovarianceBeforeDeleteHooks = append(fundHistoricalReturnCovarianceBeforeDeleteHooks, fundHistoricalReturnCovarianceHook)
	case boil.BeforeUpsertHook:
		fundHistoricalReturnCovarianceBeforeUpsertHooks = append(fundHistoricalReturnCovarianceBeforeUpsertHooks, fundHistoricalReturnCovarianceHook)
	case boil.AfterInsertHook:
		fundHistoricalReturnCovarianceAfterInsertHooks = append(fundHistoricalReturnCovarianceAfterInsertHooks, fundHistoricalReturnCovarianceHook)
	case boil.AfterSelectHook:
		fundHistoricalReturnCovarianceAfterSelectHooks = append(fundHistoricalReturnCovarianceAfterSelectHooks, fundHistoricalReturnCovarianceHook)
	case boil.AfterUpdateHook:
		fundHistoricalReturnCovarianceAfterUpdateHooks = append(fundHistoricalReturnCovarianceAfterUpdateHooks, fundHistoricalReturnCovarianceHook)
	case boil.AfterDeleteHook:
		fundHistoricalReturnCovarianceAfterDeleteHooks = append(fundHistoricalReturnCovarianceAfterDeleteHooks, fundHistoricalReturnCovarianceHook)
	case boil.AfterUpsertHook:
		fundHistoricalReturnCovarianceAfterUpsertHooks = append(fundHistoricalReturnCovarianceAfterUpsertHooks, fundHistoricalReturnCovarianceHook)
	}
}

// One returns a single fundHistoricalReturnCovariance record from the query.
func (q fundHistoricalReturnCovarianceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FundHistoricalReturnCovariance, error) {
	o := &FundHistoricalReturnCovariance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for FundHistoricalReturnCovariance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FundHistoricalReturnCovariance records from the query.
func (q fundHistoricalReturnCovarianceQuery) All(ctx context.Context, exec boil.ContextExecutor) (FundHistoricalReturnCovarianceSlice, error) {
	var o []*FundHistoricalReturnCovariance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FundHistoricalReturnCovariance slice")
	}

	if len(fundHistoricalReturnCovarianceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FundHistoricalReturnCovariance records in the query.
func (q fundHistoricalReturnCovarianceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count FundHistoricalReturnCovariance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fundHistoricalReturnCovarianceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if FundHistoricalReturnCovariance exists")
	}

	return count > 0, nil
}

// FundID1 pointed to by the foreign key.
func (o *FundHistoricalReturnCovariance) FundID11(mods ...qm.QueryMod) fundDescriptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("fund_id=?", o.FundID1),
	}

	queryMods = append(queryMods, mods...)

	query := FundDescriptions(queryMods...)
	queries.SetFrom(query.Query, "`FundDescription`")

	return query
}

// FundID2 pointed to by the foreign key.
func (o *FundHistoricalReturnCovariance) FundID22(mods ...qm.QueryMod) fundDescriptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("fund_id=?", o.FundID2),
	}

	queryMods = append(queryMods, mods...)

	query := FundDescriptions(queryMods...)
	queries.SetFrom(query.Query, "`FundDescription`")

	return query
}

// LoadFundID1 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fundHistoricalReturnCovarianceL) LoadFundID1(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFundHistoricalReturnCovariance interface{}, mods queries.Applicator) error {
	var slice []*FundHistoricalReturnCovariance
	var object *FundHistoricalReturnCovariance

	if singular {
		object = maybeFundHistoricalReturnCovariance.(*FundHistoricalReturnCovariance)
	} else {
		slice = *maybeFundHistoricalReturnCovariance.(*[]*FundHistoricalReturnCovariance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fundHistoricalReturnCovarianceR{}
		}
		args = append(args, object.FundID1)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fundHistoricalReturnCovarianceR{}
			}

			for _, a := range args {
				if a == obj.FundID1 {
					continue Outer
				}
			}

			args = append(args, obj.FundID1)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`FundDescription`), qm.WhereIn(`fund_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FundDescription")
	}

	var resultSlice []*FundDescription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FundDescription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for FundDescription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for FundDescription")
	}

	if len(fundHistoricalReturnCovarianceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FundID1 = foreign
		if foreign.R == nil {
			foreign.R = &fundDescriptionR{}
		}
		foreign.R.FundID1FundHistoricalReturnCovariance = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FundID1 == foreign.FundID {
				local.R.FundID1 = foreign
				if foreign.R == nil {
					foreign.R = &fundDescriptionR{}
				}
				foreign.R.FundID1FundHistoricalReturnCovariance = local
				break
			}
		}
	}

	return nil
}

// LoadFundID2 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fundHistoricalReturnCovarianceL) LoadFundID2(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFundHistoricalReturnCovariance interface{}, mods queries.Applicator) error {
	var slice []*FundHistoricalReturnCovariance
	var object *FundHistoricalReturnCovariance

	if singular {
		object = maybeFundHistoricalReturnCovariance.(*FundHistoricalReturnCovariance)
	} else {
		slice = *maybeFundHistoricalReturnCovariance.(*[]*FundHistoricalReturnCovariance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fundHistoricalReturnCovarianceR{}
		}
		args = append(args, object.FundID2)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fundHistoricalReturnCovarianceR{}
			}

			for _, a := range args {
				if a == obj.FundID2 {
					continue Outer
				}
			}

			args = append(args, obj.FundID2)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`FundDescription`), qm.WhereIn(`fund_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FundDescription")
	}

	var resultSlice []*FundDescription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FundDescription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for FundDescription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for FundDescription")
	}

	if len(fundHistoricalReturnCovarianceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FundID2 = foreign
		if foreign.R == nil {
			foreign.R = &fundDescriptionR{}
		}
		foreign.R.FundID2FundHistoricalReturnCovariances = append(foreign.R.FundID2FundHistoricalReturnCovariances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FundID2 == foreign.FundID {
				local.R.FundID2 = foreign
				if foreign.R == nil {
					foreign.R = &fundDescriptionR{}
				}
				foreign.R.FundID2FundHistoricalReturnCovariances = append(foreign.R.FundID2FundHistoricalReturnCovariances, local)
				break
			}
		}
	}

	return nil
}

// SetFundID1 of the fundHistoricalReturnCovariance to the related item.
// Sets o.R.FundID1 to related.
// Adds o to related.R.FundID1FundHistoricalReturnCovariance.
func (o *FundHistoricalReturnCovariance) SetFundID1(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FundDescription) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FundHistoricalReturnCovariance` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"fund_id1"}),
		strmangle.WhereClause("`", "`", 0, fundHistoricalReturnCovariancePrimaryKeyColumns),
	)
	values := []interface{}{related.FundID, o.FundID1}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FundID1 = related.FundID
	if o.R == nil {
		o.R = &fundHistoricalReturnCovarianceR{
			FundID1: related,
		}
	} else {
		o.R.FundID1 = related
	}

	if related.R == nil {
		related.R = &fundDescriptionR{
			FundID1FundHistoricalReturnCovariance: o,
		}
	} else {
		related.R.FundID1FundHistoricalReturnCovariance = o
	}

	return nil
}

// SetFundID2 of the fundHistoricalReturnCovariance to the related item.
// Sets o.R.FundID2 to related.
// Adds o to related.R.FundID2FundHistoricalReturnCovariances.
func (o *FundHistoricalReturnCovariance) SetFundID2(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FundDescription) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `FundHistoricalReturnCovariance` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"fund_id2"}),
		strmangle.WhereClause("`", "`", 0, fundHistoricalReturnCovariancePrimaryKeyColumns),
	)
	values := []interface{}{related.FundID, o.FundID1}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FundID2 = related.FundID
	if o.R == nil {
		o.R = &fundHistoricalReturnCovarianceR{
			FundID2: related,
		}
	} else {
		o.R.FundID2 = related
	}

	if related.R == nil {
		related.R = &fundDescriptionR{
			FundID2FundHistoricalReturnCovariances: FundHistoricalReturnCovarianceSlice{o},
		}
	} else {
		related.R.FundID2FundHistoricalReturnCovariances = append(related.R.FundID2FundHistoricalReturnCovariances, o)
	}

	return nil
}

// FundHistoricalReturnCovariances retrieves all the records using an executor.
func FundHistoricalReturnCovariances(mods ...qm.QueryMod) fundHistoricalReturnCovarianceQuery {
	mods = append(mods, qm.From("`FundHistoricalReturnCovariance`"))
	return fundHistoricalReturnCovarianceQuery{NewQuery(mods...)}
}

// FindFundHistoricalReturnCovariance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFundHistoricalReturnCovariance(ctx context.Context, exec boil.ContextExecutor, fundID1 int, selectCols ...string) (*FundHistoricalReturnCovariance, error) {
	fundHistoricalReturnCovarianceObj := &FundHistoricalReturnCovariance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FundHistoricalReturnCovariance` where `fund_id1`=?", sel,
	)

	q := queries.Raw(query, fundID1)

	err := q.Bind(ctx, exec, fundHistoricalReturnCovarianceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from FundHistoricalReturnCovariance")
	}

	return fundHistoricalReturnCovarianceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FundHistoricalReturnCovariance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FundHistoricalReturnCovariance provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fundHistoricalReturnCovarianceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fundHistoricalReturnCovarianceInsertCacheMut.RLock()
	cache, cached := fundHistoricalReturnCovarianceInsertCache[key]
	fundHistoricalReturnCovarianceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fundHistoricalReturnCovarianceColumns,
			fundHistoricalReturnCovarianceColumnsWithDefault,
			fundHistoricalReturnCovarianceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FundHistoricalReturnCovariance` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FundHistoricalReturnCovariance` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FundHistoricalReturnCovariance` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fundHistoricalReturnCovariancePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into FundHistoricalReturnCovariance")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FundID1,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FundHistoricalReturnCovariance")
	}

CacheNoHooks:
	if !cached {
		fundHistoricalReturnCovarianceInsertCacheMut.Lock()
		fundHistoricalReturnCovarianceInsertCache[key] = cache
		fundHistoricalReturnCovarianceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FundHistoricalReturnCovariance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FundHistoricalReturnCovariance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fundHistoricalReturnCovarianceUpdateCacheMut.RLock()
	cache, cached := fundHistoricalReturnCovarianceUpdateCache[key]
	fundHistoricalReturnCovarianceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fundHistoricalReturnCovarianceColumns,
			fundHistoricalReturnCovariancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update FundHistoricalReturnCovariance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FundHistoricalReturnCovariance` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fundHistoricalReturnCovariancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, append(wl, fundHistoricalReturnCovariancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update FundHistoricalReturnCovariance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for FundHistoricalReturnCovariance")
	}

	if !cached {
		fundHistoricalReturnCovarianceUpdateCacheMut.Lock()
		fundHistoricalReturnCovarianceUpdateCache[key] = cache
		fundHistoricalReturnCovarianceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fundHistoricalReturnCovarianceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for FundHistoricalReturnCovariance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for FundHistoricalReturnCovariance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FundHistoricalReturnCovarianceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fundHistoricalReturnCovariancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FundHistoricalReturnCovariance` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fundHistoricalReturnCovariancePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fundHistoricalReturnCovariance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fundHistoricalReturnCovariance")
	}
	return rowsAff, nil
}

var mySQLFundHistoricalReturnCovarianceUniqueColumns = []string{
	"fund_id1",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FundHistoricalReturnCovariance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no FundHistoricalReturnCovariance provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fundHistoricalReturnCovarianceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFundHistoricalReturnCovarianceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fundHistoricalReturnCovarianceUpsertCacheMut.RLock()
	cache, cached := fundHistoricalReturnCovarianceUpsertCache[key]
	fundHistoricalReturnCovarianceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fundHistoricalReturnCovarianceColumns,
			fundHistoricalReturnCovarianceColumnsWithDefault,
			fundHistoricalReturnCovarianceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fundHistoricalReturnCovarianceColumns,
			fundHistoricalReturnCovariancePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert FundHistoricalReturnCovariance, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "FundHistoricalReturnCovariance", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FundHistoricalReturnCovariance` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for FundHistoricalReturnCovariance")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fundHistoricalReturnCovarianceType, fundHistoricalReturnCovarianceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for FundHistoricalReturnCovariance")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for FundHistoricalReturnCovariance")
	}

CacheNoHooks:
	if !cached {
		fundHistoricalReturnCovarianceUpsertCacheMut.Lock()
		fundHistoricalReturnCovarianceUpsertCache[key] = cache
		fundHistoricalReturnCovarianceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FundHistoricalReturnCovariance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FundHistoricalReturnCovariance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FundHistoricalReturnCovariance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fundHistoricalReturnCovariancePrimaryKeyMapping)
	sql := "DELETE FROM `FundHistoricalReturnCovariance` WHERE `fund_id1`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from FundHistoricalReturnCovariance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for FundHistoricalReturnCovariance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fundHistoricalReturnCovarianceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fundHistoricalReturnCovarianceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from FundHistoricalReturnCovariance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FundHistoricalReturnCovariance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FundHistoricalReturnCovarianceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FundHistoricalReturnCovariance slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fundHistoricalReturnCovarianceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fundHistoricalReturnCovariancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FundHistoricalReturnCovariance` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fundHistoricalReturnCovariancePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fundHistoricalReturnCovariance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for FundHistoricalReturnCovariance")
	}

	if len(fundHistoricalReturnCovarianceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FundHistoricalReturnCovariance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFundHistoricalReturnCovariance(ctx, exec, o.FundID1)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FundHistoricalReturnCovarianceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FundHistoricalReturnCovarianceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fundHistoricalReturnCovariancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FundHistoricalReturnCovariance`.* FROM `FundHistoricalReturnCovariance` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fundHistoricalReturnCovariancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FundHistoricalReturnCovarianceSlice")
	}

	*o = slice

	return nil
}

// FundHistoricalReturnCovarianceExists checks if the FundHistoricalReturnCovariance row exists.
func FundHistoricalReturnCovarianceExists(ctx context.Context, exec boil.ContextExecutor, fundID1 int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FundHistoricalReturnCovariance` where `fund_id1`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, fundID1)
	}

	row := exec.QueryRowContext(ctx, sql, fundID1)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if FundHistoricalReturnCovariance exists")
	}

	return exists, nil
}
