// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFChargesTxn is an object representing the database table.
type TFChargesTxn struct {
	TFChargesID     int           `boil:"tf_charges_id" json:"tf_charges_id" toml:"tf_charges_id" yaml:"tf_charges_id"`
	TransactionID   int           `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ReferenceID     string        `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	ProductCode     string        `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	BranchID        int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	PartyID         int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	ChargeCode      string        `boil:"charge_code" json:"charge_code" toml:"charge_code" yaml:"charge_code"`
	ChargeCurrency  string        `boil:"charge_currency" json:"charge_currency" toml:"charge_currency" yaml:"charge_currency"`
	ChargeAccountNo string        `boil:"charge_account_no" json:"charge_account_no" toml:"charge_account_no" yaml:"charge_account_no"`
	WaivFlag        string        `boil:"waiv_flag" json:"waiv_flag" toml:"waiv_flag" yaml:"waiv_flag"`
	OverrideFlag    string        `boil:"override_flag" json:"override_flag" toml:"override_flag" yaml:"override_flag"`
	ChargeAmount    types.Decimal `boil:"charge_amount" json:"charge_amount" toml:"charge_amount" yaml:"charge_amount"`
	BankID          int           `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	CHRGBRNBy       null.String   `boil:"chrg_brn_by" json:"chrg_brn_by,omitempty" toml:"chrg_brn_by" yaml:"chrg_brn_by,omitempty"`
	OperationCode   null.String   `boil:"operation_code" json:"operation_code,omitempty" toml:"operation_code" yaml:"operation_code,omitempty"`
	MakerDate       time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate     null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID         string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID       null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy      null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate    null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFChargesTxnR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFChargesTxnL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFChargesTxnColumns = struct {
	TFChargesID     string
	TransactionID   string
	ReferenceID     string
	ProductCode     string
	BranchID        string
	PartyID         string
	ChargeCode      string
	ChargeCurrency  string
	ChargeAccountNo string
	WaivFlag        string
	OverrideFlag    string
	ChargeAmount    string
	BankID          string
	CHRGBRNBy       string
	OperationCode   string
	MakerDate       string
	CheckerDate     string
	MakerID         string
	CheckerID       string
	ModifiedBy      string
	ModifiedDate    string
}{
	TFChargesID:     "tf_charges_id",
	TransactionID:   "transaction_id",
	ReferenceID:     "reference_id",
	ProductCode:     "product_code",
	BranchID:        "branch_id",
	PartyID:         "party_id",
	ChargeCode:      "charge_code",
	ChargeCurrency:  "charge_currency",
	ChargeAccountNo: "charge_account_no",
	WaivFlag:        "waiv_flag",
	OverrideFlag:    "override_flag",
	ChargeAmount:    "charge_amount",
	BankID:          "bank_id",
	CHRGBRNBy:       "chrg_brn_by",
	OperationCode:   "operation_code",
	MakerDate:       "maker_date",
	CheckerDate:     "checker_date",
	MakerID:         "maker_id",
	CheckerID:       "checker_id",
	ModifiedBy:      "modified_by",
	ModifiedDate:    "modified_date",
}

// Generated where

var TFChargesTxnWhere = struct {
	TFChargesID     whereHelperint
	TransactionID   whereHelperint
	ReferenceID     whereHelperstring
	ProductCode     whereHelperstring
	BranchID        whereHelperint
	PartyID         whereHelperint
	ChargeCode      whereHelperstring
	ChargeCurrency  whereHelperstring
	ChargeAccountNo whereHelperstring
	WaivFlag        whereHelperstring
	OverrideFlag    whereHelperstring
	ChargeAmount    whereHelpertypes_Decimal
	BankID          whereHelperint
	CHRGBRNBy       whereHelpernull_String
	OperationCode   whereHelpernull_String
	MakerDate       whereHelpertime_Time
	CheckerDate     whereHelpernull_Time
	MakerID         whereHelperstring
	CheckerID       whereHelpernull_String
	ModifiedBy      whereHelpernull_String
	ModifiedDate    whereHelpernull_Time
}{
	TFChargesID:     whereHelperint{field: `tf_charges_id`},
	TransactionID:   whereHelperint{field: `transaction_id`},
	ReferenceID:     whereHelperstring{field: `reference_id`},
	ProductCode:     whereHelperstring{field: `product_code`},
	BranchID:        whereHelperint{field: `branch_id`},
	PartyID:         whereHelperint{field: `party_id`},
	ChargeCode:      whereHelperstring{field: `charge_code`},
	ChargeCurrency:  whereHelperstring{field: `charge_currency`},
	ChargeAccountNo: whereHelperstring{field: `charge_account_no`},
	WaivFlag:        whereHelperstring{field: `waiv_flag`},
	OverrideFlag:    whereHelperstring{field: `override_flag`},
	ChargeAmount:    whereHelpertypes_Decimal{field: `charge_amount`},
	BankID:          whereHelperint{field: `bank_id`},
	CHRGBRNBy:       whereHelpernull_String{field: `chrg_brn_by`},
	OperationCode:   whereHelpernull_String{field: `operation_code`},
	MakerDate:       whereHelpertime_Time{field: `maker_date`},
	CheckerDate:     whereHelpernull_Time{field: `checker_date`},
	MakerID:         whereHelperstring{field: `maker_id`},
	CheckerID:       whereHelpernull_String{field: `checker_id`},
	ModifiedBy:      whereHelpernull_String{field: `modified_by`},
	ModifiedDate:    whereHelpernull_Time{field: `modified_date`},
}

// TFChargesTxnRels is where relationship names are stored.
var TFChargesTxnRels = struct {
	ChargeCode string
	Branch     string
	Party      string
}{
	ChargeCode: "ChargeCode",
	Branch:     "Branch",
	Party:      "Party",
}

// tFChargesTxnR is where relationships are stored.
type tFChargesTxnR struct {
	ChargeCode *TFChargeCode
	Branch     *Branch
	Party      *Party
}

// NewStruct creates a new relationship struct
func (*tFChargesTxnR) NewStruct() *tFChargesTxnR {
	return &tFChargesTxnR{}
}

// tFChargesTxnL is where Load methods for each relationship are stored.
type tFChargesTxnL struct{}

var (
	tFChargesTxnColumns               = []string{"tf_charges_id", "transaction_id", "reference_id", "product_code", "branch_id", "party_id", "charge_code", "charge_currency", "charge_account_no", "waiv_flag", "override_flag", "charge_amount", "bank_id", "chrg_brn_by", "operation_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFChargesTxnColumnsWithoutDefault = []string{"tf_charges_id", "transaction_id", "reference_id", "product_code", "branch_id", "party_id", "charge_code", "charge_currency", "charge_account_no", "waiv_flag", "override_flag", "charge_amount", "bank_id", "chrg_brn_by", "operation_code", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFChargesTxnColumnsWithDefault    = []string{}
	tFChargesTxnPrimaryKeyColumns     = []string{"tf_charges_id"}
)

type (
	// TFChargesTxnSlice is an alias for a slice of pointers to TFChargesTxn.
	// This should generally be used opposed to []TFChargesTxn.
	TFChargesTxnSlice []*TFChargesTxn
	// TFChargesTxnHook is the signature for custom TFChargesTxn hook methods
	TFChargesTxnHook func(context.Context, boil.ContextExecutor, *TFChargesTxn) error

	tFChargesTxnQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFChargesTxnType                 = reflect.TypeOf(&TFChargesTxn{})
	tFChargesTxnMapping              = queries.MakeStructMapping(tFChargesTxnType)
	tFChargesTxnPrimaryKeyMapping, _ = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, tFChargesTxnPrimaryKeyColumns)
	tFChargesTxnInsertCacheMut       sync.RWMutex
	tFChargesTxnInsertCache          = make(map[string]insertCache)
	tFChargesTxnUpdateCacheMut       sync.RWMutex
	tFChargesTxnUpdateCache          = make(map[string]updateCache)
	tFChargesTxnUpsertCacheMut       sync.RWMutex
	tFChargesTxnUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFChargesTxnBeforeInsertHooks []TFChargesTxnHook
var tFChargesTxnBeforeUpdateHooks []TFChargesTxnHook
var tFChargesTxnBeforeDeleteHooks []TFChargesTxnHook
var tFChargesTxnBeforeUpsertHooks []TFChargesTxnHook

var tFChargesTxnAfterInsertHooks []TFChargesTxnHook
var tFChargesTxnAfterSelectHooks []TFChargesTxnHook
var tFChargesTxnAfterUpdateHooks []TFChargesTxnHook
var tFChargesTxnAfterDeleteHooks []TFChargesTxnHook
var tFChargesTxnAfterUpsertHooks []TFChargesTxnHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFChargesTxn) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFChargesTxn) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFChargesTxn) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFChargesTxn) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFChargesTxn) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFChargesTxn) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFChargesTxn) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFChargesTxn) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFChargesTxn) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFChargesTxnAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFChargesTxnHook registers your hook function for all future operations.
func AddTFChargesTxnHook(hookPoint boil.HookPoint, tFChargesTxnHook TFChargesTxnHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFChargesTxnBeforeInsertHooks = append(tFChargesTxnBeforeInsertHooks, tFChargesTxnHook)
	case boil.BeforeUpdateHook:
		tFChargesTxnBeforeUpdateHooks = append(tFChargesTxnBeforeUpdateHooks, tFChargesTxnHook)
	case boil.BeforeDeleteHook:
		tFChargesTxnBeforeDeleteHooks = append(tFChargesTxnBeforeDeleteHooks, tFChargesTxnHook)
	case boil.BeforeUpsertHook:
		tFChargesTxnBeforeUpsertHooks = append(tFChargesTxnBeforeUpsertHooks, tFChargesTxnHook)
	case boil.AfterInsertHook:
		tFChargesTxnAfterInsertHooks = append(tFChargesTxnAfterInsertHooks, tFChargesTxnHook)
	case boil.AfterSelectHook:
		tFChargesTxnAfterSelectHooks = append(tFChargesTxnAfterSelectHooks, tFChargesTxnHook)
	case boil.AfterUpdateHook:
		tFChargesTxnAfterUpdateHooks = append(tFChargesTxnAfterUpdateHooks, tFChargesTxnHook)
	case boil.AfterDeleteHook:
		tFChargesTxnAfterDeleteHooks = append(tFChargesTxnAfterDeleteHooks, tFChargesTxnHook)
	case boil.AfterUpsertHook:
		tFChargesTxnAfterUpsertHooks = append(tFChargesTxnAfterUpsertHooks, tFChargesTxnHook)
	}
}

// One returns a single tFChargesTxn record from the query.
func (q tFChargesTxnQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFChargesTxn, error) {
	o := &TFChargesTxn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFChargesTxn")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFChargesTxn records from the query.
func (q tFChargesTxnQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFChargesTxnSlice, error) {
	var o []*TFChargesTxn

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFChargesTxn slice")
	}

	if len(tFChargesTxnAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFChargesTxn records in the query.
func (q tFChargesTxnQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFChargesTxn rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFChargesTxnQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFChargesTxn exists")
	}

	return count > 0, nil
}

// ChargeCode pointed to by the foreign key.
func (o *TFChargesTxn) ChargeCode1(mods ...qm.QueryMod) tFChargeCodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("charge_code=?", o.ChargeCode),
	}

	queryMods = append(queryMods, mods...)

	query := TFChargeCodes(queryMods...)
	queries.SetFrom(query.Query, "`TFChargeCodes`")

	return query
}

// Branch pointed to by the foreign key.
func (o *TFChargesTxn) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("branch_id=?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	query := Branches(queryMods...)
	queries.SetFrom(query.Query, "`Branches`")

	return query
}

// Party pointed to by the foreign key.
func (o *TFChargesTxn) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// LoadChargeCode allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFChargesTxnL) LoadChargeCode(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFChargesTxn interface{}, mods queries.Applicator) error {
	var slice []*TFChargesTxn
	var object *TFChargesTxn

	if singular {
		object = maybeTFChargesTxn.(*TFChargesTxn)
	} else {
		slice = *maybeTFChargesTxn.(*[]*TFChargesTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFChargesTxnR{}
		}
		args = append(args, object.ChargeCode)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFChargesTxnR{}
			}

			for _, a := range args {
				if a == obj.ChargeCode {
					continue Outer
				}
			}

			args = append(args, obj.ChargeCode)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFChargeCodes`), qm.WhereIn(`charge_code in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFChargeCode")
	}

	var resultSlice []*TFChargeCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFChargeCode")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFChargeCodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFChargeCodes")
	}

	if len(tFChargesTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChargeCode = foreign
		if foreign.R == nil {
			foreign.R = &tFChargeCodeR{}
		}
		foreign.R.ChargeCodeTFChargesTxns = append(foreign.R.ChargeCodeTFChargesTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChargeCode == foreign.ChargeCode {
				local.R.ChargeCode = foreign
				if foreign.R == nil {
					foreign.R = &tFChargeCodeR{}
				}
				foreign.R.ChargeCodeTFChargesTxns = append(foreign.R.ChargeCodeTFChargesTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFChargesTxnL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFChargesTxn interface{}, mods queries.Applicator) error {
	var slice []*TFChargesTxn
	var object *TFChargesTxn

	if singular {
		object = maybeTFChargesTxn.(*TFChargesTxn)
	} else {
		slice = *maybeTFChargesTxn.(*[]*TFChargesTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFChargesTxnR{}
		}
		args = append(args, object.BranchID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFChargesTxnR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Branches`), qm.WhereIn(`branch_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Branches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Branches")
	}

	if len(tFChargesTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.BranchTFChargesTxns = append(foreign.R.BranchTFChargesTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BranchID == foreign.BranchID {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.BranchTFChargesTxns = append(foreign.R.BranchTFChargesTxns, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFChargesTxnL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFChargesTxn interface{}, mods queries.Applicator) error {
	var slice []*TFChargesTxn
	var object *TFChargesTxn

	if singular {
		object = maybeTFChargesTxn.(*TFChargesTxn)
	} else {
		slice = *maybeTFChargesTxn.(*[]*TFChargesTxn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFChargesTxnR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFChargesTxnR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFChargesTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFChargesTxns = append(foreign.R.PartyTFChargesTxns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFChargesTxns = append(foreign.R.PartyTFChargesTxns, local)
				break
			}
		}
	}

	return nil
}

// SetChargeCode of the tFChargesTxn to the related item.
// Sets o.R.ChargeCode to related.
// Adds o to related.R.ChargeCodeTFChargesTxns.
func (o *TFChargesTxn) SetChargeCode(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFChargeCode) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFChargesTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"charge_code"}),
		strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.ChargeCode, o.TFChargesID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChargeCode = related.ChargeCode
	if o.R == nil {
		o.R = &tFChargesTxnR{
			ChargeCode: related,
		}
	} else {
		o.R.ChargeCode = related
	}

	if related.R == nil {
		related.R = &tFChargeCodeR{
			ChargeCodeTFChargesTxns: TFChargesTxnSlice{o},
		}
	} else {
		related.R.ChargeCodeTFChargesTxns = append(related.R.ChargeCodeTFChargesTxns, o)
	}

	return nil
}

// SetBranch of the tFChargesTxn to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.BranchTFChargesTxns.
func (o *TFChargesTxn) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFChargesTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
		strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.BranchID, o.TFChargesID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BranchID = related.BranchID
	if o.R == nil {
		o.R = &tFChargesTxnR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			BranchTFChargesTxns: TFChargesTxnSlice{o},
		}
	} else {
		related.R.BranchTFChargesTxns = append(related.R.BranchTFChargesTxns, o)
	}

	return nil
}

// SetParty of the tFChargesTxn to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFChargesTxns.
func (o *TFChargesTxn) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFChargesTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TFChargesID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFChargesTxnR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFChargesTxns: TFChargesTxnSlice{o},
		}
	} else {
		related.R.PartyTFChargesTxns = append(related.R.PartyTFChargesTxns, o)
	}

	return nil
}

// TFChargesTxns retrieves all the records using an executor.
func TFChargesTxns(mods ...qm.QueryMod) tFChargesTxnQuery {
	mods = append(mods, qm.From("`TFChargesTxn`"))
	return tFChargesTxnQuery{NewQuery(mods...)}
}

// FindTFChargesTxn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFChargesTxn(ctx context.Context, exec boil.ContextExecutor, tFChargesID int, selectCols ...string) (*TFChargesTxn, error) {
	tFChargesTxnObj := &TFChargesTxn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFChargesTxn` where `tf_charges_id`=?", sel,
	)

	q := queries.Raw(query, tFChargesID)

	err := q.Bind(ctx, exec, tFChargesTxnObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFChargesTxn")
	}

	return tFChargesTxnObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFChargesTxn) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFChargesTxn provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFChargesTxnColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFChargesTxnInsertCacheMut.RLock()
	cache, cached := tFChargesTxnInsertCache[key]
	tFChargesTxnInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFChargesTxnColumns,
			tFChargesTxnColumnsWithDefault,
			tFChargesTxnColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFChargesTxn` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFChargesTxn` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFChargesTxn` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFChargesTxn")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TFChargesID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFChargesTxn")
	}

CacheNoHooks:
	if !cached {
		tFChargesTxnInsertCacheMut.Lock()
		tFChargesTxnInsertCache[key] = cache
		tFChargesTxnInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFChargesTxn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFChargesTxn) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFChargesTxnUpdateCacheMut.RLock()
	cache, cached := tFChargesTxnUpdateCache[key]
	tFChargesTxnUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFChargesTxnColumns,
			tFChargesTxnPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFChargesTxn, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFChargesTxn` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFChargesTxnPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, append(wl, tFChargesTxnPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFChargesTxn row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFChargesTxn")
	}

	if !cached {
		tFChargesTxnUpdateCacheMut.Lock()
		tFChargesTxnUpdateCache[key] = cache
		tFChargesTxnUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFChargesTxnQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFChargesTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFChargesTxn")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFChargesTxnSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFChargesTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFChargesTxn` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFChargesTxnPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFChargesTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFChargesTxn")
	}
	return rowsAff, nil
}

var mySQLTFChargesTxnUniqueColumns = []string{
	"tf_charges_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFChargesTxn) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFChargesTxn provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFChargesTxnColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFChargesTxnUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFChargesTxnUpsertCacheMut.RLock()
	cache, cached := tFChargesTxnUpsertCache[key]
	tFChargesTxnUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFChargesTxnColumns,
			tFChargesTxnColumnsWithDefault,
			tFChargesTxnColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFChargesTxnColumns,
			tFChargesTxnPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFChargesTxn, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFChargesTxn", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFChargesTxn` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFChargesTxn")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFChargesTxnType, tFChargesTxnMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFChargesTxn")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFChargesTxn")
	}

CacheNoHooks:
	if !cached {
		tFChargesTxnUpsertCacheMut.Lock()
		tFChargesTxnUpsertCache[key] = cache
		tFChargesTxnUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFChargesTxn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFChargesTxn) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFChargesTxn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFChargesTxnPrimaryKeyMapping)
	sql := "DELETE FROM `TFChargesTxn` WHERE `tf_charges_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFChargesTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFChargesTxn")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFChargesTxnQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFChargesTxnQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFChargesTxn")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFChargesTxn")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFChargesTxnSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFChargesTxn slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFChargesTxnBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFChargesTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFChargesTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFChargesTxnPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFChargesTxn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFChargesTxn")
	}

	if len(tFChargesTxnAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFChargesTxn) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFChargesTxn(ctx, exec, o.TFChargesID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFChargesTxnSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFChargesTxnSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFChargesTxnPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFChargesTxn`.* FROM `TFChargesTxn` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFChargesTxnPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFChargesTxnSlice")
	}

	*o = slice

	return nil
}

// TFChargesTxnExists checks if the TFChargesTxn row exists.
func TFChargesTxnExists(ctx context.Context, exec boil.ContextExecutor, tFChargesID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFChargesTxn` where `tf_charges_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tFChargesID)
	}

	row := exec.QueryRowContext(ctx, sql, tFChargesID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFChargesTxn exists")
	}

	return exists, nil
}
