// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// TFInterest is an object representing the database table.
type TFInterest struct {
	TradeInterestID      int           `boil:"trade_interest_id" json:"trade_interest_id" toml:"trade_interest_id" yaml:"trade_interest_id"`
	ReferenceID          string        `boil:"reference_id" json:"reference_id" toml:"reference_id" yaml:"reference_id"`
	ProductCode          string        `boil:"product_code" json:"product_code" toml:"product_code" yaml:"product_code"`
	PartyID              int           `boil:"party_id" json:"party_id" toml:"party_id" yaml:"party_id"`
	BranchID             int           `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	InterestRate         types.Decimal `boil:"interest_rate" json:"interest_rate" toml:"interest_rate" yaml:"interest_rate"`
	TotalInterestAmount  types.Decimal `boil:"total_interest_amount" json:"total_interest_amount" toml:"total_interest_amount" yaml:"total_interest_amount"`
	ActualInterestAmount types.Decimal `boil:"actual_interest_amount" json:"actual_interest_amount" toml:"actual_interest_amount" yaml:"actual_interest_amount"`
	LastInterestDate     time.Time     `boil:"last_interest_date" json:"last_interest_date" toml:"last_interest_date" yaml:"last_interest_date"`
	MakerDate            time.Time     `boil:"maker_date" json:"maker_date" toml:"maker_date" yaml:"maker_date"`
	CheckerDate          null.Time     `boil:"checker_date" json:"checker_date,omitempty" toml:"checker_date" yaml:"checker_date,omitempty"`
	MakerID              string        `boil:"maker_id" json:"maker_id" toml:"maker_id" yaml:"maker_id"`
	CheckerID            null.String   `boil:"checker_id" json:"checker_id,omitempty" toml:"checker_id" yaml:"checker_id,omitempty"`
	ModifiedBy           null.String   `boil:"modified_by" json:"modified_by,omitempty" toml:"modified_by" yaml:"modified_by,omitempty"`
	ModifiedDate         null.Time     `boil:"modified_date" json:"modified_date,omitempty" toml:"modified_date" yaml:"modified_date,omitempty"`

	R *tFInterestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tFInterestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TFInterestColumns = struct {
	TradeInterestID      string
	ReferenceID          string
	ProductCode          string
	PartyID              string
	BranchID             string
	InterestRate         string
	TotalInterestAmount  string
	ActualInterestAmount string
	LastInterestDate     string
	MakerDate            string
	CheckerDate          string
	MakerID              string
	CheckerID            string
	ModifiedBy           string
	ModifiedDate         string
}{
	TradeInterestID:      "trade_interest_id",
	ReferenceID:          "reference_id",
	ProductCode:          "product_code",
	PartyID:              "party_id",
	BranchID:             "branch_id",
	InterestRate:         "interest_rate",
	TotalInterestAmount:  "total_interest_amount",
	ActualInterestAmount: "actual_interest_amount",
	LastInterestDate:     "last_interest_date",
	MakerDate:            "maker_date",
	CheckerDate:          "checker_date",
	MakerID:              "maker_id",
	CheckerID:            "checker_id",
	ModifiedBy:           "modified_by",
	ModifiedDate:         "modified_date",
}

// Generated where

var TFInterestWhere = struct {
	TradeInterestID      whereHelperint
	ReferenceID          whereHelperstring
	ProductCode          whereHelperstring
	PartyID              whereHelperint
	BranchID             whereHelperint
	InterestRate         whereHelpertypes_Decimal
	TotalInterestAmount  whereHelpertypes_Decimal
	ActualInterestAmount whereHelpertypes_Decimal
	LastInterestDate     whereHelpertime_Time
	MakerDate            whereHelpertime_Time
	CheckerDate          whereHelpernull_Time
	MakerID              whereHelperstring
	CheckerID            whereHelpernull_String
	ModifiedBy           whereHelpernull_String
	ModifiedDate         whereHelpernull_Time
}{
	TradeInterestID:      whereHelperint{field: `trade_interest_id`},
	ReferenceID:          whereHelperstring{field: `reference_id`},
	ProductCode:          whereHelperstring{field: `product_code`},
	PartyID:              whereHelperint{field: `party_id`},
	BranchID:             whereHelperint{field: `branch_id`},
	InterestRate:         whereHelpertypes_Decimal{field: `interest_rate`},
	TotalInterestAmount:  whereHelpertypes_Decimal{field: `total_interest_amount`},
	ActualInterestAmount: whereHelpertypes_Decimal{field: `actual_interest_amount`},
	LastInterestDate:     whereHelpertime_Time{field: `last_interest_date`},
	MakerDate:            whereHelpertime_Time{field: `maker_date`},
	CheckerDate:          whereHelpernull_Time{field: `checker_date`},
	MakerID:              whereHelperstring{field: `maker_id`},
	CheckerID:            whereHelpernull_String{field: `checker_id`},
	ModifiedBy:           whereHelpernull_String{field: `modified_by`},
	ModifiedDate:         whereHelpernull_Time{field: `modified_date`},
}

// TFInterestRels is where relationship names are stored.
var TFInterestRels = struct {
	Reference                   string
	Party                       string
	TradeInterestTFInterestTxns string
}{
	Reference:                   "Reference",
	Party:                       "Party",
	TradeInterestTFInterestTxns: "TradeInterestTFInterestTxns",
}

// tFInterestR is where relationships are stored.
type tFInterestR struct {
	Reference                   *TFLetterOfCredit
	Party                       *Party
	TradeInterestTFInterestTxns TFInterestTxnSlice
}

// NewStruct creates a new relationship struct
func (*tFInterestR) NewStruct() *tFInterestR {
	return &tFInterestR{}
}

// tFInterestL is where Load methods for each relationship are stored.
type tFInterestL struct{}

var (
	tFInterestColumns               = []string{"trade_interest_id", "reference_id", "product_code", "party_id", "branch_id", "interest_rate", "total_interest_amount", "actual_interest_amount", "last_interest_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFInterestColumnsWithoutDefault = []string{"trade_interest_id", "reference_id", "product_code", "party_id", "branch_id", "interest_rate", "total_interest_amount", "actual_interest_amount", "last_interest_date", "maker_date", "checker_date", "maker_id", "checker_id", "modified_by", "modified_date"}
	tFInterestColumnsWithDefault    = []string{}
	tFInterestPrimaryKeyColumns     = []string{"trade_interest_id"}
)

type (
	// TFInterestSlice is an alias for a slice of pointers to TFInterest.
	// This should generally be used opposed to []TFInterest.
	TFInterestSlice []*TFInterest
	// TFInterestHook is the signature for custom TFInterest hook methods
	TFInterestHook func(context.Context, boil.ContextExecutor, *TFInterest) error

	tFInterestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tFInterestType                 = reflect.TypeOf(&TFInterest{})
	tFInterestMapping              = queries.MakeStructMapping(tFInterestType)
	tFInterestPrimaryKeyMapping, _ = queries.BindMapping(tFInterestType, tFInterestMapping, tFInterestPrimaryKeyColumns)
	tFInterestInsertCacheMut       sync.RWMutex
	tFInterestInsertCache          = make(map[string]insertCache)
	tFInterestUpdateCacheMut       sync.RWMutex
	tFInterestUpdateCache          = make(map[string]updateCache)
	tFInterestUpsertCacheMut       sync.RWMutex
	tFInterestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tFInterestBeforeInsertHooks []TFInterestHook
var tFInterestBeforeUpdateHooks []TFInterestHook
var tFInterestBeforeDeleteHooks []TFInterestHook
var tFInterestBeforeUpsertHooks []TFInterestHook

var tFInterestAfterInsertHooks []TFInterestHook
var tFInterestAfterSelectHooks []TFInterestHook
var tFInterestAfterUpdateHooks []TFInterestHook
var tFInterestAfterDeleteHooks []TFInterestHook
var tFInterestAfterUpsertHooks []TFInterestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TFInterest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TFInterest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TFInterest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TFInterest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TFInterest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TFInterest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TFInterest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TFInterest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TFInterest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tFInterestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTFInterestHook registers your hook function for all future operations.
func AddTFInterestHook(hookPoint boil.HookPoint, tFInterestHook TFInterestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tFInterestBeforeInsertHooks = append(tFInterestBeforeInsertHooks, tFInterestHook)
	case boil.BeforeUpdateHook:
		tFInterestBeforeUpdateHooks = append(tFInterestBeforeUpdateHooks, tFInterestHook)
	case boil.BeforeDeleteHook:
		tFInterestBeforeDeleteHooks = append(tFInterestBeforeDeleteHooks, tFInterestHook)
	case boil.BeforeUpsertHook:
		tFInterestBeforeUpsertHooks = append(tFInterestBeforeUpsertHooks, tFInterestHook)
	case boil.AfterInsertHook:
		tFInterestAfterInsertHooks = append(tFInterestAfterInsertHooks, tFInterestHook)
	case boil.AfterSelectHook:
		tFInterestAfterSelectHooks = append(tFInterestAfterSelectHooks, tFInterestHook)
	case boil.AfterUpdateHook:
		tFInterestAfterUpdateHooks = append(tFInterestAfterUpdateHooks, tFInterestHook)
	case boil.AfterDeleteHook:
		tFInterestAfterDeleteHooks = append(tFInterestAfterDeleteHooks, tFInterestHook)
	case boil.AfterUpsertHook:
		tFInterestAfterUpsertHooks = append(tFInterestAfterUpsertHooks, tFInterestHook)
	}
}

// One returns a single tFInterest record from the query.
func (q tFInterestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TFInterest, error) {
	o := &TFInterest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TFInterest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TFInterest records from the query.
func (q tFInterestQuery) All(ctx context.Context, exec boil.ContextExecutor) (TFInterestSlice, error) {
	var o []*TFInterest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TFInterest slice")
	}

	if len(tFInterestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TFInterest records in the query.
func (q tFInterestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TFInterest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tFInterestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TFInterest exists")
	}

	return count > 0, nil
}

// Reference pointed to by the foreign key.
func (o *TFInterest) Reference(mods ...qm.QueryMod) tFLetterOfCreditQuery {
	queryMods := []qm.QueryMod{
		qm.Where("reference_id=?", o.ReferenceID),
	}

	queryMods = append(queryMods, mods...)

	query := TFLetterOfCredits(queryMods...)
	queries.SetFrom(query.Query, "`TFLetterOfCredit`")

	return query
}

// Party pointed to by the foreign key.
func (o *TFInterest) Party(mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party_id=?", o.PartyID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(queryMods...)
	queries.SetFrom(query.Query, "`Parties`")

	return query
}

// TradeInterestTFInterestTxns retrieves all the TFInterestTxn's TFInterestTxns with an executor via trade_interest_id column.
func (o *TFInterest) TradeInterestTFInterestTxns(mods ...qm.QueryMod) tFInterestTxnQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TFInterestTxn`.`trade_interest_id`=?", o.TradeInterestID),
	)

	query := TFInterestTxns(queryMods...)
	queries.SetFrom(query.Query, "`TFInterestTxn`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TFInterestTxn`.*"})
	}

	return query
}

// LoadReference allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFInterestL) LoadReference(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterest interface{}, mods queries.Applicator) error {
	var slice []*TFInterest
	var object *TFInterest

	if singular {
		object = maybeTFInterest.(*TFInterest)
	} else {
		slice = *maybeTFInterest.(*[]*TFInterest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestR{}
		}
		args = append(args, object.ReferenceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestR{}
			}

			for _, a := range args {
				if a == obj.ReferenceID {
					continue Outer
				}
			}

			args = append(args, obj.ReferenceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFLetterOfCredit`), qm.WhereIn(`reference_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFLetterOfCredit")
	}

	var resultSlice []*TFLetterOfCredit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFLetterOfCredit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TFLetterOfCredit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFLetterOfCredit")
	}

	if len(tFInterestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reference = foreign
		if foreign.R == nil {
			foreign.R = &tFLetterOfCreditR{}
		}
		foreign.R.ReferenceTFInterests = append(foreign.R.ReferenceTFInterests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReferenceID == foreign.ReferenceID {
				local.R.Reference = foreign
				if foreign.R == nil {
					foreign.R = &tFLetterOfCreditR{}
				}
				foreign.R.ReferenceTFInterests = append(foreign.R.ReferenceTFInterests, local)
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tFInterestL) LoadParty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterest interface{}, mods queries.Applicator) error {
	var slice []*TFInterest
	var object *TFInterest

	if singular {
		object = maybeTFInterest.(*TFInterest)
	} else {
		slice = *maybeTFInterest.(*[]*TFInterest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestR{}
		}
		args = append(args, object.PartyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestR{}
			}

			for _, a := range args {
				if a == obj.PartyID {
					continue Outer
				}
			}

			args = append(args, obj.PartyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Parties`), qm.WhereIn(`party_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Parties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Parties")
	}

	if len(tFInterestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Party = foreign
		if foreign.R == nil {
			foreign.R = &partyR{}
		}
		foreign.R.PartyTFInterests = append(foreign.R.PartyTFInterests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartyID == foreign.PartyID {
				local.R.Party = foreign
				if foreign.R == nil {
					foreign.R = &partyR{}
				}
				foreign.R.PartyTFInterests = append(foreign.R.PartyTFInterests, local)
				break
			}
		}
	}

	return nil
}

// LoadTradeInterestTFInterestTxns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tFInterestL) LoadTradeInterestTFInterestTxns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTFInterest interface{}, mods queries.Applicator) error {
	var slice []*TFInterest
	var object *TFInterest

	if singular {
		object = maybeTFInterest.(*TFInterest)
	} else {
		slice = *maybeTFInterest.(*[]*TFInterest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tFInterestR{}
		}
		args = append(args, object.TradeInterestID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tFInterestR{}
			}

			for _, a := range args {
				if a == obj.TradeInterestID {
					continue Outer
				}
			}

			args = append(args, obj.TradeInterestID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`TFInterestTxn`), qm.WhereIn(`trade_interest_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TFInterestTxn")
	}

	var resultSlice []*TFInterestTxn
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TFInterestTxn")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TFInterestTxn")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TFInterestTxn")
	}

	if len(tFInterestTxnAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeInterestTFInterestTxns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tFInterestTxnR{}
			}
			foreign.R.TradeInterest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TradeInterestID == foreign.TradeInterestID {
				local.R.TradeInterestTFInterestTxns = append(local.R.TradeInterestTFInterestTxns, foreign)
				if foreign.R == nil {
					foreign.R = &tFInterestTxnR{}
				}
				foreign.R.TradeInterest = local
				break
			}
		}
	}

	return nil
}

// SetReference of the tFInterest to the related item.
// Sets o.R.Reference to related.
// Adds o to related.R.ReferenceTFInterests.
func (o *TFInterest) SetReference(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TFLetterOfCredit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reference_id"}),
		strmangle.WhereClause("`", "`", 0, tFInterestPrimaryKeyColumns),
	)
	values := []interface{}{related.ReferenceID, o.TradeInterestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReferenceID = related.ReferenceID
	if o.R == nil {
		o.R = &tFInterestR{
			Reference: related,
		}
	} else {
		o.R.Reference = related
	}

	if related.R == nil {
		related.R = &tFLetterOfCreditR{
			ReferenceTFInterests: TFInterestSlice{o},
		}
	} else {
		related.R.ReferenceTFInterests = append(related.R.ReferenceTFInterests, o)
	}

	return nil
}

// SetParty of the tFInterest to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.PartyTFInterests.
func (o *TFInterest) SetParty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TFInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"party_id"}),
		strmangle.WhereClause("`", "`", 0, tFInterestPrimaryKeyColumns),
	)
	values := []interface{}{related.PartyID, o.TradeInterestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartyID = related.PartyID
	if o.R == nil {
		o.R = &tFInterestR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			PartyTFInterests: TFInterestSlice{o},
		}
	} else {
		related.R.PartyTFInterests = append(related.R.PartyTFInterests, o)
	}

	return nil
}

// AddTradeInterestTFInterestTxns adds the given related objects to the existing relationships
// of the TFInterest, optionally inserting them as new records.
// Appends related to o.R.TradeInterestTFInterestTxns.
// Sets related.R.TradeInterest appropriately.
func (o *TFInterest) AddTradeInterestTFInterestTxns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TFInterestTxn) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TradeInterestID = o.TradeInterestID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TFInterestTxn` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"trade_interest_id"}),
				strmangle.WhereClause("`", "`", 0, tFInterestTxnPrimaryKeyColumns),
			)
			values := []interface{}{o.TradeInterestID, rel.TradeInterestID, rel.TransactionID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TradeInterestID = o.TradeInterestID
		}
	}

	if o.R == nil {
		o.R = &tFInterestR{
			TradeInterestTFInterestTxns: related,
		}
	} else {
		o.R.TradeInterestTFInterestTxns = append(o.R.TradeInterestTFInterestTxns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tFInterestTxnR{
				TradeInterest: o,
			}
		} else {
			rel.R.TradeInterest = o
		}
	}
	return nil
}

// TFInterests retrieves all the records using an executor.
func TFInterests(mods ...qm.QueryMod) tFInterestQuery {
	mods = append(mods, qm.From("`TFInterest`"))
	return tFInterestQuery{NewQuery(mods...)}
}

// FindTFInterest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTFInterest(ctx context.Context, exec boil.ContextExecutor, tradeInterestID int, selectCols ...string) (*TFInterest, error) {
	tFInterestObj := &TFInterest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TFInterest` where `trade_interest_id`=?", sel,
	)

	q := queries.Raw(query, tradeInterestID)

	err := q.Bind(ctx, exec, tFInterestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TFInterest")
	}

	return tFInterestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TFInterest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFInterest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFInterestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tFInterestInsertCacheMut.RLock()
	cache, cached := tFInterestInsertCache[key]
	tFInterestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tFInterestColumns,
			tFInterestColumnsWithDefault,
			tFInterestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tFInterestType, tFInterestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tFInterestType, tFInterestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TFInterest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TFInterest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TFInterest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tFInterestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TFInterest")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TradeInterestID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFInterest")
	}

CacheNoHooks:
	if !cached {
		tFInterestInsertCacheMut.Lock()
		tFInterestInsertCache[key] = cache
		tFInterestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TFInterest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TFInterest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tFInterestUpdateCacheMut.RLock()
	cache, cached := tFInterestUpdateCache[key]
	tFInterestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tFInterestColumns,
			tFInterestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TFInterest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TFInterest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tFInterestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tFInterestType, tFInterestMapping, append(wl, tFInterestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TFInterest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TFInterest")
	}

	if !cached {
		tFInterestUpdateCacheMut.Lock()
		tFInterestUpdateCache[key] = cache
		tFInterestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tFInterestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TFInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TFInterest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TFInterestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TFInterest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tFInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tFInterest")
	}
	return rowsAff, nil
}

var mySQLTFInterestUniqueColumns = []string{
	"trade_interest_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TFInterest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TFInterest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tFInterestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTFInterestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tFInterestUpsertCacheMut.RLock()
	cache, cached := tFInterestUpsertCache[key]
	tFInterestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tFInterestColumns,
			tFInterestColumnsWithDefault,
			tFInterestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tFInterestColumns,
			tFInterestPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert TFInterest, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "TFInterest", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TFInterest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tFInterestType, tFInterestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tFInterestType, tFInterestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for TFInterest")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tFInterestType, tFInterestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for TFInterest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for TFInterest")
	}

CacheNoHooks:
	if !cached {
		tFInterestUpsertCacheMut.Lock()
		tFInterestUpsertCache[key] = cache
		tFInterestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TFInterest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TFInterest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFInterest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tFInterestPrimaryKeyMapping)
	sql := "DELETE FROM `TFInterest` WHERE `trade_interest_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TFInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TFInterest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tFInterestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tFInterestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TFInterest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFInterest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TFInterestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TFInterest slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tFInterestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TFInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tFInterest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TFInterest")
	}

	if len(tFInterestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TFInterest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTFInterest(ctx, exec, o.TradeInterestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TFInterestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TFInterestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tFInterestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TFInterest`.* FROM `TFInterest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tFInterestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TFInterestSlice")
	}

	*o = slice

	return nil
}

// TFInterestExists checks if the TFInterest row exists.
func TFInterestExists(ctx context.Context, exec boil.ContextExecutor, tradeInterestID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TFInterest` where `trade_interest_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, tradeInterestID)
	}

	row := exec.QueryRowContext(ctx, sql, tradeInterestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TFInterest exists")
	}

	return exists, nil
}
