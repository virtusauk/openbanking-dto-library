// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package ClientAppModels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ClientPayment is an object representing the database table.
type ClientPayment struct {
	ClientPaymentID                int         `boil:"client_payment_id" json:"client_payment_id" toml:"client_payment_id" yaml:"client_payment_id"`
	PaymentRefID                   string      `boil:"payment_ref_id" json:"payment_ref_id" toml:"payment_ref_id" yaml:"payment_ref_id"`
	PaymentSubmissionID            null.String `boil:"payment_submission_id" json:"payment_submission_id,omitempty" toml:"payment_submission_id" yaml:"payment_submission_id,omitempty"`
	ClientID                       string      `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	ReqAccept                      null.String `boil:"req_accept" json:"req_accept,omitempty" toml:"req_accept" yaml:"req_accept,omitempty"`
	ReqAuthorization               null.String `boil:"req_authorization" json:"req_authorization,omitempty" toml:"req_authorization" yaml:"req_authorization,omitempty"`
	ReqXFapiCustomerIPAddress      null.String `boil:"req_x_fapi_customer_ip_address" json:"req_x_fapi_customer_ip_address,omitempty" toml:"req_x_fapi_customer_ip_address" yaml:"req_x_fapi_customer_ip_address,omitempty"`
	ReqXFapiCustomerLastLoggedTime null.String `boil:"req_x_fapi_customer_last_logged_time" json:"req_x_fapi_customer_last_logged_time,omitempty" toml:"req_x_fapi_customer_last_logged_time" yaml:"req_x_fapi_customer_last_logged_time,omitempty"`
	ReqXFapiFinancialID            null.String `boil:"req_x_fapi_financial_id" json:"req_x_fapi_financial_id,omitempty" toml:"req_x_fapi_financial_id" yaml:"req_x_fapi_financial_id,omitempty"`
	ReqXFapiInteractionID          null.String `boil:"req_x_fapi_interaction_id" json:"req_x_fapi_interaction_id,omitempty" toml:"req_x_fapi_interaction_id" yaml:"req_x_fapi_interaction_id,omitempty"`
	ReqXIdempotencyKey             null.String `boil:"req_x_idempotency_key" json:"req_x_idempotency_key,omitempty" toml:"req_x_idempotency_key" yaml:"req_x_idempotency_key,omitempty"`
	ReqXJWSSignature               null.String `boil:"req_x_jws_signature" json:"req_x_jws_signature,omitempty" toml:"req_x_jws_signature" yaml:"req_x_jws_signature,omitempty"`
	HTTPStatus                     null.String `boil:"http_status" json:"http_status,omitempty" toml:"http_status" yaml:"http_status,omitempty"`
	ResponseStatus                 null.String `boil:"response_status" json:"response_status,omitempty" toml:"response_status" yaml:"response_status,omitempty"`
	ResContentType                 null.String `boil:"res_content_type" json:"res_content_type,omitempty" toml:"res_content_type" yaml:"res_content_type,omitempty"`
	ResXFapiInteractionID          null.String `boil:"res_x_fapi_interaction_id" json:"res_x_fapi_interaction_id,omitempty" toml:"res_x_fapi_interaction_id" yaml:"res_x_fapi_interaction_id,omitempty"`
	ResXJWSSignature               null.String `boil:"res_x_jws_signature" json:"res_x_jws_signature,omitempty" toml:"res_x_jws_signature" yaml:"res_x_jws_signature,omitempty"`

	R *clientPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientPaymentColumns = struct {
	ClientPaymentID                string
	PaymentRefID                   string
	PaymentSubmissionID            string
	ClientID                       string
	ReqAccept                      string
	ReqAuthorization               string
	ReqXFapiCustomerIPAddress      string
	ReqXFapiCustomerLastLoggedTime string
	ReqXFapiFinancialID            string
	ReqXFapiInteractionID          string
	ReqXIdempotencyKey             string
	ReqXJWSSignature               string
	HTTPStatus                     string
	ResponseStatus                 string
	ResContentType                 string
	ResXFapiInteractionID          string
	ResXJWSSignature               string
}{
	ClientPaymentID:                "client_payment_id",
	PaymentRefID:                   "payment_ref_id",
	PaymentSubmissionID:            "payment_submission_id",
	ClientID:                       "client_id",
	ReqAccept:                      "req_accept",
	ReqAuthorization:               "req_authorization",
	ReqXFapiCustomerIPAddress:      "req_x_fapi_customer_ip_address",
	ReqXFapiCustomerLastLoggedTime: "req_x_fapi_customer_last_logged_time",
	ReqXFapiFinancialID:            "req_x_fapi_financial_id",
	ReqXFapiInteractionID:          "req_x_fapi_interaction_id",
	ReqXIdempotencyKey:             "req_x_idempotency_key",
	ReqXJWSSignature:               "req_x_jws_signature",
	HTTPStatus:                     "http_status",
	ResponseStatus:                 "response_status",
	ResContentType:                 "res_content_type",
	ResXFapiInteractionID:          "res_x_fapi_interaction_id",
	ResXJWSSignature:               "res_x_jws_signature",
}

// Generated where

var ClientPaymentWhere = struct {
	ClientPaymentID                whereHelperint
	PaymentRefID                   whereHelperstring
	PaymentSubmissionID            whereHelpernull_String
	ClientID                       whereHelperstring
	ReqAccept                      whereHelpernull_String
	ReqAuthorization               whereHelpernull_String
	ReqXFapiCustomerIPAddress      whereHelpernull_String
	ReqXFapiCustomerLastLoggedTime whereHelpernull_String
	ReqXFapiFinancialID            whereHelpernull_String
	ReqXFapiInteractionID          whereHelpernull_String
	ReqXIdempotencyKey             whereHelpernull_String
	ReqXJWSSignature               whereHelpernull_String
	HTTPStatus                     whereHelpernull_String
	ResponseStatus                 whereHelpernull_String
	ResContentType                 whereHelpernull_String
	ResXFapiInteractionID          whereHelpernull_String
	ResXJWSSignature               whereHelpernull_String
}{
	ClientPaymentID:                whereHelperint{field: `client_payment_id`},
	PaymentRefID:                   whereHelperstring{field: `payment_ref_id`},
	PaymentSubmissionID:            whereHelpernull_String{field: `payment_submission_id`},
	ClientID:                       whereHelperstring{field: `client_id`},
	ReqAccept:                      whereHelpernull_String{field: `req_accept`},
	ReqAuthorization:               whereHelpernull_String{field: `req_authorization`},
	ReqXFapiCustomerIPAddress:      whereHelpernull_String{field: `req_x_fapi_customer_ip_address`},
	ReqXFapiCustomerLastLoggedTime: whereHelpernull_String{field: `req_x_fapi_customer_last_logged_time`},
	ReqXFapiFinancialID:            whereHelpernull_String{field: `req_x_fapi_financial_id`},
	ReqXFapiInteractionID:          whereHelpernull_String{field: `req_x_fapi_interaction_id`},
	ReqXIdempotencyKey:             whereHelpernull_String{field: `req_x_idempotency_key`},
	ReqXJWSSignature:               whereHelpernull_String{field: `req_x_jws_signature`},
	HTTPStatus:                     whereHelpernull_String{field: `http_status`},
	ResponseStatus:                 whereHelpernull_String{field: `response_status`},
	ResContentType:                 whereHelpernull_String{field: `res_content_type`},
	ResXFapiInteractionID:          whereHelpernull_String{field: `res_x_fapi_interaction_id`},
	ResXJWSSignature:               whereHelpernull_String{field: `res_x_jws_signature`},
}

// ClientPaymentRels is where relationship names are stored.
var ClientPaymentRels = struct {
}{}

// clientPaymentR is where relationships are stored.
type clientPaymentR struct {
}

// NewStruct creates a new relationship struct
func (*clientPaymentR) NewStruct() *clientPaymentR {
	return &clientPaymentR{}
}

// clientPaymentL is where Load methods for each relationship are stored.
type clientPaymentL struct{}

var (
	clientPaymentColumns               = []string{"client_payment_id", "payment_ref_id", "payment_submission_id", "client_id", "req_accept", "req_authorization", "req_x_fapi_customer_ip_address", "req_x_fapi_customer_last_logged_time", "req_x_fapi_financial_id", "req_x_fapi_interaction_id", "req_x_idempotency_key", "req_x_jws_signature", "http_status", "response_status", "res_content_type", "res_x_fapi_interaction_id", "res_x_jws_signature"}
	clientPaymentColumnsWithoutDefault = []string{"payment_ref_id", "payment_submission_id", "client_id", "req_accept", "req_authorization", "req_x_fapi_customer_ip_address", "req_x_fapi_customer_last_logged_time", "req_x_fapi_financial_id", "req_x_fapi_interaction_id", "req_x_idempotency_key", "req_x_jws_signature", "http_status", "response_status", "res_content_type", "res_x_fapi_interaction_id", "res_x_jws_signature"}
	clientPaymentColumnsWithDefault    = []string{"client_payment_id"}
	clientPaymentPrimaryKeyColumns     = []string{"client_payment_id"}
)

type (
	// ClientPaymentSlice is an alias for a slice of pointers to ClientPayment.
	// This should generally be used opposed to []ClientPayment.
	ClientPaymentSlice []*ClientPayment
	// ClientPaymentHook is the signature for custom ClientPayment hook methods
	ClientPaymentHook func(context.Context, boil.ContextExecutor, *ClientPayment) error

	clientPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientPaymentType                 = reflect.TypeOf(&ClientPayment{})
	clientPaymentMapping              = queries.MakeStructMapping(clientPaymentType)
	clientPaymentPrimaryKeyMapping, _ = queries.BindMapping(clientPaymentType, clientPaymentMapping, clientPaymentPrimaryKeyColumns)
	clientPaymentInsertCacheMut       sync.RWMutex
	clientPaymentInsertCache          = make(map[string]insertCache)
	clientPaymentUpdateCacheMut       sync.RWMutex
	clientPaymentUpdateCache          = make(map[string]updateCache)
	clientPaymentUpsertCacheMut       sync.RWMutex
	clientPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientPaymentBeforeInsertHooks []ClientPaymentHook
var clientPaymentBeforeUpdateHooks []ClientPaymentHook
var clientPaymentBeforeDeleteHooks []ClientPaymentHook
var clientPaymentBeforeUpsertHooks []ClientPaymentHook

var clientPaymentAfterInsertHooks []ClientPaymentHook
var clientPaymentAfterSelectHooks []ClientPaymentHook
var clientPaymentAfterUpdateHooks []ClientPaymentHook
var clientPaymentAfterDeleteHooks []ClientPaymentHook
var clientPaymentAfterUpsertHooks []ClientPaymentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientPayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientPayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientPayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientPayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientPayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientPayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientPayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientPayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientPayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientPaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientPaymentHook registers your hook function for all future operations.
func AddClientPaymentHook(hookPoint boil.HookPoint, clientPaymentHook ClientPaymentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clientPaymentBeforeInsertHooks = append(clientPaymentBeforeInsertHooks, clientPaymentHook)
	case boil.BeforeUpdateHook:
		clientPaymentBeforeUpdateHooks = append(clientPaymentBeforeUpdateHooks, clientPaymentHook)
	case boil.BeforeDeleteHook:
		clientPaymentBeforeDeleteHooks = append(clientPaymentBeforeDeleteHooks, clientPaymentHook)
	case boil.BeforeUpsertHook:
		clientPaymentBeforeUpsertHooks = append(clientPaymentBeforeUpsertHooks, clientPaymentHook)
	case boil.AfterInsertHook:
		clientPaymentAfterInsertHooks = append(clientPaymentAfterInsertHooks, clientPaymentHook)
	case boil.AfterSelectHook:
		clientPaymentAfterSelectHooks = append(clientPaymentAfterSelectHooks, clientPaymentHook)
	case boil.AfterUpdateHook:
		clientPaymentAfterUpdateHooks = append(clientPaymentAfterUpdateHooks, clientPaymentHook)
	case boil.AfterDeleteHook:
		clientPaymentAfterDeleteHooks = append(clientPaymentAfterDeleteHooks, clientPaymentHook)
	case boil.AfterUpsertHook:
		clientPaymentAfterUpsertHooks = append(clientPaymentAfterUpsertHooks, clientPaymentHook)
	}
}

// One returns a single clientPayment record from the query.
func (q clientPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientPayment, error) {
	o := &ClientPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ClientAppModels: failed to execute a one query for ClientPayment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientPayment records from the query.
func (q clientPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientPaymentSlice, error) {
	var o []*ClientPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "ClientAppModels: failed to assign all query results to ClientPayment slice")
	}

	if len(clientPaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientPayment records in the query.
func (q clientPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: failed to count ClientPayment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "ClientAppModels: failed to check if ClientPayment exists")
	}

	return count > 0, nil
}

// ClientPayments retrieves all the records using an executor.
func ClientPayments(mods ...qm.QueryMod) clientPaymentQuery {
	mods = append(mods, qm.From("`ClientPayment`"))
	return clientPaymentQuery{NewQuery(mods...)}
}

// FindClientPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientPayment(ctx context.Context, exec boil.ContextExecutor, clientPaymentID int, selectCols ...string) (*ClientPayment, error) {
	clientPaymentObj := &ClientPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ClientPayment` where `client_payment_id`=?", sel,
	)

	q := queries.Raw(query, clientPaymentID)

	err := q.Bind(ctx, exec, clientPaymentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "ClientAppModels: unable to select from ClientPayment")
	}

	return clientPaymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("ClientAppModels: no ClientPayment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientPaymentInsertCacheMut.RLock()
	cache, cached := clientPaymentInsertCache[key]
	clientPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientPaymentColumns,
			clientPaymentColumnsWithDefault,
			clientPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ClientPayment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ClientPayment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ClientPayment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clientPaymentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to insert into ClientPayment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ClientPaymentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clientPaymentMapping["ClientPaymentID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClientPaymentID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to populate default values for ClientPayment")
	}

CacheNoHooks:
	if !cached {
		clientPaymentInsertCacheMut.Lock()
		clientPaymentInsertCache[key] = cache
		clientPaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientPaymentUpdateCacheMut.RLock()
	cache, cached := clientPaymentUpdateCache[key]
	clientPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientPaymentColumns,
			clientPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("ClientAppModels: unable to update ClientPayment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ClientPayment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clientPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, append(wl, clientPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to update ClientPayment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: failed to get rows affected by update for ClientPayment")
	}

	if !cached {
		clientPaymentUpdateCacheMut.Lock()
		clientPaymentUpdateCache[key] = cache
		clientPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to update all for ClientPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to retrieve rows affected for ClientPayment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("ClientAppModels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ClientPayment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientPaymentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to update all in clientPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to retrieve rows affected all in update all clientPayment")
	}
	return rowsAff, nil
}

var mySQLClientPaymentUniqueColumns = []string{
	"client_payment_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClientPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("ClientAppModels: no ClientPayment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientPaymentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClientPaymentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientPaymentUpsertCacheMut.RLock()
	cache, cached := clientPaymentUpsertCache[key]
	clientPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clientPaymentColumns,
			clientPaymentColumnsWithDefault,
			clientPaymentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clientPaymentColumns,
			clientPaymentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("ClientAppModels: unable to upsert ClientPayment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "ClientPayment", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ClientPayment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to upsert for ClientPayment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ClientPaymentID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clientPaymentMapping["client_payment_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clientPaymentType, clientPaymentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to retrieve unique values for ClientPayment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to populate default values for ClientPayment")
	}

CacheNoHooks:
	if !cached {
		clientPaymentUpsertCacheMut.Lock()
		clientPaymentUpsertCache[key] = cache
		clientPaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClientPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("ClientAppModels: no ClientPayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientPaymentPrimaryKeyMapping)
	sql := "DELETE FROM `ClientPayment` WHERE `client_payment_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to delete from ClientPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: failed to get rows affected by delete for ClientPayment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("ClientAppModels: no clientPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to delete all from ClientPayment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: failed to get rows affected by deleteall for ClientPayment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("ClientAppModels: no ClientPayment slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(clientPaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ClientPayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientPaymentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: unable to delete all from clientPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "ClientAppModels: failed to get rows affected by deleteall for ClientPayment")
	}

	if len(clientPaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientPayment(ctx, exec, o.ClientPaymentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ClientPayment`.* FROM `ClientPayment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "ClientAppModels: unable to reload all in ClientPaymentSlice")
	}

	*o = slice

	return nil
}

// ClientPaymentExists checks if the ClientPayment row exists.
func ClientPaymentExists(ctx context.Context, exec boil.ContextExecutor, clientPaymentID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ClientPayment` where `client_payment_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, clientPaymentID)
	}

	row := exec.QueryRowContext(ctx, sql, clientPaymentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "ClientAppModels: unable to check if ClientPayment exists")
	}

	return exists, nil
}
